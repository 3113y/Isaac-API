{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Home \u2693\ufe0e Lua API Documentation for The Binding of Isaac - Afterbirth+ \u2693\ufe0e This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2 THIS PROJECT IS STILL IN EARLY DEVELOPEMENT! If you want to have a specific part of the Documentation explained, consider messaging me. Discord : Wofsauge#6503 Reddit : /u/Wofsauge","title":"EntityPlayer"},{"location":"#home","text":"","title":"Home"},{"location":"#lua-api-documentation-for-the-binding-of-isaac-afterbirth","text":"This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2","title":"Lua API Documentation for The Binding of Isaac - Afterbirth+"},{"location":"BindingofIsaac-Afterbirth%2BLuaReference_GuideDocumentation/","text":"Class \"BindingofIsaac-Afterbirth+LuaReference/GuideDocumentation\" \u2693\ufe0e","title":"Binding of Isaac - Afterbirth+ Lua Reference/Guide Documentation"},{"location":"BindingofIsaac-Afterbirth%2BLuaReference_GuideDocumentation/#class-bindingofisaac-afterbirthluareferenceguidedocumentation","text":"","title":"Class \"BindingofIsaac-Afterbirth+LuaReference/GuideDocumentation\""},{"location":"Color/","text":"Class \"Color\" \u2693\ufe0e void Color (float R, float G, float B, float A, integer RO, integer GO, integer BO ) \u2693\ufe0e Constructor for the \"Color\" class. Notes: You need to use the KColor() constructor when using the Font class. Colors are made of three separate components, tint, colorize and offset. Tint acts like a color multiplicator. Offset is a color which is added after the tint is applied. Colorize is complicated. See the SetColorize() function for a detailed description. R, G, B and A accept numbers between 0 and 1. RO, GO and BO accept numbers between -255 and 255. Color __mul (Color right) \u2693\ufe0e Multiplication of two colors. static Color Lerp (Color m1, Color m2, float t ) \u2693\ufe0e Linear Interpolation between two colors. t is the \"progress\" of the interpolation. Setting t = 0.5 means that the color in the middle of m1 and m2 will be returned. void Reset () \u2693\ufe0e void SetColorize (float Red, float Green, float Blue, float Amount ) \u2693\ufe0e The colorize function can be used to change the color of sprites. Its the best for that purpose, since it doesnt affect existing coloranimations like the flashing of creep. The values can be between 0 and 1 for normal coloration. if you use higher numbers the color gets more vibrant. Notes The alpha component determines how much colorization must be applied. The function takes the original color, converts it to grayscale, multiplies it by the RGB components and then blends it back with the original color. The alpha value determines the blending factor. Colorization is applied after the tint and before the offset function. Example Code will turn the sprite into grayscale. SetColorize(1, 0, 0, 1) will turn it red but not as a red tint but as shades of red. SetColorize(1, 1, 1, 2) will invert the sprite without touching its luminosity. This code changes the color of red Creep to be purple Test:AddCallback(ModCallbacks.MC_POST_EFFECT_INIT, function(_, self) if self.Variant == EffectVariant.CREEP_RED then local color = Color(1, 1, 1, 1, 0, 0, 0) color:SetColorize(4, 0, 4, 1) self:GetSprite().Color = color end end) SetColorize(1, 1, 1, 1) void SetOffset (float RedOffset, float GreenOffset, float BlueOffset ) \u2693\ufe0e Offset is a color that gets added to the sprite after the Tint was applied. void SetTint (float RedTint, float GreenTint, float BlueTint, float AlphaTint ) \u2693\ufe0e Tint acts like a color multiplicator. float A \u2693\ufe0e float B \u2693\ufe0e float BO \u2693\ufe0e float G \u2693\ufe0e float GO \u2693\ufe0e float R \u2693\ufe0e float RO \u2693\ufe0e","title":"Color"},{"location":"Color/#class-color","text":"","title":"Class \"Color\""},{"location":"Color/#void-color-float-r-float-g-float-b-float-a-integer-ro-integer-go-integer-bo","text":"Constructor for the \"Color\" class. Notes: You need to use the KColor() constructor when using the Font class. Colors are made of three separate components, tint, colorize and offset. Tint acts like a color multiplicator. Offset is a color which is added after the tint is applied. Colorize is complicated. See the SetColorize() function for a detailed description. R, G, B and A accept numbers between 0 and 1. RO, GO and BO accept numbers between -255 and 255.","title":"void Color (float R, float G, float B, float A, integer RO, integer GO, integer BO )"},{"location":"Color/#color-__mul-color-right","text":"Multiplication of two colors.","title":"Color __mul (Color right)"},{"location":"Color/#static-color-lerp-color-m1-color-m2-float-t","text":"Linear Interpolation between two colors. t is the \"progress\" of the interpolation. Setting t = 0.5 means that the color in the middle of m1 and m2 will be returned.","title":"static Color Lerp (Color m1, Color m2, float t )"},{"location":"Color/#void-reset","text":"","title":"void Reset ()"},{"location":"Color/#void-setcolorize-float-red-float-green-float-blue-float-amount","text":"The colorize function can be used to change the color of sprites. Its the best for that purpose, since it doesnt affect existing coloranimations like the flashing of creep. The values can be between 0 and 1 for normal coloration. if you use higher numbers the color gets more vibrant.","title":"void SetColorize (float Red, float Green, float Blue, float Amount )"},{"location":"Color/#void-setoffset-float-redoffset-float-greenoffset-float-blueoffset","text":"Offset is a color that gets added to the sprite after the Tint was applied.","title":"void SetOffset (float RedOffset, float GreenOffset, float BlueOffset )"},{"location":"Color/#void-settint-float-redtint-float-greentint-float-bluetint-float-alphatint","text":"Tint acts like a color multiplicator.","title":"void SetTint (float RedTint, float GreenTint, float BlueTint, float AlphaTint )"},{"location":"Color/#float-a","text":"","title":"float A"},{"location":"Color/#float-b","text":"","title":"float B"},{"location":"Color/#float-bo","text":"","title":"float BO"},{"location":"Color/#float-g","text":"","title":"float G"},{"location":"Color/#float-go","text":"","title":"float GO"},{"location":"Color/#float-r","text":"","title":"float R"},{"location":"Color/#float-ro","text":"","title":"float RO"},{"location":"CppContainer/","text":"Class \"CppContainer\" \u2693\ufe0e","title":"CppContainer"},{"location":"CppContainer/#class-cppcontainer","text":"","title":"Class \"CppContainer\""},{"location":"CppContainer_ArrayProxy/","text":"Class \"CppContainer::ArrayProxy\" \u2693\ufe0e Vector Get (integer Idx) \u2693\ufe0e class RoomList Size \u2693\ufe0e","title":"CppContainer::ArrayProxy"},{"location":"CppContainer_ArrayProxy/#class-cppcontainerarrayproxy","text":"","title":"Class \"CppContainer::ArrayProxy\""},{"location":"CppContainer_ArrayProxy/#vector-get-integer-idx","text":"","title":"Vector Get (integer Idx)"},{"location":"CppContainer_ArrayProxy/#class-roomlist-size","text":"","title":"class RoomList Size"},{"location":"CppContainer_ArrayProxy_RoomList/","text":"Class \"CppContainer::ArrayProxy::RoomList\" \u2693\ufe0e Vector Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::ArrayProxy::RoomList"},{"location":"CppContainer_ArrayProxy_RoomList/#class-cppcontainerarrayproxyroomlist","text":"","title":"Class \"CppContainer::ArrayProxy::RoomList\""},{"location":"CppContainer_ArrayProxy_RoomList/#vector-get-integer-idx","text":"","title":"Vector Get (integer Idx)"},{"location":"CppContainer_ArrayProxy_RoomList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_EntityList/","text":"Class \"CppContainer::EntityList\" \u2693\ufe0e integer __len () \u2693\ufe0e Entity Get (integer idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::EntityList"},{"location":"CppContainer_EntityList/#class-cppcontainerentitylist","text":"","title":"Class \"CppContainer::EntityList\""},{"location":"CppContainer_EntityList/#integer-__len","text":"","title":"integer __len ()"},{"location":"CppContainer_EntityList/#entity-get-integer-idx","text":"","title":"Entity Get (integer idx)"},{"location":"CppContainer_EntityList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector/","text":"Class \"CppContainer::Vector\" \u2693\ufe0e","title":"CppContainer::Vector"},{"location":"CppContainer_Vector/#class-cppcontainervector","text":"","title":"Class \"CppContainer::Vector\""},{"location":"CppContainer_Vector_CardConfigList/","text":"Class \"CppContainer::Vector::CardConfigList\" \u2693\ufe0e Card Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::CardConfigList"},{"location":"CppContainer_Vector_CardConfigList/#class-cppcontainervectorcardconfiglist","text":"","title":"Class \"CppContainer::Vector::CardConfigList\""},{"location":"CppContainer_Vector_CardConfigList/#card-get-integer-idx","text":"","title":"Card Get (integer Idx)"},{"location":"CppContainer_Vector_CardConfigList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector_CostumeConfigList/","text":"Class \"CppContainer::Vector::CostumeConfigList\" \u2693\ufe0e Costume Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::CostumeConfigList"},{"location":"CppContainer_Vector_CostumeConfigList/#class-cppcontainervectorcostumeconfiglist","text":"","title":"Class \"CppContainer::Vector::CostumeConfigList\""},{"location":"CppContainer_Vector_CostumeConfigList/#costume-get-integer-idx","text":"","title":"Costume Get (integer Idx)"},{"location":"CppContainer_Vector_CostumeConfigList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector_EffectList/","text":"Class \"CppContainer::Vector::EffectList\" \u2693\ufe0e TemporaryEffect Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::EffectList"},{"location":"CppContainer_Vector_EffectList/#class-cppcontainervectoreffectlist","text":"","title":"Class \"CppContainer::Vector::EffectList\""},{"location":"CppContainer_Vector_EffectList/#temporaryeffect-get-integer-idx","text":"","title":"TemporaryEffect Get (integer Idx)"},{"location":"CppContainer_Vector_EffectList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector_ItemConfigList/","text":"Class \"CppContainer::Vector::ItemConfigList\" \u2693\ufe0e Item Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::ItemConfigList"},{"location":"CppContainer_Vector_ItemConfigList/#class-cppcontainervectoritemconfiglist","text":"","title":"Class \"CppContainer::Vector::ItemConfigList\""},{"location":"CppContainer_Vector_ItemConfigList/#item-get-integer-idx","text":"","title":"Item Get (integer Idx)"},{"location":"CppContainer_Vector_ItemConfigList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector_PillConfigList/","text":"Class \"CppContainer::Vector::PillConfigList\" \u2693\ufe0e PillEffect Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::PillConfigList"},{"location":"CppContainer_Vector_PillConfigList/#class-cppcontainervectorpillconfiglist","text":"","title":"Class \"CppContainer::Vector::PillConfigList\""},{"location":"CppContainer_Vector_PillConfigList/#pilleffect-get-integer-idx","text":"","title":"PillEffect Get (integer Idx)"},{"location":"CppContainer_Vector_PillConfigList/#const-integer-size","text":"","title":"const integer Size"},{"location":"CppContainer_Vector_VectorList/","text":"Class \"CppContainer::Vector::VectorList\" \u2693\ufe0e Vector Get (integer Idx) \u2693\ufe0e const integer Size \u2693\ufe0e","title":"CppContainer::Vector::VectorList"},{"location":"CppContainer_Vector_VectorList/#class-cppcontainervectorvectorlist","text":"","title":"Class \"CppContainer::Vector::VectorList\""},{"location":"CppContainer_Vector_VectorList/#vector-get-integer-idx","text":"","title":"Vector Get (integer Idx)"},{"location":"CppContainer_Vector_VectorList/#const-integer-size","text":"","title":"const integer Size"},{"location":"DebugConsole/","text":"Class \"DebugConsole\" \u2693\ufe0e","title":"Debug Console"},{"location":"DebugConsole/#class-debugconsole","text":"","title":"Class \"DebugConsole\""},{"location":"Entity/","text":"Class \"Entity\" \u2693\ufe0e void AddBurn (EntityRef Source, integer Duration, float Damage ) \u2693\ufe0e Adds a burn-effect to an enemy. Duration is in Number of Frames. Damage is the Damage taken per frame. Example Code This code damages every entity in the room for 1 second with the damagesource set to the player. The total damage dealt is 30. local player =Isaac.GetPlayer(0) for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddBurn(player,30,1) end void AddCharmed (integer Duration) \u2693\ufe0e Adds a charmed-effect to an enemy. Duration is in Number of Frames. Charmed enemies are friendly towards isaac and attack other enemies. makes the effect permanent and the enemy will follow you even to different rooms. Example Code This code charms every entity in the room for 1 second. for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddCharmed(30) end AddCharmed(-1) void AddConfusion (EntityRef Source, integer Duration, boolean IgnoreBosses ) \u2693\ufe0e Adds a confusion effect to an entity. Example Code This code confuses every entity in the room for 1 second while ignoring bosses. local player =Isaac.GetPlayer(0) for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddConfusion(player,30,true) end void AddEntityFlags (integer Flags) \u2693\ufe0e Add EntityFlags to the entity. Flags are used to add specific effects like poisoning or freeze. You can add multiple flags at the same time by bitwise-concatenating them. Example Code This code adds slowing and confusion to the enetity. local player =Isaac.GetPlayer(0) for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddEntityFlags(EntityFlag.FLAG_SLOW | EntityFlag.FLAG_CONFUSION) end void AddFear (EntityRef Source, integer Duration ) \u2693\ufe0e Adds a fear-effect to an entity. Example Code Examplecode: This code frightens every entity in the room for 1 second. local player =Isaac.GetPlayer(0) for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddFear(player, 30) end void AddFreeze (EntityRef Source, integer Duration ) \u2693\ufe0e Freezes an entity, making it unable to move and attack. Example Code Examplecode: This code freezes every entity in the room for half a second. local player =Isaac.GetPlayer(0) for i, entity in ipairs(Isaac.GetRoomEntities()) do entity:AddFreeze(player, 30) end void AddHealth (float HitPoints) \u2693\ufe0e Heals an entity. void AddMidasFreeze (EntityRef Source, integer Duration ) \u2693\ufe0e Turns the entity into a gold statue (can't move, can't attack, drops coins when killed) void AddPoison (EntityRef Source, integer Duration, float Damage ) \u2693\ufe0e Adds a poison effect to the entity. void AddShrink (EntityRef Source, integer Duration ) \u2693\ufe0e Adds a shrink effect to the entity. void AddSlowing (EntityRef Source, integer Duration, float SlowValue, Color SlowColor ) \u2693\ufe0e Makes the friction higher. void AddVelocity (Vector Velocity) \u2693\ufe0e Adds velocity to the entity. This can be used to move him in a certain direktion (for example as a result of collision) void BloodExplode () \u2693\ufe0e Explodes with gibs and blood. boolean CanShutDoors () \u2693\ufe0e enemies keep the doors shut. void ClearEntityFlags (integer Flags) \u2693\ufe0e Removes all EntityFlags from the entity. boolean CollidesWithGrid () \u2693\ufe0e Returns true, if the entity is able to collide with the grid. void Die () \u2693\ufe0e Kills the entity and trigger its death animation. boolean Exists () \u2693\ufe0e Returns true, if this entity still exists. BossId GetBossID () \u2693\ufe0e If the entity is a boss, it returns its specific boss id. If it isnt a boss it will return 0. const Color GetColor () \u2693\ufe0e Returns the Color object assosiated to this entity. table GetData () \u2693\ufe0e Returns a table that contains all data assosiated with the entity. This can be used to add custom data as well. Notes Data associated with an entity does only persists in between rooms, when the entity is a player, familiar or the entity has the \"EntityFlag.FLAG_PERSISTENT\" Flag active. Data does not persists in between exiting the game to a menu, or when restarting/finishing a run. Example Code This code adds custom data to an entity or prints it in the console if it exists. if type(entity:GetData()[\"MyValue\"]) == type(nil) then -- checks, if the Data does exist already entity:GetData()[\"MyValue\"] = \"Cool\" -- assign a value to the data else print(entity:GetData()[\"MyValue\"]) -- this will print \"Cool\" in the console end RNG GetDropRNG () \u2693\ufe0e Returns the assigned RNG object for the entity. This RNG is used to determine the items that are dropped on the entities death. integer GetEntityFlags () \u2693\ufe0e Get the EntityFlags of the entity. This will be a number which acts like a bitmask. Example Code This code prints something in the console, if the entity has a specific EntityFlag. if entity:GetEntityFlags() & EntityFlag.FLAG_CONFUSION == EntityFlag.FLAG_CONFUSION then print(\"This entity is confused!\") end Entity GetLastChild () \u2693\ufe0e Returns the last entity spawned by this entity. Entity GetLastParent () \u2693\ufe0e Returns the last parent of this entity. Sprite GetSprite () \u2693\ufe0e Return the sprite object of the entity. boolean HasCommonParentWithEntity (Entity Other) \u2693\ufe0e boolean HasEntityFlags (integer Flags) \u2693\ufe0e Returns true, if the entity has all named EntityFlags set. Example Code This code prints something in the console, if the entity has a specific EntityFlag. if entity:HasEntityFlags(EntityFlag.FLAG_CONFUSION) then print(\"This entity is confused!\") end boolean HasFullHealth () \u2693\ufe0e boolean HasMortalDamage () \u2693\ufe0e Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. HasMortalDamage() returns true if the buffered damage is enough to kill the entity. HasMortalDamage() will be updated additionally after TakeDamage() is called. boolean IsActiveEnemy (boolean includeDead) \u2693\ufe0e return true for non background NPCs (ex: every enemy except fire and shopkeepers) boolean IsBoss () \u2693\ufe0e bosses display health bar boolean IsDead () \u2693\ufe0e boolean IsEnemy () \u2693\ufe0e return true for NPCs that are not controlled by the player boolean IsFlying () \u2693\ufe0e boolean IsFrame (integer Frame, integer Offset ) \u2693\ufe0e true every X frames boolean IsInvincible () \u2693\ufe0e boolean IsVisible () \u2693\ufe0e boolean IsVulnerableEnemy () \u2693\ufe0e return true for enemies that can be damaged void Kill () \u2693\ufe0e Kills the entity and makes a blood splat or gibs. void MultiplyFriction (float Value) \u2693\ufe0e void PostRender () \u2693\ufe0e void Remove () \u2693\ufe0e Remove the entity from the game instantly, without doing any additional effects/animations. void RemoveStatusEffects () \u2693\ufe0e Removes all Status Effects from the entity. void Render (Vector Offset) \u2693\ufe0e Render the current sprite of the Entity at the current entity position + offset. boolean RenderShadowLayer (Vector Offset) \u2693\ufe0e Render the shadow / shadow layer again. void SetColor (Color Color, integer Duration, integer Priority, boolean Fadeout, boolean Share ) \u2693\ufe0e Set the colormask for the entity. This can be used to tint the sprites in different colors. Example Code This code changes the color of the sprite to a fully white sprite for 15 frames. entity:SetColor(Color(1,1,1,1,255,255,255),15,1,false,false) void SetSize (float Size, Vector SizeMulti, integer NumGridCollisionPoints ) \u2693\ufe0e Set the size ofthe entity. void SetSpriteFrame (string AnimationName, integer FrameNum ) \u2693\ufe0e void SetSpriteOverlayFrame (string AnimationName, integer FrameNum ) \u2693\ufe0e boolean TakeDamage (float Damage, integer Flags, EntityRef Source, integer DamageCountdown ) \u2693\ufe0e Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. Therefore, TakeDamage() will not decremented the entities HP immediately upon calling the function. Rather, it is only updated on the frame afterwards. EntityBomb ToBomb () \u2693\ufe0e EntityEffect ToEffect () \u2693\ufe0e EntityFamiliar ToFamiliar () \u2693\ufe0e EntityKnife ToKnife () \u2693\ufe0e EntityLaser ToLaser () \u2693\ufe0e EntityNPC ToNPC () \u2693\ufe0e EntityPickup ToPickup () \u2693\ufe0e EntityPlayer ToPlayer () \u2693\ufe0e EntityProjectile ToProjectile () \u2693\ufe0e EntityTear ToTear () \u2693\ufe0e void Update () \u2693\ufe0e Entity Child \u2693\ufe0e float CollisionDamage \u2693\ufe0e float DepthOffset \u2693\ufe0e Get/Set the depth-offset of the entity. This value is added to the Y Position of the entity, which is then used to determine the rendering order of each entity. Default value is 0 for all entities. Example Code This code explains how this variable works. entity1.Position.Y -- => 50 entity2.Position.Y -- => 45 -- Entity1 is rendered in front of Entity2 entity1.DepthOffset = -10 -- new Entity1 renderYPosition => 40 -- Entity2 is rendered in front of Entity1 const integer DropSeed \u2693\ufe0e Get/set the Seed of the Drop RNG. EntityCollisionClass EntityCollisionClass \u2693\ufe0e boolean FlipX \u2693\ufe0e const integer FrameCount \u2693\ufe0e float Friction \u2693\ufe0e loaded from entity config GridCollisionClass GridCollisionClass \u2693\ufe0e float HitPoints \u2693\ufe0e Notes The HitPoints value is not decremented immediately upon taking damage like you would expect. Rather, it is only updated on the frame after the entity takes damage. const integer Index \u2693\ufe0e const integer InitSeed \u2693\ufe0e float Mass \u2693\ufe0e float MaxHitPoints \u2693\ufe0e Entity Parent \u2693\ufe0e Vector Position \u2693\ufe0e const Vector PositionOffset \u2693\ufe0e integer RenderZOffset \u2693\ufe0e Bugs This variable doesnt seem to do anything useful. Use DepthOffset instead. Vector SizeMulti \u2693\ufe0e Entity SpawnerEntity \u2693\ufe0e EntityType SpawnerType \u2693\ufe0e integer SpawnerVariant \u2693\ufe0e const integer SpawnGridIndex \u2693\ufe0e const Color SplatColor \u2693\ufe0e const Vector SpriteOffset \u2693\ufe0e float SpriteRotation \u2693\ufe0e const Vector SpriteScale \u2693\ufe0e integer SubType \u2693\ufe0e Entity Target \u2693\ufe0e const Vector TargetPosition \u2693\ufe0e const EntityType Type \u2693\ufe0e integer Variant \u2693\ufe0e Vector Velocity \u2693\ufe0e boolean Visible \u2693\ufe0e float Size \u2693\ufe0e Returns the size of the hitbox on an entity.","title":"Entity"},{"location":"Entity/#class-entity","text":"","title":"Class \"Entity\""},{"location":"Entity/#void-addburn-entityref-source-integer-duration-float-damage","text":"Adds a burn-effect to an enemy. Duration is in Number of Frames. Damage is the Damage taken per frame.","title":"void AddBurn (EntityRef Source, integer Duration, float Damage )"},{"location":"Entity/#void-addcharmed-integer-duration","text":"Adds a charmed-effect to an enemy. Duration is in Number of Frames. Charmed enemies are friendly towards isaac and attack other enemies. makes the effect permanent and the enemy will follow you even to different rooms.","title":"void AddCharmed (integer Duration)"},{"location":"Entity/#void-addconfusion-entityref-source-integer-duration-boolean-ignorebosses","text":"Adds a confusion effect to an entity.","title":"void AddConfusion (EntityRef Source, integer Duration, boolean IgnoreBosses )"},{"location":"Entity/#void-addentityflags-integer-flags","text":"Add EntityFlags to the entity. Flags are used to add specific effects like poisoning or freeze. You can add multiple flags at the same time by bitwise-concatenating them.","title":"void AddEntityFlags (integer Flags)"},{"location":"Entity/#void-addfear-entityref-source-integer-duration","text":"Adds a fear-effect to an entity.","title":"void AddFear (EntityRef Source, integer Duration )"},{"location":"Entity/#void-addfreeze-entityref-source-integer-duration","text":"Freezes an entity, making it unable to move and attack.","title":"void AddFreeze (EntityRef Source, integer Duration )"},{"location":"Entity/#void-addhealth-float-hitpoints","text":"Heals an entity.","title":"void AddHealth (float HitPoints)"},{"location":"Entity/#void-addmidasfreeze-entityref-source-integer-duration","text":"Turns the entity into a gold statue (can't move, can't attack, drops coins when killed)","title":"void AddMidasFreeze (EntityRef Source, integer Duration )"},{"location":"Entity/#void-addpoison-entityref-source-integer-duration-float-damage","text":"Adds a poison effect to the entity.","title":"void AddPoison (EntityRef Source, integer Duration, float Damage )"},{"location":"Entity/#void-addshrink-entityref-source-integer-duration","text":"Adds a shrink effect to the entity.","title":"void AddShrink (EntityRef Source, integer Duration )"},{"location":"Entity/#void-addslowing-entityref-source-integer-duration-float-slowvalue-color-slowcolor","text":"Makes the friction higher.","title":"void AddSlowing (EntityRef Source, integer Duration, float SlowValue, Color SlowColor )"},{"location":"Entity/#void-addvelocity-vector-velocity","text":"Adds velocity to the entity. This can be used to move him in a certain direktion (for example as a result of collision)","title":"void AddVelocity (Vector Velocity)"},{"location":"Entity/#void-bloodexplode","text":"Explodes with gibs and blood.","title":"void BloodExplode ()"},{"location":"Entity/#boolean-canshutdoors","text":"enemies keep the doors shut.","title":"boolean CanShutDoors ()"},{"location":"Entity/#void-clearentityflags-integer-flags","text":"Removes all EntityFlags from the entity.","title":"void ClearEntityFlags (integer Flags)"},{"location":"Entity/#boolean-collideswithgrid","text":"Returns true, if the entity is able to collide with the grid.","title":"boolean CollidesWithGrid ()"},{"location":"Entity/#void-die","text":"Kills the entity and trigger its death animation.","title":"void Die ()"},{"location":"Entity/#boolean-exists","text":"Returns true, if this entity still exists.","title":"boolean Exists ()"},{"location":"Entity/#bossid-getbossid","text":"If the entity is a boss, it returns its specific boss id. If it isnt a boss it will return 0.","title":"BossId GetBossID ()"},{"location":"Entity/#const-color-getcolor","text":"Returns the Color object assosiated to this entity.","title":"const Color GetColor ()"},{"location":"Entity/#table-getdata","text":"Returns a table that contains all data assosiated with the entity. This can be used to add custom data as well.","title":"table GetData ()"},{"location":"Entity/#rng-getdroprng","text":"Returns the assigned RNG object for the entity. This RNG is used to determine the items that are dropped on the entities death.","title":"RNG GetDropRNG ()"},{"location":"Entity/#integer-getentityflags","text":"Get the EntityFlags of the entity. This will be a number which acts like a bitmask.","title":"integer GetEntityFlags ()"},{"location":"Entity/#entity-getlastchild","text":"Returns the last entity spawned by this entity.","title":"Entity GetLastChild ()"},{"location":"Entity/#entity-getlastparent","text":"Returns the last parent of this entity.","title":"Entity GetLastParent ()"},{"location":"Entity/#sprite-getsprite","text":"Return the sprite object of the entity.","title":"Sprite GetSprite ()"},{"location":"Entity/#boolean-hascommonparentwithentity-entity-other","text":"","title":"boolean HasCommonParentWithEntity (Entity Other)"},{"location":"Entity/#boolean-hasentityflags-integer-flags","text":"Returns true, if the entity has all named EntityFlags set.","title":"boolean HasEntityFlags (integer Flags)"},{"location":"Entity/#boolean-hasfullhealth","text":"","title":"boolean HasFullHealth ()"},{"location":"Entity/#boolean-hasmortaldamage","text":"","title":"boolean HasMortalDamage ()"},{"location":"Entity/#boolean-isactiveenemy-boolean-includedead","text":"return true for non background NPCs (ex: every enemy except fire and shopkeepers)","title":"boolean IsActiveEnemy (boolean includeDead)"},{"location":"Entity/#boolean-isboss","text":"bosses display health bar","title":"boolean IsBoss ()"},{"location":"Entity/#boolean-isdead","text":"","title":"boolean IsDead ()"},{"location":"Entity/#boolean-isenemy","text":"return true for NPCs that are not controlled by the player","title":"boolean IsEnemy ()"},{"location":"Entity/#boolean-isflying","text":"","title":"boolean IsFlying ()"},{"location":"Entity/#boolean-isframe-integer-frame-integer-offset","text":"true every X frames","title":"boolean IsFrame (integer Frame, integer Offset )"},{"location":"Entity/#boolean-isinvincible","text":"","title":"boolean IsInvincible ()"},{"location":"Entity/#boolean-isvisible","text":"","title":"boolean IsVisible ()"},{"location":"Entity/#boolean-isvulnerableenemy","text":"return true for enemies that can be damaged","title":"boolean IsVulnerableEnemy ()"},{"location":"Entity/#void-kill","text":"Kills the entity and makes a blood splat or gibs.","title":"void Kill ()"},{"location":"Entity/#void-multiplyfriction-float-value","text":"","title":"void MultiplyFriction (float Value)"},{"location":"Entity/#void-postrender","text":"","title":"void PostRender ()"},{"location":"Entity/#void-remove","text":"Remove the entity from the game instantly, without doing any additional effects/animations.","title":"void Remove ()"},{"location":"Entity/#void-removestatuseffects","text":"Removes all Status Effects from the entity.","title":"void RemoveStatusEffects ()"},{"location":"Entity/#void-render-vector-offset","text":"Render the current sprite of the Entity at the current entity position + offset.","title":"void Render (Vector Offset)"},{"location":"Entity/#boolean-rendershadowlayer-vector-offset","text":"Render the shadow / shadow layer again.","title":"boolean RenderShadowLayer (Vector Offset)"},{"location":"Entity/#void-setcolor-color-color-integer-duration-integer-priority-boolean-fadeout-boolean-share","text":"Set the colormask for the entity. This can be used to tint the sprites in different colors.","title":"void SetColor (Color Color, integer Duration, integer Priority, boolean Fadeout, boolean Share )"},{"location":"Entity/#void-setsize-float-size-vector-sizemulti-integer-numgridcollisionpoints","text":"Set the size ofthe entity.","title":"void SetSize (float Size, Vector SizeMulti, integer NumGridCollisionPoints )"},{"location":"Entity/#void-setspriteframe-string-animationname-integer-framenum","text":"","title":"void SetSpriteFrame (string AnimationName, integer FrameNum )"},{"location":"Entity/#void-setspriteoverlayframe-string-animationname-integer-framenum","text":"","title":"void SetSpriteOverlayFrame (string AnimationName, integer FrameNum )"},{"location":"Entity/#boolean-takedamage-float-damage-integer-flags-entityref-source-integer-damagecountdown","text":"","title":"boolean TakeDamage (float Damage, integer Flags, EntityRef Source, integer DamageCountdown )"},{"location":"Entity/#entitybomb-tobomb","text":"","title":"EntityBomb ToBomb ()"},{"location":"Entity/#entityeffect-toeffect","text":"","title":"EntityEffect ToEffect ()"},{"location":"Entity/#entityfamiliar-tofamiliar","text":"","title":"EntityFamiliar ToFamiliar ()"},{"location":"Entity/#entityknife-toknife","text":"","title":"EntityKnife ToKnife ()"},{"location":"Entity/#entitylaser-tolaser","text":"","title":"EntityLaser ToLaser ()"},{"location":"Entity/#entitynpc-tonpc","text":"","title":"EntityNPC ToNPC ()"},{"location":"Entity/#entitypickup-topickup","text":"","title":"EntityPickup ToPickup ()"},{"location":"Entity/#entityplayer-toplayer","text":"","title":"EntityPlayer ToPlayer ()"},{"location":"Entity/#entityprojectile-toprojectile","text":"","title":"EntityProjectile ToProjectile ()"},{"location":"Entity/#entitytear-totear","text":"","title":"EntityTear ToTear ()"},{"location":"Entity/#void-update","text":"","title":"void Update ()"},{"location":"Entity/#entity-child","text":"","title":"Entity Child"},{"location":"Entity/#float-collisiondamage","text":"","title":"float CollisionDamage"},{"location":"Entity/#float-depthoffset","text":"Get/Set the depth-offset of the entity. This value is added to the Y Position of the entity, which is then used to determine the rendering order of each entity. Default value is 0 for all entities.","title":"float DepthOffset"},{"location":"Entity/#const-integer-dropseed","text":"Get/set the Seed of the Drop RNG.","title":"const integer DropSeed"},{"location":"Entity/#entitycollisionclass-entitycollisionclass","text":"","title":"EntityCollisionClass EntityCollisionClass"},{"location":"Entity/#boolean-flipx","text":"","title":"boolean FlipX"},{"location":"Entity/#const-integer-framecount","text":"","title":"const integer FrameCount"},{"location":"Entity/#float-friction","text":"loaded from entity config","title":"float Friction"},{"location":"Entity/#gridcollisionclass-gridcollisionclass","text":"","title":"GridCollisionClass GridCollisionClass"},{"location":"Entity/#float-hitpoints","text":"","title":"float HitPoints"},{"location":"Entity/#const-integer-index","text":"","title":"const integer Index"},{"location":"Entity/#const-integer-initseed","text":"","title":"const integer InitSeed"},{"location":"Entity/#float-mass","text":"","title":"float Mass"},{"location":"Entity/#float-maxhitpoints","text":"","title":"float MaxHitPoints"},{"location":"Entity/#entity-parent","text":"","title":"Entity Parent"},{"location":"Entity/#vector-position","text":"","title":"Vector Position"},{"location":"Entity/#const-vector-positionoffset","text":"","title":"const Vector PositionOffset"},{"location":"Entity/#integer-renderzoffset","text":"","title":"integer RenderZOffset"},{"location":"Entity/#vector-sizemulti","text":"","title":"Vector SizeMulti"},{"location":"Entity/#entity-spawnerentity","text":"","title":"Entity SpawnerEntity"},{"location":"Entity/#entitytype-spawnertype","text":"","title":"EntityType SpawnerType"},{"location":"Entity/#integer-spawnervariant","text":"","title":"integer SpawnerVariant"},{"location":"Entity/#const-integer-spawngridindex","text":"","title":"const integer SpawnGridIndex"},{"location":"Entity/#const-color-splatcolor","text":"","title":"const Color SplatColor"},{"location":"Entity/#const-vector-spriteoffset","text":"","title":"const Vector SpriteOffset"},{"location":"Entity/#float-spriterotation","text":"","title":"float SpriteRotation"},{"location":"Entity/#const-vector-spritescale","text":"","title":"const Vector SpriteScale"},{"location":"Entity/#integer-subtype","text":"","title":"integer SubType"},{"location":"Entity/#entity-target","text":"","title":"Entity Target"},{"location":"Entity/#const-vector-targetposition","text":"","title":"const Vector TargetPosition"},{"location":"Entity/#const-entitytype-type","text":"","title":"const EntityType Type"},{"location":"Entity/#integer-variant","text":"","title":"integer Variant"},{"location":"Entity/#vector-velocity","text":"","title":"Vector Velocity"},{"location":"Entity/#boolean-visible","text":"","title":"boolean Visible"},{"location":"Entity/#float-size","text":"Returns the size of the hitbox on an entity.","title":"float Size"},{"location":"EntityBomb/","text":"Class \"EntityBomb\" \u2693\ufe0e void SetExplosionCountdown (integer Countdown) \u2693\ufe0e float ExplosionDamage \u2693\ufe0e integer Flags \u2693\ufe0e Uses TearFlags to alter the behavior of the bomb. boolean IsFetus \u2693\ufe0e float RadiusMultiplier \u2693\ufe0e","title":"EntityBomb"},{"location":"EntityBomb/#class-entitybomb","text":"","title":"Class \"EntityBomb\""},{"location":"EntityBomb/#void-setexplosioncountdown-integer-countdown","text":"","title":"void SetExplosionCountdown (integer Countdown)"},{"location":"EntityBomb/#float-explosiondamage","text":"","title":"float ExplosionDamage"},{"location":"EntityBomb/#integer-flags","text":"Uses TearFlags to alter the behavior of the bomb.","title":"integer Flags"},{"location":"EntityBomb/#boolean-isfetus","text":"","title":"boolean IsFetus"},{"location":"EntityBomb/#float-radiusmultiplier","text":"","title":"float RadiusMultiplier"},{"location":"EntityEffect/","text":"Class \"EntityEffect\" \u2693\ufe0e void FollowParent (Entity Parent) \u2693\ufe0e static boolean IsPlayerCreep (integer Variant) \u2693\ufe0e void SetDamageSource (EntityType DamageSource) \u2693\ufe0e void SetRadii (float min, float max ) \u2693\ufe0e For shockwaves. void SetTimeout (integer Timeout) \u2693\ufe0e integer DamageSource \u2693\ufe0e float FallingAcceleration \u2693\ufe0e float FallingSpeed \u2693\ufe0e boolean IsFollowing \u2693\ufe0e integer LifeSpan \u2693\ufe0e float m_Height \u2693\ufe0e for particles .dy float MaxRadius \u2693\ufe0e float MinRadius \u2693\ufe0e For shockwaves. Vector ParentOffset \u2693\ufe0e probably obsolete soon, in favor of m_SpriteOffset float Rotation \u2693\ufe0e float Scale \u2693\ufe0e integer State \u2693\ufe0e state var, may be used ad lib initialized to 0 in Init() integer Timeout \u2693\ufe0e","title":"EntityEffect"},{"location":"EntityEffect/#class-entityeffect","text":"","title":"Class \"EntityEffect\""},{"location":"EntityEffect/#void-followparent-entity-parent","text":"","title":"void FollowParent (Entity Parent)"},{"location":"EntityEffect/#static-boolean-isplayercreep-integer-variant","text":"","title":"static boolean IsPlayerCreep (integer Variant)"},{"location":"EntityEffect/#void-setdamagesource-entitytype-damagesource","text":"","title":"void SetDamageSource (EntityType DamageSource)"},{"location":"EntityEffect/#void-setradii-float-min-float-max","text":"For shockwaves.","title":"void SetRadii (float min, float max )"},{"location":"EntityEffect/#void-settimeout-integer-timeout","text":"","title":"void SetTimeout (integer Timeout)"},{"location":"EntityEffect/#integer-damagesource","text":"","title":"integer DamageSource"},{"location":"EntityEffect/#float-fallingacceleration","text":"","title":"float FallingAcceleration"},{"location":"EntityEffect/#float-fallingspeed","text":"","title":"float FallingSpeed"},{"location":"EntityEffect/#boolean-isfollowing","text":"","title":"boolean IsFollowing"},{"location":"EntityEffect/#integer-lifespan","text":"","title":"integer LifeSpan"},{"location":"EntityEffect/#float-m_height","text":"for particles .dy","title":"float m_Height"},{"location":"EntityEffect/#float-maxradius","text":"","title":"float MaxRadius"},{"location":"EntityEffect/#float-minradius","text":"For shockwaves.","title":"float MinRadius"},{"location":"EntityEffect/#vector-parentoffset","text":"probably obsolete soon, in favor of m_SpriteOffset","title":"Vector ParentOffset"},{"location":"EntityEffect/#float-rotation","text":"","title":"float Rotation"},{"location":"EntityEffect/#float-scale","text":"","title":"float Scale"},{"location":"EntityEffect/#integer-state","text":"state var, may be used ad lib initialized to 0 in Init()","title":"integer State"},{"location":"EntityEffect/#integer-timeout","text":"","title":"integer Timeout"},{"location":"EntityFamiliar/","text":"Class \"EntityFamiliar\" \u2693\ufe0e void AddCoins (integer Value) \u2693\ufe0e void AddHearts (integer Hearts) \u2693\ufe0e void AddKeys (integer Keys) \u2693\ufe0e void AddToDelayed () \u2693\ufe0e Adds to delayed. This doesn't remove other flags! void AddToFollowers () \u2693\ufe0e Adds to followers. This doesn't remove other flags! void AddToOrbit (integer Layer) \u2693\ufe0e Adds to orbitals. This doesn't remove other flags! EntityTear FireProjectile (Vector Dir) \u2693\ufe0e Shoots a projectile from the center of the familiar in the direction you defined. If used on a familiar that shoots multiple projectiles (example: harlequin baby), this function will only return the left most projectile based on the direction. If used on familiars with special tears (example: Lil Brimstone,...), this will just shoot a regular tear. This function will not play the shoot animation of the familiar. void FollowParent () \u2693\ufe0e void FollowPosition (Vector Pos) \u2693\ufe0e static Vector GetOrbitDistance (integer Layer) \u2693\ufe0e integer State \u2693\ufe0e void MoveDelayed (integer NumFrames) \u2693\ufe0e void MoveDiagonally (float Speed) \u2693\ufe0e void PickEnemyTarget (float MaxDistance, integer FrameInterval ) \u2693\ufe0e void PlayChargeAnim (Direction Dir) \u2693\ufe0e void PlayFloatAnim (Direction Dir) \u2693\ufe0e void PlayShootAnim (Direction Dir) \u2693\ufe0e integer RecalculateOrbitOffset (integer Layer, boolean Add ) \u2693\ufe0e Returns the number of familiars in that layer. void RemoveFromDelayed () \u2693\ufe0e void RemoveFromFollowers () \u2693\ufe0e void RemoveFromOrbit () \u2693\ufe0e void Shoot () \u2693\ufe0e integer Coins \u2693\ufe0e integer FireCooldown \u2693\ufe0e integer HeadFrameDelay \u2693\ufe0e integer Hearts \u2693\ufe0e integer Keys \u2693\ufe0e Direction LastDirection \u2693\ufe0e Direction MoveDirection \u2693\ufe0e float OrbitAngleOffset \u2693\ufe0e Can be used to override the angular position of the familiar on its orbit based on the initial starting position of the orbit. Vector OrbitDistance \u2693\ufe0e Defines the orbit of the familiar, if its an orbital. The Vector is interpreted as the dimensions of the circle/oval orbit. Example: Vector(110,90) is the orbital of \"Forever alone\". EntityPlayer Player \u2693\ufe0e integer RoomClearCount \u2693\ufe0e Direction ShootDirection \u2693\ufe0e integer State \u2693\ufe0e","title":"EntityFamiliar"},{"location":"EntityFamiliar/#class-entityfamiliar","text":"","title":"Class \"EntityFamiliar\""},{"location":"EntityFamiliar/#void-addcoins-integer-value","text":"","title":"void AddCoins (integer Value)"},{"location":"EntityFamiliar/#void-addhearts-integer-hearts","text":"","title":"void AddHearts (integer Hearts)"},{"location":"EntityFamiliar/#void-addkeys-integer-keys","text":"","title":"void AddKeys (integer Keys)"},{"location":"EntityFamiliar/#void-addtodelayed","text":"Adds to delayed. This doesn't remove other flags!","title":"void AddToDelayed ()"},{"location":"EntityFamiliar/#void-addtofollowers","text":"Adds to followers. This doesn't remove other flags!","title":"void AddToFollowers ()"},{"location":"EntityFamiliar/#void-addtoorbit-integer-layer","text":"Adds to orbitals. This doesn't remove other flags!","title":"void AddToOrbit (integer Layer)"},{"location":"EntityFamiliar/#entitytear-fireprojectile-vector-dir","text":"Shoots a projectile from the center of the familiar in the direction you defined. If used on a familiar that shoots multiple projectiles (example: harlequin baby), this function will only return the left most projectile based on the direction. If used on familiars with special tears (example: Lil Brimstone,...), this will just shoot a regular tear. This function will not play the shoot animation of the familiar.","title":"EntityTear FireProjectile (Vector Dir)"},{"location":"EntityFamiliar/#void-followparent","text":"","title":"void FollowParent ()"},{"location":"EntityFamiliar/#void-followposition-vector-pos","text":"","title":"void FollowPosition (Vector Pos)"},{"location":"EntityFamiliar/#static-vector-getorbitdistance-integer-layer","text":"","title":"static Vector GetOrbitDistance (integer Layer)"},{"location":"EntityFamiliar/#integer-state","text":"","title":"integer State"},{"location":"EntityFamiliar/#void-movedelayed-integer-numframes","text":"","title":"void MoveDelayed (integer NumFrames)"},{"location":"EntityFamiliar/#void-movediagonally-float-speed","text":"","title":"void MoveDiagonally (float Speed)"},{"location":"EntityFamiliar/#void-pickenemytarget-float-maxdistance-integer-frameinterval","text":"","title":"void PickEnemyTarget (float MaxDistance, integer FrameInterval )"},{"location":"EntityFamiliar/#void-playchargeanim-direction-dir","text":"","title":"void PlayChargeAnim (Direction Dir)"},{"location":"EntityFamiliar/#void-playfloatanim-direction-dir","text":"","title":"void PlayFloatAnim (Direction Dir)"},{"location":"EntityFamiliar/#void-playshootanim-direction-dir","text":"","title":"void PlayShootAnim (Direction Dir)"},{"location":"EntityFamiliar/#integer-recalculateorbitoffset-integer-layer-boolean-add","text":"Returns the number of familiars in that layer.","title":"integer RecalculateOrbitOffset (integer Layer, boolean Add )"},{"location":"EntityFamiliar/#void-removefromdelayed","text":"","title":"void RemoveFromDelayed ()"},{"location":"EntityFamiliar/#void-removefromfollowers","text":"","title":"void RemoveFromFollowers ()"},{"location":"EntityFamiliar/#void-removefromorbit","text":"","title":"void RemoveFromOrbit ()"},{"location":"EntityFamiliar/#void-shoot","text":"","title":"void Shoot ()"},{"location":"EntityFamiliar/#integer-coins","text":"","title":"integer Coins"},{"location":"EntityFamiliar/#integer-firecooldown","text":"","title":"integer FireCooldown"},{"location":"EntityFamiliar/#integer-headframedelay","text":"","title":"integer HeadFrameDelay"},{"location":"EntityFamiliar/#integer-hearts","text":"","title":"integer Hearts"},{"location":"EntityFamiliar/#integer-keys","text":"","title":"integer Keys"},{"location":"EntityFamiliar/#direction-lastdirection","text":"","title":"Direction LastDirection"},{"location":"EntityFamiliar/#direction-movedirection","text":"","title":"Direction MoveDirection"},{"location":"EntityFamiliar/#float-orbitangleoffset","text":"Can be used to override the angular position of the familiar on its orbit based on the initial starting position of the orbit.","title":"float OrbitAngleOffset"},{"location":"EntityFamiliar/#vector-orbitdistance","text":"Defines the orbit of the familiar, if its an orbital. The Vector is interpreted as the dimensions of the circle/oval orbit. Example: Vector(110,90) is the orbital of \"Forever alone\".","title":"Vector OrbitDistance"},{"location":"EntityFamiliar/#entityplayer-player","text":"","title":"EntityPlayer Player"},{"location":"EntityFamiliar/#integer-roomclearcount","text":"","title":"integer RoomClearCount"},{"location":"EntityFamiliar/#direction-shootdirection","text":"","title":"Direction ShootDirection"},{"location":"EntityFamiliar/#integer-state_1","text":"","title":"integer State"},{"location":"EntityKnife/","text":"Class \"EntityKnife\" \u2693\ufe0e float GetKnifeDistance () \u2693\ufe0e float GetKnifeVelocity () \u2693\ufe0e integer GetRenderZ () \u2693\ufe0e boolean IsFlying () \u2693\ufe0e void Reset () \u2693\ufe0e Used for master knifes, to get back to player. void SetPathFollowSpeed (float Speed) \u2693\ufe0e void Shoot (float Charge, float Range ) \u2693\ufe0e float Charge \u2693\ufe0e boolean IsFlying \u2693\ufe0e float MaxDistance \u2693\ufe0e float PathFollowSpeed \u2693\ufe0e Unit speed of path moving knifes. float PathOffset \u2693\ufe0e float Rotation \u2693\ufe0e float RotationOffset \u2693\ufe0e float Scale \u2693\ufe0e integer TearFlags \u2693\ufe0e","title":"EntityKnife"},{"location":"EntityKnife/#class-entityknife","text":"","title":"Class \"EntityKnife\""},{"location":"EntityKnife/#float-getknifedistance","text":"","title":"float GetKnifeDistance ()"},{"location":"EntityKnife/#float-getknifevelocity","text":"","title":"float GetKnifeVelocity ()"},{"location":"EntityKnife/#integer-getrenderz","text":"","title":"integer GetRenderZ ()"},{"location":"EntityKnife/#boolean-isflying","text":"","title":"boolean IsFlying ()"},{"location":"EntityKnife/#void-reset","text":"Used for master knifes, to get back to player.","title":"void Reset ()"},{"location":"EntityKnife/#void-setpathfollowspeed-float-speed","text":"","title":"void SetPathFollowSpeed (float Speed)"},{"location":"EntityKnife/#void-shoot-float-charge-float-range","text":"","title":"void Shoot (float Charge, float Range )"},{"location":"EntityKnife/#float-charge","text":"","title":"float Charge"},{"location":"EntityKnife/#boolean-isflying_1","text":"","title":"boolean IsFlying"},{"location":"EntityKnife/#float-maxdistance","text":"","title":"float MaxDistance"},{"location":"EntityKnife/#float-pathfollowspeed","text":"Unit speed of path moving knifes.","title":"float PathFollowSpeed"},{"location":"EntityKnife/#float-pathoffset","text":"","title":"float PathOffset"},{"location":"EntityKnife/#float-rotation","text":"","title":"float Rotation"},{"location":"EntityKnife/#float-rotationoffset","text":"","title":"float RotationOffset"},{"location":"EntityKnife/#float-scale","text":"","title":"float Scale"},{"location":"EntityKnife/#integer-tearflags","text":"","title":"integer TearFlags"},{"location":"EntityLaser/","text":"Class \"EntityLaser\" \u2693\ufe0e static Vector CalculateEndPoint (Vector Start, Vector Dir, Vector PositionOffset, Entity Parent, float Margin ) \u2693\ufe0e const Vector GetEndPoint () \u2693\ufe0e const HomingLaser::SampleList GetNonOptimizedSamples () \u2693\ufe0e integer GetRenderZ () \u2693\ufe0e const HomingLaser::SampleList GetSamples () \u2693\ufe0e boolean IsCircleLaser () \u2693\ufe0e boolean IsSampleLaser () \u2693\ufe0e void SetActiveRotation (integer Delay, float AngleDegrees, float RotationSpd, boolean TimeoutComplete ) \u2693\ufe0e void SetBlackHpDropChance (float Chance) \u2693\ufe0e void SetHomingType (LaserHomingType Type) \u2693\ufe0e void SetMaxDistance (float Distance) \u2693\ufe0e void SetMultidimensionalTouched (boolean Value) \u2693\ufe0e void SetOneHit (boolean Value) \u2693\ufe0e void SetTimeout (integer Value) \u2693\ufe0e static EntityLaser ShootAngle (integer Variant, Vector SourcePos, float AngleDegrees, integer Timeout, Vector PosOffset, Entity Source ) \u2693\ufe0e static helper to simplify spawning lasers float Angle \u2693\ufe0e float AngleDegrees \u2693\ufe0e float BlackHpDropChance \u2693\ufe0e For maw of void. Entity BounceLaser \u2693\ufe0e float CurveStrength \u2693\ufe0e My Reflection. boolean DisableFollowParent \u2693\ufe0e Set on children of other lasers, for instance Rubber Cement reflections. Disables m_ParentOffset. Vector EndPoint \u2693\ufe0e Will hold the endpoint so it will not need to be recalculated when accessed from extern. boolean FirstUpdate \u2693\ufe0e boolean GridHit \u2693\ufe0e true if laser can be clipped by grid entities and it was clipped at that frame. HomingLaser HomingLaser \u2693\ufe0e LaserHomingType HomingType \u2693\ufe0e boolean IsActiveRotating \u2693\ufe0e float LaserLength \u2693\ufe0e float LastAngleDegrees \u2693\ufe0e float MaxDistance \u2693\ufe0e Used to trim brimstone for Azazel (0 - off) boolean OneHit \u2693\ufe0e Laser hits only once. Vector ParentOffset \u2693\ufe0e float Radius \u2693\ufe0e float RotationDegrees \u2693\ufe0e integer RotationDelay \u2693\ufe0e float RotationSpd \u2693\ufe0e boolean SampleLaser \u2693\ufe0e boolean Shrink \u2693\ufe0e float StartAngleDegrees \u2693\ufe0e Some lasers have a bit of random variation in rotation so they need to remember their starting point. integer TearFlags \u2693\ufe0e float m_DepthOffset; float GetDepthOffset(void) const { return m_DepthOffset; } void SetDepthOffset(float Value) { m_DepthOffset = Value; } integer Timeout \u2693\ufe0e","title":"EntityLaser"},{"location":"EntityLaser/#class-entitylaser","text":"","title":"Class \"EntityLaser\""},{"location":"EntityLaser/#static-vector-calculateendpoint-vector-start-vector-dir-vector-positionoffset-entity-parent-float-margin","text":"","title":"static Vector CalculateEndPoint (Vector Start, Vector Dir, Vector PositionOffset, Entity Parent, float Margin )"},{"location":"EntityLaser/#const-vector-getendpoint","text":"","title":"const Vector GetEndPoint ()"},{"location":"EntityLaser/#const-hominglasersamplelist-getnonoptimizedsamples","text":"","title":"const HomingLaser::SampleList GetNonOptimizedSamples ()"},{"location":"EntityLaser/#integer-getrenderz","text":"","title":"integer GetRenderZ ()"},{"location":"EntityLaser/#const-hominglasersamplelist-getsamples","text":"","title":"const HomingLaser::SampleList GetSamples ()"},{"location":"EntityLaser/#boolean-iscirclelaser","text":"","title":"boolean IsCircleLaser ()"},{"location":"EntityLaser/#boolean-issamplelaser","text":"","title":"boolean IsSampleLaser ()"},{"location":"EntityLaser/#void-setactiverotation-integer-delay-float-angledegrees-float-rotationspd-boolean-timeoutcomplete","text":"","title":"void SetActiveRotation (integer Delay, float AngleDegrees, float RotationSpd, boolean TimeoutComplete )"},{"location":"EntityLaser/#void-setblackhpdropchance-float-chance","text":"","title":"void SetBlackHpDropChance (float Chance)"},{"location":"EntityLaser/#void-sethomingtype-laserhomingtype-type","text":"","title":"void SetHomingType (LaserHomingType Type)"},{"location":"EntityLaser/#void-setmaxdistance-float-distance","text":"","title":"void SetMaxDistance (float Distance)"},{"location":"EntityLaser/#void-setmultidimensionaltouched-boolean-value","text":"","title":"void SetMultidimensionalTouched (boolean Value)"},{"location":"EntityLaser/#void-setonehit-boolean-value","text":"","title":"void SetOneHit (boolean Value)"},{"location":"EntityLaser/#void-settimeout-integer-value","text":"","title":"void SetTimeout (integer Value)"},{"location":"EntityLaser/#static-entitylaser-shootangle-integer-variant-vector-sourcepos-float-angledegrees-integer-timeout-vector-posoffset-entity-source","text":"static helper to simplify spawning lasers","title":"static EntityLaser ShootAngle (integer Variant, Vector SourcePos, float AngleDegrees, integer Timeout, Vector PosOffset, Entity Source )"},{"location":"EntityLaser/#float-angle","text":"","title":"float Angle"},{"location":"EntityLaser/#float-angledegrees","text":"","title":"float AngleDegrees"},{"location":"EntityLaser/#float-blackhpdropchance","text":"For maw of void.","title":"float BlackHpDropChance"},{"location":"EntityLaser/#entity-bouncelaser","text":"","title":"Entity BounceLaser"},{"location":"EntityLaser/#float-curvestrength","text":"My Reflection.","title":"float CurveStrength"},{"location":"EntityLaser/#boolean-disablefollowparent","text":"Set on children of other lasers, for instance Rubber Cement reflections. Disables m_ParentOffset.","title":"boolean DisableFollowParent"},{"location":"EntityLaser/#vector-endpoint","text":"Will hold the endpoint so it will not need to be recalculated when accessed from extern.","title":"Vector EndPoint"},{"location":"EntityLaser/#boolean-firstupdate","text":"","title":"boolean FirstUpdate"},{"location":"EntityLaser/#boolean-gridhit","text":"true if laser can be clipped by grid entities and it was clipped at that frame.","title":"boolean GridHit"},{"location":"EntityLaser/#hominglaser-hominglaser","text":"","title":"HomingLaser HomingLaser"},{"location":"EntityLaser/#laserhomingtype-homingtype","text":"","title":"LaserHomingType HomingType"},{"location":"EntityLaser/#boolean-isactiverotating","text":"","title":"boolean IsActiveRotating"},{"location":"EntityLaser/#float-laserlength","text":"","title":"float LaserLength"},{"location":"EntityLaser/#float-lastangledegrees","text":"","title":"float LastAngleDegrees"},{"location":"EntityLaser/#float-maxdistance","text":"Used to trim brimstone for Azazel (0 - off)","title":"float MaxDistance"},{"location":"EntityLaser/#boolean-onehit","text":"Laser hits only once.","title":"boolean OneHit"},{"location":"EntityLaser/#vector-parentoffset","text":"","title":"Vector ParentOffset"},{"location":"EntityLaser/#float-radius","text":"","title":"float Radius"},{"location":"EntityLaser/#float-rotationdegrees","text":"","title":"float RotationDegrees"},{"location":"EntityLaser/#integer-rotationdelay","text":"","title":"integer RotationDelay"},{"location":"EntityLaser/#float-rotationspd","text":"","title":"float RotationSpd"},{"location":"EntityLaser/#boolean-samplelaser","text":"","title":"boolean SampleLaser"},{"location":"EntityLaser/#boolean-shrink","text":"","title":"boolean Shrink"},{"location":"EntityLaser/#float-startangledegrees","text":"Some lasers have a bit of random variation in rotation so they need to remember their starting point.","title":"float StartAngleDegrees"},{"location":"EntityLaser/#integer-tearflags","text":"float m_DepthOffset; float GetDepthOffset(void) const { return m_DepthOffset; } void SetDepthOffset(float Value) { m_DepthOffset = Value; }","title":"integer TearFlags"},{"location":"EntityLaser/#integer-timeout","text":"","title":"integer Timeout"},{"location":"EntityNPC/","text":"Class \"EntityNPC\" \u2693\ufe0e void AnimWalkFrame (string HorizontalAnim, string VerticalAnim, float SpeedThreshold ) \u2693\ufe0e Vector CalcTargetPosition (float DistanceLimit) \u2693\ufe0e boolean CanBeDamagedFromVelocity (Vector Velocity) \u2693\ufe0e boolean CanReroll () \u2693\ufe0e EntityProjectile FireBossProjectiles (integer NumProjectiles, Vector TargetPos, float TrajectoryModifier, ProjectileParams Params ) \u2693\ufe0e fire a number of projectiles, optionally targeting the player direction is randomized, or slightly randomized when targeting the player FallingAccelModifier can be used to make projectiles fall faster to the ground returns a pointer to the projectile spawned last (useful e.g. when NumProjectiles=1) void FireProjectiles (Vector Pos, Vector Velocity, ProjectilesMode Mode, ProjectileParams Params ) \u2693\ufe0e integer GetAliveEnemyCount () \u2693\ufe0e Used to redirect close door enemies to any enemies for friendly npcs. integer GetBossColorIdx () \u2693\ufe0e Notes This will return the boss color idx reduced by 1. To get the actual color as set in bosscolors.xml, add +1 to the result. integer GetChampionColorIdx () \u2693\ufe0e Notes A list of Champion colors can be found here : ChampionColorIdx Entity GetPlayerTarget () \u2693\ufe0e if there are no modifiers (best friend) this will return the player boolean IsBoss () \u2693\ufe0e boolean IsChampion () \u2693\ufe0e void KillUnique () \u2693\ufe0e For entities with unique death animation, like Flush! vs poop enemies. void MakeChampion (integer Seed) \u2693\ufe0e Forces a non champion to become a champion, resets hp to max hp. Notes Hard to use because there are millions of possible seeds to input here.Use Morph() to change the champion Color instead! EntityEffect MakeSplat (float Size) \u2693\ufe0e boolean Morph (EntityType , integer Variant, integer SubType, integer ChampionColorIdx ) \u2693\ufe0e Morph the current entity into another one. ChampionColorIdx can be used to turn the entity into a champion. Use to turn it into a regular entity. A list of Champion colors can be found here : ChampionColorIdx Example Code This code turns an entity into a gaper. entity:ToNPC():Morph(EntityType.ENTITY_GAPER , 0, 0,-1) -1 void PlaySound (SoundEffect ID, float Volume, integer FrameDelay, boolean Loop, float Pitch ) \u2693\ufe0e EntityList QueryNPCsGroup (integer GroupIdx) \u2693\ufe0e EntityList QueryNPCsSpawnerType (EntityType SpawnerType, EntityType Type, boolean OnlyEnemies ) \u2693\ufe0e EntityList QueryNPCsType (EntityType Type, integer Variant ) \u2693\ufe0e void ResetPathFinderTarget () \u2693\ufe0e static ThrowSpider (Vector Position, Entity Spawner, Vector TargetPos, boolean Big, float YOffset ) \u2693\ufe0e boolean CanShutDoors \u2693\ufe0e const EntityNPC ChildNPC \u2693\ufe0e Entity EntityRef \u2693\ufe0e integer GroupIdx \u2693\ufe0e Used to identify multichunks groups. integer I1 \u2693\ufe0e general usage ints for ai_ integer I2 \u2693\ufe0e same as m_I1 const EntityNPC ParentNPC \u2693\ufe0e parent entity, for multi-entity NPCs like Larry Jr. PathFinder Pathfinder \u2693\ufe0e integer ProjectileCooldown \u2693\ufe0e projectiles can fire again when it reaches 0 integer ProjectileDelay \u2693\ufe0e >0: projectile will be fired in n frames float Scale \u2693\ufe0e integer State \u2693\ufe0e integer StateFrame \u2693\ufe0e Vector V1 \u2693\ufe0e general usage for ai_* functions, initialized to (0,0) Vector V2 \u2693\ufe0e like m_V1, in case we need two of those","title":"EntityNPC"},{"location":"EntityNPC/#class-entitynpc","text":"","title":"Class \"EntityNPC\""},{"location":"EntityNPC/#void-animwalkframe-string-horizontalanim-string-verticalanim-float-speedthreshold","text":"","title":"void AnimWalkFrame (string HorizontalAnim, string VerticalAnim, float SpeedThreshold )"},{"location":"EntityNPC/#vector-calctargetposition-float-distancelimit","text":"","title":"Vector CalcTargetPosition (float DistanceLimit)"},{"location":"EntityNPC/#boolean-canbedamagedfromvelocity-vector-velocity","text":"","title":"boolean CanBeDamagedFromVelocity (Vector Velocity)"},{"location":"EntityNPC/#boolean-canreroll","text":"","title":"boolean CanReroll ()"},{"location":"EntityNPC/#entityprojectile-firebossprojectiles-integer-numprojectiles-vector-targetpos-float-trajectorymodifier-projectileparams-params","text":"fire a number of projectiles, optionally targeting the player direction is randomized, or slightly randomized when targeting the player FallingAccelModifier can be used to make projectiles fall faster to the ground returns a pointer to the projectile spawned last (useful e.g. when NumProjectiles=1)","title":"EntityProjectile FireBossProjectiles (integer NumProjectiles, Vector TargetPos, float TrajectoryModifier, ProjectileParams Params )"},{"location":"EntityNPC/#void-fireprojectiles-vector-pos-vector-velocity-projectilesmode-mode-projectileparams-params","text":"","title":"void FireProjectiles (Vector Pos, Vector Velocity, ProjectilesMode Mode, ProjectileParams Params )"},{"location":"EntityNPC/#integer-getaliveenemycount","text":"Used to redirect close door enemies to any enemies for friendly npcs.","title":"integer GetAliveEnemyCount ()"},{"location":"EntityNPC/#integer-getbosscoloridx","text":"","title":"integer GetBossColorIdx ()"},{"location":"EntityNPC/#integer-getchampioncoloridx","text":"","title":"integer GetChampionColorIdx ()"},{"location":"EntityNPC/#entity-getplayertarget","text":"if there are no modifiers (best friend) this will return the player","title":"Entity GetPlayerTarget ()"},{"location":"EntityNPC/#boolean-isboss","text":"","title":"boolean IsBoss ()"},{"location":"EntityNPC/#boolean-ischampion","text":"","title":"boolean IsChampion ()"},{"location":"EntityNPC/#void-killunique","text":"For entities with unique death animation, like Flush! vs poop enemies.","title":"void KillUnique ()"},{"location":"EntityNPC/#void-makechampion-integer-seed","text":"Forces a non champion to become a champion, resets hp to max hp.","title":"void MakeChampion (integer Seed)"},{"location":"EntityNPC/#entityeffect-makesplat-float-size","text":"","title":"EntityEffect MakeSplat (float Size)"},{"location":"EntityNPC/#boolean-morph-entitytype-integer-variant-integer-subtype-integer-championcoloridx","text":"Morph the current entity into another one. ChampionColorIdx can be used to turn the entity into a champion. Use to turn it into a regular entity. A list of Champion colors can be found here : ChampionColorIdx","title":"boolean Morph (EntityType , integer Variant, integer SubType, integer ChampionColorIdx )"},{"location":"EntityNPC/#void-playsound-soundeffect-id-float-volume-integer-framedelay-boolean-loop-float-pitch","text":"","title":"void PlaySound (SoundEffect ID, float Volume, integer FrameDelay, boolean Loop, float Pitch )"},{"location":"EntityNPC/#entitylist-querynpcsgroup-integer-groupidx","text":"","title":"EntityList QueryNPCsGroup (integer GroupIdx)"},{"location":"EntityNPC/#entitylist-querynpcsspawnertype-entitytype-spawnertype-entitytype-type-boolean-onlyenemies","text":"","title":"EntityList QueryNPCsSpawnerType (EntityType SpawnerType, EntityType Type, boolean OnlyEnemies )"},{"location":"EntityNPC/#entitylist-querynpcstype-entitytype-type-integer-variant","text":"","title":"EntityList QueryNPCsType (EntityType Type, integer Variant )"},{"location":"EntityNPC/#void-resetpathfindertarget","text":"","title":"void ResetPathFinderTarget ()"},{"location":"EntityNPC/#static-throwspider-vector-position-entity-spawner-vector-targetpos-boolean-big-float-yoffset","text":"","title":"static ThrowSpider (Vector Position, Entity Spawner, Vector TargetPos, boolean Big, float YOffset )"},{"location":"EntityNPC/#boolean-canshutdoors","text":"","title":"boolean CanShutDoors"},{"location":"EntityNPC/#const-entitynpc-childnpc","text":"","title":"const EntityNPC ChildNPC"},{"location":"EntityNPC/#entity-entityref","text":"","title":"Entity EntityRef"},{"location":"EntityNPC/#integer-groupidx","text":"Used to identify multichunks groups.","title":"integer GroupIdx"},{"location":"EntityNPC/#integer-i1","text":"general usage ints for ai_","title":"integer I1"},{"location":"EntityNPC/#integer-i2","text":"same as m_I1","title":"integer I2"},{"location":"EntityNPC/#const-entitynpc-parentnpc","text":"parent entity, for multi-entity NPCs like Larry Jr.","title":"const EntityNPC ParentNPC"},{"location":"EntityNPC/#pathfinder-pathfinder","text":"","title":"PathFinder Pathfinder"},{"location":"EntityNPC/#integer-projectilecooldown","text":"projectiles can fire again when it reaches 0","title":"integer ProjectileCooldown"},{"location":"EntityNPC/#integer-projectiledelay","text":">0: projectile will be fired in n frames","title":"integer ProjectileDelay"},{"location":"EntityNPC/#float-scale","text":"","title":"float Scale"},{"location":"EntityNPC/#integer-state","text":"","title":"integer State"},{"location":"EntityNPC/#integer-stateframe","text":"","title":"integer StateFrame"},{"location":"EntityNPC/#vector-v1","text":"general usage for ai_* functions, initialized to (0,0)","title":"Vector V1"},{"location":"EntityNPC/#vector-v2","text":"like m_V1, in case we need two of those","title":"Vector V2"},{"location":"EntityPickup/","text":"Class \"EntityPickup\" \u2693\ufe0e void AppearFast () \u2693\ufe0e boolean CanReroll () \u2693\ufe0e integer GetCoinValue () \u2693\ufe0e If this is a coin, return its face value, else zero. boolean IsShopItem () \u2693\ufe0e void Morph (EntityType Type, integer Variant, integer SubType, boolean KeepPrice ) \u2693\ufe0e void PlayDropSound () \u2693\ufe0e void PlayPickupSound () \u2693\ufe0e boolean TryOpenChest () \u2693\ufe0e boolean AutoUpdatePrice \u2693\ufe0e integer Charge \u2693\ufe0e integer Price \u2693\ufe0e integer ShopItemId \u2693\ufe0e integer State \u2693\ufe0e boolean TheresOptionsPickup \u2693\ufe0e integer Timeout \u2693\ufe0e boolean Touched \u2693\ufe0e integer Wait \u2693\ufe0e","title":"EntityPickup"},{"location":"EntityPickup/#class-entitypickup","text":"","title":"Class \"EntityPickup\""},{"location":"EntityPickup/#void-appearfast","text":"","title":"void AppearFast ()"},{"location":"EntityPickup/#boolean-canreroll","text":"","title":"boolean CanReroll ()"},{"location":"EntityPickup/#integer-getcoinvalue","text":"If this is a coin, return its face value, else zero.","title":"integer GetCoinValue ()"},{"location":"EntityPickup/#boolean-isshopitem","text":"","title":"boolean IsShopItem ()"},{"location":"EntityPickup/#void-morph-entitytype-type-integer-variant-integer-subtype-boolean-keepprice","text":"","title":"void Morph (EntityType Type, integer Variant, integer SubType, boolean KeepPrice )"},{"location":"EntityPickup/#void-playdropsound","text":"","title":"void PlayDropSound ()"},{"location":"EntityPickup/#void-playpickupsound","text":"","title":"void PlayPickupSound ()"},{"location":"EntityPickup/#boolean-tryopenchest","text":"","title":"boolean TryOpenChest ()"},{"location":"EntityPickup/#boolean-autoupdateprice","text":"","title":"boolean AutoUpdatePrice"},{"location":"EntityPickup/#integer-charge","text":"","title":"integer Charge"},{"location":"EntityPickup/#integer-price","text":"","title":"integer Price"},{"location":"EntityPickup/#integer-shopitemid","text":"","title":"integer ShopItemId"},{"location":"EntityPickup/#integer-state","text":"","title":"integer State"},{"location":"EntityPickup/#boolean-theresoptionspickup","text":"","title":"boolean TheresOptionsPickup"},{"location":"EntityPickup/#integer-timeout","text":"","title":"integer Timeout"},{"location":"EntityPickup/#boolean-touched","text":"","title":"boolean Touched"},{"location":"EntityPickup/#integer-wait","text":"","title":"integer Wait"},{"location":"EntityPlayer/","text":"Class \"EntityPlayer\" \u2693\ufe0e void AddBlackHearts (integer BlackHearts) \u2693\ufe0e Adds Black hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full black heart to the player. Isaac.GetPlayer(0):AddBlackHearts(2) Entity AddBlueFlies (integer Amount, Vector Position, Entity Target ) \u2693\ufe0e Entity AddBlueSpider (Vector Position) \u2693\ufe0e void AddBombs (integer Amount) \u2693\ufe0e Adds bombs to the player. Remove them with negative numbers. Example Code This code removes 1 bomb from the player. Isaac.GetPlayer(0):AddBombs(-1) void AddBoneHearts (integer Hearts) \u2693\ufe0e Adds bone hearts to the player. 1 unit is a single bone heart. Remove them with negative numbers. Example Code This code adds 1 bone heart to the player. Isaac.GetPlayer(0):AddBoneHearts(1) void AddCacheFlags (CacheFlag CacheFlag) \u2693\ufe0e Will reevaluate the cache flags provided in the next cache reevaluation. void AddCard (Card Card) \u2693\ufe0e void AddCoins (integer Amount) \u2693\ufe0e Adds coins to the player. Remove them with negative numbers. Example Code This code adds 1 coin to the player. Isaac.GetPlayer(0):AddCoins(1) void AddCollectible (CollectibleType Type, integer Charge, boolean AddConsumables ) \u2693\ufe0e void AddControlsCooldown (integer Cooldown) \u2693\ufe0e void AddCostume (Config::Item Item, boolean ItemStateOnly ) \u2693\ufe0e void AddDeadEyeCharge () \u2693\ufe0e void AddDollarBillEffect () \u2693\ufe0e void AddEternalHearts (integer EternalHearts) \u2693\ufe0e Adds eternal hearts to the player. 1 unit is half a heart. Remove them with negative numbers. (Note that eternal hearts automatically turn to full hearts, when you have more than one.) Example Code This code adds 1 eternal heart to the player. Isaac.GetPlayer(0):AddEternalHearts(1) void AddGoldenBomb () \u2693\ufe0e void AddGoldenHearts (integer Hearts) \u2693\ufe0e Adds golden hearts to the player. 1 unit is a single gold heart. Remove them with negative numbers. Example Code This code adds 1 golden heart to the player. Isaac.GetPlayer(0):AddGoldenHearts(1) void AddGoldenKey () \u2693\ufe0e void AddHearts (integer Hearts) \u2693\ufe0e Adds red hearts to the player if there are any empty heart containers. 1 unit is half a heart. Remove health with negative numbers. Example Code This code adds 1 full red heart to the player. Isaac.GetPlayer(0):AddkHearts(2) void AddJarFlies (integer Flies) \u2693\ufe0e void AddJarHearts (integer Hearts) \u2693\ufe0e void AddKeys (integer Amount) \u2693\ufe0e Adds keys to the player. Remove them with negative numbers. Example Code This code adds 1 key to the player. Isaac.GetPlayer(0):AddKeys(1) void AddMaxHearts (integer MaxHearts, boolean IgnoreKeeper ) \u2693\ufe0e Adds heart containers to the player. 2 units is a full heart container. Remove them with negative numbers. Notes It is possible to add a half heart container to the player. This will appear as a regular heart container but can only be filled half-way. Example Code This code adds 1 heart container to the player. Isaac.GetPlayer(0):AddMaxHearts(2,true) Bugs IgnoreKeeper does not appear to work as intended. Max hearts can be added or removed from Keeper regardless of what this boolean is. If Keeper has Greed's Gullet and this boolean is set to false, max hearts cannot be added to Keeper, but can be removed normally. If Keeper has Greed's Gullet and this boolean is set to true, Max hearts can be added or removed from Keeper normally. void AddNullCostume (Config::NullItemID NullId) \u2693\ufe0e for Lua void AddPill (PillColor Pill) \u2693\ufe0e void AddPlayerFormCostume (PlayerForm Form) \u2693\ufe0e void AddPrettyFly () \u2693\ufe0e void AddSoulHearts (integer SoulHearts) \u2693\ufe0e Adds soul hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full soul heart to the player. Isaac.GetPlayer(0):AddSoulHearts(2) void AddTrinket (TrinketType Type) \u2693\ufe0e void AnimateAppear () \u2693\ufe0e Play the animation that is normally played at the beginning of a stage. void AnimateCard (Card Card, string AnimName ) \u2693\ufe0e void AnimateCollectible (CollectibleType Collectible, string AnimName, string SpriteAnimName ) \u2693\ufe0e void AnimateHappy () \u2693\ufe0e thumbs up void AnimateLightTravel () \u2693\ufe0e end of a stage void AnimatePill (PillColor Pill, string AnimName ) \u2693\ufe0e void AnimatePitfallIn () \u2693\ufe0e Fall into pitfall. void AnimatePitfallOut () \u2693\ufe0e Jump out of pitfall. void AnimateSad () \u2693\ufe0e oh no! void AnimateTeleport (boolean Up) \u2693\ufe0e teleport to another room void AnimateTrapdoor () \u2693\ufe0e end of a stage void AnimateTrinket (TrinketType Trinket, string AnimName, string SpriteAnimName ) \u2693\ufe0e boolean AreControlsEnabled () \u2693\ufe0e boolean AreOpposingShootDirectionsPressed () \u2693\ufe0e Returns the non-zero joystick direction from the most recent movement input, but goes to zero after the player comes to a stop. boolean CanAddCollectible () \u2693\ufe0e boolean CanPickBlackHearts () \u2693\ufe0e returns true if player has room for more black hearts boolean CanPickBoneHearts () \u2693\ufe0e returns true if player has room for more bone hearts boolean CanPickGoldenHearts () \u2693\ufe0e returns true if player has room for more golden hearts boolean CanPickRedHearts () \u2693\ufe0e boolean CanPickSoulHearts () \u2693\ufe0e returns true if player has room for more soul hearts boolean CanPickupItem () \u2693\ufe0e Can Player pick up an item right now? boolean CanShoot () \u2693\ufe0e boolean CanTurnHead () \u2693\ufe0e returns true if head should react to keys or false otherwise void CheckFamiliar (integer FamiliarVariant, integer TargetCount, RNG rng ) \u2693\ufe0e void ClearCostumes () \u2693\ufe0e void ClearDeadEyeCharge () \u2693\ufe0e void ClearTemporaryEffects () \u2693\ufe0e Will be called when player exits the room. void DischargeActiveItem () \u2693\ufe0e Sets the charge of your active item to 0 without triggering the active item effect. void DonateLuck (integer Luck) \u2693\ufe0e void DoZitEffect (Vector Direction) \u2693\ufe0e void DropPoketItem (integer PocketNum, Vector Pos ) \u2693\ufe0e Drops a held pocketitem (Card, Pill, Rune...) from the given itemslot at the given position. Possible pocketnumbers are [0, 1] Bugs This function is spelled wrong. Removing the pocketitem in slot 0, while having a second item in slot 1 will not update the UI correctly. The second item will still be in the second slot, which will in turn prevent the player from using this card right away. The player needs to switch between cards to fix this. void DropTrinket (Vector DropPos, boolean ReplaceTick ) \u2693\ufe0e void EvaluateItems () \u2693\ufe0e Triggers a cache reevaluation. Will trigger the MC_EVALUATE_CACHE callback. EntityBomb FireBomb (Vector Position, Vector Velocity ) \u2693\ufe0e EntityLaser FireBrimstone (Vector Direction) \u2693\ufe0e EntityLaser FireDelayedBrimstone (float Angle, Entity Parent ) \u2693\ufe0e EntityKnife FireKnife (Entity Parent, float RotationOffset, boolean CantOverwrite, integer SubType ) \u2693\ufe0e EntityTear FireTear (Vector Position, Vector Velocity, boolean CanBeEye, boolean NoTractorBeam, boolean CanTriggerStreakEnd ) \u2693\ufe0e This replaces the protected fire_tear() to allow other entities (Such as bombs) to easily shoot tears in the same manner and with all the effects the player does. (Ex. Sad Bombs) EntityLaser FireTechLaser (Vector Position, LaserOffset OffsetID, Vector Direction, boolean LeftEye, boolean OneHit ) \u2693\ufe0e EntityLaser FireTechXLaser (Vector Position, Vector Direction, float Radius ) \u2693\ufe0e boolean FlushQueueItem () \u2693\ufe0e called after animation is finished, or on special occasions to prevent bugs boolean FullCharge () \u2693\ufe0e Fully charges the active item. Returns true if the item was fully charged, false otherwise. If player has battery it will first try to fill first charge slot, then the battery slot. integer GetActiveCharge () \u2693\ufe0e Get the current charge of your active item. CollectibleType GetActiveItem () \u2693\ufe0e Returns the currently held item. integer GetActiveSubCharge () \u2693\ufe0e Get the current items subcharge. (Useful for items that charge up over time.) Entity GetActiveWeaponEntity () \u2693\ufe0e const Vector GetAimDirection () \u2693\ufe0e BabySubType GetBabySkin () \u2693\ufe0e integer GetBatteryCharge () \u2693\ufe0e Get the current charge progress of the second charge of your current active item. This bar is only active, when you have the Collectible \"The Battery\" integer GetBlackHearts () \u2693\ufe0e This does not return the # of black hearts, this returns the bit mask for which soul hearts are black hearts. integer GetBombFlags () \u2693\ufe0e EntityBomb::BombVariant GetBombVariant (integer TearFlags, boolean ForceSmallBomb ) \u2693\ufe0e Pass tear flags to add extra effects to the bomb visual like burn -> hot bombs, even if player doesn't have Hot Bombs collectible. ForceSmallBomb will override large bomb variants for TEAR_PERSISTENT. integer GetBoneHearts () \u2693\ufe0e Returns the number of bone hearts as an integer value. 1 Boneheart = 1. Example Code This code gets the total amount of red heart containers including bone hearts. The bonehearts need to be mulltiplied by 2, since in GetMaxHearts() 2 equals 1 full heart. local player = Isaac.GetPlayer(0) player:GetMaxHearts()+player:GetBoneHearts()*2 Card GetCard (integer SlotId) \u2693\ufe0e Gets the ID of the card the player is holding in the given itemslot (0 or 1). RNG GetCardRNG (Card ID) \u2693\ufe0e integer GetCollectibleCount () \u2693\ufe0e integer GetCollectibleNum (CollectibleType Type) \u2693\ufe0e RNG GetCollectibleRNG (CollectibleType ID) \u2693\ufe0e Vector GetCostumeNullPos (string NullFrameName, boolean HeadScale, Vector Direction ) \u2693\ufe0e integer GetDamageCooldown () \u2693\ufe0e integer GetEffectiveMaxHearts () \u2693\ufe0e Returns the amount of Red Hearts the player can contain in their Heart Containers and Bone Hearts. 1 unit is half a red heart. Example: you have 3 red heart container and one bone heart. 6(red) + 2(bone) = 8 TemporaryEffects GetEffects () \u2693\ufe0e integer GetEternalHearts () \u2693\ufe0e Returns the amount of eternal hearts the player has. integer GetExtraLives () \u2693\ufe0e Direction GetFireDirection () \u2693\ufe0e Vector GetFlyingOffset () \u2693\ufe0e integer GetGoldenHearts () \u2693\ufe0e Returns the amount of golden hearts the player has. float GetGreedDonationBreakChance () \u2693\ufe0e Direction GetHeadDirection () \u2693\ufe0e integer GetHeartLimit () \u2693\ufe0e integer GetHearts () \u2693\ufe0e Returns the amount of red hearts the player has inside their heart containers and bone hearts. 1 unit is half a heart. CollectibleType GetItemState () \u2693\ufe0e integer GetJarFlies () \u2693\ufe0e integer GetJarHearts () \u2693\ufe0e Vector GetLaserOffset (LaserOffset ID, Vector Direction ) \u2693\ufe0e integer GetLastActionTriggers () \u2693\ufe0e integer GetLastDamageFlags () \u2693\ufe0e const EntityRef GetLastDamageSource () \u2693\ufe0e const Vector GetLastDirection () \u2693\ufe0e integer GetMaxHearts () \u2693\ufe0e Returns the amount of Heart Containers the player has. 1 unit is half a heart container. integer GetMaxPoketItems () \u2693\ufe0e Get the number of Pickup items you can carry. (1 on default. 2 with belly button or similar) Bugs This function is spelled wrong. integer GetMaxTrinkets () \u2693\ufe0e Get the number of trinkets you can carry. (1 on default. 2 with moms purse or similar) Direction GetMovementDirection () \u2693\ufe0e Vector GetMovementInput () \u2693\ufe0e Vector GetMovementJoystick () \u2693\ufe0e const Vector GetMovementVector () \u2693\ufe0e MultiShotParams GetMultiShotParams () \u2693\ufe0e PosVel GetMultiShotPositionVelocity (integer LoopIndex, WeaponType Weapon, Vector ShotDirection, float ShotSpeed, MultiShotParams params ) \u2693\ufe0e Call this function in a loop with values from 0 to MultiShotParams.NumProjectiles-1 (inclusive) string GetName () \u2693\ufe0e Returns the name of the player. (Isaac, Cain, Azazel,...) Entity GetNPCTarget () \u2693\ufe0e normally returns the player itself. Can redirect enemy attacks to a different entity such as Best Friend integer GetNumBlueFlies () \u2693\ufe0e integer GetNumBlueSpiders () \u2693\ufe0e integer GetNumBombs () \u2693\ufe0e integer GetNumCoins () \u2693\ufe0e integer GetNumKeys () \u2693\ufe0e PillColor GetPill (integer SlotId) \u2693\ufe0e Gets the ID of the pill the player is holding in the given itemslot (0 or 1). RNG GetPillRNG (PillEffect ID) \u2693\ufe0e PlayerType GetPlayerType () \u2693\ufe0e const PlayerPocketItem GetPocketItem (integer SlotId) \u2693\ufe0e Get the userdata of the pocketitem (Card,Pill,rune) in a said slot. Bugs This function returns userdata, which cant be processed. It is therefore broken and should not be used! const Vector GetRecentMovementVector () \u2693\ufe0e Returns the joystick direction that drives player movement, taking into account certain modifiers like disabled controls and seed effects. Vector GetShootingInput () \u2693\ufe0e Vector GetShootingJoystick () \u2693\ufe0e float GetSmoothBodyRotation () \u2693\ufe0e integer GetSoulHearts () \u2693\ufe0e Returns the amount of Soul Hearts the player has. 1 unit is half a heart. Notes Black Hearts count toward this total, as the game sees them as soul hearts. EntityPlayer GetSubPlayer () \u2693\ufe0e TearParams GetTearHitParams (WeaponType WeaponType, float DamageScale, integer TearDisplacement ) \u2693\ufe0e Used for tear parameters that are calculated on hit (ex: Tough love, Common cold), DamageScale is used for scale calculation based on damage Vector GetTearMovementInheritance (Vector ShotDirection) \u2693\ufe0e float GetTearPoisonDamage () \u2693\ufe0e integer GetTearRangeModifier () \u2693\ufe0e integer GetTotalDamageTaken () \u2693\ufe0e Entity GetTractorBeam () \u2693\ufe0e TrinketType GetTrinket (integer TrinketIndex) \u2693\ufe0e Gets the ID of the trinket the player is holding in the given trinketslot (0 or 1). integer GetTrinketMultiplier () \u2693\ufe0e RNG GetTrinketRNG (TrinketType ID) \u2693\ufe0e const Vector GetVelocityBeforeUpdate () \u2693\ufe0e CollectibleType GetZodiacEffect () \u2693\ufe0e boolean HasCollectible (CollectibleType Type) \u2693\ufe0e boolean HasFullHearts () \u2693\ufe0e boolean HasFullHeartsAndSoulHearts () \u2693\ufe0e boolean HasGoldenBomb () \u2693\ufe0e boolean HasGoldenKey () \u2693\ufe0e boolean HasInvincibility () \u2693\ufe0e returns true when player is in an invincibility state boolean HasPlayerForm (PlayerForm Form) \u2693\ufe0e boolean HasTimedItem () \u2693\ufe0e Kept for avoiding modding issues. boolean HasTrinket (TrinketType Type) \u2693\ufe0e boolean HasWeaponType (WeaponType WeaponType) \u2693\ufe0e void InitBabySkin () \u2693\ufe0e boolean IsBlackHeart (integer Heart) \u2693\ufe0e boolean IsBoneHeart (integer heart) \u2693\ufe0e boolean IsExtraAnimationFinished () \u2693\ufe0e boolean IsFullSpriteRendering () \u2693\ufe0e boolean IsHeldItemVisible () \u2693\ufe0e boolean IsHoldingItem () \u2693\ufe0e Is Player holding up an item (card/collectible/etc) boolean IsItemQueueEmpty () \u2693\ufe0e boolean IsP2Appearing () \u2693\ufe0e boolean IsPosInSpotLight (Vector Position) \u2693\ufe0e boolean IsSubPlayer () \u2693\ufe0e This is for players that require multiple player entities, such as the Forgotten (this has nothing to do with co-players!) boolean NeedsCharge () \u2693\ufe0e void PlayExtraAnimation (string Animation) \u2693\ufe0e void QueueExtraAnimation (string Animation) \u2693\ufe0e void QueueItem (Config::Item Item, integer Charge, boolean Touched ) \u2693\ufe0e Add Collectible/Trinket after animation is finished. void RemoveBlackHeart (integer BlackHeart) \u2693\ufe0e void RemoveBlueFly () \u2693\ufe0e void RemoveBlueSpider () \u2693\ufe0e void RemoveCollectible (CollectibleType Type) \u2693\ufe0e void RemoveCostume (Config::Item Item) \u2693\ufe0e void RemoveGoldenBomb () \u2693\ufe0e void RemoveGoldenKey () \u2693\ufe0e void RemoveSkinCostume () \u2693\ufe0e void RenderBody (Vector position) \u2693\ufe0e void RenderGlow (Vector position) \u2693\ufe0e void RenderHead (Vector position) \u2693\ufe0e void RenderTop (Vector position) \u2693\ufe0e void ReplaceCostumeSprite (Config::Item Item, string SpritePath, integer SpriteId ) \u2693\ufe0e void ResetDamageCooldown () \u2693\ufe0e void ResetItemState () \u2693\ufe0e Made this public so Room transtiions can call this to prevent lock ups. void RespawnFamiliars () \u2693\ufe0e void Revive () \u2693\ufe0e revive player void SetActiveCharge (integer Charge) \u2693\ufe0e void SetCard (integer SlotId, Card Card ) \u2693\ufe0e Change the card/rune the player is holding in the given itemslot (0 or 1). void SetFullHearts () \u2693\ufe0e void SetMinDamageCooldown (integer DamageCooldown) \u2693\ufe0e void SetPill (integer SlotId, PillColor Pill ) \u2693\ufe0e Change the pill the player is holding in the given itemslot (0 or 1). void SetShootingCooldown (integer Cooldown) \u2693\ufe0e void SetTargetTrapDoor (GridEntity TrapDoor) \u2693\ufe0e void ShootRedCandle (Vector Direction) \u2693\ufe0e for ghost pepper item + poop and farts EntityLaser SpawnMawOfVoid (integer Timeout) \u2693\ufe0e void StopExtraAnimation () \u2693\ufe0e void SwapActiveItems () \u2693\ufe0e Entity ThrowBlueSpider (Vector Position, Vector Target ) \u2693\ufe0e boolean TryHoldTrinket (TrinketType Type) \u2693\ufe0e Returns true if an active item pickup cooldown is over. returns true if trinket can be added, else false void TryRemoveCollectibleCostume (CollectibleType Collectible, boolean KeepPersistent ) \u2693\ufe0e tries to remove a costume based on some filters void TryRemoveNullCostume (Config::NullItemID NullId) \u2693\ufe0e boolean TryRemoveTrinket (TrinketType Type) \u2693\ufe0e void TryRemoveTrinketCostume (TrinketType Trinket) \u2693\ufe0e tries to remove a costume based on some filters boolean TryUseKey () \u2693\ufe0e void UpdateCanShoot () \u2693\ufe0e void UseActiveItem (CollectibleType Item, boolean ShowAnim, boolean KeepActiveItem, boolean AllowNonMainPlayer, boolean ToAddCostume ) \u2693\ufe0e void UseCard (Card Card) \u2693\ufe0e void UsePill (PillEffect PillEffect, PillColor PillColor ) \u2693\ufe0e boolean WillPlayerRevive () \u2693\ufe0e BabySubType BabySkin \u2693\ufe0e P2 Skin section Used to hold the selected skin (in case of glitched baby it will pick a random one) boolean CanFly \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Can the player fly over rocks and pits? const integer ControllerIndex \u2693\ufe0e s32 GetItemStateCooldown( void ) const { return m_ItemStateCooldown; } integer ControlsCooldown \u2693\ufe0e boolean ControlsEnabled \u2693\ufe0e float Damage \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Damage Stat. How much damage do the players tears or other main weapons do? integer FireDelay \u2693\ufe0e How long until the player can spawn their next tear? const EntityDesc FriendBallEnemy \u2693\ufe0e integer HeadFrameDelay \u2693\ufe0e integer ItemHoldCooldown \u2693\ufe0e Used for avoiding player get stucked between rocks when switching a flying item with other active item. Color LaserColor \u2693\ufe0e float Luck \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Luck Stat. Better luck generally means better random events. integer MaxFireDelay \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Tears Stat. How long between each tear can spawn? float MoveSpeed \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Speed Stat. How fast can the player move? QueueItemData QueuedItem \u2693\ufe0e item queue for when the player is picking up an item. the item is in effect as soon as the animation is finished and will be removed from the queue. ActiveItemDesc SecondaryActiveItem \u2693\ufe0e float ShotSpeed \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the ShotSpeed Stat. How fast does the tear travel when spawned? Vector SpriteScale \u2693\ufe0e Color TearColor \u2693\ufe0e float TearFallingAcceleration \u2693\ufe0e float TearFallingSpeed \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. How fast is the tear moving up or down when it spawns? Affects range. integer TearFlags \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Various tear flags . Example Code This code makes Isaac's tears spectral. local mod:OnEvaluateTearFlags(player, flag) player.TearFlags = player.TearFlags | TearFlags.TEAR_SPECTRAL end mod:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, mod.OnEvaluateTearFlags, CacheFlag.CACHE_TEARFLAG) float TearHeight \u2693\ufe0e Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Range Stat * -1. How high above the ground is the tear when it spawns? Example Code This code gives Isaac a +5 range up. local mod:OnEvaluateRange(player, flag) -- we give -5 because the TearHeight stat is always negative; the lower the number - the further the tear travels player.TearHeight = player.TearHeight - 5 end mod:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, mod.OnEvaluateRange, CacheFlag.CACHE_RANGE) const Vector TearsOffset \u2693\ufe0e","title":"EntityPlayer"},{"location":"EntityPlayer/#class-entityplayer","text":"","title":"Class \"EntityPlayer\""},{"location":"EntityPlayer/#void-addblackhearts-integer-blackhearts","text":"Adds Black hearts to the player. 1 unit is half a heart. Remove them with negative numbers.","title":"void AddBlackHearts (integer BlackHearts)"},{"location":"EntityPlayer/#entity-addblueflies-integer-amount-vector-position-entity-target","text":"","title":"Entity AddBlueFlies (integer Amount, Vector Position, Entity Target )"},{"location":"EntityPlayer/#entity-addbluespider-vector-position","text":"","title":"Entity AddBlueSpider (Vector Position)"},{"location":"EntityPlayer/#void-addbombs-integer-amount","text":"Adds bombs to the player. Remove them with negative numbers.","title":"void AddBombs (integer Amount)"},{"location":"EntityPlayer/#void-addbonehearts-integer-hearts","text":"Adds bone hearts to the player. 1 unit is a single bone heart. Remove them with negative numbers.","title":"void AddBoneHearts (integer Hearts)"},{"location":"EntityPlayer/#void-addcacheflags-cacheflag-cacheflag","text":"Will reevaluate the cache flags provided in the next cache reevaluation.","title":"void AddCacheFlags (CacheFlag CacheFlag)"},{"location":"EntityPlayer/#void-addcard-card-card","text":"","title":"void AddCard (Card Card)"},{"location":"EntityPlayer/#void-addcoins-integer-amount","text":"Adds coins to the player. Remove them with negative numbers.","title":"void AddCoins (integer Amount)"},{"location":"EntityPlayer/#void-addcollectible-collectibletype-type-integer-charge-boolean-addconsumables","text":"","title":"void AddCollectible (CollectibleType Type, integer Charge, boolean AddConsumables )"},{"location":"EntityPlayer/#void-addcontrolscooldown-integer-cooldown","text":"","title":"void AddControlsCooldown (integer Cooldown)"},{"location":"EntityPlayer/#void-addcostume-configitem-item-boolean-itemstateonly","text":"","title":"void AddCostume (Config::Item Item, boolean ItemStateOnly )"},{"location":"EntityPlayer/#void-adddeadeyecharge","text":"","title":"void AddDeadEyeCharge ()"},{"location":"EntityPlayer/#void-adddollarbilleffect","text":"","title":"void AddDollarBillEffect ()"},{"location":"EntityPlayer/#void-addeternalhearts-integer-eternalhearts","text":"Adds eternal hearts to the player. 1 unit is half a heart. Remove them with negative numbers. (Note that eternal hearts automatically turn to full hearts, when you have more than one.)","title":"void AddEternalHearts (integer EternalHearts)"},{"location":"EntityPlayer/#void-addgoldenbomb","text":"","title":"void AddGoldenBomb ()"},{"location":"EntityPlayer/#void-addgoldenhearts-integer-hearts","text":"Adds golden hearts to the player. 1 unit is a single gold heart. Remove them with negative numbers.","title":"void AddGoldenHearts (integer Hearts)"},{"location":"EntityPlayer/#void-addgoldenkey","text":"","title":"void AddGoldenKey ()"},{"location":"EntityPlayer/#void-addhearts-integer-hearts","text":"Adds red hearts to the player if there are any empty heart containers. 1 unit is half a heart. Remove health with negative numbers.","title":"void AddHearts (integer Hearts)"},{"location":"EntityPlayer/#void-addjarflies-integer-flies","text":"","title":"void AddJarFlies (integer Flies)"},{"location":"EntityPlayer/#void-addjarhearts-integer-hearts","text":"","title":"void AddJarHearts (integer Hearts)"},{"location":"EntityPlayer/#void-addkeys-integer-amount","text":"Adds keys to the player. Remove them with negative numbers.","title":"void AddKeys (integer Amount)"},{"location":"EntityPlayer/#void-addmaxhearts-integer-maxhearts-boolean-ignorekeeper","text":"Adds heart containers to the player. 2 units is a full heart container. Remove them with negative numbers.","title":"void AddMaxHearts (integer MaxHearts, boolean IgnoreKeeper )"},{"location":"EntityPlayer/#void-addnullcostume-confignullitemid-nullid","text":"for Lua","title":"void AddNullCostume (Config::NullItemID NullId)"},{"location":"EntityPlayer/#void-addpill-pillcolor-pill","text":"","title":"void AddPill (PillColor Pill)"},{"location":"EntityPlayer/#void-addplayerformcostume-playerform-form","text":"","title":"void AddPlayerFormCostume (PlayerForm Form)"},{"location":"EntityPlayer/#void-addprettyfly","text":"","title":"void AddPrettyFly ()"},{"location":"EntityPlayer/#void-addsoulhearts-integer-soulhearts","text":"Adds soul hearts to the player. 1 unit is half a heart. Remove them with negative numbers.","title":"void AddSoulHearts (integer SoulHearts)"},{"location":"EntityPlayer/#void-addtrinket-trinkettype-type","text":"","title":"void AddTrinket (TrinketType Type)"},{"location":"EntityPlayer/#void-animateappear","text":"Play the animation that is normally played at the beginning of a stage.","title":"void AnimateAppear ()"},{"location":"EntityPlayer/#void-animatecard-card-card-string-animname","text":"","title":"void AnimateCard (Card Card, string AnimName )"},{"location":"EntityPlayer/#void-animatecollectible-collectibletype-collectible-string-animname-string-spriteanimname","text":"","title":"void AnimateCollectible (CollectibleType Collectible, string AnimName, string SpriteAnimName )"},{"location":"EntityPlayer/#void-animatehappy","text":"thumbs up","title":"void AnimateHappy ()"},{"location":"EntityPlayer/#void-animatelighttravel","text":"end of a stage","title":"void AnimateLightTravel ()"},{"location":"EntityPlayer/#void-animatepill-pillcolor-pill-string-animname","text":"","title":"void AnimatePill (PillColor Pill, string AnimName )"},{"location":"EntityPlayer/#void-animatepitfallin","text":"Fall into pitfall.","title":"void AnimatePitfallIn ()"},{"location":"EntityPlayer/#void-animatepitfallout","text":"Jump out of pitfall.","title":"void AnimatePitfallOut ()"},{"location":"EntityPlayer/#void-animatesad","text":"oh no!","title":"void AnimateSad ()"},{"location":"EntityPlayer/#void-animateteleport-boolean-up","text":"teleport to another room","title":"void AnimateTeleport (boolean Up)"},{"location":"EntityPlayer/#void-animatetrapdoor","text":"end of a stage","title":"void AnimateTrapdoor ()"},{"location":"EntityPlayer/#void-animatetrinket-trinkettype-trinket-string-animname-string-spriteanimname","text":"","title":"void AnimateTrinket (TrinketType Trinket, string AnimName, string SpriteAnimName )"},{"location":"EntityPlayer/#boolean-arecontrolsenabled","text":"","title":"boolean AreControlsEnabled ()"},{"location":"EntityPlayer/#boolean-areopposingshootdirectionspressed","text":"Returns the non-zero joystick direction from the most recent movement input, but goes to zero after the player comes to a stop.","title":"boolean AreOpposingShootDirectionsPressed ()"},{"location":"EntityPlayer/#boolean-canaddcollectible","text":"","title":"boolean CanAddCollectible ()"},{"location":"EntityPlayer/#boolean-canpickblackhearts","text":"returns true if player has room for more black hearts","title":"boolean CanPickBlackHearts ()"},{"location":"EntityPlayer/#boolean-canpickbonehearts","text":"returns true if player has room for more bone hearts","title":"boolean CanPickBoneHearts ()"},{"location":"EntityPlayer/#boolean-canpickgoldenhearts","text":"returns true if player has room for more golden hearts","title":"boolean CanPickGoldenHearts ()"},{"location":"EntityPlayer/#boolean-canpickredhearts","text":"","title":"boolean CanPickRedHearts ()"},{"location":"EntityPlayer/#boolean-canpicksoulhearts","text":"returns true if player has room for more soul hearts","title":"boolean CanPickSoulHearts ()"},{"location":"EntityPlayer/#boolean-canpickupitem","text":"Can Player pick up an item right now?","title":"boolean CanPickupItem ()"},{"location":"EntityPlayer/#boolean-canshoot","text":"","title":"boolean CanShoot ()"},{"location":"EntityPlayer/#boolean-canturnhead","text":"returns true if head should react to keys or false otherwise","title":"boolean CanTurnHead ()"},{"location":"EntityPlayer/#void-checkfamiliar-integer-familiarvariant-integer-targetcount-rng-rng","text":"","title":"void CheckFamiliar (integer FamiliarVariant, integer TargetCount, RNG rng )"},{"location":"EntityPlayer/#void-clearcostumes","text":"","title":"void ClearCostumes ()"},{"location":"EntityPlayer/#void-cleardeadeyecharge","text":"","title":"void ClearDeadEyeCharge ()"},{"location":"EntityPlayer/#void-cleartemporaryeffects","text":"Will be called when player exits the room.","title":"void ClearTemporaryEffects ()"},{"location":"EntityPlayer/#void-dischargeactiveitem","text":"Sets the charge of your active item to 0 without triggering the active item effect.","title":"void DischargeActiveItem ()"},{"location":"EntityPlayer/#void-donateluck-integer-luck","text":"","title":"void DonateLuck (integer Luck)"},{"location":"EntityPlayer/#void-doziteffect-vector-direction","text":"","title":"void DoZitEffect (Vector Direction)"},{"location":"EntityPlayer/#void-droppoketitem-integer-pocketnum-vector-pos","text":"Drops a held pocketitem (Card, Pill, Rune...) from the given itemslot at the given position. Possible pocketnumbers are [0, 1]","title":"void DropPoketItem (integer PocketNum, Vector Pos )"},{"location":"EntityPlayer/#void-droptrinket-vector-droppos-boolean-replacetick","text":"","title":"void DropTrinket (Vector DropPos, boolean ReplaceTick )"},{"location":"EntityPlayer/#void-evaluateitems","text":"Triggers a cache reevaluation. Will trigger the MC_EVALUATE_CACHE callback.","title":"void EvaluateItems ()"},{"location":"EntityPlayer/#entitybomb-firebomb-vector-position-vector-velocity","text":"","title":"EntityBomb FireBomb (Vector Position, Vector Velocity )"},{"location":"EntityPlayer/#entitylaser-firebrimstone-vector-direction","text":"","title":"EntityLaser FireBrimstone (Vector Direction)"},{"location":"EntityPlayer/#entitylaser-firedelayedbrimstone-float-angle-entity-parent","text":"","title":"EntityLaser FireDelayedBrimstone (float Angle, Entity Parent )"},{"location":"EntityPlayer/#entityknife-fireknife-entity-parent-float-rotationoffset-boolean-cantoverwrite-integer-subtype","text":"","title":"EntityKnife FireKnife (Entity Parent, float RotationOffset, boolean CantOverwrite, integer SubType )"},{"location":"EntityPlayer/#entitytear-firetear-vector-position-vector-velocity-boolean-canbeeye-boolean-notractorbeam-boolean-cantriggerstreakend","text":"This replaces the protected fire_tear() to allow other entities (Such as bombs) to easily shoot tears in the same manner and with all the effects the player does. (Ex. Sad Bombs)","title":"EntityTear FireTear (Vector Position, Vector Velocity, boolean CanBeEye, boolean NoTractorBeam, boolean CanTriggerStreakEnd )"},{"location":"EntityPlayer/#entitylaser-firetechlaser-vector-position-laseroffset-offsetid-vector-direction-boolean-lefteye-boolean-onehit","text":"","title":"EntityLaser FireTechLaser (Vector Position, LaserOffset OffsetID, Vector Direction, boolean LeftEye, boolean OneHit )"},{"location":"EntityPlayer/#entitylaser-firetechxlaser-vector-position-vector-direction-float-radius","text":"","title":"EntityLaser FireTechXLaser (Vector Position, Vector Direction, float Radius )"},{"location":"EntityPlayer/#boolean-flushqueueitem","text":"called after animation is finished, or on special occasions to prevent bugs","title":"boolean FlushQueueItem ()"},{"location":"EntityPlayer/#boolean-fullcharge","text":"Fully charges the active item. Returns true if the item was fully charged, false otherwise. If player has battery it will first try to fill first charge slot, then the battery slot.","title":"boolean FullCharge ()"},{"location":"EntityPlayer/#integer-getactivecharge","text":"Get the current charge of your active item.","title":"integer GetActiveCharge ()"},{"location":"EntityPlayer/#collectibletype-getactiveitem","text":"Returns the currently held item.","title":"CollectibleType GetActiveItem ()"},{"location":"EntityPlayer/#integer-getactivesubcharge","text":"Get the current items subcharge. (Useful for items that charge up over time.)","title":"integer GetActiveSubCharge ()"},{"location":"EntityPlayer/#entity-getactiveweaponentity","text":"","title":"Entity GetActiveWeaponEntity ()"},{"location":"EntityPlayer/#const-vector-getaimdirection","text":"","title":"const Vector GetAimDirection ()"},{"location":"EntityPlayer/#babysubtype-getbabyskin","text":"","title":"BabySubType GetBabySkin ()"},{"location":"EntityPlayer/#integer-getbatterycharge","text":"Get the current charge progress of the second charge of your current active item. This bar is only active, when you have the Collectible \"The Battery\"","title":"integer GetBatteryCharge ()"},{"location":"EntityPlayer/#integer-getblackhearts","text":"This does not return the # of black hearts, this returns the bit mask for which soul hearts are black hearts.","title":"integer GetBlackHearts ()"},{"location":"EntityPlayer/#integer-getbombflags","text":"","title":"integer GetBombFlags ()"},{"location":"EntityPlayer/#entitybombbombvariant-getbombvariant-integer-tearflags-boolean-forcesmallbomb","text":"Pass tear flags to add extra effects to the bomb visual like burn -> hot bombs, even if player doesn't have Hot Bombs collectible. ForceSmallBomb will override large bomb variants for TEAR_PERSISTENT.","title":"EntityBomb::BombVariant GetBombVariant (integer TearFlags, boolean ForceSmallBomb )"},{"location":"EntityPlayer/#integer-getbonehearts","text":"Returns the number of bone hearts as an integer value. 1 Boneheart = 1.","title":"integer GetBoneHearts ()"},{"location":"EntityPlayer/#card-getcard-integer-slotid","text":"Gets the ID of the card the player is holding in the given itemslot (0 or 1).","title":"Card GetCard (integer SlotId)"},{"location":"EntityPlayer/#rng-getcardrng-card-id","text":"","title":"RNG GetCardRNG (Card ID)"},{"location":"EntityPlayer/#integer-getcollectiblecount","text":"","title":"integer GetCollectibleCount ()"},{"location":"EntityPlayer/#integer-getcollectiblenum-collectibletype-type","text":"","title":"integer GetCollectibleNum (CollectibleType Type)"},{"location":"EntityPlayer/#rng-getcollectiblerng-collectibletype-id","text":"","title":"RNG GetCollectibleRNG (CollectibleType ID)"},{"location":"EntityPlayer/#vector-getcostumenullpos-string-nullframename-boolean-headscale-vector-direction","text":"","title":"Vector GetCostumeNullPos (string NullFrameName, boolean HeadScale, Vector Direction )"},{"location":"EntityPlayer/#integer-getdamagecooldown","text":"","title":"integer GetDamageCooldown ()"},{"location":"EntityPlayer/#integer-geteffectivemaxhearts","text":"Returns the amount of Red Hearts the player can contain in their Heart Containers and Bone Hearts. 1 unit is half a red heart. Example: you have 3 red heart container and one bone heart. 6(red) + 2(bone) = 8","title":"integer GetEffectiveMaxHearts ()"},{"location":"EntityPlayer/#temporaryeffects-geteffects","text":"","title":"TemporaryEffects GetEffects ()"},{"location":"EntityPlayer/#integer-geteternalhearts","text":"Returns the amount of eternal hearts the player has.","title":"integer GetEternalHearts ()"},{"location":"EntityPlayer/#integer-getextralives","text":"","title":"integer GetExtraLives ()"},{"location":"EntityPlayer/#direction-getfiredirection","text":"","title":"Direction GetFireDirection ()"},{"location":"EntityPlayer/#vector-getflyingoffset","text":"","title":"Vector GetFlyingOffset ()"},{"location":"EntityPlayer/#integer-getgoldenhearts","text":"Returns the amount of golden hearts the player has.","title":"integer GetGoldenHearts ()"},{"location":"EntityPlayer/#float-getgreeddonationbreakchance","text":"","title":"float GetGreedDonationBreakChance ()"},{"location":"EntityPlayer/#direction-getheaddirection","text":"","title":"Direction GetHeadDirection ()"},{"location":"EntityPlayer/#integer-getheartlimit","text":"","title":"integer GetHeartLimit ()"},{"location":"EntityPlayer/#integer-gethearts","text":"Returns the amount of red hearts the player has inside their heart containers and bone hearts. 1 unit is half a heart.","title":"integer GetHearts ()"},{"location":"EntityPlayer/#collectibletype-getitemstate","text":"","title":"CollectibleType GetItemState ()"},{"location":"EntityPlayer/#integer-getjarflies","text":"","title":"integer GetJarFlies ()"},{"location":"EntityPlayer/#integer-getjarhearts","text":"","title":"integer GetJarHearts ()"},{"location":"EntityPlayer/#vector-getlaseroffset-laseroffset-id-vector-direction","text":"","title":"Vector GetLaserOffset (LaserOffset ID, Vector Direction )"},{"location":"EntityPlayer/#integer-getlastactiontriggers","text":"","title":"integer GetLastActionTriggers ()"},{"location":"EntityPlayer/#integer-getlastdamageflags","text":"","title":"integer GetLastDamageFlags ()"},{"location":"EntityPlayer/#const-entityref-getlastdamagesource","text":"","title":"const EntityRef GetLastDamageSource ()"},{"location":"EntityPlayer/#const-vector-getlastdirection","text":"","title":"const Vector GetLastDirection ()"},{"location":"EntityPlayer/#integer-getmaxhearts","text":"Returns the amount of Heart Containers the player has. 1 unit is half a heart container.","title":"integer GetMaxHearts ()"},{"location":"EntityPlayer/#integer-getmaxpoketitems","text":"Get the number of Pickup items you can carry. (1 on default. 2 with belly button or similar)","title":"integer GetMaxPoketItems ()"},{"location":"EntityPlayer/#integer-getmaxtrinkets","text":"Get the number of trinkets you can carry. (1 on default. 2 with moms purse or similar)","title":"integer GetMaxTrinkets ()"},{"location":"EntityPlayer/#direction-getmovementdirection","text":"","title":"Direction GetMovementDirection ()"},{"location":"EntityPlayer/#vector-getmovementinput","text":"","title":"Vector GetMovementInput ()"},{"location":"EntityPlayer/#vector-getmovementjoystick","text":"","title":"Vector GetMovementJoystick ()"},{"location":"EntityPlayer/#const-vector-getmovementvector","text":"","title":"const Vector GetMovementVector ()"},{"location":"EntityPlayer/#multishotparams-getmultishotparams","text":"","title":"MultiShotParams GetMultiShotParams ()"},{"location":"EntityPlayer/#posvel-getmultishotpositionvelocity-integer-loopindex-weapontype-weapon-vector-shotdirection-float-shotspeed-multishotparams-params","text":"Call this function in a loop with values from 0 to MultiShotParams.NumProjectiles-1 (inclusive)","title":"PosVel GetMultiShotPositionVelocity (integer LoopIndex, WeaponType Weapon, Vector ShotDirection, float ShotSpeed, MultiShotParams params )"},{"location":"EntityPlayer/#string-getname","text":"Returns the name of the player. (Isaac, Cain, Azazel,...)","title":"string GetName ()"},{"location":"EntityPlayer/#entity-getnpctarget","text":"normally returns the player itself. Can redirect enemy attacks to a different entity such as Best Friend","title":"Entity GetNPCTarget ()"},{"location":"EntityPlayer/#integer-getnumblueflies","text":"","title":"integer GetNumBlueFlies ()"},{"location":"EntityPlayer/#integer-getnumbluespiders","text":"","title":"integer GetNumBlueSpiders ()"},{"location":"EntityPlayer/#integer-getnumbombs","text":"","title":"integer GetNumBombs ()"},{"location":"EntityPlayer/#integer-getnumcoins","text":"","title":"integer GetNumCoins ()"},{"location":"EntityPlayer/#integer-getnumkeys","text":"","title":"integer GetNumKeys ()"},{"location":"EntityPlayer/#pillcolor-getpill-integer-slotid","text":"Gets the ID of the pill the player is holding in the given itemslot (0 or 1).","title":"PillColor GetPill (integer SlotId)"},{"location":"EntityPlayer/#rng-getpillrng-pilleffect-id","text":"","title":"RNG GetPillRNG (PillEffect ID)"},{"location":"EntityPlayer/#playertype-getplayertype","text":"","title":"PlayerType GetPlayerType ()"},{"location":"EntityPlayer/#const-playerpocketitem-getpocketitem-integer-slotid","text":"Get the userdata of the pocketitem (Card,Pill,rune) in a said slot.","title":"const PlayerPocketItem GetPocketItem (integer SlotId)"},{"location":"EntityPlayer/#const-vector-getrecentmovementvector","text":"Returns the joystick direction that drives player movement, taking into account certain modifiers like disabled controls and seed effects.","title":"const Vector GetRecentMovementVector ()"},{"location":"EntityPlayer/#vector-getshootinginput","text":"","title":"Vector GetShootingInput ()"},{"location":"EntityPlayer/#vector-getshootingjoystick","text":"","title":"Vector GetShootingJoystick ()"},{"location":"EntityPlayer/#float-getsmoothbodyrotation","text":"","title":"float GetSmoothBodyRotation ()"},{"location":"EntityPlayer/#integer-getsoulhearts","text":"Returns the amount of Soul Hearts the player has. 1 unit is half a heart.","title":"integer GetSoulHearts ()"},{"location":"EntityPlayer/#entityplayer-getsubplayer","text":"","title":"EntityPlayer GetSubPlayer ()"},{"location":"EntityPlayer/#tearparams-gettearhitparams-weapontype-weapontype-float-damagescale-integer-teardisplacement","text":"Used for tear parameters that are calculated on hit (ex: Tough love, Common cold), DamageScale is used for scale calculation based on damage","title":"TearParams GetTearHitParams (WeaponType WeaponType, float DamageScale, integer TearDisplacement )"},{"location":"EntityPlayer/#vector-gettearmovementinheritance-vector-shotdirection","text":"","title":"Vector GetTearMovementInheritance (Vector ShotDirection)"},{"location":"EntityPlayer/#float-gettearpoisondamage","text":"","title":"float GetTearPoisonDamage ()"},{"location":"EntityPlayer/#integer-gettearrangemodifier","text":"","title":"integer GetTearRangeModifier ()"},{"location":"EntityPlayer/#integer-gettotaldamagetaken","text":"","title":"integer GetTotalDamageTaken ()"},{"location":"EntityPlayer/#entity-gettractorbeam","text":"","title":"Entity GetTractorBeam ()"},{"location":"EntityPlayer/#trinkettype-gettrinket-integer-trinketindex","text":"Gets the ID of the trinket the player is holding in the given trinketslot (0 or 1).","title":"TrinketType GetTrinket (integer TrinketIndex)"},{"location":"EntityPlayer/#integer-gettrinketmultiplier","text":"","title":"integer GetTrinketMultiplier ()"},{"location":"EntityPlayer/#rng-gettrinketrng-trinkettype-id","text":"","title":"RNG GetTrinketRNG (TrinketType ID)"},{"location":"EntityPlayer/#const-vector-getvelocitybeforeupdate","text":"","title":"const Vector GetVelocityBeforeUpdate ()"},{"location":"EntityPlayer/#collectibletype-getzodiaceffect","text":"","title":"CollectibleType GetZodiacEffect ()"},{"location":"EntityPlayer/#boolean-hascollectible-collectibletype-type","text":"","title":"boolean HasCollectible (CollectibleType Type)"},{"location":"EntityPlayer/#boolean-hasfullhearts","text":"","title":"boolean HasFullHearts ()"},{"location":"EntityPlayer/#boolean-hasfullheartsandsoulhearts","text":"","title":"boolean HasFullHeartsAndSoulHearts ()"},{"location":"EntityPlayer/#boolean-hasgoldenbomb","text":"","title":"boolean HasGoldenBomb ()"},{"location":"EntityPlayer/#boolean-hasgoldenkey","text":"","title":"boolean HasGoldenKey ()"},{"location":"EntityPlayer/#boolean-hasinvincibility","text":"returns true when player is in an invincibility state","title":"boolean HasInvincibility ()"},{"location":"EntityPlayer/#boolean-hasplayerform-playerform-form","text":"","title":"boolean HasPlayerForm (PlayerForm Form)"},{"location":"EntityPlayer/#boolean-hastimeditem","text":"Kept for avoiding modding issues.","title":"boolean HasTimedItem ()"},{"location":"EntityPlayer/#boolean-hastrinket-trinkettype-type","text":"","title":"boolean HasTrinket (TrinketType Type)"},{"location":"EntityPlayer/#boolean-hasweapontype-weapontype-weapontype","text":"","title":"boolean HasWeaponType (WeaponType WeaponType)"},{"location":"EntityPlayer/#void-initbabyskin","text":"","title":"void InitBabySkin ()"},{"location":"EntityPlayer/#boolean-isblackheart-integer-heart","text":"","title":"boolean IsBlackHeart (integer Heart)"},{"location":"EntityPlayer/#boolean-isboneheart-integer-heart","text":"","title":"boolean IsBoneHeart (integer heart)"},{"location":"EntityPlayer/#boolean-isextraanimationfinished","text":"","title":"boolean IsExtraAnimationFinished ()"},{"location":"EntityPlayer/#boolean-isfullspriterendering","text":"","title":"boolean IsFullSpriteRendering ()"},{"location":"EntityPlayer/#boolean-ishelditemvisible","text":"","title":"boolean IsHeldItemVisible ()"},{"location":"EntityPlayer/#boolean-isholdingitem","text":"Is Player holding up an item (card/collectible/etc)","title":"boolean IsHoldingItem ()"},{"location":"EntityPlayer/#boolean-isitemqueueempty","text":"","title":"boolean IsItemQueueEmpty ()"},{"location":"EntityPlayer/#boolean-isp2appearing","text":"","title":"boolean IsP2Appearing ()"},{"location":"EntityPlayer/#boolean-isposinspotlight-vector-position","text":"","title":"boolean IsPosInSpotLight (Vector Position)"},{"location":"EntityPlayer/#boolean-issubplayer","text":"This is for players that require multiple player entities, such as the Forgotten (this has nothing to do with co-players!)","title":"boolean IsSubPlayer ()"},{"location":"EntityPlayer/#boolean-needscharge","text":"","title":"boolean NeedsCharge ()"},{"location":"EntityPlayer/#void-playextraanimation-string-animation","text":"","title":"void PlayExtraAnimation (string Animation)"},{"location":"EntityPlayer/#void-queueextraanimation-string-animation","text":"","title":"void QueueExtraAnimation (string Animation)"},{"location":"EntityPlayer/#void-queueitem-configitem-item-integer-charge-boolean-touched","text":"Add Collectible/Trinket after animation is finished.","title":"void QueueItem (Config::Item Item, integer Charge, boolean Touched )"},{"location":"EntityPlayer/#void-removeblackheart-integer-blackheart","text":"","title":"void RemoveBlackHeart (integer BlackHeart)"},{"location":"EntityPlayer/#void-removebluefly","text":"","title":"void RemoveBlueFly ()"},{"location":"EntityPlayer/#void-removebluespider","text":"","title":"void RemoveBlueSpider ()"},{"location":"EntityPlayer/#void-removecollectible-collectibletype-type","text":"","title":"void RemoveCollectible (CollectibleType Type)"},{"location":"EntityPlayer/#void-removecostume-configitem-item","text":"","title":"void RemoveCostume (Config::Item Item)"},{"location":"EntityPlayer/#void-removegoldenbomb","text":"","title":"void RemoveGoldenBomb ()"},{"location":"EntityPlayer/#void-removegoldenkey","text":"","title":"void RemoveGoldenKey ()"},{"location":"EntityPlayer/#void-removeskincostume","text":"","title":"void RemoveSkinCostume ()"},{"location":"EntityPlayer/#void-renderbody-vector-position","text":"","title":"void RenderBody (Vector position)"},{"location":"EntityPlayer/#void-renderglow-vector-position","text":"","title":"void RenderGlow (Vector position)"},{"location":"EntityPlayer/#void-renderhead-vector-position","text":"","title":"void RenderHead (Vector position)"},{"location":"EntityPlayer/#void-rendertop-vector-position","text":"","title":"void RenderTop (Vector position)"},{"location":"EntityPlayer/#void-replacecostumesprite-configitem-item-string-spritepath-integer-spriteid","text":"","title":"void ReplaceCostumeSprite (Config::Item Item, string SpritePath, integer SpriteId )"},{"location":"EntityPlayer/#void-resetdamagecooldown","text":"","title":"void ResetDamageCooldown ()"},{"location":"EntityPlayer/#void-resetitemstate","text":"Made this public so Room transtiions can call this to prevent lock ups.","title":"void ResetItemState ()"},{"location":"EntityPlayer/#void-respawnfamiliars","text":"","title":"void RespawnFamiliars ()"},{"location":"EntityPlayer/#void-revive","text":"revive player","title":"void Revive ()"},{"location":"EntityPlayer/#void-setactivecharge-integer-charge","text":"","title":"void SetActiveCharge (integer Charge)"},{"location":"EntityPlayer/#void-setcard-integer-slotid-card-card","text":"Change the card/rune the player is holding in the given itemslot (0 or 1).","title":"void SetCard (integer SlotId, Card Card )"},{"location":"EntityPlayer/#void-setfullhearts","text":"","title":"void SetFullHearts ()"},{"location":"EntityPlayer/#void-setmindamagecooldown-integer-damagecooldown","text":"","title":"void SetMinDamageCooldown (integer DamageCooldown)"},{"location":"EntityPlayer/#void-setpill-integer-slotid-pillcolor-pill","text":"Change the pill the player is holding in the given itemslot (0 or 1).","title":"void SetPill (integer SlotId, PillColor Pill )"},{"location":"EntityPlayer/#void-setshootingcooldown-integer-cooldown","text":"","title":"void SetShootingCooldown (integer Cooldown)"},{"location":"EntityPlayer/#void-settargettrapdoor-gridentity-trapdoor","text":"","title":"void SetTargetTrapDoor (GridEntity TrapDoor)"},{"location":"EntityPlayer/#void-shootredcandle-vector-direction","text":"for ghost pepper item + poop and farts","title":"void ShootRedCandle (Vector Direction)"},{"location":"EntityPlayer/#entitylaser-spawnmawofvoid-integer-timeout","text":"","title":"EntityLaser SpawnMawOfVoid (integer Timeout)"},{"location":"EntityPlayer/#void-stopextraanimation","text":"","title":"void StopExtraAnimation ()"},{"location":"EntityPlayer/#void-swapactiveitems","text":"","title":"void SwapActiveItems ()"},{"location":"EntityPlayer/#entity-throwbluespider-vector-position-vector-target","text":"","title":"Entity ThrowBlueSpider (Vector Position, Vector Target )"},{"location":"EntityPlayer/#boolean-tryholdtrinket-trinkettype-type","text":"Returns true if an active item pickup cooldown is over. returns true if trinket can be added, else false","title":"boolean TryHoldTrinket (TrinketType Type)"},{"location":"EntityPlayer/#void-tryremovecollectiblecostume-collectibletype-collectible-boolean-keeppersistent","text":"tries to remove a costume based on some filters","title":"void TryRemoveCollectibleCostume (CollectibleType Collectible, boolean KeepPersistent )"},{"location":"EntityPlayer/#void-tryremovenullcostume-confignullitemid-nullid","text":"","title":"void TryRemoveNullCostume (Config::NullItemID NullId)"},{"location":"EntityPlayer/#boolean-tryremovetrinket-trinkettype-type","text":"","title":"boolean TryRemoveTrinket (TrinketType Type)"},{"location":"EntityPlayer/#void-tryremovetrinketcostume-trinkettype-trinket","text":"tries to remove a costume based on some filters","title":"void TryRemoveTrinketCostume (TrinketType Trinket)"},{"location":"EntityPlayer/#boolean-tryusekey","text":"","title":"boolean TryUseKey ()"},{"location":"EntityPlayer/#void-updatecanshoot","text":"","title":"void UpdateCanShoot ()"},{"location":"EntityPlayer/#void-useactiveitem-collectibletype-item-boolean-showanim-boolean-keepactiveitem-boolean-allownonmainplayer-boolean-toaddcostume","text":"","title":"void UseActiveItem (CollectibleType Item, boolean ShowAnim, boolean KeepActiveItem, boolean AllowNonMainPlayer, boolean ToAddCostume )"},{"location":"EntityPlayer/#void-usecard-card-card","text":"","title":"void UseCard (Card Card)"},{"location":"EntityPlayer/#void-usepill-pilleffect-pilleffect-pillcolor-pillcolor","text":"","title":"void UsePill (PillEffect PillEffect, PillColor PillColor )"},{"location":"EntityPlayer/#boolean-willplayerrevive","text":"","title":"boolean WillPlayerRevive ()"},{"location":"EntityPlayer/#babysubtype-babyskin","text":"P2 Skin section Used to hold the selected skin (in case of glitched baby it will pick a random one)","title":"BabySubType BabySkin"},{"location":"EntityPlayer/#boolean-canfly","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Can the player fly over rocks and pits?","title":"boolean CanFly"},{"location":"EntityPlayer/#const-integer-controllerindex","text":"s32 GetItemStateCooldown( void ) const { return m_ItemStateCooldown; }","title":"const integer ControllerIndex"},{"location":"EntityPlayer/#integer-controlscooldown","text":"","title":"integer ControlsCooldown"},{"location":"EntityPlayer/#boolean-controlsenabled","text":"","title":"boolean ControlsEnabled"},{"location":"EntityPlayer/#float-damage","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Damage Stat. How much damage do the players tears or other main weapons do?","title":"float Damage"},{"location":"EntityPlayer/#integer-firedelay","text":"How long until the player can spawn their next tear?","title":"integer FireDelay"},{"location":"EntityPlayer/#const-entitydesc-friendballenemy","text":"","title":"const EntityDesc FriendBallEnemy"},{"location":"EntityPlayer/#integer-headframedelay","text":"","title":"integer HeadFrameDelay"},{"location":"EntityPlayer/#integer-itemholdcooldown","text":"Used for avoiding player get stucked between rocks when switching a flying item with other active item.","title":"integer ItemHoldCooldown"},{"location":"EntityPlayer/#color-lasercolor","text":"","title":"Color LaserColor"},{"location":"EntityPlayer/#float-luck","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Luck Stat. Better luck generally means better random events.","title":"float Luck"},{"location":"EntityPlayer/#integer-maxfiredelay","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Tears Stat. How long between each tear can spawn?","title":"integer MaxFireDelay"},{"location":"EntityPlayer/#float-movespeed","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Speed Stat. How fast can the player move?","title":"float MoveSpeed"},{"location":"EntityPlayer/#queueitemdata-queueditem","text":"item queue for when the player is picking up an item. the item is in effect as soon as the animation is finished and will be removed from the queue.","title":"QueueItemData QueuedItem"},{"location":"EntityPlayer/#activeitemdesc-secondaryactiveitem","text":"","title":"ActiveItemDesc SecondaryActiveItem"},{"location":"EntityPlayer/#float-shotspeed","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the ShotSpeed Stat. How fast does the tear travel when spawned?","title":"float ShotSpeed"},{"location":"EntityPlayer/#vector-spritescale","text":"","title":"Vector SpriteScale"},{"location":"EntityPlayer/#color-tearcolor","text":"","title":"Color TearColor"},{"location":"EntityPlayer/#float-tearfallingacceleration","text":"","title":"float TearFallingAcceleration"},{"location":"EntityPlayer/#float-tearfallingspeed","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. How fast is the tear moving up or down when it spawns? Affects range.","title":"float TearFallingSpeed"},{"location":"EntityPlayer/#integer-tearflags","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Various tear flags .","title":"integer TearFlags"},{"location":"EntityPlayer/#float-tearheight","text":"Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Range Stat * -1. How high above the ground is the tear when it spawns?","title":"float TearHeight"},{"location":"EntityPlayer/#const-vector-tearsoffset","text":"","title":"const Vector TearsOffset"},{"location":"EntityProjectile/","text":"Class \"EntityProjectile\" \u2693\ufe0e void AddChangeFlags (integer Flags) \u2693\ufe0e See ChangeFlags . void AddFallingAccel (float Value) \u2693\ufe0e void AddFallingSpeed (float Value) \u2693\ufe0e void AddHeight (float Value) \u2693\ufe0e void AddProjectileFlags (integer Flags) \u2693\ufe0e Uses ProjectileFlags to define the projectile attributes. void AddScale (float Value) \u2693\ufe0e float Acceleration \u2693\ufe0e integer ChangeFlags \u2693\ufe0e Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() integer ChangeTimeout \u2693\ufe0e Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() float ChangeVelocity \u2693\ufe0e Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() float CurvingStrength \u2693\ufe0e float Damage \u2693\ufe0e float DepthOffset \u2693\ufe0e float FallingAccel \u2693\ufe0e float FallingSpeed \u2693\ufe0e float Height \u2693\ufe0e Defines the height of a projectile. Height should be a negative value. Default is -23 . float HomingStrength \u2693\ufe0e integer ProjectileFlags \u2693\ufe0e Uses ProjectileFlags to define the projectile attributes. float Scale \u2693\ufe0e integer WiggleFrameOffset \u2693\ufe0e","title":"EntityProjectile"},{"location":"EntityProjectile/#class-entityprojectile","text":"","title":"Class \"EntityProjectile\""},{"location":"EntityProjectile/#void-addchangeflags-integer-flags","text":"See ChangeFlags .","title":"void AddChangeFlags (integer Flags)"},{"location":"EntityProjectile/#void-addfallingaccel-float-value","text":"","title":"void AddFallingAccel (float Value)"},{"location":"EntityProjectile/#void-addfallingspeed-float-value","text":"","title":"void AddFallingSpeed (float Value)"},{"location":"EntityProjectile/#void-addheight-float-value","text":"","title":"void AddHeight (float Value)"},{"location":"EntityProjectile/#void-addprojectileflags-integer-flags","text":"Uses ProjectileFlags to define the projectile attributes.","title":"void AddProjectileFlags (integer Flags)"},{"location":"EntityProjectile/#void-addscale-float-value","text":"","title":"void AddScale (float Value)"},{"location":"EntityProjectile/#float-acceleration","text":"","title":"float Acceleration"},{"location":"EntityProjectile/#integer-changeflags","text":"Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams()","title":"integer ChangeFlags"},{"location":"EntityProjectile/#integer-changetimeout","text":"Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams()","title":"integer ChangeTimeout"},{"location":"EntityProjectile/#float-changevelocity","text":"Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams()","title":"float ChangeVelocity"},{"location":"EntityProjectile/#float-curvingstrength","text":"","title":"float CurvingStrength"},{"location":"EntityProjectile/#float-damage","text":"","title":"float Damage"},{"location":"EntityProjectile/#float-depthoffset","text":"","title":"float DepthOffset"},{"location":"EntityProjectile/#float-fallingaccel","text":"","title":"float FallingAccel"},{"location":"EntityProjectile/#float-fallingspeed","text":"","title":"float FallingSpeed"},{"location":"EntityProjectile/#float-height","text":"Defines the height of a projectile. Height should be a negative value. Default is -23 .","title":"float Height"},{"location":"EntityProjectile/#float-homingstrength","text":"","title":"float HomingStrength"},{"location":"EntityProjectile/#integer-projectileflags","text":"Uses ProjectileFlags to define the projectile attributes.","title":"integer ProjectileFlags"},{"location":"EntityProjectile/#float-scale","text":"","title":"float Scale"},{"location":"EntityProjectile/#integer-wiggleframeoffset","text":"","title":"integer WiggleFrameOffset"},{"location":"EntityPtr/","text":"Class \"EntityPtr\" \u2693\ufe0e void EntityPtr (Entity ) \u2693\ufe0e void SetReference (Entity ref) \u2693\ufe0e const Entity Ref \u2693\ufe0e","title":"EntityPtr"},{"location":"EntityPtr/#class-entityptr","text":"","title":"Class \"EntityPtr\""},{"location":"EntityPtr/#void-entityptr-entity","text":"","title":"void EntityPtr (Entity )"},{"location":"EntityPtr/#void-setreference-entity-ref","text":"","title":"void SetReference (Entity ref)"},{"location":"EntityPtr/#const-entity-ref","text":"","title":"const Entity Ref"},{"location":"EntityRef/","text":"Class \"EntityRef\" \u2693\ufe0e void EntityRef (Entity ) \u2693\ufe0e Entity Entity \u2693\ufe0e optional boolean IsCharmed \u2693\ufe0e boolean IsFriendly \u2693\ufe0e Vector Position \u2693\ufe0e EntityType SpawnerType \u2693\ufe0e integer SpawnerVariant \u2693\ufe0e EntityType Type \u2693\ufe0e integer Variant \u2693\ufe0e","title":"EntityRef"},{"location":"EntityRef/#class-entityref","text":"","title":"Class \"EntityRef\""},{"location":"EntityRef/#void-entityref-entity","text":"","title":"void EntityRef (Entity )"},{"location":"EntityRef/#entity-entity","text":"optional","title":"Entity Entity"},{"location":"EntityRef/#boolean-ischarmed","text":"","title":"boolean IsCharmed"},{"location":"EntityRef/#boolean-isfriendly","text":"","title":"boolean IsFriendly"},{"location":"EntityRef/#vector-position","text":"","title":"Vector Position"},{"location":"EntityRef/#entitytype-spawnertype","text":"","title":"EntityType SpawnerType"},{"location":"EntityRef/#integer-spawnervariant","text":"","title":"integer SpawnerVariant"},{"location":"EntityRef/#entitytype-type","text":"","title":"EntityType Type"},{"location":"EntityRef/#integer-variant","text":"","title":"integer Variant"},{"location":"EntityTear/","text":"Class \"EntityTear\" \u2693\ufe0e void ChangeVariant (integer NewVariant) \u2693\ufe0e void ResetSpriteScale () \u2693\ufe0e Resets the tear sprite animation depending on scale. void SetDeadEyeIntensity (float Intensity) \u2693\ufe0e void SetKnockbackMultiplier (float Multiplier) \u2693\ufe0e void SetParentOffset (Vector Offset) \u2693\ufe0e void SetWaitFrames (integer Value) \u2693\ufe0e const float BaseDamage \u2693\ufe0e const float BaseScale \u2693\ufe0e boolean Bounced \u2693\ufe0e true if tear bounced of something boolean CanTriggerStreakEnd \u2693\ufe0e For Onan's strak and Dead Eye. Vector ContinueVelocity \u2693\ufe0e float FallingAcceleration \u2693\ufe0e float FallingSpeed \u2693\ufe0e float Height \u2693\ufe0e float HomingFriction \u2693\ufe0e float KnockbackMultiplier \u2693\ufe0e Vector ParentOffset \u2693\ufe0e Used for Position adjustment (vs PositionOffset which is a render offset) const const Vector PosDisplacement \u2693\ufe0e float Rotation \u2693\ufe0e float Scale \u2693\ufe0e Vector StickDiff \u2693\ufe0e Entity StickTarget \u2693\ufe0e integer StickTimer \u2693\ufe0e integer TearFlags \u2693\ufe0e const integer TearIndex \u2693\ufe0e integer WaitFrames \u2693\ufe0e","title":"EntityTear"},{"location":"EntityTear/#class-entitytear","text":"","title":"Class \"EntityTear\""},{"location":"EntityTear/#void-changevariant-integer-newvariant","text":"","title":"void ChangeVariant (integer NewVariant)"},{"location":"EntityTear/#void-resetspritescale","text":"Resets the tear sprite animation depending on scale.","title":"void ResetSpriteScale ()"},{"location":"EntityTear/#void-setdeadeyeintensity-float-intensity","text":"","title":"void SetDeadEyeIntensity (float Intensity)"},{"location":"EntityTear/#void-setknockbackmultiplier-float-multiplier","text":"","title":"void SetKnockbackMultiplier (float Multiplier)"},{"location":"EntityTear/#void-setparentoffset-vector-offset","text":"","title":"void SetParentOffset (Vector Offset)"},{"location":"EntityTear/#void-setwaitframes-integer-value","text":"","title":"void SetWaitFrames (integer Value)"},{"location":"EntityTear/#const-float-basedamage","text":"","title":"const float BaseDamage"},{"location":"EntityTear/#const-float-basescale","text":"","title":"const float BaseScale"},{"location":"EntityTear/#boolean-bounced","text":"true if tear bounced of something","title":"boolean Bounced"},{"location":"EntityTear/#boolean-cantriggerstreakend","text":"For Onan's strak and Dead Eye.","title":"boolean CanTriggerStreakEnd"},{"location":"EntityTear/#vector-continuevelocity","text":"","title":"Vector ContinueVelocity"},{"location":"EntityTear/#float-fallingacceleration","text":"","title":"float FallingAcceleration"},{"location":"EntityTear/#float-fallingspeed","text":"","title":"float FallingSpeed"},{"location":"EntityTear/#float-height","text":"","title":"float Height"},{"location":"EntityTear/#float-homingfriction","text":"","title":"float HomingFriction"},{"location":"EntityTear/#float-knockbackmultiplier","text":"","title":"float KnockbackMultiplier"},{"location":"EntityTear/#vector-parentoffset","text":"Used for Position adjustment (vs PositionOffset which is a render offset)","title":"Vector ParentOffset"},{"location":"EntityTear/#const-const-vector-posdisplacement","text":"","title":"const const Vector PosDisplacement"},{"location":"EntityTear/#float-rotation","text":"","title":"float Rotation"},{"location":"EntityTear/#float-scale","text":"","title":"float Scale"},{"location":"EntityTear/#vector-stickdiff","text":"","title":"Vector StickDiff"},{"location":"EntityTear/#entity-sticktarget","text":"","title":"Entity StickTarget"},{"location":"EntityTear/#integer-sticktimer","text":"","title":"integer StickTimer"},{"location":"EntityTear/#integer-tearflags","text":"","title":"integer TearFlags"},{"location":"EntityTear/#const-integer-tearindex","text":"","title":"const integer TearIndex"},{"location":"EntityTear/#integer-waitframes","text":"","title":"integer WaitFrames"},{"location":"Font/","text":"Class \"Font\" \u2693\ufe0e void Font (void ) \u2693\ufe0e Constructor for the \"Font\" class. Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawString(\"Hello World!\",60,50,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y void DrawString (string String, float PositionX, float PositionY, KColor RenderColor, unsigned int BoxWidth, boolean Center ) \u2693\ufe0e Draws a string of text to the screen Converts UTF8 to UTF16, then draws the string. Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawString(\"Hello World!\",60,50,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y void DrawStringScaled (string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, unsigned int BoxWidth, boolean Center ) \u2693\ufe0e Draws a scaled string of text on the screen. Converts UTF8 to UTF16, then draws the string. Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawStringScaled(\"Hello World!\",60,50,0.5,0.5,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y void DrawStringScaledUTF8 (string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, unsigned int BoxWidth, boolean Center ) \u2693\ufe0e Draws a scaled string of Unicode text on the screen. Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawStringScaledUTF8(\"Hello World!\",60,50,0.5,0.5,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y void DrawStringUTF8 (string String, float PositionX, float PositionY, KColor RenderColor, unsigned int BoxWidth, boolean Center ) \u2693\ufe0e Draws a string of Unicode text to the screen Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawStringUTF8(\"Hello World!\",60,50,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y unsigned int GetBaselineHeight () \u2693\ufe0e Get the number of pixels from the absolute top of the line to the base of the characters unsigned int GetCharacterWidth (char Character) \u2693\ufe0e Returns the width of a specific character unsigned int GetLineHeight () \u2693\ufe0e Get the distance in pixels between each line of text unsigned int GetStringWidth (string String) \u2693\ufe0e Converts UTF8 to UTF16 and returns string width unsigned int GetStringWidthUTF8 (string String) \u2693\ufe0e returns string width of a Unicode text. boolean IsLoaded () \u2693\ufe0e Returns whether a font is loaded or not. boolean Load (string FilePath) \u2693\ufe0e Loads a font. Example Code Example usage. local f = Font() -- init font object f:Load(\"font/terminus.fnt\") -- load a font into the font object f:DrawString(\"Hello World!\",60,50,KColor(1,1,1,1,0,0,0),0,true) -- render string with loaded font on position 60x50y void SetMissingCharacter (u16 MissingCharacter) \u2693\ufe0e Converts UTF8 to UTF16, then draws Sets the missing character to be used by the font (the character used when missing characters are encountered) void Unload () \u2693\ufe0e Unloads all our data from memory","title":"Font"},{"location":"Font/#class-font","text":"","title":"Class \"Font\""},{"location":"Font/#void-font-void","text":"Constructor for the \"Font\" class.","title":"void Font (void )"},{"location":"Font/#void-drawstring-string-string-float-positionx-float-positiony-kcolor-rendercolor-unsigned-int-boxwidth-boolean-center","text":"Draws a string of text to the screen Converts UTF8 to UTF16, then draws the string. Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size","title":"void DrawString (string String, float PositionX, float PositionY, KColor RenderColor, unsigned int BoxWidth, boolean Center )"},{"location":"Font/#void-drawstringscaled-string-string-float-positionx-float-positiony-float-scalex-float-scaley-kcolor-rendercolor-unsigned-int-boxwidth-boolean-center","text":"Draws a scaled string of text on the screen. Converts UTF8 to UTF16, then draws the string.","title":"void DrawStringScaled (string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, unsigned int BoxWidth, boolean Center )"},{"location":"Font/#void-drawstringscaledutf8-string-string-float-positionx-float-positiony-float-scalex-float-scaley-kcolor-rendercolor-unsigned-int-boxwidth-boolean-center","text":"Draws a scaled string of Unicode text on the screen.","title":"void DrawStringScaledUTF8 (string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, unsigned int BoxWidth, boolean Center )"},{"location":"Font/#void-drawstringutf8-string-string-float-positionx-float-positiony-kcolor-rendercolor-unsigned-int-boxwidth-boolean-center","text":"Draws a string of Unicode text to the screen Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size","title":"void DrawStringUTF8 (string String, float PositionX, float PositionY, KColor RenderColor, unsigned int BoxWidth, boolean Center )"},{"location":"Font/#unsigned-int-getbaselineheight","text":"Get the number of pixels from the absolute top of the line to the base of the characters","title":"unsigned int GetBaselineHeight ()"},{"location":"Font/#unsigned-int-getcharacterwidth-char-character","text":"Returns the width of a specific character","title":"unsigned int GetCharacterWidth (char Character)"},{"location":"Font/#unsigned-int-getlineheight","text":"Get the distance in pixels between each line of text","title":"unsigned int GetLineHeight ()"},{"location":"Font/#unsigned-int-getstringwidth-string-string","text":"Converts UTF8 to UTF16 and returns string width","title":"unsigned int GetStringWidth (string String)"},{"location":"Font/#unsigned-int-getstringwidthutf8-string-string","text":"returns string width of a Unicode text.","title":"unsigned int GetStringWidthUTF8 (string String)"},{"location":"Font/#boolean-isloaded","text":"Returns whether a font is loaded or not.","title":"boolean IsLoaded ()"},{"location":"Font/#boolean-load-string-filepath","text":"Loads a font.","title":"boolean Load (string FilePath)"},{"location":"Font/#void-setmissingcharacter-u16-missingcharacter","text":"Converts UTF8 to UTF16, then draws Sets the missing character to be used by the font (the character used when missing characters are encountered)","title":"void SetMissingCharacter (u16 MissingCharacter)"},{"location":"Font/#void-unload","text":"Unloads all our data from memory","title":"void Unload ()"},{"location":"Functions/","text":"Class \"Functions\" \u2693\ufe0e Game Game () \u2693\ufe0e Returns a Game object. Example Code Example usage: Game():IsPaused() --returns true if the game is paused MusicManager MusicManager () \u2693\ufe0e Returns a MusicManager object. Example Code Example usage: MusicManager():Disable() integer Random () \u2693\ufe0e Returns a random integer. (0 to 2^32) Vector RandomVector () \u2693\ufe0e Returns a random vector with length 1. Multiply this vector by a number for larger random vectors. SFXManager SFXManager () \u2693\ufe0e Returns a SFXManager object. Example Code Example usage: SFXManager():Stop(SoundEffect.SOUND_1UP) integer GetPtrHash (Objectobject) \u2693\ufe0e Returns a hash-value of the pointer given as an input value. Valid inputs are any Isaac object, including Entity , Room , RNG , Sprite , Game etc. It can be used to easily compare two entities, making equality checks very easy. Example: If you spawn a certain entity, save it in a variable and then compare it to the entity parameter in MC_ENTITY_TAKE_DMG , this comparison will never be true even if both variables refer to the exact same entity in the game. GetPtrHash() turns pointer into a fixed number, which makes comparisons easier. Example Code Example on check if two entities saved in different variables are the same. -- don't do it like this if entity1 == entity2 then -- this will always be false, because two different references on a pointer are not equal end -- use GetPtrHash() to compare them if GetPtrHash(entity1) == GetPtrHash(entity2) then -- this will be true, when the pointer of both variables point to the same object. end","title":"Functions"},{"location":"Functions/#class-functions","text":"","title":"Class \"Functions\""},{"location":"Functions/#game-game","text":"Returns a Game object.","title":"Game Game ()"},{"location":"Functions/#musicmanager-musicmanager","text":"Returns a MusicManager object.","title":"MusicManager MusicManager ()"},{"location":"Functions/#integer-random","text":"Returns a random integer. (0 to 2^32)","title":"integer Random ()"},{"location":"Functions/#vector-randomvector","text":"Returns a random vector with length 1. Multiply this vector by a number for larger random vectors.","title":"Vector RandomVector ()"},{"location":"Functions/#sfxmanager-sfxmanager","text":"Returns a SFXManager object.","title":"SFXManager SFXManager ()"},{"location":"Functions/#integer-getptrhash-objectobject","text":"Returns a hash-value of the pointer given as an input value. Valid inputs are any Isaac object, including Entity , Room , RNG , Sprite , Game etc. It can be used to easily compare two entities, making equality checks very easy. Example: If you spawn a certain entity, save it in a variable and then compare it to the entity parameter in MC_ENTITY_TAKE_DMG , this comparison will never be true even if both variables refer to the exact same entity in the game. GetPtrHash() turns pointer into a fixed number, which makes comparisons easier.","title":"integer GetPtrHash (Objectobject)"},{"location":"Game/","text":"Class \"Game\" \u2693\ufe0e void AddDevilRoomDeal () \u2693\ufe0e void AddEncounteredBoss (EntityType Boss, integer Variant ) \u2693\ufe0e void AddPixelation (integer Duration) \u2693\ufe0e Triggers the effect of the \"retro vision\" pill. void AddStageWithoutDamage () \u2693\ufe0e Increases the ingame counter, that keeps track of the stages you cleared without taking damage. (useful for Devil deal manipulations) void AddStageWithoutHeartsPicked () \u2693\ufe0e Increases the ingame counter, that keeps track of stages you cleared without picking up hearts. void AddTreasureRoomsVisited () \u2693\ufe0e void BombDamage (Vector Position, float Damage, float Radius, boolean LineCheck, Entity Source, integer TearFlags, integer DamageFlags, boolean DamageSource ) \u2693\ufe0e void BombExplosionEffects (Vector Position, float Damage, integer TearFlags, Color Color, Entity Source, float RadiusMult, boolean LineCheck, boolean DamageSource ) \u2693\ufe0e The complete bomb explosion package: Do damage, spawn boomgraphics, and apply tearflag-based effects. void BombTearflagEffects (Vector Position, float Radius, integer TearFlags, Entity Source ) \u2693\ufe0e Does bomb-exclusive special effects. void ButterBeanFart (Vector Position, float Radius, Entity Source, boolean ShowEffect ) \u2693\ufe0e void ChangeRoom (integer RoomIndex) \u2693\ufe0e void CharmFart (Vector Position, float Radius, Entity Source ) \u2693\ufe0e void ClearDonationModAngel () \u2693\ufe0e void ClearDonationModGreed () \u2693\ufe0e void ClearStagesWithoutDamage () \u2693\ufe0e Sets the counter for stages cleared without damage to 0. void ClearStagesWithoutHeartsPicked () \u2693\ufe0e Sets the counter for stages cleared without picking up hearts to 0. void Darken (float Darkness, integer Timeout ) \u2693\ufe0e void DonateAngel (integer Donate) \u2693\ufe0e void DonateGreed (integer Donate) \u2693\ufe0e void End (Ending Ending) \u2693\ufe0e remove entity from the update list (render only) void EnableEntity(Entity e); add entity back to the update list (update + render) void DisableEntity(Entity e); void Fadein (float Speed) \u2693\ufe0e void Fadeout (float Speed, FadeoutTarget Target ) \u2693\ufe0e void Fart (Vector Position, float Radius, Entity Source, float FartScale, integer FartSubType ) \u2693\ufe0e void FinishChallenge () \u2693\ufe0e Ambush GetAmbush () \u2693\ufe0e float GetDarknessModifier () \u2693\ufe0e integer GetDevilRoomDeals () \u2693\ufe0e integer GetDonationModAngel () \u2693\ufe0e Get the value that indicates the angel-counter of a shop-donation maschine. This Stat increases everytime you donate to a shop. A higher number grants a few advantages. integer GetDonationModGreed () \u2693\ufe0e Font GetFont () \u2693\ufe0e integer GetFrameCount () \u2693\ufe0e Returns the number of frames the gameplay is actively running. Pauses are therefore not included! 1 second equals 30 frames. This function therefore works drastically different than Isaac.GetFrameCount() Example Code This code returns hours, minutes, seconds, and milliseconds of the game running actively: local curTime = Game():GetFrameCount() local msecs= curTime%30 * (10/3) -- turns the millisecond value range from [0 to 30] to [0 to 100] local secs= math.floor(curTime/30)%60 local mins= math.floor(curTime/30/60)%60 local hours= math.floor(curTime/30/60/60)%60 integer GetGreedBossWaveNum () \u2693\ufe0e integer GetGreedWavesNum () \u2693\ufe0e History GetItemHistory () \u2693\ufe0e ItemOverlay GetItemOverlay () \u2693\ufe0e ItemPool GetItemPool () \u2693\ufe0e void LevelStage (UserData) GetLastDevilRoomStage () \u2693\ufe0e Notes Since it returns UserData, this function is unusable and therefore broken. LevelStage GetLastLevelWithDamage () \u2693\ufe0e LevelStage GetLastLevelWithoutHalfHp () \u2693\ufe0e Level GetLevel () \u2693\ufe0e EntityPlayer GetNearestPlayer (Vector Pos) \u2693\ufe0e integer GetNumEncounteredBosses () \u2693\ufe0e integer GetNumPlayers () \u2693\ufe0e EntityPlayer GetPlayer (integer Index) \u2693\ufe0e EntityPlayer GetRandomPlayer (Vector Pos, float Radius ) \u2693\ufe0e Room GetRoom () \u2693\ufe0e const integer GetScreenShakeCountdown () \u2693\ufe0e Seeds GetSeeds () \u2693\ufe0e integer GetStagesWithoutDamage () \u2693\ufe0e integer GetStagesWithoutHeartsPicked () \u2693\ufe0e boolean GetStateFlag (StateFlag StateFlag) \u2693\ufe0e float GetTargetDarkness () \u2693\ufe0e integer GetTreasureRoomVisitCount () \u2693\ufe0e integer GetVictoryLap () \u2693\ufe0e boolean HasEncounteredBoss (EntityType Boss, integer Variant ) \u2693\ufe0e integer HasHallucination () \u2693\ufe0e boolean IsGreedMode () \u2693\ufe0e boolean IsPaused () \u2693\ufe0e Returns true, if the game is in a state, where the player is unable to input any thing or the game logic is paused. This includes hiving the pause menu opened, being in room transitions/cutscenes or while displaying a \"big book\" animation. void MoveToRandomRoom (boolean IAmErrorRoom, integer Seed ) \u2693\ufe0e void NextVictoryLap () \u2693\ufe0e void Render () \u2693\ufe0e boolean RerollEnemy (Entity e) \u2693\ufe0e void RerollLevelCollectibles () \u2693\ufe0e void RerollLevelPickups (integer Seed) \u2693\ufe0e void SetLastDevilRoomStage (LevelStage Stage) \u2693\ufe0e void SetLastLevelWithDamage (LevelStage Stage) \u2693\ufe0e void SetLastLevelWithoutHalfHp (LevelStage Stage) \u2693\ufe0e void SetStateFlag (StateFlag StateFlag, boolean Val ) \u2693\ufe0e void ShakeScreen (integer Timeout) \u2693\ufe0e void ShowFortune () \u2693\ufe0e void ShowHallucination (integer FrameCount, Backdrop::Backdrop HallucinationBackdrop ) \u2693\ufe0e Plays the Delirium animation (Static noise intersected with past gameplay fotage), which will also change the background of the current room. Example Code This code emulated the effect of this function by hijacking the Delirious item effect local usagetime = -1 -- stores the last time the effect was called. -- call this function to play the Hallucination effect function playHallucination() local player = Isaac.GetPlayer(0) usagetime = Game().TimeCounter player:UseActiveItem(510, false, false, false, false) -- use the delirious item without applying the costume player:GetEffects():RemoveCollectibleEffect(510) -- remove any unwanted side effects of the item usage end -- Removes all spawned NPC entities when activating the function function mod:onFriendlyInit(npc) if Game().TimeCounter-usagetime == 0 then -- only remove enemies that spawned when the effect was called! npc:Remove() end end mod:AddCallback(ModCallbacks.MC_POST_NPC_INIT, mod.onFriendlyInit) Bugs This function does not work and will crash your game on use! void ShowRule () \u2693\ufe0e Entity Spawn (EntityType Type, integer Variant, Vector Position, Vector Velocity, Entity Spawner, integer SubType, integer Seed ) \u2693\ufe0e The game has two spawn functions, Game():Spawn() (this one) and Isaac.Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . Example Code This code spawns a Leech with specific seed. Game():Spawn( EntityType.ENTITY_LEECH, -- Type 0, -- Variant Game():GetRoom():GetCenterPos(), -- Position Vector(0, 0), -- Velocity nil, -- Parent 0, -- SubType Game():GetRoom():GetSpawnSeed() -- Seed (the \"GetSpawnSeed()\" function gets a reproducible seed based on the room, e.g. \"2496979501\") ) EntityNPC SpawnEntityDesc (Entity::EntityDesc desc, Vector Position, Entity Spawner ) \u2693\ufe0e void SpawnParticles (Vector Pos, EntityEffect::Variant ParticleType, integer NumParticles, float Speed, Color Color, float Height ) \u2693\ufe0e void StartRoomTransition (integer RoomIndex, Direction Direction, RoomTransition::Animation Animation ) \u2693\ufe0e Notes Available Animation types (Discovered by \"ilise rose\" (@yatboim)): 0: (Default) Standard transition, sweeps the room in from a direction 1: (Fade) Fade to black transition, like its used for the \"goto\" - console command 2: (Stage) Pixel out transition, like used for crawlspaces and the trapdoor at the end of floors 3: (Teleport) teleport transition, isaac teleports out of the current room and into the next 5: (Ankh) Same as standard transition 6: (Dead Cat) Same as standard transition 7: (1Up) Same as standard transition 8: (Guppys Collar) Same as standard transition 9: (Judas Shadow) Same as standard transition 10: (Lazarus Rags) Same as standard transition 12: (Glowing Hourglass) Same as standard transition 13: (D7) Same as standard transition 14: (Missing Poster) Same as standard transition Bugs The Direction variable is completely ignored at all times, with the game instead calculating the direction between the two rooms itself for the animation. The two rooms are the current room and the room of the RoomIndex. It has no impact on the doors either. void StartStageTransition (boolean SameStage, StageTransition::Animation Animation ) \u2693\ufe0e Starts a transition animation like it`s playing when entering a trapdoor to switch between stages. Stage Transition types: 0: Standard transition. Removes the playermodel before the pixel fadeout. Then plays the Stage Nightmare animation. The player starts in fetal position after the transition. 1: Standard transition with pixel fadein/out, nightmare cutscene but the player model doesnt get removed and starts in the normal standing position after the transition. >2: Same as 0 void Update () \u2693\ufe0e void UpdateStrangeAttractor (Vector Position) \u2693\ufe0e integer BlueWombParTime \u2693\ufe0e integer BossRushParTime \u2693\ufe0e Number of frames of game time. Challenge Challenge \u2693\ufe0e const Difficulty Difficulty \u2693\ufe0e const Vector ScreenShakeOffset \u2693\ufe0e integer TimeCounter \u2693\ufe0e same as FrameCounter but can be modified, mostly used for timed events (bossrush, daily, ...) and not for timestepping","title":"Game"},{"location":"Game/#class-game","text":"","title":"Class \"Game\""},{"location":"Game/#void-adddevilroomdeal","text":"","title":"void AddDevilRoomDeal ()"},{"location":"Game/#void-addencounteredboss-entitytype-boss-integer-variant","text":"","title":"void AddEncounteredBoss (EntityType Boss, integer Variant )"},{"location":"Game/#void-addpixelation-integer-duration","text":"Triggers the effect of the \"retro vision\" pill.","title":"void AddPixelation (integer Duration)"},{"location":"Game/#void-addstagewithoutdamage","text":"Increases the ingame counter, that keeps track of the stages you cleared without taking damage. (useful for Devil deal manipulations)","title":"void AddStageWithoutDamage ()"},{"location":"Game/#void-addstagewithoutheartspicked","text":"Increases the ingame counter, that keeps track of stages you cleared without picking up hearts.","title":"void AddStageWithoutHeartsPicked ()"},{"location":"Game/#void-addtreasureroomsvisited","text":"","title":"void AddTreasureRoomsVisited ()"},{"location":"Game/#void-bombdamage-vector-position-float-damage-float-radius-boolean-linecheck-entity-source-integer-tearflags-integer-damageflags-boolean-damagesource","text":"","title":"void BombDamage (Vector Position, float Damage, float Radius, boolean LineCheck, Entity Source, integer TearFlags, integer DamageFlags, boolean DamageSource )"},{"location":"Game/#void-bombexplosioneffects-vector-position-float-damage-integer-tearflags-color-color-entity-source-float-radiusmult-boolean-linecheck-boolean-damagesource","text":"The complete bomb explosion package: Do damage, spawn boomgraphics, and apply tearflag-based effects.","title":"void BombExplosionEffects (Vector Position, float Damage, integer TearFlags, Color Color, Entity Source, float RadiusMult, boolean LineCheck, boolean DamageSource )"},{"location":"Game/#void-bombtearflageffects-vector-position-float-radius-integer-tearflags-entity-source","text":"Does bomb-exclusive special effects.","title":"void BombTearflagEffects (Vector Position, float Radius, integer TearFlags, Entity Source )"},{"location":"Game/#void-butterbeanfart-vector-position-float-radius-entity-source-boolean-showeffect","text":"","title":"void ButterBeanFart (Vector Position, float Radius, Entity Source, boolean ShowEffect )"},{"location":"Game/#void-changeroom-integer-roomindex","text":"","title":"void ChangeRoom (integer RoomIndex)"},{"location":"Game/#void-charmfart-vector-position-float-radius-entity-source","text":"","title":"void CharmFart (Vector Position, float Radius, Entity Source )"},{"location":"Game/#void-cleardonationmodangel","text":"","title":"void ClearDonationModAngel ()"},{"location":"Game/#void-cleardonationmodgreed","text":"","title":"void ClearDonationModGreed ()"},{"location":"Game/#void-clearstageswithoutdamage","text":"Sets the counter for stages cleared without damage to 0.","title":"void ClearStagesWithoutDamage ()"},{"location":"Game/#void-clearstageswithoutheartspicked","text":"Sets the counter for stages cleared without picking up hearts to 0.","title":"void ClearStagesWithoutHeartsPicked ()"},{"location":"Game/#void-darken-float-darkness-integer-timeout","text":"","title":"void Darken (float Darkness, integer Timeout )"},{"location":"Game/#void-donateangel-integer-donate","text":"","title":"void DonateAngel (integer Donate)"},{"location":"Game/#void-donategreed-integer-donate","text":"","title":"void DonateGreed (integer Donate)"},{"location":"Game/#void-end-ending-ending","text":"remove entity from the update list (render only) void EnableEntity(Entity e); add entity back to the update list (update + render) void DisableEntity(Entity e);","title":"void End (Ending Ending)"},{"location":"Game/#void-fadein-float-speed","text":"","title":"void Fadein (float Speed)"},{"location":"Game/#void-fadeout-float-speed-fadeouttarget-target","text":"","title":"void Fadeout (float Speed, FadeoutTarget Target )"},{"location":"Game/#void-fart-vector-position-float-radius-entity-source-float-fartscale-integer-fartsubtype","text":"","title":"void Fart (Vector Position, float Radius, Entity Source, float FartScale, integer FartSubType )"},{"location":"Game/#void-finishchallenge","text":"","title":"void FinishChallenge ()"},{"location":"Game/#ambush-getambush","text":"","title":"Ambush GetAmbush ()"},{"location":"Game/#float-getdarknessmodifier","text":"","title":"float GetDarknessModifier ()"},{"location":"Game/#integer-getdevilroomdeals","text":"","title":"integer GetDevilRoomDeals ()"},{"location":"Game/#integer-getdonationmodangel","text":"Get the value that indicates the angel-counter of a shop-donation maschine. This Stat increases everytime you donate to a shop. A higher number grants a few advantages.","title":"integer GetDonationModAngel ()"},{"location":"Game/#integer-getdonationmodgreed","text":"","title":"integer GetDonationModGreed ()"},{"location":"Game/#font-getfont","text":"","title":"Font GetFont ()"},{"location":"Game/#integer-getframecount","text":"Returns the number of frames the gameplay is actively running. Pauses are therefore not included! 1 second equals 30 frames. This function therefore works drastically different than Isaac.GetFrameCount()","title":"integer GetFrameCount ()"},{"location":"Game/#integer-getgreedbosswavenum","text":"","title":"integer GetGreedBossWaveNum ()"},{"location":"Game/#integer-getgreedwavesnum","text":"","title":"integer GetGreedWavesNum ()"},{"location":"Game/#history-getitemhistory","text":"","title":"History GetItemHistory ()"},{"location":"Game/#itemoverlay-getitemoverlay","text":"","title":"ItemOverlay GetItemOverlay ()"},{"location":"Game/#itempool-getitempool","text":"","title":"ItemPool GetItemPool ()"},{"location":"Game/#void-levelstage-userdata-getlastdevilroomstage","text":"","title":"void LevelStage (UserData) GetLastDevilRoomStage ()"},{"location":"Game/#levelstage-getlastlevelwithdamage","text":"","title":"LevelStage GetLastLevelWithDamage ()"},{"location":"Game/#levelstage-getlastlevelwithouthalfhp","text":"","title":"LevelStage GetLastLevelWithoutHalfHp ()"},{"location":"Game/#level-getlevel","text":"","title":"Level GetLevel ()"},{"location":"Game/#entityplayer-getnearestplayer-vector-pos","text":"","title":"EntityPlayer GetNearestPlayer (Vector Pos)"},{"location":"Game/#integer-getnumencounteredbosses","text":"","title":"integer GetNumEncounteredBosses ()"},{"location":"Game/#integer-getnumplayers","text":"","title":"integer GetNumPlayers ()"},{"location":"Game/#entityplayer-getplayer-integer-index","text":"","title":"EntityPlayer GetPlayer (integer Index)"},{"location":"Game/#entityplayer-getrandomplayer-vector-pos-float-radius","text":"","title":"EntityPlayer GetRandomPlayer (Vector Pos, float Radius )"},{"location":"Game/#room-getroom","text":"","title":"Room GetRoom ()"},{"location":"Game/#const-integer-getscreenshakecountdown","text":"","title":"const integer GetScreenShakeCountdown ()"},{"location":"Game/#seeds-getseeds","text":"","title":"Seeds GetSeeds ()"},{"location":"Game/#integer-getstageswithoutdamage","text":"","title":"integer GetStagesWithoutDamage ()"},{"location":"Game/#integer-getstageswithoutheartspicked","text":"","title":"integer GetStagesWithoutHeartsPicked ()"},{"location":"Game/#boolean-getstateflag-stateflag-stateflag","text":"","title":"boolean GetStateFlag (StateFlag StateFlag)"},{"location":"Game/#float-gettargetdarkness","text":"","title":"float GetTargetDarkness ()"},{"location":"Game/#integer-gettreasureroomvisitcount","text":"","title":"integer GetTreasureRoomVisitCount ()"},{"location":"Game/#integer-getvictorylap","text":"","title":"integer GetVictoryLap ()"},{"location":"Game/#boolean-hasencounteredboss-entitytype-boss-integer-variant","text":"","title":"boolean HasEncounteredBoss (EntityType Boss, integer Variant )"},{"location":"Game/#integer-hashallucination","text":"","title":"integer HasHallucination ()"},{"location":"Game/#boolean-isgreedmode","text":"","title":"boolean IsGreedMode ()"},{"location":"Game/#boolean-ispaused","text":"Returns true, if the game is in a state, where the player is unable to input any thing or the game logic is paused. This includes hiving the pause menu opened, being in room transitions/cutscenes or while displaying a \"big book\" animation.","title":"boolean IsPaused ()"},{"location":"Game/#void-movetorandomroom-boolean-iamerrorroom-integer-seed","text":"","title":"void MoveToRandomRoom (boolean IAmErrorRoom, integer Seed )"},{"location":"Game/#void-nextvictorylap","text":"","title":"void NextVictoryLap ()"},{"location":"Game/#void-render","text":"","title":"void Render ()"},{"location":"Game/#boolean-rerollenemy-entity-e","text":"","title":"boolean RerollEnemy (Entity e)"},{"location":"Game/#void-rerolllevelcollectibles","text":"","title":"void RerollLevelCollectibles ()"},{"location":"Game/#void-rerolllevelpickups-integer-seed","text":"","title":"void RerollLevelPickups (integer Seed)"},{"location":"Game/#void-setlastdevilroomstage-levelstage-stage","text":"","title":"void SetLastDevilRoomStage (LevelStage Stage)"},{"location":"Game/#void-setlastlevelwithdamage-levelstage-stage","text":"","title":"void SetLastLevelWithDamage (LevelStage Stage)"},{"location":"Game/#void-setlastlevelwithouthalfhp-levelstage-stage","text":"","title":"void SetLastLevelWithoutHalfHp (LevelStage Stage)"},{"location":"Game/#void-setstateflag-stateflag-stateflag-boolean-val","text":"","title":"void SetStateFlag (StateFlag StateFlag, boolean Val )"},{"location":"Game/#void-shakescreen-integer-timeout","text":"","title":"void ShakeScreen (integer Timeout)"},{"location":"Game/#void-showfortune","text":"","title":"void ShowFortune ()"},{"location":"Game/#void-showhallucination-integer-framecount-backdropbackdrop-hallucinationbackdrop","text":"Plays the Delirium animation (Static noise intersected with past gameplay fotage), which will also change the background of the current room.","title":"void ShowHallucination (integer FrameCount, Backdrop::Backdrop HallucinationBackdrop )"},{"location":"Game/#void-showrule","text":"","title":"void ShowRule ()"},{"location":"Game/#entity-spawn-entitytype-type-integer-variant-vector-position-vector-velocity-entity-spawner-integer-subtype-integer-seed","text":"The game has two spawn functions, Game():Spawn() (this one) and Isaac.Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() .","title":"Entity Spawn (EntityType Type, integer Variant, Vector Position, Vector Velocity, Entity Spawner, integer SubType, integer Seed )"},{"location":"Game/#entitynpc-spawnentitydesc-entityentitydesc-desc-vector-position-entity-spawner","text":"","title":"EntityNPC SpawnEntityDesc (Entity::EntityDesc desc, Vector Position, Entity Spawner )"},{"location":"Game/#void-spawnparticles-vector-pos-entityeffectvariant-particletype-integer-numparticles-float-speed-color-color-float-height","text":"","title":"void SpawnParticles (Vector Pos, EntityEffect::Variant ParticleType, integer NumParticles, float Speed, Color Color, float Height )"},{"location":"Game/#void-startroomtransition-integer-roomindex-direction-direction-roomtransitionanimation-animation","text":"","title":"void StartRoomTransition (integer RoomIndex, Direction Direction, RoomTransition::Animation Animation )"},{"location":"Game/#void-startstagetransition-boolean-samestage-stagetransitionanimation-animation","text":"Starts a transition animation like it`s playing when entering a trapdoor to switch between stages. Stage Transition types: 0: Standard transition. Removes the playermodel before the pixel fadeout. Then plays the Stage Nightmare animation. The player starts in fetal position after the transition. 1: Standard transition with pixel fadein/out, nightmare cutscene but the player model doesnt get removed and starts in the normal standing position after the transition. >2: Same as 0","title":"void StartStageTransition (boolean SameStage, StageTransition::Animation Animation )"},{"location":"Game/#void-update","text":"","title":"void Update ()"},{"location":"Game/#void-updatestrangeattractor-vector-position","text":"","title":"void UpdateStrangeAttractor (Vector Position)"},{"location":"Game/#integer-bluewombpartime","text":"","title":"integer BlueWombParTime"},{"location":"Game/#integer-bossrushpartime","text":"Number of frames of game time.","title":"integer BossRushParTime"},{"location":"Game/#challenge-challenge","text":"","title":"Challenge Challenge"},{"location":"Game/#const-difficulty-difficulty","text":"","title":"const Difficulty Difficulty"},{"location":"Game/#const-vector-screenshakeoffset","text":"","title":"const Vector ScreenShakeOffset"},{"location":"Game/#integer-timecounter","text":"same as FrameCounter but can be modified, mostly used for timed events (bossrush, daily, ...) and not for timestepping","title":"integer TimeCounter"},{"location":"GridEntity/","text":"Class \"GridEntity\" \u2693\ufe0e boolean Destroy (boolean Immediate) \u2693\ufe0e integer GetGridIndex () \u2693\ufe0e Desc GetSaveState () \u2693\ufe0e GridEntityType GetType () \u2693\ufe0e integer GetVariant () \u2693\ufe0e boolean Hurt (integer Damage) \u2693\ufe0e void Init (integer Seed) \u2693\ufe0e void PostInit () \u2693\ufe0e void Render (Vector Offset) \u2693\ufe0e void SetType (GridEntityType Type) \u2693\ufe0e void SetVariant (integer Variant) \u2693\ufe0e GridEntityDoor ToDoor () \u2693\ufe0e GridEntityPit ToPit () \u2693\ufe0e GridEntityPoop ToPoop () \u2693\ufe0e GridEntityPressurePlate ToPressurePlate () \u2693\ufe0e GridEntityRock ToRock () \u2693\ufe0e GridEntitySpikes ToSpikes () \u2693\ufe0e GridEntityTNT ToTNT () \u2693\ufe0e void Update () \u2693\ufe0e CollisionClass CollisionClass \u2693\ufe0e Desc Desc \u2693\ufe0e const Vector Position \u2693\ufe0e returns the position of the grid cell's center point RNG RNG \u2693\ufe0e Sprite Sprite \u2693\ufe0e integer State \u2693\ufe0e integer VarData \u2693\ufe0e","title":"GridEntity"},{"location":"GridEntity/#class-gridentity","text":"","title":"Class \"GridEntity\""},{"location":"GridEntity/#boolean-destroy-boolean-immediate","text":"","title":"boolean Destroy (boolean Immediate)"},{"location":"GridEntity/#integer-getgridindex","text":"","title":"integer GetGridIndex ()"},{"location":"GridEntity/#desc-getsavestate","text":"","title":"Desc GetSaveState ()"},{"location":"GridEntity/#gridentitytype-gettype","text":"","title":"GridEntityType GetType ()"},{"location":"GridEntity/#integer-getvariant","text":"","title":"integer GetVariant ()"},{"location":"GridEntity/#boolean-hurt-integer-damage","text":"","title":"boolean Hurt (integer Damage)"},{"location":"GridEntity/#void-init-integer-seed","text":"","title":"void Init (integer Seed)"},{"location":"GridEntity/#void-postinit","text":"","title":"void PostInit ()"},{"location":"GridEntity/#void-render-vector-offset","text":"","title":"void Render (Vector Offset)"},{"location":"GridEntity/#void-settype-gridentitytype-type","text":"","title":"void SetType (GridEntityType Type)"},{"location":"GridEntity/#void-setvariant-integer-variant","text":"","title":"void SetVariant (integer Variant)"},{"location":"GridEntity/#gridentitydoor-todoor","text":"","title":"GridEntityDoor ToDoor ()"},{"location":"GridEntity/#gridentitypit-topit","text":"","title":"GridEntityPit ToPit ()"},{"location":"GridEntity/#gridentitypoop-topoop","text":"","title":"GridEntityPoop ToPoop ()"},{"location":"GridEntity/#gridentitypressureplate-topressureplate","text":"","title":"GridEntityPressurePlate ToPressurePlate ()"},{"location":"GridEntity/#gridentityrock-torock","text":"","title":"GridEntityRock ToRock ()"},{"location":"GridEntity/#gridentityspikes-tospikes","text":"","title":"GridEntitySpikes ToSpikes ()"},{"location":"GridEntity/#gridentitytnt-totnt","text":"","title":"GridEntityTNT ToTNT ()"},{"location":"GridEntity/#void-update","text":"","title":"void Update ()"},{"location":"GridEntity/#collisionclass-collisionclass","text":"","title":"CollisionClass CollisionClass"},{"location":"GridEntity/#desc-desc","text":"","title":"Desc Desc"},{"location":"GridEntity/#const-vector-position","text":"returns the position of the grid cell's center point","title":"const Vector Position"},{"location":"GridEntity/#rng-rng","text":"","title":"RNG RNG"},{"location":"GridEntity/#sprite-sprite","text":"","title":"Sprite Sprite"},{"location":"GridEntity/#integer-state","text":"","title":"integer State"},{"location":"GridEntity/#integer-vardata","text":"","title":"integer VarData"},{"location":"GridEntityDesc/","text":"Class \"GridEntityDesc\" \u2693\ufe0e boolean Initialized \u2693\ufe0e this is will be false when its first created integer SpawnCount \u2693\ufe0e how often this entity has been spawned integer SpawnSeed \u2693\ufe0e integer State \u2693\ufe0e GridEntityType Type \u2693\ufe0e integer VarData \u2693\ufe0e Additional data to be stored, when State is not enought. integer VariableSeed \u2693\ufe0e this seed is will be changed based on some events integer Variant \u2693\ufe0e","title":"GridEntityDesc"},{"location":"GridEntityDesc/#class-gridentitydesc","text":"","title":"Class \"GridEntityDesc\""},{"location":"GridEntityDesc/#boolean-initialized","text":"this is will be false when its first created","title":"boolean Initialized"},{"location":"GridEntityDesc/#integer-spawncount","text":"how often this entity has been spawned","title":"integer SpawnCount"},{"location":"GridEntityDesc/#integer-spawnseed","text":"","title":"integer SpawnSeed"},{"location":"GridEntityDesc/#integer-state","text":"","title":"integer State"},{"location":"GridEntityDesc/#gridentitytype-type","text":"","title":"GridEntityType Type"},{"location":"GridEntityDesc/#integer-vardata","text":"Additional data to be stored, when State is not enought.","title":"integer VarData"},{"location":"GridEntityDesc/#integer-variableseed","text":"this seed is will be changed based on some events","title":"integer VariableSeed"},{"location":"GridEntityDesc/#integer-variant","text":"","title":"integer Variant"},{"location":"GridEntityDoor/","text":"Class \"GridEntityDoor\" \u2693\ufe0e void Bar () \u2693\ufe0e boolean CanBlowOpen () \u2693\ufe0e void Close (boolean Force) \u2693\ufe0e const Vector GetSpriteOffset () \u2693\ufe0e boolean IsBusted () \u2693\ufe0e boolean IsKeyFamiliarTarget () \u2693\ufe0e boolean IsLocked () \u2693\ufe0e boolean IsOpen () \u2693\ufe0e boolean IsRoomType (RoomType Type) \u2693\ufe0e boolean IsTargetRoomArcade () \u2693\ufe0e void Open () \u2693\ufe0e void SetLocked (boolean Locked) \u2693\ufe0e void SetRoomTypes (RoomType CurrentRoomType, RoomType TargetRoomType ) \u2693\ufe0e void SpawnDust () \u2693\ufe0e boolean TryBlowOpen (boolean FromExplossion) \u2693\ufe0e try to open the door by explosive force, true for success boolean TryUnlock (boolean Force) \u2693\ufe0e try to unlock the door using a key, true for success boolean Busted \u2693\ufe0e string CloseAnimation \u2693\ufe0e RoomType CurrentRoomType \u2693\ufe0e Direction Direction \u2693\ufe0e Sprite ExtraSprite \u2693\ufe0e boolean ExtraVisible \u2693\ufe0e string LockedAnimation \u2693\ufe0e string OpenAnimation \u2693\ufe0e string OpenLockedAnimation \u2693\ufe0e State PreviousState \u2693\ufe0e Variant PreviousVariant \u2693\ufe0e DoorSlot Slot \u2693\ufe0e integer TargetRoomIndex \u2693\ufe0e RoomType TargetRoomType \u2693\ufe0e","title":"GridEntityDoor"},{"location":"GridEntityDoor/#class-gridentitydoor","text":"","title":"Class \"GridEntityDoor\""},{"location":"GridEntityDoor/#void-bar","text":"","title":"void Bar ()"},{"location":"GridEntityDoor/#boolean-canblowopen","text":"","title":"boolean CanBlowOpen ()"},{"location":"GridEntityDoor/#void-close-boolean-force","text":"","title":"void Close (boolean Force)"},{"location":"GridEntityDoor/#const-vector-getspriteoffset","text":"","title":"const Vector GetSpriteOffset ()"},{"location":"GridEntityDoor/#boolean-isbusted","text":"","title":"boolean IsBusted ()"},{"location":"GridEntityDoor/#boolean-iskeyfamiliartarget","text":"","title":"boolean IsKeyFamiliarTarget ()"},{"location":"GridEntityDoor/#boolean-islocked","text":"","title":"boolean IsLocked ()"},{"location":"GridEntityDoor/#boolean-isopen","text":"","title":"boolean IsOpen ()"},{"location":"GridEntityDoor/#boolean-isroomtype-roomtype-type","text":"","title":"boolean IsRoomType (RoomType Type)"},{"location":"GridEntityDoor/#boolean-istargetroomarcade","text":"","title":"boolean IsTargetRoomArcade ()"},{"location":"GridEntityDoor/#void-open","text":"","title":"void Open ()"},{"location":"GridEntityDoor/#void-setlocked-boolean-locked","text":"","title":"void SetLocked (boolean Locked)"},{"location":"GridEntityDoor/#void-setroomtypes-roomtype-currentroomtype-roomtype-targetroomtype","text":"","title":"void SetRoomTypes (RoomType CurrentRoomType, RoomType TargetRoomType )"},{"location":"GridEntityDoor/#void-spawndust","text":"","title":"void SpawnDust ()"},{"location":"GridEntityDoor/#boolean-tryblowopen-boolean-fromexplossion","text":"try to open the door by explosive force, true for success","title":"boolean TryBlowOpen (boolean FromExplossion)"},{"location":"GridEntityDoor/#boolean-tryunlock-boolean-force","text":"try to unlock the door using a key, true for success","title":"boolean TryUnlock (boolean Force)"},{"location":"GridEntityDoor/#boolean-busted","text":"","title":"boolean Busted"},{"location":"GridEntityDoor/#string-closeanimation","text":"","title":"string CloseAnimation"},{"location":"GridEntityDoor/#roomtype-currentroomtype","text":"","title":"RoomType CurrentRoomType"},{"location":"GridEntityDoor/#direction-direction","text":"","title":"Direction Direction"},{"location":"GridEntityDoor/#sprite-extrasprite","text":"","title":"Sprite ExtraSprite"},{"location":"GridEntityDoor/#boolean-extravisible","text":"","title":"boolean ExtraVisible"},{"location":"GridEntityDoor/#string-lockedanimation","text":"","title":"string LockedAnimation"},{"location":"GridEntityDoor/#string-openanimation","text":"","title":"string OpenAnimation"},{"location":"GridEntityDoor/#string-openlockedanimation","text":"","title":"string OpenLockedAnimation"},{"location":"GridEntityDoor/#state-previousstate","text":"","title":"State PreviousState"},{"location":"GridEntityDoor/#variant-previousvariant","text":"","title":"Variant PreviousVariant"},{"location":"GridEntityDoor/#doorslot-slot","text":"","title":"DoorSlot Slot"},{"location":"GridEntityDoor/#integer-targetroomindex","text":"","title":"integer TargetRoomIndex"},{"location":"GridEntityDoor/#roomtype-targetroomtype","text":"","title":"RoomType TargetRoomType"},{"location":"GridEntityPit/","text":"Class \"GridEntityPit\" \u2693\ufe0e void MakeBridge () \u2693\ufe0e void SetLadder (boolean Value) \u2693\ufe0e void UpdateCollision () \u2693\ufe0e void InitSubclass(void); boolean HasLadder \u2693\ufe0e","title":"GridEntityPit"},{"location":"GridEntityPit/#class-gridentitypit","text":"","title":"Class \"GridEntityPit\""},{"location":"GridEntityPit/#void-makebridge","text":"","title":"void MakeBridge ()"},{"location":"GridEntityPit/#void-setladder-boolean-value","text":"","title":"void SetLadder (boolean Value)"},{"location":"GridEntityPit/#void-updatecollision","text":"void InitSubclass(void);","title":"void UpdateCollision ()"},{"location":"GridEntityPit/#boolean-hasladder","text":"","title":"boolean HasLadder"},{"location":"GridEntityPoop/","text":"Class \"GridEntityPoop\" \u2693\ufe0e void ReduceSpawnRate () \u2693\ufe0e void RespawnRedPoop () \u2693\ufe0e boolean ReducedSpawnRate \u2693\ufe0e integer ReviveTimer \u2693\ufe0e string StateAnimation \u2693\ufe0e boolean UnderPlayer \u2693\ufe0e Used to determine when player moves away from the poop.","title":"GridEntityPoop"},{"location":"GridEntityPoop/#class-gridentitypoop","text":"","title":"Class \"GridEntityPoop\""},{"location":"GridEntityPoop/#void-reducespawnrate","text":"","title":"void ReduceSpawnRate ()"},{"location":"GridEntityPoop/#void-respawnredpoop","text":"","title":"void RespawnRedPoop ()"},{"location":"GridEntityPoop/#boolean-reducedspawnrate","text":"","title":"boolean ReducedSpawnRate"},{"location":"GridEntityPoop/#integer-revivetimer","text":"","title":"integer ReviveTimer"},{"location":"GridEntityPoop/#string-stateanimation","text":"","title":"string StateAnimation"},{"location":"GridEntityPoop/#boolean-underplayer","text":"Used to determine when player moves away from the poop.","title":"boolean UnderPlayer"},{"location":"GridEntityPressurePlate/","text":"Class \"GridEntityPressurePlate\" \u2693\ufe0e void Reward () \u2693\ufe0e RNG GreedModeRNG \u2693\ufe0e string NextGreedAnimation \u2693\ufe0e Sprite TimerPlate \u2693\ufe0e","title":"GridEntityPressurePlate"},{"location":"GridEntityPressurePlate/#class-gridentitypressureplate","text":"","title":"Class \"GridEntityPressurePlate\""},{"location":"GridEntityPressurePlate/#void-reward","text":"","title":"void Reward ()"},{"location":"GridEntityPressurePlate/#rng-greedmoderng","text":"","title":"RNG GreedModeRNG"},{"location":"GridEntityPressurePlate/#string-nextgreedanimation","text":"","title":"string NextGreedAnimation"},{"location":"GridEntityPressurePlate/#sprite-timerplate","text":"","title":"Sprite TimerPlate"},{"location":"GridEntityRock/","text":"Class \"GridEntityRock\" \u2693\ufe0e integer GetBigRockFrame () \u2693\ufe0e string GetRubbleAnim () \u2693\ufe0e const Sprite GetSprite () \u2693\ufe0e void SetBigRockFrame (integer Frame) \u2693\ufe0e void UpdateAnimFrame () \u2693\ufe0e string Anim \u2693\ufe0e integer FrameCnt \u2693\ufe0e string RubbleAnim \u2693\ufe0e","title":"GridEntityRock"},{"location":"GridEntityRock/#class-gridentityrock","text":"","title":"Class \"GridEntityRock\""},{"location":"GridEntityRock/#integer-getbigrockframe","text":"","title":"integer GetBigRockFrame ()"},{"location":"GridEntityRock/#string-getrubbleanim","text":"","title":"string GetRubbleAnim ()"},{"location":"GridEntityRock/#const-sprite-getsprite","text":"","title":"const Sprite GetSprite ()"},{"location":"GridEntityRock/#void-setbigrockframe-integer-frame","text":"","title":"void SetBigRockFrame (integer Frame)"},{"location":"GridEntityRock/#void-updateanimframe","text":"","title":"void UpdateAnimFrame ()"},{"location":"GridEntityRock/#string-anim","text":"","title":"string Anim"},{"location":"GridEntityRock/#integer-framecnt","text":"","title":"integer FrameCnt"},{"location":"GridEntityRock/#string-rubbleanim","text":"","title":"string RubbleAnim"},{"location":"GridEntitySpikes/","text":"Class \"GridEntitySpikes\" \u2693\ufe0e integer Timeout \u2693\ufe0e","title":"GridEntitySpikes"},{"location":"GridEntitySpikes/#class-gridentityspikes","text":"","title":"Class \"GridEntitySpikes\""},{"location":"GridEntitySpikes/#integer-timeout","text":"","title":"integer Timeout"},{"location":"GridEntityTNT/","text":"Class \"GridEntityTNT\" \u2693\ufe0e integer FrameCnt \u2693\ufe0e","title":"GridEntityTNT"},{"location":"GridEntityTNT/#class-gridentitytnt","text":"","title":"Class \"GridEntityTNT\""},{"location":"GridEntityTNT/#integer-framecnt","text":"","title":"integer FrameCnt"},{"location":"Input/","text":"Class \"Input\" \u2693\ufe0e float GetActionValue (integer action, integer controllerId ) \u2693\ufe0e Returns the current strength in which a button was pressed. This is 0 OR 1 with a keyboard. With a controller, this can be used to get the strength in which you have moved the analog stick in a direction. Example Code This code prints the current \"strength\" in which the analog stick was moved to the left. print(Input.GetActionValue(ButtonAction.ACTION_LEFT, 1)) float GetButtonValue (integer button, integer controllerId ) \u2693\ufe0e Use \"GetActionValue\" instead of this function. Vector GetMousePosition (boolean gameCoords) \u2693\ufe0e Returns the current mouse position in game coordinates (true) or render coordinates. Example Code This code renders \"Hello World!\" at the current mouse position. local mousePos = Isaac.WorldToScreen(Input.GetMousePosition(true))-- transfer game- in screen coordinates Isaac.RenderText(\"Hello World!\", mousePos.X, mousePos.Y, 1 ,1 ,1 ,1 ) boolean IsActionPressed (integer action, integer controllerId ) \u2693\ufe0e Returns, if an action-button is pressed or not. An Action-button is any button that got a default function assigned to it. This function will return true, as long the button is held down. List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. if Input.IsActionPressed(ButtonAction.ACTION_BOMB, 0) then print(\"bomb Button pressed\") end boolean IsActionTriggered (integer action, integer controllerId ) \u2693\ufe0e Returns, if an action-button was pressed some time before or not. An Action-button is any button that got a default function assigned to it. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. if Input.IsActionTriggered(ButtonAction.ACTION_BOMB, 0) then print(\"bomb Button pressed\") end boolean IsButtonPressed (integer button, integer controllerId ) \u2693\ufe0e Returns, if a button is pressed or not. This function will return true, as long the button is held down. List of all key enums Example Code This code prints \"Enter Button pressed\", when the \"Enter\"-Button was pressed. if Input.IsButtonPressed(Keyboard.KEY_ENTER, 0) then print(\"Enter Button pressed.\") end boolean IsButtonTriggered (integer button, integer controllerId ) \u2693\ufe0e Returns, if a button was pressed some time before or not. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all key enums Example Code This code prints \"Enter Button was pressed\", when the \"Enter\"-Button was pressed. if Input.IsButtonTriggered(Keyboard.KEY_ENTER, 0) then print(\"Enter Button was pressed.\") end boolean IsMouseBtnPressed (integer button) \u2693\ufe0e Returns, if a mousebutton is pressed or not. Left: 0, Right: 1, mousewheel: 2, back button: 3, forward button: 4 Example Code This code prints \"Right Click\", when the \"right\"-mousebutton was pressed. if Input.IsMouseBtnPressed(1) then print(\"Right Click\") end","title":"Input"},{"location":"Input/#class-input","text":"","title":"Class \"Input\""},{"location":"Input/#float-getactionvalue-integer-action-integer-controllerid","text":"Returns the current strength in which a button was pressed. This is 0 OR 1 with a keyboard. With a controller, this can be used to get the strength in which you have moved the analog stick in a direction.","title":"float GetActionValue (integer action, integer controllerId )"},{"location":"Input/#float-getbuttonvalue-integer-button-integer-controllerid","text":"Use \"GetActionValue\" instead of this function.","title":"float GetButtonValue (integer button, integer controllerId )"},{"location":"Input/#vector-getmouseposition-boolean-gamecoords","text":"Returns the current mouse position in game coordinates (true) or render coordinates.","title":"Vector GetMousePosition (boolean gameCoords)"},{"location":"Input/#boolean-isactionpressed-integer-action-integer-controllerid","text":"Returns, if an action-button is pressed or not. An Action-button is any button that got a default function assigned to it. This function will return true, as long the button is held down. List of all Action enums","title":"boolean IsActionPressed (integer action, integer controllerId )"},{"location":"Input/#boolean-isactiontriggered-integer-action-integer-controllerid","text":"Returns, if an action-button was pressed some time before or not. An Action-button is any button that got a default function assigned to it. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all Action enums","title":"boolean IsActionTriggered (integer action, integer controllerId )"},{"location":"Input/#boolean-isbuttonpressed-integer-button-integer-controllerid","text":"Returns, if a button is pressed or not. This function will return true, as long the button is held down. List of all key enums","title":"boolean IsButtonPressed (integer button, integer controllerId )"},{"location":"Input/#boolean-isbuttontriggered-integer-button-integer-controllerid","text":"Returns, if a button was pressed some time before or not. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all key enums","title":"boolean IsButtonTriggered (integer button, integer controllerId )"},{"location":"Input/#boolean-ismousebtnpressed-integer-button","text":"Returns, if a mousebutton is pressed or not. Left: 0, Right: 1, mousewheel: 2, back button: 3, forward button: 4","title":"boolean IsMouseBtnPressed (integer button)"},{"location":"Isaac/","text":"Class \"Isaac\" \u2693\ufe0e void AddCallback (table ref, integer callbackId, table callbackFn, integer entityId ) \u2693\ufe0e integer AddPillEffectToPool (integer pillEffect) \u2693\ufe0e returns pill color void ConsoleOutput (string text) \u2693\ufe0e Prints a string into the Debug Console Example Code You can use this example as an alternative. Isaac.ConsoleOutput(\"This is a Test.\") -- Output: This is a Test. -- Alternatively: print(\"This is a Test.\") -- Output: This is a Test. integer CountBosses () \u2693\ufe0e Returns the number of bosses in the current room. integer CountEnemies () \u2693\ufe0e Returns the number of enemies in the current room. integer CountEntities (Entity Spawner, integer Type, integer Variant, integer Subtype ) \u2693\ufe0e Returns the number of entities in the current room that fulfill the specified requirements. Spawner refers to an entity object (can be nil ) Type refers to the found entity's type (Can be EntityType.ENTITY_NULL ) Variant and Subtype refer to the found entitys Variant and Subtype (Can be -1 ) void DebugString (string str) \u2693\ufe0e Prints a string into the log file. You can find this file here C:\\Users\\Jan\\Documents\\My Games\\Binding of Isaac Afterbirth+\\log.txt Example Code This code prints \"This is a Test.\" in the log.txt file. Isaac.DebugString(\"This is a Test.\") -- Output: Lua Debug: This is a Test. string ExecuteCommand (string command) \u2693\ufe0e This function executes a debug console command. see [Tutorial] Debug Console for informations on how to use commands. void Explode (Vector pos, Entity source, float damage ) \u2693\ufe0e Spawn an explosion on a specified location. table FindByType (integer Type, integer Variant, integer Subtype, boolean Cache, boolean IgnoreFriendly ) \u2693\ufe0e Returns entities based on Type, Variant, Subtype. If Variant and/or Subtype is -1 then everything is includedUse Cache flag for multiple calls per frame. table FindInRadius (Vector Position, float Radius, integer Partitions ) \u2693\ufe0e Returns entities in range of Radius from Position filtered by Partitions mask (see EntityPartition enum ) (include all = 0xffffffff) This function does not return the entities sorted by nearest first, but based on the order they were loaded. integer GetCardIdByName (string cardHudName) \u2693\ufe0e Returns the CardID based on its hud value. (File: pocketitems.xml) Notes The name of this function is misleading, this function will only work with the hud value of a card and not the name of a card. Example Code This code gets the CardID of XVI - The Tower. Isaac.GetCardIdByName(\"16_TheTower\") --Returns: 17 integer GetChallenge () \u2693\ufe0e Returns the ID of a challenge the player is currently in. Returns 0 if the player is not playing any challenge. integer GetChallengeIdByName (string challengeName) \u2693\ufe0e Returns the ChallengeID of a challenge based on its name. (File: challenges.xml) Example Code This code gets the ChallengeID of Aprils fool. Isaac.GetChallengeIdByName(\"Aprils fool\") --Returns: 32 integer GetCostumeIdByPath (string path) \u2693\ufe0e Returns the CostumeID of a costume based on its file path. (File: costumes2.xml) Example Code This code gets the CostumeID of the Poop transformation costume. Isaac.GetCostumeIdByPath(\"gfx/characters/n027_Transformation_Poop.anm2\") --Returns: 27 integer GetCurseIdByName (string curseName) \u2693\ufe0e Returns the CurseID of a curse based on its name. (File: curses.xml) Example Code This code gets the CurseID of Curse of the Unknown. Isaac.GetCurseIdByName(\"Curse of the Unknown\") --Returns: 4 integer GetEntityTypeByName (string entityName) \u2693\ufe0e Returns the EntityType of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the EntityType of Flaming Gaper. Isaac.GetEntityTypeByName(\"Flaming Gaper\") --Returns: 10 integer GetEntityVariantByName (string entityName) \u2693\ufe0e Returns the variant of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the variant of Flaming Gaper. Isaac.GetEntityVariantByName(\"Flaming Gaper\") --Returns: 2 int GetFrameCount () \u2693\ufe0e Returns the amount of frames the game as a whole is running. The counter increases even when the game is paused or when you are in the main menu! 1 second equals roughtly 60 frames. This function therefore works drastically different than Game():GetFrameCount() Vector GetFreeNearPosition (Vector pos, float step ) \u2693\ufe0e Config GetItemConfig () \u2693\ufe0e Returns the ItemConfig::Config object. integer GetItemIdByName (string itemName) \u2693\ufe0e Returns the ItemID of a Collectible. (File: items.xml) Example Code This code gets the ItemID of Brimstone. Isaac.GetItemIdByName(\"Brimstone\") --Returns: 118 integer GetMusicIdByName (string musicName) \u2693\ufe0e Returns the MusicID of a music track. (File: music.xml) Example Code This code gets the MusicID of the Title Screen. Isaac.GetMusicIdByName(\"Title Screen\") --Returns: 61 integer GetPillEffectByName (string pillEffect) \u2693\ufe0e Returns the PillEffectID based on its name. (File: pocketitems.xml) Example Code This code gets the PillEffectID of I can see forever!. Isaac.GetPillEffectByName(\"I can see forever!\") --Returns: 23 EntityPlayer GetPlayer (integer playerId) \u2693\ufe0e Returns the EntityPlayer which the user is controlling. 0 = Main player. Higher numbers refer to coop babies. Example Code Isaac.GetPlayer(0) integer GetPlayerTypeByName (string playerName) \u2693\ufe0e Returns the PlayerType of a character based on its name. (File: players.xml) Example Code This code gets the PlayerType of Azazel. Isaac.GetPlayerTypeByName(\"Azazel\") --Returns: 7 Vector GetRandomPosition () \u2693\ufe0e Returns a random position inside the current room. The Return value is a Vector containing the position in world coordinates. table GetRoomEntities () \u2693\ufe0e Returns a table containing all entities in the room. integer GetSoundIdByName (string soundName) \u2693\ufe0e Returns the SoundEffectID of a sound based on its name. (File: sounds.xml) Example Code This code gets the SoundEffectID of a sound named \"Custom Sound Effect\" Isaac.GetSoundIdByName(\"Custom Sound Effect\") integer GetTextWidth (string str) \u2693\ufe0e Returns the width of the given string in pixels based on the \"terminus8\" font (same font as used in Isaac.RenderText()) integer GetTime () \u2693\ufe0e Returns the current game time in milliseconds. This includes pauses! integer GetTrinketIdByName (string trinketName) \u2693\ufe0e Returns the TrinketType of a trinket based on its name. (File: items.xml) Example Code This code gets the TrinketType of Lucky Toe. Isaac.GetTrinketIdByName(\"Lucky Toe\") --Returns: 42 GridEntity GridSpawn (GridEntity gridEntityType, int Variant, Vector position, boolean forced ) \u2693\ufe0e Spawn a GridEntity at the given position (world coordinates). Bugs forced has no effect and will NOT override the grid entity at the given location. Remove a grid entity at the given location if nessesary before spawning something again. boolean HasModData (table ref) \u2693\ufe0e Returns \"true\" if your mod has Data stored using the \"SaveModData()\" function. Aka. if there is a \"saveX.dat\" file in your mod folder.There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. Vector WorldToScreenDistance (Vector pos) \u2693\ufe0e void RegisterMod (table ref, string modName, integer apiVersion ) \u2693\ufe0e Method to define a mod in the game. THIS NEEDS TO BE DEFINED IN EVERY MOD! void RemoveCallback (table ref, integer callbackId, table callbackFn ) \u2693\ufe0e void RemoveModData (table ref) \u2693\ufe0e Deletes the stored \"saveX.dat\" file if it exists. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. void RenderScaledText (string str, float X, float Y, float ScaleX, float ScaleY, float R, float G, float B, float A ) \u2693\ufe0e Renders a scaled text on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). ScaleX, ScaleY, R ,G ,B and A need to be between [0,1]. Some scale values can cause the font to display deformed and pixelated. void RenderText (string str, float X, float Y, float R, float G, float B, float A ) \u2693\ufe0e Renders a text with the default size on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). R,G,B and A need to be between [0,1]. void SaveModData (table ref, string data ) \u2693\ufe0e Stores a JSON array/table in a \"saveX.dat\" file. The stored Data persists thruout resets and game restart, so its perfect to store persistent data. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. Vector ScreenToWorld (Vector pos) \u2693\ufe0e Transfers Screen (aka. Window coordinates) into Worldcoordinates. This can be used to get a specific location in the room in World coordnates The World coordinate system is x[0,inf) y[0,inf). Vector ScreenToWorldDistance (Vector pos) \u2693\ufe0e Entity Spawn (int entityType, int entityVariant, int entitySubtype, Vector position, Vector velocity, Entity Spawner ) \u2693\ufe0e Spawns the defined entity at the given location. If the position is not free, it spawns it in the nearest free position. There are two spawn functions. Isaac.Spawn() and Game():Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . Vector WorldToRenderPosition (Vector pos) \u2693\ufe0e Transfers world (aka. game coordinates) into Rendercoordinates. This can be used to render things at fixed positions in a room. The Render coordinate system is x[0,inf) y[0,inf). It defines the Position on the rendering-plane in the current room. Vector WorldToScreen (Vector pos) \u2693\ufe0e Transfers world (aka. game coordinates) into Screen (aka. Window) coordinates. This can be used to render things next to an entity. The Screen coordinate system is x[0,inf) y[0,inf). Normally, it goes till ~500x ~300y. The return vector contains integer values or numbers ending with .5 Vector WorldToScreenDistance (Vector pos) \u2693\ufe0e","title":"Isaac"},{"location":"Isaac/#class-isaac","text":"","title":"Class \"Isaac\""},{"location":"Isaac/#void-addcallback-table-ref-integer-callbackid-table-callbackfn-integer-entityid","text":"","title":"void AddCallback (table ref, integer callbackId, table callbackFn, integer entityId )"},{"location":"Isaac/#integer-addpilleffecttopool-integer-pilleffect","text":"returns pill color","title":"integer AddPillEffectToPool (integer pillEffect)"},{"location":"Isaac/#void-consoleoutput-string-text","text":"Prints a string into the Debug Console","title":"void ConsoleOutput (string text)"},{"location":"Isaac/#integer-countbosses","text":"Returns the number of bosses in the current room.","title":"integer CountBosses ()"},{"location":"Isaac/#integer-countenemies","text":"Returns the number of enemies in the current room.","title":"integer CountEnemies ()"},{"location":"Isaac/#integer-countentities-entity-spawner-integer-type-integer-variant-integer-subtype","text":"Returns the number of entities in the current room that fulfill the specified requirements. Spawner refers to an entity object (can be nil ) Type refers to the found entity's type (Can be EntityType.ENTITY_NULL ) Variant and Subtype refer to the found entitys Variant and Subtype (Can be -1 )","title":"integer CountEntities (Entity Spawner, integer Type, integer Variant, integer Subtype )"},{"location":"Isaac/#void-debugstring-string-str","text":"Prints a string into the log file. You can find this file here C:\\Users\\Jan\\Documents\\My Games\\Binding of Isaac Afterbirth+\\log.txt","title":"void DebugString (string str)"},{"location":"Isaac/#string-executecommand-string-command","text":"This function executes a debug console command. see [Tutorial] Debug Console for informations on how to use commands.","title":"string ExecuteCommand (string command)"},{"location":"Isaac/#void-explode-vector-pos-entity-source-float-damage","text":"Spawn an explosion on a specified location.","title":"void Explode (Vector pos, Entity source, float damage )"},{"location":"Isaac/#table-findbytype-integer-type-integer-variant-integer-subtype-boolean-cache-boolean-ignorefriendly","text":"Returns entities based on Type, Variant, Subtype. If Variant and/or Subtype is -1 then everything is includedUse Cache flag for multiple calls per frame.","title":"table FindByType (integer Type, integer Variant, integer Subtype, boolean Cache, boolean IgnoreFriendly )"},{"location":"Isaac/#table-findinradius-vector-position-float-radius-integer-partitions","text":"Returns entities in range of Radius from Position filtered by Partitions mask (see EntityPartition enum ) (include all = 0xffffffff) This function does not return the entities sorted by nearest first, but based on the order they were loaded.","title":"table FindInRadius (Vector Position, float Radius, integer Partitions )"},{"location":"Isaac/#integer-getcardidbyname-string-cardhudname","text":"Returns the CardID based on its hud value. (File: pocketitems.xml)","title":"integer GetCardIdByName (string cardHudName)"},{"location":"Isaac/#integer-getchallenge","text":"Returns the ID of a challenge the player is currently in. Returns 0 if the player is not playing any challenge.","title":"integer GetChallenge ()"},{"location":"Isaac/#integer-getchallengeidbyname-string-challengename","text":"Returns the ChallengeID of a challenge based on its name. (File: challenges.xml)","title":"integer GetChallengeIdByName (string challengeName)"},{"location":"Isaac/#integer-getcostumeidbypath-string-path","text":"Returns the CostumeID of a costume based on its file path. (File: costumes2.xml)","title":"integer GetCostumeIdByPath (string path)"},{"location":"Isaac/#integer-getcurseidbyname-string-cursename","text":"Returns the CurseID of a curse based on its name. (File: curses.xml)","title":"integer GetCurseIdByName (string curseName)"},{"location":"Isaac/#integer-getentitytypebyname-string-entityname","text":"Returns the EntityType of an entity based on its name. (File: entities2.xml)","title":"integer GetEntityTypeByName (string entityName)"},{"location":"Isaac/#integer-getentityvariantbyname-string-entityname","text":"Returns the variant of an entity based on its name. (File: entities2.xml)","title":"integer GetEntityVariantByName (string entityName)"},{"location":"Isaac/#int-getframecount","text":"Returns the amount of frames the game as a whole is running. The counter increases even when the game is paused or when you are in the main menu! 1 second equals roughtly 60 frames. This function therefore works drastically different than Game():GetFrameCount()","title":"int GetFrameCount ()"},{"location":"Isaac/#vector-getfreenearposition-vector-pos-float-step","text":"","title":"Vector GetFreeNearPosition (Vector pos, float step )"},{"location":"Isaac/#config-getitemconfig","text":"Returns the ItemConfig::Config object.","title":"Config GetItemConfig ()"},{"location":"Isaac/#integer-getitemidbyname-string-itemname","text":"Returns the ItemID of a Collectible. (File: items.xml)","title":"integer GetItemIdByName (string itemName)"},{"location":"Isaac/#integer-getmusicidbyname-string-musicname","text":"Returns the MusicID of a music track. (File: music.xml)","title":"integer GetMusicIdByName (string musicName)"},{"location":"Isaac/#integer-getpilleffectbyname-string-pilleffect","text":"Returns the PillEffectID based on its name. (File: pocketitems.xml)","title":"integer GetPillEffectByName (string pillEffect)"},{"location":"Isaac/#entityplayer-getplayer-integer-playerid","text":"Returns the EntityPlayer which the user is controlling. 0 = Main player. Higher numbers refer to coop babies.","title":"EntityPlayer GetPlayer (integer playerId)"},{"location":"Isaac/#integer-getplayertypebyname-string-playername","text":"Returns the PlayerType of a character based on its name. (File: players.xml)","title":"integer GetPlayerTypeByName (string playerName)"},{"location":"Isaac/#vector-getrandomposition","text":"Returns a random position inside the current room. The Return value is a Vector containing the position in world coordinates.","title":"Vector GetRandomPosition ()"},{"location":"Isaac/#table-getroomentities","text":"Returns a table containing all entities in the room.","title":"table GetRoomEntities ()"},{"location":"Isaac/#integer-getsoundidbyname-string-soundname","text":"Returns the SoundEffectID of a sound based on its name. (File: sounds.xml)","title":"integer GetSoundIdByName (string soundName)"},{"location":"Isaac/#integer-gettextwidth-string-str","text":"Returns the width of the given string in pixels based on the \"terminus8\" font (same font as used in Isaac.RenderText())","title":"integer GetTextWidth (string str)"},{"location":"Isaac/#integer-gettime","text":"Returns the current game time in milliseconds. This includes pauses!","title":"integer GetTime ()"},{"location":"Isaac/#integer-gettrinketidbyname-string-trinketname","text":"Returns the TrinketType of a trinket based on its name. (File: items.xml)","title":"integer GetTrinketIdByName (string trinketName)"},{"location":"Isaac/#gridentity-gridspawn-gridentity-gridentitytype-int-variant-vector-position-boolean-forced","text":"Spawn a GridEntity at the given position (world coordinates).","title":"GridEntity GridSpawn (GridEntity gridEntityType, int Variant, Vector position, boolean forced )"},{"location":"Isaac/#boolean-hasmoddata-table-ref","text":"Returns \"true\" if your mod has Data stored using the \"SaveModData()\" function. Aka. if there is a \"saveX.dat\" file in your mod folder.There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game.","title":"boolean HasModData (table ref)"},{"location":"Isaac/#vector-worldtoscreendistance-vector-pos","text":"","title":"Vector WorldToScreenDistance (Vector pos)"},{"location":"Isaac/#void-registermod-table-ref-string-modname-integer-apiversion","text":"Method to define a mod in the game. THIS NEEDS TO BE DEFINED IN EVERY MOD!","title":"void RegisterMod (table ref, string modName, integer apiVersion )"},{"location":"Isaac/#void-removecallback-table-ref-integer-callbackid-table-callbackfn","text":"","title":"void RemoveCallback (table ref, integer callbackId, table callbackFn )"},{"location":"Isaac/#void-removemoddata-table-ref","text":"Deletes the stored \"saveX.dat\" file if it exists. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game.","title":"void RemoveModData (table ref)"},{"location":"Isaac/#void-renderscaledtext-string-str-float-x-float-y-float-scalex-float-scaley-float-r-float-g-float-b-float-a","text":"Renders a scaled text on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). ScaleX, ScaleY, R ,G ,B and A need to be between [0,1]. Some scale values can cause the font to display deformed and pixelated.","title":"void RenderScaledText (string str, float X, float Y, float ScaleX, float ScaleY, float R, float G, float B, float A )"},{"location":"Isaac/#void-rendertext-string-str-float-x-float-y-float-r-float-g-float-b-float-a","text":"Renders a text with the default size on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). R,G,B and A need to be between [0,1].","title":"void RenderText (string str, float X, float Y, float R, float G, float B, float A )"},{"location":"Isaac/#void-savemoddata-table-ref-string-data","text":"Stores a JSON array/table in a \"saveX.dat\" file. The stored Data persists thruout resets and game restart, so its perfect to store persistent data. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game.","title":"void SaveModData (table ref, string data )"},{"location":"Isaac/#vector-screentoworld-vector-pos","text":"Transfers Screen (aka. Window coordinates) into Worldcoordinates. This can be used to get a specific location in the room in World coordnates The World coordinate system is x[0,inf) y[0,inf).","title":"Vector ScreenToWorld (Vector pos)"},{"location":"Isaac/#vector-screentoworlddistance-vector-pos","text":"","title":"Vector ScreenToWorldDistance (Vector pos)"},{"location":"Isaac/#entity-spawn-int-entitytype-int-entityvariant-int-entitysubtype-vector-position-vector-velocity-entity-spawner","text":"Spawns the defined entity at the given location. If the position is not free, it spawns it in the nearest free position. There are two spawn functions. Isaac.Spawn() and Game():Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() .","title":"Entity Spawn (int entityType, int entityVariant, int entitySubtype, Vector position, Vector velocity, Entity Spawner )"},{"location":"Isaac/#vector-worldtorenderposition-vector-pos","text":"Transfers world (aka. game coordinates) into Rendercoordinates. This can be used to render things at fixed positions in a room. The Render coordinate system is x[0,inf) y[0,inf). It defines the Position on the rendering-plane in the current room.","title":"Vector WorldToRenderPosition (Vector pos)"},{"location":"Isaac/#vector-worldtoscreen-vector-pos","text":"Transfers world (aka. game coordinates) into Screen (aka. Window) coordinates. This can be used to render things next to an entity. The Screen coordinate system is x[0,inf) y[0,inf). Normally, it goes till ~500x ~300y. The return vector contains integer values or numbers ending with .5","title":"Vector WorldToScreen (Vector pos)"},{"location":"Isaac/#vector-worldtoscreendistance-vector-pos_1","text":"","title":"Vector WorldToScreenDistance (Vector pos)"},{"location":"ItemConfig/","text":"Class \"ItemConfig\" \u2693\ufe0e","title":"ItemConfig"},{"location":"ItemConfig/#class-itemconfig","text":"","title":"Class \"ItemConfig\""},{"location":"ItemConfig_Card/","text":"Class \"ItemConfig::Card\" \u2693\ufe0e integer AchievementID \u2693\ufe0e string Description \u2693\ufe0e boolean GreedModeAllowed \u2693\ufe0e string HudAnim \u2693\ufe0e integer ID \u2693\ufe0e string Name \u2693\ufe0e","title":"ItemConfig::Card"},{"location":"ItemConfig_Card/#class-itemconfigcard","text":"","title":"Class \"ItemConfig::Card\""},{"location":"ItemConfig_Card/#integer-achievementid","text":"","title":"integer AchievementID"},{"location":"ItemConfig_Card/#string-description","text":"","title":"string Description"},{"location":"ItemConfig_Card/#boolean-greedmodeallowed","text":"","title":"boolean GreedModeAllowed"},{"location":"ItemConfig_Card/#string-hudanim","text":"","title":"string HudAnim"},{"location":"ItemConfig_Card/#integer-id","text":"","title":"integer ID"},{"location":"ItemConfig_Card/#string-name","text":"","title":"string Name"},{"location":"ItemConfig_Config/","text":"Class \"ItemConfig::Config\" \u2693\ufe0e const Card GetCard (integer ID) \u2693\ufe0e const CardList GetCards () \u2693\ufe0e static boolean ShouldAddCostumeOnPickup (Item Config) \u2693\ufe0e const ItemList GetCollectibles () \u2693\ufe0e Returns the List of all Collectibles. const CostumeList GetCostumes () \u2693\ufe0e const Item GetNullItem (integer ID) \u2693\ufe0e const ItemList GetNullItems () \u2693\ufe0e const PillEffect GetPillEffect (PillEffect PillEffectID) \u2693\ufe0e const PillList GetPillEffects () \u2693\ufe0e const Item GetTrinket (integer ID) \u2693\ufe0e const ItemList GetTrinkets () \u2693\ufe0e static boolean IsValidCollectible (CollectibleType ID) \u2693\ufe0e Function to check if a given item id is a valid collectible id (aka. this item exists). Returns True when it exists and False when it doesnt. static boolean ShouldAddCostumeOnPickup (Item Config) \u2693\ufe0e","title":"ItemConfig::Config"},{"location":"ItemConfig_Config/#class-itemconfigconfig","text":"","title":"Class \"ItemConfig::Config\""},{"location":"ItemConfig_Config/#const-card-getcard-integer-id","text":"","title":"const Card GetCard (integer ID)"},{"location":"ItemConfig_Config/#const-cardlist-getcards","text":"","title":"const CardList GetCards ()"},{"location":"ItemConfig_Config/#static-boolean-shouldaddcostumeonpickup-item-config","text":"","title":"static boolean ShouldAddCostumeOnPickup (Item Config)"},{"location":"ItemConfig_Config/#const-itemlist-getcollectibles","text":"Returns the List of all Collectibles.","title":"const ItemList GetCollectibles ()"},{"location":"ItemConfig_Config/#const-costumelist-getcostumes","text":"","title":"const CostumeList GetCostumes ()"},{"location":"ItemConfig_Config/#const-item-getnullitem-integer-id","text":"","title":"const Item GetNullItem (integer ID)"},{"location":"ItemConfig_Config/#const-itemlist-getnullitems","text":"","title":"const ItemList GetNullItems ()"},{"location":"ItemConfig_Config/#const-pilleffect-getpilleffect-pilleffect-pilleffectid","text":"","title":"const PillEffect GetPillEffect (PillEffect PillEffectID)"},{"location":"ItemConfig_Config/#const-pilllist-getpilleffects","text":"","title":"const PillList GetPillEffects ()"},{"location":"ItemConfig_Config/#const-item-gettrinket-integer-id","text":"","title":"const Item GetTrinket (integer ID)"},{"location":"ItemConfig_Config/#const-itemlist-gettrinkets","text":"","title":"const ItemList GetTrinkets ()"},{"location":"ItemConfig_Config/#static-boolean-isvalidcollectible-collectibletype-id","text":"Function to check if a given item id is a valid collectible id (aka. this item exists). Returns True when it exists and False when it doesnt.","title":"static boolean IsValidCollectible (CollectibleType ID)"},{"location":"ItemConfig_Config/#static-boolean-shouldaddcostumeonpickup-item-config_1","text":"","title":"static boolean ShouldAddCostumeOnPickup (Item Config)"},{"location":"ItemConfig_Costume/","text":"Class \"ItemConfig::Costume\" \u2693\ufe0e string Anm2Path \u2693\ufe0e boolean HasOverlay \u2693\ufe0e boolean HasSkinAlt \u2693\ufe0e integer ID \u2693\ufe0e boolean IsFlying \u2693\ufe0e boolean OverwriteColor \u2693\ufe0e integer Priority \u2693\ufe0e SkinColor SkinColor \u2693\ufe0e","title":"ItemConfig::Costume"},{"location":"ItemConfig_Costume/#class-itemconfigcostume","text":"","title":"Class \"ItemConfig::Costume\""},{"location":"ItemConfig_Costume/#string-anm2path","text":"","title":"string Anm2Path"},{"location":"ItemConfig_Costume/#boolean-hasoverlay","text":"","title":"boolean HasOverlay"},{"location":"ItemConfig_Costume/#boolean-hasskinalt","text":"","title":"boolean HasSkinAlt"},{"location":"ItemConfig_Costume/#integer-id","text":"","title":"integer ID"},{"location":"ItemConfig_Costume/#boolean-isflying","text":"","title":"boolean IsFlying"},{"location":"ItemConfig_Costume/#boolean-overwritecolor","text":"","title":"boolean OverwriteColor"},{"location":"ItemConfig_Costume/#integer-priority","text":"","title":"integer Priority"},{"location":"ItemConfig_Costume/#skincolor-skincolor","text":"","title":"SkinColor SkinColor"},{"location":"ItemConfig_Item/","text":"Class \"ItemConfig::Item\" \u2693\ufe0e boolean IsCollectible () \u2693\ufe0e boolean IsNull () \u2693\ufe0e boolean IsTrinket () \u2693\ufe0e integer AchievementID \u2693\ufe0e integer AddBlackHearts \u2693\ufe0e integer AddBombs \u2693\ufe0e integer AddCoins \u2693\ufe0e integer AddHearts \u2693\ufe0e integer AddKeys \u2693\ufe0e integer AddMaxHearts \u2693\ufe0e integer AddSoulHearts \u2693\ufe0e integer CacheFlags \u2693\ufe0e const const Costume Costume \u2693\ufe0e string Description \u2693\ufe0e integer DevilPrice \u2693\ufe0e boolean Discharged \u2693\ufe0e string GfxFileName \u2693\ufe0e integer ID \u2693\ufe0e integer MaxCharges \u2693\ufe0e integer MaxCooldown \u2693\ufe0e string Name \u2693\ufe0e boolean Special \u2693\ufe0e ItemType Type \u2693\ufe0e mostly for Lua so it will not make a copy","title":"ItemConfig::Item"},{"location":"ItemConfig_Item/#class-itemconfigitem","text":"","title":"Class \"ItemConfig::Item\""},{"location":"ItemConfig_Item/#boolean-iscollectible","text":"","title":"boolean IsCollectible ()"},{"location":"ItemConfig_Item/#boolean-isnull","text":"","title":"boolean IsNull ()"},{"location":"ItemConfig_Item/#boolean-istrinket","text":"","title":"boolean IsTrinket ()"},{"location":"ItemConfig_Item/#integer-achievementid","text":"","title":"integer AchievementID"},{"location":"ItemConfig_Item/#integer-addblackhearts","text":"","title":"integer AddBlackHearts"},{"location":"ItemConfig_Item/#integer-addbombs","text":"","title":"integer AddBombs"},{"location":"ItemConfig_Item/#integer-addcoins","text":"","title":"integer AddCoins"},{"location":"ItemConfig_Item/#integer-addhearts","text":"","title":"integer AddHearts"},{"location":"ItemConfig_Item/#integer-addkeys","text":"","title":"integer AddKeys"},{"location":"ItemConfig_Item/#integer-addmaxhearts","text":"","title":"integer AddMaxHearts"},{"location":"ItemConfig_Item/#integer-addsoulhearts","text":"","title":"integer AddSoulHearts"},{"location":"ItemConfig_Item/#integer-cacheflags","text":"","title":"integer CacheFlags"},{"location":"ItemConfig_Item/#const-const-costume-costume","text":"","title":"const const Costume Costume"},{"location":"ItemConfig_Item/#string-description","text":"","title":"string Description"},{"location":"ItemConfig_Item/#integer-devilprice","text":"","title":"integer DevilPrice"},{"location":"ItemConfig_Item/#boolean-discharged","text":"","title":"boolean Discharged"},{"location":"ItemConfig_Item/#string-gfxfilename","text":"","title":"string GfxFileName"},{"location":"ItemConfig_Item/#integer-id","text":"","title":"integer ID"},{"location":"ItemConfig_Item/#integer-maxcharges","text":"","title":"integer MaxCharges"},{"location":"ItemConfig_Item/#integer-maxcooldown","text":"","title":"integer MaxCooldown"},{"location":"ItemConfig_Item/#string-name","text":"","title":"string Name"},{"location":"ItemConfig_Item/#boolean-special","text":"","title":"boolean Special"},{"location":"ItemConfig_Item/#itemtype-type","text":"mostly for Lua so it will not make a copy","title":"ItemType Type"},{"location":"ItemConfig_PillEffect/","text":"Class \"ItemConfig::PillEffect\" \u2693\ufe0e integer AchievementID \u2693\ufe0e boolean GreedModeAllowed \u2693\ufe0e integer ID \u2693\ufe0e string Name \u2693\ufe0e","title":"ItemConfig::PillEffect"},{"location":"ItemConfig_PillEffect/#class-itemconfigpilleffect","text":"","title":"Class \"ItemConfig::PillEffect\""},{"location":"ItemConfig_PillEffect/#integer-achievementid","text":"","title":"integer AchievementID"},{"location":"ItemConfig_PillEffect/#boolean-greedmodeallowed","text":"","title":"boolean GreedModeAllowed"},{"location":"ItemConfig_PillEffect/#integer-id","text":"","title":"integer ID"},{"location":"ItemConfig_PillEffect/#string-name","text":"","title":"string Name"},{"location":"ItemPool/","text":"Class \"ItemPool\" \u2693\ufe0e void AddBibleUpgrade (integer Add, ItemPoolType PoolType ) \u2693\ufe0e void AddRoomBlacklist (CollectibleType Item) \u2693\ufe0e PillColor ForceAddPillEffect (PillEffect PillEffect) \u2693\ufe0e Forces a pill effect to be in the pool, usually for challenges, returns PillColor for that effect. Card GetCard (integer Seed, boolean Playing, boolean Rune, boolean OnlyRunes ) \u2693\ufe0e CollectibleType GetCollectible (ItemPoolType PoolType, boolean Decrease, integer Seed ) \u2693\ufe0e ItemPoolType GetLastPool () \u2693\ufe0e PillColor GetPill (integer Seed) \u2693\ufe0e PillEffect GetPillEffect (PillColor PillColor) \u2693\ufe0e ItemPoolType GetPoolForRoom (RoomType RoomType, integer Seed ) \u2693\ufe0e TrinketType GetTrinket () \u2693\ufe0e void IdentifyPill (PillColor PillColor) \u2693\ufe0e boolean IsPillIdentified (PillColor PillColor) \u2693\ufe0e boolean RemoveCollectible (CollectibleType Collectible) \u2693\ufe0e Removes a collectible and returns it if it was found. boolean RemoveTrinket (TrinketType Trinket) \u2693\ufe0e void ResetRoomBlacklist () \u2693\ufe0e void ResetTrinkets () \u2693\ufe0e","title":"ItemPool"},{"location":"ItemPool/#class-itempool","text":"","title":"Class \"ItemPool\""},{"location":"ItemPool/#void-addbibleupgrade-integer-add-itempooltype-pooltype","text":"","title":"void AddBibleUpgrade (integer Add, ItemPoolType PoolType )"},{"location":"ItemPool/#void-addroomblacklist-collectibletype-item","text":"","title":"void AddRoomBlacklist (CollectibleType Item)"},{"location":"ItemPool/#pillcolor-forceaddpilleffect-pilleffect-pilleffect","text":"Forces a pill effect to be in the pool, usually for challenges, returns PillColor for that effect.","title":"PillColor ForceAddPillEffect (PillEffect PillEffect)"},{"location":"ItemPool/#card-getcard-integer-seed-boolean-playing-boolean-rune-boolean-onlyrunes","text":"","title":"Card GetCard (integer Seed, boolean Playing, boolean Rune, boolean OnlyRunes )"},{"location":"ItemPool/#collectibletype-getcollectible-itempooltype-pooltype-boolean-decrease-integer-seed","text":"","title":"CollectibleType GetCollectible (ItemPoolType PoolType, boolean Decrease, integer Seed )"},{"location":"ItemPool/#itempooltype-getlastpool","text":"","title":"ItemPoolType GetLastPool ()"},{"location":"ItemPool/#pillcolor-getpill-integer-seed","text":"","title":"PillColor GetPill (integer Seed)"},{"location":"ItemPool/#pilleffect-getpilleffect-pillcolor-pillcolor","text":"","title":"PillEffect GetPillEffect (PillColor PillColor)"},{"location":"ItemPool/#itempooltype-getpoolforroom-roomtype-roomtype-integer-seed","text":"","title":"ItemPoolType GetPoolForRoom (RoomType RoomType, integer Seed )"},{"location":"ItemPool/#trinkettype-gettrinket","text":"","title":"TrinketType GetTrinket ()"},{"location":"ItemPool/#void-identifypill-pillcolor-pillcolor","text":"","title":"void IdentifyPill (PillColor PillColor)"},{"location":"ItemPool/#boolean-ispillidentified-pillcolor-pillcolor","text":"","title":"boolean IsPillIdentified (PillColor PillColor)"},{"location":"ItemPool/#boolean-removecollectible-collectibletype-collectible","text":"Removes a collectible and returns it if it was found.","title":"boolean RemoveCollectible (CollectibleType Collectible)"},{"location":"ItemPool/#boolean-removetrinket-trinkettype-trinket","text":"","title":"boolean RemoveTrinket (TrinketType Trinket)"},{"location":"ItemPool/#void-resetroomblacklist","text":"","title":"void ResetRoomBlacklist ()"},{"location":"ItemPool/#void-resettrinkets","text":"","title":"void ResetTrinkets ()"},{"location":"KColor/","text":"Class \"KColor\" \u2693\ufe0e void KColor (float red, float green, float blue, float alpha ) \u2693\ufe0e Constructor for the \"KColor\" class. Notes: \"KColor\" is only used in the Font class. For most other situations you will need to use the Color() constructor. float Alpha \u2693\ufe0e float Blue \u2693\ufe0e float Green \u2693\ufe0e float Red \u2693\ufe0e","title":"KColor"},{"location":"KColor/#class-kcolor","text":"","title":"Class \"KColor\""},{"location":"KColor/#void-kcolor-float-red-float-green-float-blue-float-alpha","text":"Constructor for the \"KColor\" class. Notes: \"KColor\" is only used in the Font class. For most other situations you will need to use the Color() constructor.","title":"void KColor (float red, float green, float blue, float alpha )"},{"location":"KColor/#float-alpha","text":"","title":"float Alpha"},{"location":"KColor/#float-blue","text":"","title":"float Blue"},{"location":"KColor/#float-green","text":"","title":"float Green"},{"location":"KColor/#float-red","text":"","title":"float Red"},{"location":"Level/","text":"Class \"Level\" \u2693\ufe0e void AddAngelRoomChance (float Chance) \u2693\ufe0e void AddCurse (LevelCurse Curse, boolean ShowName ) \u2693\ufe0e void ApplyBlueMapEffect () \u2693\ufe0e void ApplyCompassEffect (boolean Persistent) \u2693\ufe0e void ApplyMapEffect () \u2693\ufe0e boolean CanOpenChallengeRoom (integer RoomIndex) \u2693\ufe0e boolean CanSpawnDevilRoom () \u2693\ufe0e boolean CanStageHaveCurseOfLabyrinth (LevelStage Stage) \u2693\ufe0e void ChangeRoom (integer RoomIndex) \u2693\ufe0e void DisableDevilRoom () \u2693\ufe0e boolean ForceHorsemanBoss (integer Seed) \u2693\ufe0e return true on success LevelStage GetAbsoluteStage () \u2693\ufe0e Returns the absolute stage, if its greed mode its converted to equivalent one. float GetAngelRoomChance () \u2693\ufe0e boolean GetCanSeeEverything () \u2693\ufe0e Room GetCurrentRoom () \u2693\ufe0e const RoomDescriptor GetCurrentRoomDesc () \u2693\ufe0e integer GetCurrentRoomIndex () \u2693\ufe0e Notes This will always return the roomindex on the levelgrid, on which you entered the current room from. (see black entries in graphic below) string GetCurseName () \u2693\ufe0e integer GetCurses () \u2693\ufe0e RNG GetDevilAngelRoomRNG () \u2693\ufe0e integer GetDungeonPlacementSeed () \u2693\ufe0e Vector GetEnterPosition () \u2693\ufe0e boolean GetHeartPicked () \u2693\ufe0e integer GetLastBossRoomListIndex () \u2693\ufe0e const RoomDescriptor GetLastRoomDesc () \u2693\ufe0e string GetName (LevelStage Stage, StageType Type, integer Curses, int InfiniteLevel, boolean Dyslexia ) \u2693\ufe0e integer GetNonCompleteRoomIndex () \u2693\ufe0e integer GetPreviousRoomIndex () \u2693\ufe0e integer GetRandomRoomIndex (boolean IAmErrorRoom, integer Seed ) \u2693\ufe0e const RoomDescriptor GetRoomByIdx (integer RoomIdx) \u2693\ufe0e integer GetRoomCount () \u2693\ufe0e LuaArrayProxy GetRooms () \u2693\ufe0e LevelStage GetStage () \u2693\ufe0e StageType GetStageType () \u2693\ufe0e integer GetStartingRoomIndex () \u2693\ufe0e boolean GetStateFlag (StateFlag StateFlag) \u2693\ufe0e boolean HasBossChallenge () \u2693\ufe0e void InitializeDevilAngelRoom (boolean ForceAngel, boolean ForceDevil ) \u2693\ufe0e boolean IsAltStage () \u2693\ufe0e boolean IsDevilRoomDisabled () \u2693\ufe0e boolean IsNextStageAvailable () \u2693\ufe0e integer QueryRoomTypeIndex (RoomType RoomType, boolean Visited, RNG rng ) \u2693\ufe0e void RemoveCompassEffect () \u2693\ufe0e void RemoveCurse (LevelCurse Curse) \u2693\ufe0e void RemoveCurses () \u2693\ufe0e void SetCanSeeEverything (boolean Value) \u2693\ufe0e void SetHeartPicked () \u2693\ufe0e void SetNextStage () \u2693\ufe0e This function teleports you directly to the next stage without playing the leveltransition or updating the floors backdrop. Use other functions to fix those issues. void SetRedHeartDamage () \u2693\ufe0e void SetStage (LevelStage Stage, StageType StageType ) \u2693\ufe0e for SetStage/SetNextStage to have effect, call Init afterward void SetStateFlag (StateFlag StateFlag, boolean Val ) \u2693\ufe0e void ShowMap () \u2693\ufe0e Show's all map (world/sun card effect) except the top secret room. void ShowName (boolean Sticky) \u2693\ufe0e void UncoverHiddenDoor (integer CurrentRoomIdx, DoorSlot Slot ) \u2693\ufe0e Uncovers the door on both sides by modifying the saved grid entities for neighboring room. void Update () \u2693\ufe0e void UpdateVisibility () \u2693\ufe0e Notes Whenever you update the visibility of a room on the minimap, it won't update the map automatically, since it is cached. You have to explicitly call afterwards to apply any changes. Example Code This code -- Local variables local game = Game() local level = game:GetLevel() -- Give the player the Compass effect, which will display all of the floor's special rooms on the mini-map level:ApplyCompassEffect() -- Remove the icon for the Treasure Room specifically local treasureIndex = level:QueryRoomTypeIndex(RoomType.ROOM_TREASURE, false, RNG()) local treasureRoom = level:GetRoomByIdx(treasureIndex) treasureRoom.DisplayFlags = 0 -- Since the mini-map is cached, changing display flags won't update it unless we explicitly call this function level:UpdateVisibility() UpdateVisibility() Vector DungeonReturnPosition \u2693\ufe0e integer DungeonReturnRoomIndex \u2693\ufe0e integer EnterDoor \u2693\ufe0e This value defines on which doorslot you entered the room. Bugs Changing this value has no impact on anything. the EnterDoor value is always determined by the LeaveDoor Value and the game itself. integer GreedModeWave \u2693\ufe0e integer LeaveDoor \u2693\ufe0e This value defines on which doorslot you are positioned after the transition. You will always end up at the oposite side of the door specified. Example: LeaveDoor=1 (Up0) will position you at Doorslot Down0 (Logic: Doorslot+2) Notes if level.LeaveDoor is set to anything other than -1, the function will transition based on the room you are currently in.","title":"Level"},{"location":"Level/#class-level","text":"","title":"Class \"Level\""},{"location":"Level/#void-addangelroomchance-float-chance","text":"","title":"void AddAngelRoomChance (float Chance)"},{"location":"Level/#void-addcurse-levelcurse-curse-boolean-showname","text":"","title":"void AddCurse (LevelCurse Curse, boolean ShowName )"},{"location":"Level/#void-applybluemapeffect","text":"","title":"void ApplyBlueMapEffect ()"},{"location":"Level/#void-applycompasseffect-boolean-persistent","text":"","title":"void ApplyCompassEffect (boolean Persistent)"},{"location":"Level/#void-applymapeffect","text":"","title":"void ApplyMapEffect ()"},{"location":"Level/#boolean-canopenchallengeroom-integer-roomindex","text":"","title":"boolean CanOpenChallengeRoom (integer RoomIndex)"},{"location":"Level/#boolean-canspawndevilroom","text":"","title":"boolean CanSpawnDevilRoom ()"},{"location":"Level/#boolean-canstagehavecurseoflabyrinth-levelstage-stage","text":"","title":"boolean CanStageHaveCurseOfLabyrinth (LevelStage Stage)"},{"location":"Level/#void-changeroom-integer-roomindex","text":"","title":"void ChangeRoom (integer RoomIndex)"},{"location":"Level/#void-disabledevilroom","text":"","title":"void DisableDevilRoom ()"},{"location":"Level/#boolean-forcehorsemanboss-integer-seed","text":"return true on success","title":"boolean ForceHorsemanBoss (integer Seed)"},{"location":"Level/#levelstage-getabsolutestage","text":"Returns the absolute stage, if its greed mode its converted to equivalent one.","title":"LevelStage GetAbsoluteStage ()"},{"location":"Level/#float-getangelroomchance","text":"","title":"float GetAngelRoomChance ()"},{"location":"Level/#boolean-getcanseeeverything","text":"","title":"boolean GetCanSeeEverything ()"},{"location":"Level/#room-getcurrentroom","text":"","title":"Room GetCurrentRoom ()"},{"location":"Level/#const-roomdescriptor-getcurrentroomdesc","text":"","title":"const RoomDescriptor GetCurrentRoomDesc ()"},{"location":"Level/#integer-getcurrentroomindex","text":"","title":"integer GetCurrentRoomIndex ()"},{"location":"Level/#string-getcursename","text":"","title":"string GetCurseName ()"},{"location":"Level/#integer-getcurses","text":"","title":"integer GetCurses ()"},{"location":"Level/#rng-getdevilangelroomrng","text":"","title":"RNG GetDevilAngelRoomRNG ()"},{"location":"Level/#integer-getdungeonplacementseed","text":"","title":"integer GetDungeonPlacementSeed ()"},{"location":"Level/#vector-getenterposition","text":"","title":"Vector GetEnterPosition ()"},{"location":"Level/#boolean-getheartpicked","text":"","title":"boolean GetHeartPicked ()"},{"location":"Level/#integer-getlastbossroomlistindex","text":"","title":"integer GetLastBossRoomListIndex ()"},{"location":"Level/#const-roomdescriptor-getlastroomdesc","text":"","title":"const RoomDescriptor GetLastRoomDesc ()"},{"location":"Level/#string-getname-levelstage-stage-stagetype-type-integer-curses-int-infinitelevel-boolean-dyslexia","text":"","title":"string GetName (LevelStage Stage, StageType Type, integer Curses, int InfiniteLevel, boolean Dyslexia )"},{"location":"Level/#integer-getnoncompleteroomindex","text":"","title":"integer GetNonCompleteRoomIndex ()"},{"location":"Level/#integer-getpreviousroomindex","text":"","title":"integer GetPreviousRoomIndex ()"},{"location":"Level/#integer-getrandomroomindex-boolean-iamerrorroom-integer-seed","text":"","title":"integer GetRandomRoomIndex (boolean IAmErrorRoom, integer Seed )"},{"location":"Level/#const-roomdescriptor-getroombyidx-integer-roomidx","text":"","title":"const RoomDescriptor GetRoomByIdx (integer RoomIdx)"},{"location":"Level/#integer-getroomcount","text":"","title":"integer GetRoomCount ()"},{"location":"Level/#luaarrayproxy-getrooms","text":"","title":"LuaArrayProxy GetRooms ()"},{"location":"Level/#levelstage-getstage","text":"","title":"LevelStage GetStage ()"},{"location":"Level/#stagetype-getstagetype","text":"","title":"StageType GetStageType ()"},{"location":"Level/#integer-getstartingroomindex","text":"","title":"integer GetStartingRoomIndex ()"},{"location":"Level/#boolean-getstateflag-stateflag-stateflag","text":"","title":"boolean GetStateFlag (StateFlag StateFlag)"},{"location":"Level/#boolean-hasbosschallenge","text":"","title":"boolean HasBossChallenge ()"},{"location":"Level/#void-initializedevilangelroom-boolean-forceangel-boolean-forcedevil","text":"","title":"void InitializeDevilAngelRoom (boolean ForceAngel, boolean ForceDevil )"},{"location":"Level/#boolean-isaltstage","text":"","title":"boolean IsAltStage ()"},{"location":"Level/#boolean-isdevilroomdisabled","text":"","title":"boolean IsDevilRoomDisabled ()"},{"location":"Level/#boolean-isnextstageavailable","text":"","title":"boolean IsNextStageAvailable ()"},{"location":"Level/#integer-queryroomtypeindex-roomtype-roomtype-boolean-visited-rng-rng","text":"","title":"integer QueryRoomTypeIndex (RoomType RoomType, boolean Visited, RNG rng )"},{"location":"Level/#void-removecompasseffect","text":"","title":"void RemoveCompassEffect ()"},{"location":"Level/#void-removecurse-levelcurse-curse","text":"","title":"void RemoveCurse (LevelCurse Curse)"},{"location":"Level/#void-removecurses","text":"","title":"void RemoveCurses ()"},{"location":"Level/#void-setcanseeeverything-boolean-value","text":"","title":"void SetCanSeeEverything (boolean Value)"},{"location":"Level/#void-setheartpicked","text":"","title":"void SetHeartPicked ()"},{"location":"Level/#void-setnextstage","text":"This function teleports you directly to the next stage without playing the leveltransition or updating the floors backdrop. Use other functions to fix those issues.","title":"void SetNextStage ()"},{"location":"Level/#void-setredheartdamage","text":"","title":"void SetRedHeartDamage ()"},{"location":"Level/#void-setstage-levelstage-stage-stagetype-stagetype","text":"for SetStage/SetNextStage to have effect, call Init afterward","title":"void SetStage (LevelStage Stage, StageType StageType )"},{"location":"Level/#void-setstateflag-stateflag-stateflag-boolean-val","text":"","title":"void SetStateFlag (StateFlag StateFlag, boolean Val )"},{"location":"Level/#void-showmap","text":"Show's all map (world/sun card effect) except the top secret room.","title":"void ShowMap ()"},{"location":"Level/#void-showname-boolean-sticky","text":"","title":"void ShowName (boolean Sticky)"},{"location":"Level/#void-uncoverhiddendoor-integer-currentroomidx-doorslot-slot","text":"Uncovers the door on both sides by modifying the saved grid entities for neighboring room.","title":"void UncoverHiddenDoor (integer CurrentRoomIdx, DoorSlot Slot )"},{"location":"Level/#void-update","text":"","title":"void Update ()"},{"location":"Level/#void-updatevisibility","text":"","title":"void UpdateVisibility ()"},{"location":"Level/#vector-dungeonreturnposition","text":"","title":"Vector DungeonReturnPosition"},{"location":"Level/#integer-dungeonreturnroomindex","text":"","title":"integer DungeonReturnRoomIndex"},{"location":"Level/#integer-enterdoor","text":"This value defines on which doorslot you entered the room.","title":"integer EnterDoor"},{"location":"Level/#integer-greedmodewave","text":"","title":"integer GreedModeWave"},{"location":"Level/#integer-leavedoor","text":"This value defines on which doorslot you are positioned after the transition. You will always end up at the oposite side of the door specified. Example: LeaveDoor=1 (Up0) will position you at Doorslot Down0 (Logic: Doorslot+2)","title":"integer LeaveDoor"},{"location":"MusicManager/","text":"Class \"MusicManager\" \u2693\ufe0e void Crossfade (MusicManager ID) \u2693\ufe0e void Disable () \u2693\ufe0e void DisableLayer () \u2693\ufe0e void Enable () \u2693\ufe0e void EnableLayer () \u2693\ufe0e void Fadein (MusicManager ID, float Volume ) \u2693\ufe0e void Fadeout () \u2693\ufe0e MusicManager GetCurrentMusicID () \u2693\ufe0e MusicManager GetQueuedMusicID () \u2693\ufe0e if nothing is queued, return the current music id boolean IsEnabled () \u2693\ufe0e boolean IsLayerEnabled () \u2693\ufe0e void Pause () \u2693\ufe0e void PitchSlide (float TargetPitch) \u2693\ufe0e void Play (MusicManager ID, float Volume ) \u2693\ufe0e void Queue (MusicManager ID) \u2693\ufe0e void ResetPitch () \u2693\ufe0e void Resume () \u2693\ufe0e void UpdateVolume () \u2693\ufe0e This function sets the music volume to the volume defined in the options menu. void VolumeSlide (float TargetVolume) \u2693\ufe0e","title":"MusicManager"},{"location":"MusicManager/#class-musicmanager","text":"","title":"Class \"MusicManager\""},{"location":"MusicManager/#void-crossfade-musicmanager-id","text":"","title":"void Crossfade (MusicManager ID)"},{"location":"MusicManager/#void-disable","text":"","title":"void Disable ()"},{"location":"MusicManager/#void-disablelayer","text":"","title":"void DisableLayer ()"},{"location":"MusicManager/#void-enable","text":"","title":"void Enable ()"},{"location":"MusicManager/#void-enablelayer","text":"","title":"void EnableLayer ()"},{"location":"MusicManager/#void-fadein-musicmanager-id-float-volume","text":"","title":"void Fadein (MusicManager ID, float Volume )"},{"location":"MusicManager/#void-fadeout","text":"","title":"void Fadeout ()"},{"location":"MusicManager/#musicmanager-getcurrentmusicid","text":"","title":"MusicManager GetCurrentMusicID ()"},{"location":"MusicManager/#musicmanager-getqueuedmusicid","text":"if nothing is queued, return the current music id","title":"MusicManager GetQueuedMusicID ()"},{"location":"MusicManager/#boolean-isenabled","text":"","title":"boolean IsEnabled ()"},{"location":"MusicManager/#boolean-islayerenabled","text":"","title":"boolean IsLayerEnabled ()"},{"location":"MusicManager/#void-pause","text":"","title":"void Pause ()"},{"location":"MusicManager/#void-pitchslide-float-targetpitch","text":"","title":"void PitchSlide (float TargetPitch)"},{"location":"MusicManager/#void-play-musicmanager-id-float-volume","text":"","title":"void Play (MusicManager ID, float Volume )"},{"location":"MusicManager/#void-queue-musicmanager-id","text":"","title":"void Queue (MusicManager ID)"},{"location":"MusicManager/#void-resetpitch","text":"","title":"void ResetPitch ()"},{"location":"MusicManager/#void-resume","text":"","title":"void Resume ()"},{"location":"MusicManager/#void-updatevolume","text":"This function sets the music volume to the volume defined in the options menu.","title":"void UpdateVolume ()"},{"location":"MusicManager/#void-volumeslide-float-targetvolume","text":"","title":"void VolumeSlide (float TargetVolume)"},{"location":"PathFinder/","text":"Class \"PathFinder\" \u2693\ufe0e void EvadeTarget (Vector TargetPos) \u2693\ufe0e void FindGridPath (Vector Pos, float Speed, integer PathMarker, boolean UseDirectPath ) \u2693\ufe0e integer GetEvadeMovementCountdown () \u2693\ufe0e integer GetGridIndex () \u2693\ufe0e boolean HasDirectPath () \u2693\ufe0e boolean HasPathToPos (Vector Pos, boolean IgnorePoop ) \u2693\ufe0e Used for safe check if any NPC is behind rocks/pits, doesn't disturb class members. boolean MoveRandomly (boolean IgnoreStatusEffects) \u2693\ufe0e void MoveRandomlyAxisAligned (float Speed, boolean IgnoreStatusEffects ) \u2693\ufe0e void MoveRandomlyBoss (boolean IgnoreStatusEffects) \u2693\ufe0e void Reset () \u2693\ufe0e void ResetMovementTarget () \u2693\ufe0e void SetCanCrushRocks (boolean value) \u2693\ufe0e void UpdateGridIndex () \u2693\ufe0e","title":"PathFinder"},{"location":"PathFinder/#class-pathfinder","text":"","title":"Class \"PathFinder\""},{"location":"PathFinder/#void-evadetarget-vector-targetpos","text":"","title":"void EvadeTarget (Vector TargetPos)"},{"location":"PathFinder/#void-findgridpath-vector-pos-float-speed-integer-pathmarker-boolean-usedirectpath","text":"","title":"void FindGridPath (Vector Pos, float Speed, integer PathMarker, boolean UseDirectPath )"},{"location":"PathFinder/#integer-getevademovementcountdown","text":"","title":"integer GetEvadeMovementCountdown ()"},{"location":"PathFinder/#integer-getgridindex","text":"","title":"integer GetGridIndex ()"},{"location":"PathFinder/#boolean-hasdirectpath","text":"","title":"boolean HasDirectPath ()"},{"location":"PathFinder/#boolean-haspathtopos-vector-pos-boolean-ignorepoop","text":"Used for safe check if any NPC is behind rocks/pits, doesn't disturb class members.","title":"boolean HasPathToPos (Vector Pos, boolean IgnorePoop )"},{"location":"PathFinder/#boolean-moverandomly-boolean-ignorestatuseffects","text":"","title":"boolean MoveRandomly (boolean IgnoreStatusEffects)"},{"location":"PathFinder/#void-moverandomlyaxisaligned-float-speed-boolean-ignorestatuseffects","text":"","title":"void MoveRandomlyAxisAligned (float Speed, boolean IgnoreStatusEffects )"},{"location":"PathFinder/#void-moverandomlyboss-boolean-ignorestatuseffects","text":"","title":"void MoveRandomlyBoss (boolean IgnoreStatusEffects)"},{"location":"PathFinder/#void-reset","text":"","title":"void Reset ()"},{"location":"PathFinder/#void-resetmovementtarget","text":"","title":"void ResetMovementTarget ()"},{"location":"PathFinder/#void-setcancrushrocks-boolean-value","text":"","title":"void SetCanCrushRocks (boolean value)"},{"location":"PathFinder/#void-updategridindex","text":"","title":"void UpdateGridIndex ()"},{"location":"PlayerTypes/","text":"Class \"PlayerTypes\" \u2693\ufe0e","title":"PlayerTypes"},{"location":"PlayerTypes/#class-playertypes","text":"","title":"Class \"PlayerTypes\""},{"location":"PlayerTypes_ActiveItemDesc/","text":"Class \"PlayerTypes::ActiveItemDesc\" \u2693\ufe0e integer BatteryCharge \u2693\ufe0e integer Charge \u2693\ufe0e For items like Jars this holds the number of flies/hearts. CollectibleType Item \u2693\ufe0e boolean Lock \u2693\ufe0e Helper, avoids double charge on full charge.","title":"PlayerTypes::ActiveItemDesc"},{"location":"PlayerTypes_ActiveItemDesc/#class-playertypesactiveitemdesc","text":"","title":"Class \"PlayerTypes::ActiveItemDesc\""},{"location":"PlayerTypes_ActiveItemDesc/#integer-batterycharge","text":"","title":"integer BatteryCharge"},{"location":"PlayerTypes_ActiveItemDesc/#integer-charge","text":"For items like Jars this holds the number of flies/hearts.","title":"integer Charge"},{"location":"PlayerTypes_ActiveItemDesc/#collectibletype-item","text":"","title":"CollectibleType Item"},{"location":"PlayerTypes_ActiveItemDesc/#boolean-lock","text":"Helper, avoids double charge on full charge.","title":"boolean Lock"},{"location":"PlayerTypes_PosVel/","text":"Class \"PlayerTypes::PosVel\" \u2693\ufe0e Vector Position \u2693\ufe0e Vector Velocity \u2693\ufe0e","title":"PlayerTypes::PosVel"},{"location":"PlayerTypes_PosVel/#class-playertypesposvel","text":"","title":"Class \"PlayerTypes::PosVel\""},{"location":"PlayerTypes_PosVel/#vector-position","text":"","title":"Vector Position"},{"location":"PlayerTypes_PosVel/#vector-velocity","text":"","title":"Vector Velocity"},{"location":"ProjectileParams/","text":"Class \"ProjectileParams\" \u2693\ufe0e void ProjectileParams (void ) \u2693\ufe0e float Acceleration \u2693\ufe0e integer BulletFlags \u2693\ufe0e integer ChangeFlags \u2693\ufe0e Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() integer ChangeTimeout \u2693\ufe0e Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() float ChangeVelocity \u2693\ufe0e Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() float CircleAngle \u2693\ufe0e Angle offset used by fire_projectiles PROJECTILES_CIRCLE type emitter. Random by default. float CurvingStrength \u2693\ufe0e Use very small values for curving like 0.005. float DepthOffset \u2693\ufe0e float DotProductLimit \u2693\ufe0e Direction bullets are being fired in Dot product of FireDirectionLimit, bullet direction must be >= this value float FallingAccelModifier \u2693\ufe0e float FallingSpeedModifier \u2693\ufe0e Vector FireDirectionLimit \u2693\ufe0e boolean GridCollision \u2693\ufe0e float HeightModifier \u2693\ufe0e float HomingStrength \u2693\ufe0e Multiplier on normal homing strength. Unused if SMART bullet flag is not set. Color Color \u2693\ufe0e Vector PositionOffset \u2693\ufe0e float Scale \u2693\ufe0e float Spread \u2693\ufe0e For quad/quint/etc spread shots. Vector TargetPosition \u2693\ufe0e integer Variant \u2693\ufe0e float VelocityMulti \u2693\ufe0e integer WiggleFrameOffset \u2693\ufe0e Used to offset the wiggle wave.","title":"ProjectileParams"},{"location":"ProjectileParams/#class-projectileparams","text":"","title":"Class \"ProjectileParams\""},{"location":"ProjectileParams/#void-projectileparams-void","text":"","title":"void ProjectileParams (void )"},{"location":"ProjectileParams/#float-acceleration","text":"","title":"float Acceleration"},{"location":"ProjectileParams/#integer-bulletflags","text":"","title":"integer BulletFlags"},{"location":"ProjectileParams/#integer-changeflags","text":"Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile()","title":"integer ChangeFlags"},{"location":"ProjectileParams/#integer-changetimeout","text":"Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile()","title":"integer ChangeTimeout"},{"location":"ProjectileParams/#float-changevelocity","text":"Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile()","title":"float ChangeVelocity"},{"location":"ProjectileParams/#float-circleangle","text":"Angle offset used by fire_projectiles PROJECTILES_CIRCLE type emitter. Random by default.","title":"float CircleAngle"},{"location":"ProjectileParams/#float-curvingstrength","text":"Use very small values for curving like 0.005.","title":"float CurvingStrength"},{"location":"ProjectileParams/#float-depthoffset","text":"","title":"float DepthOffset"},{"location":"ProjectileParams/#float-dotproductlimit","text":"Direction bullets are being fired in Dot product of FireDirectionLimit, bullet direction must be >= this value","title":"float DotProductLimit"},{"location":"ProjectileParams/#float-fallingaccelmodifier","text":"","title":"float FallingAccelModifier"},{"location":"ProjectileParams/#float-fallingspeedmodifier","text":"","title":"float FallingSpeedModifier"},{"location":"ProjectileParams/#vector-firedirectionlimit","text":"","title":"Vector FireDirectionLimit"},{"location":"ProjectileParams/#boolean-gridcollision","text":"","title":"boolean GridCollision"},{"location":"ProjectileParams/#float-heightmodifier","text":"","title":"float HeightModifier"},{"location":"ProjectileParams/#float-homingstrength","text":"Multiplier on normal homing strength. Unused if SMART bullet flag is not set.","title":"float HomingStrength"},{"location":"ProjectileParams/#color-color","text":"","title":"Color Color"},{"location":"ProjectileParams/#vector-positionoffset","text":"","title":"Vector PositionOffset"},{"location":"ProjectileParams/#float-scale","text":"","title":"float Scale"},{"location":"ProjectileParams/#float-spread","text":"For quad/quint/etc spread shots.","title":"float Spread"},{"location":"ProjectileParams/#vector-targetposition","text":"","title":"Vector TargetPosition"},{"location":"ProjectileParams/#integer-variant","text":"","title":"integer Variant"},{"location":"ProjectileParams/#float-velocitymulti","text":"","title":"float VelocityMulti"},{"location":"ProjectileParams/#integer-wiggleframeoffset","text":"Used to offset the wiggle wave.","title":"integer WiggleFrameOffset"},{"location":"QueueItemData/","text":"Class \"QueueItemData\" \u2693\ufe0e integer Charge \u2693\ufe0e Config::Item Item \u2693\ufe0e boolean Touched \u2693\ufe0e","title":"QueueItemData"},{"location":"QueueItemData/#class-queueitemdata","text":"","title":"Class \"QueueItemData\""},{"location":"QueueItemData/#integer-charge","text":"","title":"integer Charge"},{"location":"QueueItemData/#configitem-item","text":"","title":"Config::Item Item"},{"location":"QueueItemData/#boolean-touched","text":"","title":"boolean Touched"},{"location":"RNG/","text":"Class \"RNG\" \u2693\ufe0e void RNG (void ) \u2693\ufe0e integer GetSeed () \u2693\ufe0e integer Next () \u2693\ufe0e float RandomFloat () \u2693\ufe0e integer RandomInt (integer Max) \u2693\ufe0e void SetSeed (integer Seed, integer ShiftIdx ) \u2693\ufe0e","title":"RNG"},{"location":"RNG/#class-rng","text":"","title":"Class \"RNG\""},{"location":"RNG/#void-rng-void","text":"","title":"void RNG (void )"},{"location":"RNG/#integer-getseed","text":"","title":"integer GetSeed ()"},{"location":"RNG/#integer-next","text":"","title":"integer Next ()"},{"location":"RNG/#float-randomfloat","text":"","title":"float RandomFloat ()"},{"location":"RNG/#integer-randomint-integer-max","text":"","title":"integer RandomInt (integer Max)"},{"location":"RNG/#void-setseed-integer-seed-integer-shiftidx","text":"","title":"void SetSeed (integer Seed, integer ShiftIdx )"},{"location":"Room/","text":"Class \"Room\" \u2693\ufe0e boolean CheckLine (Vector Pos1, Vector Pos2, LinecheckMode Mode, integer GridPathThreshold, boolean IgnoreWalls, boolean IgnoreCrushable ) \u2693\ufe0e returns true if there is a direct line of sight between Pos1 and Pos2 returns false if the line is obstructed Notes LinecheckModes: 0 : makes the line check collide with anything that impedes ground movement 1 : is a cheaper version of 0, but is not as reliable 2 : is used for explosions, it only collides with walls and indestructible blocks 3 : is a line check that only collides with obstacles that can block projectiles boolean DamageGrid (integer Index, integer Damage ) \u2693\ufe0e Damage Grid Entities currently this concerns GridEntityPoop and GridEntity_Fire returns true if damageable entity was found (and possibly damaged) return false if not used by tears, bombs, some NPCs, etc boolean DestroyGrid (integer Index, boolean Immediate ) \u2693\ufe0e calls DamageGrid internally to damage Poop/Fire removes rocks and opens secret doors returns true if something was destroyed returns false if not used for explosions mostly void EmitBloodFromWalls (integer Duration, integer Count ) \u2693\ufe0e Vector FindFreePickupSpawnPosition (Vector Pos, float InitialStep, boolean AvoidActiveEntities ) \u2693\ufe0e Starting from Pos, will try to find a free spawn position where a newly spawned pickup item will not collide with already spawned pickup items, or solid grid elements such as rocks, or pits The returned position will be aligned to the grid. If no free position is found, the original position (aligned to the grid) is returned. Vector FindFreeTilePosition (Vector Pos, float DistanceThreshold ) \u2693\ufe0e Finds the nearest free tile based on position Stops immediately if the tile sampled has a squared distance less than DistanceThresholdSQ integer GetAliveBossesCount () \u2693\ufe0e integer GetAliveEnemiesCount () \u2693\ufe0e integer GetAwardSeed () \u2693\ufe0e Backdrop::Backdrop GetBackdropType () \u2693\ufe0e Returns the BackdropType (Background) of the current room. Notes BackdropTypes ID Backdrop ID Backdrop 1 Basement 15 Cathedral 2 Cellar 16 Dark Room 3 Burning Basement 17 Chest 4 Caves 18 Mega Satan 5 Catacombs 19 Library 6 Drowned Caves 20 Shop 7 Depths 21 Isaacs Room 8 Necropolis 22 Barren Room 9 Dank Depths 23 Secret Room 10 Womb 24 Dice Room 11 Utero 25 Arcade 12 Scarred Womb 26 Error Room 13 Blue Womb (Hush) 27 Blue Secret 14 Sheol 28 Ultra Greed Shop BossId GetBossID () \u2693\ufe0e This will return the subtype of the current room, since this value is used to determine the boss-portrait to display when entering. Vector GetBottomRightPos () \u2693\ufe0e returns bottom right position inside of walls integer GetBrokenWatchState () \u2693\ufe0e Vector GetCenterPos () \u2693\ufe0e returns the room center position integer GetClampedGridIndex (Vector Position) \u2693\ufe0e converts float position (x,y) to grid index (similar to ingrid) clamps the values if out of bounds Vector GetClampedPosition (Vector Pos, float Margin ) \u2693\ufe0e returns Pos clamped to room borders inside of walls integer GetDecorationSeed () \u2693\ufe0e integer GetDeliriumDistance () \u2693\ufe0e float GetDevilRoomChance () \u2693\ufe0e GridEntityDoor GetDoor (DoorSlot Slot) \u2693\ufe0e Vector GetDoorSlotPosition (DoorSlot Slot) \u2693\ufe0e integer GetDungeonRockIdx () \u2693\ufe0e EntityList GetEntities () \u2693\ufe0e integer GetFrameCount () \u2693\ufe0e GridCollisionClass GetGridCollision (integer GridIndex) \u2693\ufe0e Returns the GridCollisionClass of the grid entity at this grid index. GridCollisionClass GetGridCollisionAtPos (Vector Pos) \u2693\ufe0e Returns the GridCollisionClass of the grid entity at this position in the room. GridEntity GetGridEntity (integer Index) \u2693\ufe0e Returns the GridEntity at this grid index. GridEntity GetGridEntityFromPos (Vector Position) \u2693\ufe0e Returns the GridEntity at this position in the room. integer GetGridHeight () \u2693\ufe0e integer GetGridIndex (Vector Position) \u2693\ufe0e converts float position (x,y) to grid index returns -1 for invalid index integer GetGridPath (integer Index) \u2693\ufe0e integer GetGridPathFromPos (integer Index) \u2693\ufe0e Vector GetGridPosition (integer GridIndex) \u2693\ufe0e converts grid index to float (x,y) position undefined behaviour for invalid index integer GetGridSize () \u2693\ufe0e integer GetGridWidth () \u2693\ufe0e Vector GetLaserTarget (Vector Pos, Vector Dir ) \u2693\ufe0e returns the hit position for a laser beam (Technology, Robo-Baby) usually, the first poop, fire, rock, TNT, or wall encountered on a straight line float GetLightingAlpha () \u2693\ufe0e LRoomAreaDesc GetLRoomAreaDesc () \u2693\ufe0e LRoomTileDesc GetLRoomTileDesc () \u2693\ufe0e integer GetNextShockwaveId () \u2693\ufe0e Vector GetRandomPosition (float Margin) \u2693\ufe0e returns random non tile aligned position integer GetRandomTileIndex (integer Seed) \u2693\ufe0e boolean GetRedHeartDamage () \u2693\ufe0e const Vector GetRenderScrollOffset () \u2693\ufe0e The camera scroll offset and screen shake offsets are both represented here. const Vector GetRenderSurfaceTopLeft () \u2693\ufe0e The position the floor and wall textures will be rendered at. RoomConfig::Stage GetRoomConfigStage () \u2693\ufe0e returns the original stage the room was designed for (useful for The Void) RoomShape GetRoomShape () \u2693\ufe0e BossId GetSecondBossID () \u2693\ufe0e CollectibleType GetSeededCollectible (integer Seed) \u2693\ufe0e integer GetShopLevel () \u2693\ufe0e integer GetSpawnSeed () \u2693\ufe0e integer GetTintedRockIdx () \u2693\ufe0e Vector GetTopLeftPos () \u2693\ufe0e returns top left position inside of walls RoomType GetType () \u2693\ufe0e boolean HasSlowDown () \u2693\ufe0e boolean HasTriggerPressurePlates () \u2693\ufe0e boolean HasWater () \u2693\ufe0e boolean HasWaterPits () \u2693\ufe0e boolean IsAmbushActive () \u2693\ufe0e boolean IsAmbushDone () \u2693\ufe0e boolean IsClear () \u2693\ufe0e boolean IsCurrentRoomLastBoss () \u2693\ufe0e boolean IsDoorSlotAllowed (DoorSlot Slot) \u2693\ufe0e Returns whether this room design may have a door at a given position, disregarding whether those doors exist. boolean IsFirstEnemyDead () \u2693\ufe0e boolean IsFirstVisit () \u2693\ufe0e Broken Watch Room State - 0 = no watch effect, 1 = speed down, 2 = speed up. boolean IsInitialized () \u2693\ufe0e boolean IsLShapedRoom () \u2693\ufe0e boolean IsPositionInRoom (Vector Pos, float Margin ) \u2693\ufe0e boolean IsSacrificeDone () \u2693\ufe0e void KeepDoorsClosed () \u2693\ufe0e void MamaMegaExplossion () \u2693\ufe0e void PlayMusic () \u2693\ufe0e void RemoveDoor (DoorSlot Slot) \u2693\ufe0e void RemoveGridEntity (integer GridIndex, integer PathTrail, boolean KeepDecoration ) \u2693\ufe0e void Render () \u2693\ufe0e void RespawnEnemies () \u2693\ufe0e for D7 collectible Vector ScreenWrapPosition (Vector Pos, float Margin ) \u2693\ufe0e Returns Pos, screen-wrapped (if it is just outside the room on the right it will be moved to the left side of the room, etc) Notes This only wraps the point once, so if it has crossed multiple wrapping planes it will only wrap on the one it's closest to. For wrapping a position that has crossed two planes (outside a room in the top left for instance) call this function iteratively. void SetAmbushDone (boolean Value) \u2693\ufe0e void SetBrokenWatchState (integer State) \u2693\ufe0e void SetCardAgainstHumanity () \u2693\ufe0e void SetClear (boolean Clear) \u2693\ufe0e Needed for angel room, so the clear flag can be set to false when the angel spawns void SetClear(bool Clear) {m_Desc->Clear = Clear;} void SetFirstEnemyDead (boolean Value) \u2693\ufe0e void SetFloorColor (Color FloorColor) \u2693\ufe0e Allows you to apply a color modifier to the floor texture of the current room. Example Code This code changes the floorcolor to red. Game():GetRoom():SetFloorColor(Color(1,1,1,1,255,0,0)) boolean SetGridPath (integer Index, integer Value ) \u2693\ufe0e void SetRedHeartDamage () \u2693\ufe0e void SetSacrificeDone (boolean Done) \u2693\ufe0e void SetShockwaveParam (integer ShockwaveId, ShockwaveParams Params ) \u2693\ufe0e void SetSlowDown (integer Duration) \u2693\ufe0e void SetWallColor (Color WallColor) \u2693\ufe0e Allows you to apply a color modifier to the wall texture of the current room. Example Code This code changes the wallcolor to red. Game():GetRoom():SetWallColor(Color(1,1,1,1,255,0,0)) void ShopReshuffle (boolean KeepCollectibleIdx, boolean ReselectSaleItem ) \u2693\ufe0e void ShopRestockFull () \u2693\ufe0e void ShopRestockPartial () \u2693\ufe0e void SpawnClearAward () \u2693\ufe0e boolean SpawnGridEntity (integer GridIndex, GridEntityType Type, integer Variant, integer Seed, integer VarData ) \u2693\ufe0e boolean TryMakeBridge (GridEntity pit) \u2693\ufe0e void TryPlaceLadder (Vector PlayerPos, Vector PlayerVelocity, Entity Ladder ) \u2693\ufe0e boolean TrySpawnBlueWombDoor (boolean FirstTime, boolean IgnoreTime ) \u2693\ufe0e boolean TrySpawnBossRushDoor (boolean IgnoreTime) \u2693\ufe0e boolean TrySpawnDevilRoomDoor (boolean Animate) \u2693\ufe0e boolean TrySpawnMegaSatanRoomDoor () \u2693\ufe0e boolean TrySpawnTheVoidDoor () \u2693\ufe0e void TurnGold () \u2693\ufe0e void Update () \u2693\ufe0e Updates the current room. Notes Calling this function is NOT needed to apply changes! This function is pretty useless Vector WorldToScreenPosition (Vector WorldPos) \u2693\ufe0e Converts an entity position to one that can be used to render to the screen.","title":"Room"},{"location":"Room/#class-room","text":"","title":"Class \"Room\""},{"location":"Room/#boolean-checkline-vector-pos1-vector-pos2-linecheckmode-mode-integer-gridpaththreshold-boolean-ignorewalls-boolean-ignorecrushable","text":"returns true if there is a direct line of sight between Pos1 and Pos2 returns false if the line is obstructed","title":"boolean CheckLine (Vector Pos1, Vector Pos2, LinecheckMode Mode, integer GridPathThreshold, boolean IgnoreWalls, boolean IgnoreCrushable )"},{"location":"Room/#boolean-damagegrid-integer-index-integer-damage","text":"Damage Grid Entities currently this concerns GridEntityPoop and GridEntity_Fire returns true if damageable entity was found (and possibly damaged) return false if not used by tears, bombs, some NPCs, etc","title":"boolean DamageGrid (integer Index, integer Damage )"},{"location":"Room/#boolean-destroygrid-integer-index-boolean-immediate","text":"calls DamageGrid internally to damage Poop/Fire removes rocks and opens secret doors returns true if something was destroyed returns false if not used for explosions mostly","title":"boolean DestroyGrid (integer Index, boolean Immediate )"},{"location":"Room/#void-emitbloodfromwalls-integer-duration-integer-count","text":"","title":"void EmitBloodFromWalls (integer Duration, integer Count )"},{"location":"Room/#vector-findfreepickupspawnposition-vector-pos-float-initialstep-boolean-avoidactiveentities","text":"Starting from Pos, will try to find a free spawn position where a newly spawned pickup item will not collide with already spawned pickup items, or solid grid elements such as rocks, or pits The returned position will be aligned to the grid. If no free position is found, the original position (aligned to the grid) is returned.","title":"Vector FindFreePickupSpawnPosition (Vector Pos, float InitialStep, boolean AvoidActiveEntities )"},{"location":"Room/#vector-findfreetileposition-vector-pos-float-distancethreshold","text":"Finds the nearest free tile based on position Stops immediately if the tile sampled has a squared distance less than DistanceThresholdSQ","title":"Vector FindFreeTilePosition (Vector Pos, float DistanceThreshold )"},{"location":"Room/#integer-getalivebossescount","text":"","title":"integer GetAliveBossesCount ()"},{"location":"Room/#integer-getaliveenemiescount","text":"","title":"integer GetAliveEnemiesCount ()"},{"location":"Room/#integer-getawardseed","text":"","title":"integer GetAwardSeed ()"},{"location":"Room/#backdropbackdrop-getbackdroptype","text":"Returns the BackdropType (Background) of the current room.","title":"Backdrop::Backdrop GetBackdropType ()"},{"location":"Room/#bossid-getbossid","text":"This will return the subtype of the current room, since this value is used to determine the boss-portrait to display when entering.","title":"BossId GetBossID ()"},{"location":"Room/#vector-getbottomrightpos","text":"returns bottom right position inside of walls","title":"Vector GetBottomRightPos ()"},{"location":"Room/#integer-getbrokenwatchstate","text":"","title":"integer GetBrokenWatchState ()"},{"location":"Room/#vector-getcenterpos","text":"returns the room center position","title":"Vector GetCenterPos ()"},{"location":"Room/#integer-getclampedgridindex-vector-position","text":"converts float position (x,y) to grid index (similar to ingrid) clamps the values if out of bounds","title":"integer GetClampedGridIndex (Vector Position)"},{"location":"Room/#vector-getclampedposition-vector-pos-float-margin","text":"returns Pos clamped to room borders inside of walls","title":"Vector GetClampedPosition (Vector Pos, float Margin )"},{"location":"Room/#integer-getdecorationseed","text":"","title":"integer GetDecorationSeed ()"},{"location":"Room/#integer-getdeliriumdistance","text":"","title":"integer GetDeliriumDistance ()"},{"location":"Room/#float-getdevilroomchance","text":"","title":"float GetDevilRoomChance ()"},{"location":"Room/#gridentitydoor-getdoor-doorslot-slot","text":"","title":"GridEntityDoor GetDoor (DoorSlot Slot)"},{"location":"Room/#vector-getdoorslotposition-doorslot-slot","text":"","title":"Vector GetDoorSlotPosition (DoorSlot Slot)"},{"location":"Room/#integer-getdungeonrockidx","text":"","title":"integer GetDungeonRockIdx ()"},{"location":"Room/#entitylist-getentities","text":"","title":"EntityList GetEntities ()"},{"location":"Room/#integer-getframecount","text":"","title":"integer GetFrameCount ()"},{"location":"Room/#gridcollisionclass-getgridcollision-integer-gridindex","text":"Returns the GridCollisionClass of the grid entity at this grid index.","title":"GridCollisionClass GetGridCollision (integer GridIndex)"},{"location":"Room/#gridcollisionclass-getgridcollisionatpos-vector-pos","text":"Returns the GridCollisionClass of the grid entity at this position in the room.","title":"GridCollisionClass GetGridCollisionAtPos (Vector Pos)"},{"location":"Room/#gridentity-getgridentity-integer-index","text":"Returns the GridEntity at this grid index.","title":"GridEntity GetGridEntity (integer Index)"},{"location":"Room/#gridentity-getgridentityfrompos-vector-position","text":"Returns the GridEntity at this position in the room.","title":"GridEntity GetGridEntityFromPos (Vector Position)"},{"location":"Room/#integer-getgridheight","text":"","title":"integer GetGridHeight ()"},{"location":"Room/#integer-getgridindex-vector-position","text":"converts float position (x,y) to grid index returns -1 for invalid index","title":"integer GetGridIndex (Vector Position)"},{"location":"Room/#integer-getgridpath-integer-index","text":"","title":"integer GetGridPath (integer Index)"},{"location":"Room/#integer-getgridpathfrompos-integer-index","text":"","title":"integer GetGridPathFromPos (integer Index)"},{"location":"Room/#vector-getgridposition-integer-gridindex","text":"converts grid index to float (x,y) position undefined behaviour for invalid index","title":"Vector GetGridPosition (integer GridIndex)"},{"location":"Room/#integer-getgridsize","text":"","title":"integer GetGridSize ()"},{"location":"Room/#integer-getgridwidth","text":"","title":"integer GetGridWidth ()"},{"location":"Room/#vector-getlasertarget-vector-pos-vector-dir","text":"returns the hit position for a laser beam (Technology, Robo-Baby) usually, the first poop, fire, rock, TNT, or wall encountered on a straight line","title":"Vector GetLaserTarget (Vector Pos, Vector Dir )"},{"location":"Room/#float-getlightingalpha","text":"","title":"float GetLightingAlpha ()"},{"location":"Room/#lroomareadesc-getlroomareadesc","text":"","title":"LRoomAreaDesc GetLRoomAreaDesc ()"},{"location":"Room/#lroomtiledesc-getlroomtiledesc","text":"","title":"LRoomTileDesc GetLRoomTileDesc ()"},{"location":"Room/#integer-getnextshockwaveid","text":"","title":"integer GetNextShockwaveId ()"},{"location":"Room/#vector-getrandomposition-float-margin","text":"returns random non tile aligned position","title":"Vector GetRandomPosition (float Margin)"},{"location":"Room/#integer-getrandomtileindex-integer-seed","text":"","title":"integer GetRandomTileIndex (integer Seed)"},{"location":"Room/#boolean-getredheartdamage","text":"","title":"boolean GetRedHeartDamage ()"},{"location":"Room/#const-vector-getrenderscrolloffset","text":"The camera scroll offset and screen shake offsets are both represented here.","title":"const Vector GetRenderScrollOffset ()"},{"location":"Room/#const-vector-getrendersurfacetopleft","text":"The position the floor and wall textures will be rendered at.","title":"const Vector GetRenderSurfaceTopLeft ()"},{"location":"Room/#roomconfigstage-getroomconfigstage","text":"returns the original stage the room was designed for (useful for The Void)","title":"RoomConfig::Stage GetRoomConfigStage ()"},{"location":"Room/#roomshape-getroomshape","text":"","title":"RoomShape GetRoomShape ()"},{"location":"Room/#bossid-getsecondbossid","text":"","title":"BossId GetSecondBossID ()"},{"location":"Room/#collectibletype-getseededcollectible-integer-seed","text":"","title":"CollectibleType GetSeededCollectible (integer Seed)"},{"location":"Room/#integer-getshoplevel","text":"","title":"integer GetShopLevel ()"},{"location":"Room/#integer-getspawnseed","text":"","title":"integer GetSpawnSeed ()"},{"location":"Room/#integer-gettintedrockidx","text":"","title":"integer GetTintedRockIdx ()"},{"location":"Room/#vector-gettopleftpos","text":"returns top left position inside of walls","title":"Vector GetTopLeftPos ()"},{"location":"Room/#roomtype-gettype","text":"","title":"RoomType GetType ()"},{"location":"Room/#boolean-hasslowdown","text":"","title":"boolean HasSlowDown ()"},{"location":"Room/#boolean-hastriggerpressureplates","text":"","title":"boolean HasTriggerPressurePlates ()"},{"location":"Room/#boolean-haswater","text":"","title":"boolean HasWater ()"},{"location":"Room/#boolean-haswaterpits","text":"","title":"boolean HasWaterPits ()"},{"location":"Room/#boolean-isambushactive","text":"","title":"boolean IsAmbushActive ()"},{"location":"Room/#boolean-isambushdone","text":"","title":"boolean IsAmbushDone ()"},{"location":"Room/#boolean-isclear","text":"","title":"boolean IsClear ()"},{"location":"Room/#boolean-iscurrentroomlastboss","text":"","title":"boolean IsCurrentRoomLastBoss ()"},{"location":"Room/#boolean-isdoorslotallowed-doorslot-slot","text":"Returns whether this room design may have a door at a given position, disregarding whether those doors exist.","title":"boolean IsDoorSlotAllowed (DoorSlot Slot)"},{"location":"Room/#boolean-isfirstenemydead","text":"","title":"boolean IsFirstEnemyDead ()"},{"location":"Room/#boolean-isfirstvisit","text":"Broken Watch Room State - 0 = no watch effect, 1 = speed down, 2 = speed up.","title":"boolean IsFirstVisit ()"},{"location":"Room/#boolean-isinitialized","text":"","title":"boolean IsInitialized ()"},{"location":"Room/#boolean-islshapedroom","text":"","title":"boolean IsLShapedRoom ()"},{"location":"Room/#boolean-ispositioninroom-vector-pos-float-margin","text":"","title":"boolean IsPositionInRoom (Vector Pos, float Margin )"},{"location":"Room/#boolean-issacrificedone","text":"","title":"boolean IsSacrificeDone ()"},{"location":"Room/#void-keepdoorsclosed","text":"","title":"void KeepDoorsClosed ()"},{"location":"Room/#void-mamamegaexplossion","text":"","title":"void MamaMegaExplossion ()"},{"location":"Room/#void-playmusic","text":"","title":"void PlayMusic ()"},{"location":"Room/#void-removedoor-doorslot-slot","text":"","title":"void RemoveDoor (DoorSlot Slot)"},{"location":"Room/#void-removegridentity-integer-gridindex-integer-pathtrail-boolean-keepdecoration","text":"","title":"void RemoveGridEntity (integer GridIndex, integer PathTrail, boolean KeepDecoration )"},{"location":"Room/#void-render","text":"","title":"void Render ()"},{"location":"Room/#void-respawnenemies","text":"for D7 collectible","title":"void RespawnEnemies ()"},{"location":"Room/#vector-screenwrapposition-vector-pos-float-margin","text":"Returns Pos, screen-wrapped (if it is just outside the room on the right it will be moved to the left side of the room, etc)","title":"Vector ScreenWrapPosition (Vector Pos, float Margin )"},{"location":"Room/#void-setambushdone-boolean-value","text":"","title":"void SetAmbushDone (boolean Value)"},{"location":"Room/#void-setbrokenwatchstate-integer-state","text":"","title":"void SetBrokenWatchState (integer State)"},{"location":"Room/#void-setcardagainsthumanity","text":"","title":"void SetCardAgainstHumanity ()"},{"location":"Room/#void-setclear-boolean-clear","text":"Needed for angel room, so the clear flag can be set to false when the angel spawns void SetClear(bool Clear) {m_Desc->Clear = Clear;}","title":"void SetClear (boolean Clear)"},{"location":"Room/#void-setfirstenemydead-boolean-value","text":"","title":"void SetFirstEnemyDead (boolean Value)"},{"location":"Room/#void-setfloorcolor-color-floorcolor","text":"Allows you to apply a color modifier to the floor texture of the current room.","title":"void SetFloorColor (Color FloorColor)"},{"location":"Room/#boolean-setgridpath-integer-index-integer-value","text":"","title":"boolean SetGridPath (integer Index, integer Value )"},{"location":"Room/#void-setredheartdamage","text":"","title":"void SetRedHeartDamage ()"},{"location":"Room/#void-setsacrificedone-boolean-done","text":"","title":"void SetSacrificeDone (boolean Done)"},{"location":"Room/#void-setshockwaveparam-integer-shockwaveid-shockwaveparams-params","text":"","title":"void SetShockwaveParam (integer ShockwaveId, ShockwaveParams Params )"},{"location":"Room/#void-setslowdown-integer-duration","text":"","title":"void SetSlowDown (integer Duration)"},{"location":"Room/#void-setwallcolor-color-wallcolor","text":"Allows you to apply a color modifier to the wall texture of the current room.","title":"void SetWallColor (Color WallColor)"},{"location":"Room/#void-shopreshuffle-boolean-keepcollectibleidx-boolean-reselectsaleitem","text":"","title":"void ShopReshuffle (boolean KeepCollectibleIdx, boolean ReselectSaleItem )"},{"location":"Room/#void-shoprestockfull","text":"","title":"void ShopRestockFull ()"},{"location":"Room/#void-shoprestockpartial","text":"","title":"void ShopRestockPartial ()"},{"location":"Room/#void-spawnclearaward","text":"","title":"void SpawnClearAward ()"},{"location":"Room/#boolean-spawngridentity-integer-gridindex-gridentitytype-type-integer-variant-integer-seed-integer-vardata","text":"","title":"boolean SpawnGridEntity (integer GridIndex, GridEntityType Type, integer Variant, integer Seed, integer VarData )"},{"location":"Room/#boolean-trymakebridge-gridentity-pit","text":"","title":"boolean TryMakeBridge (GridEntity pit)"},{"location":"Room/#void-tryplaceladder-vector-playerpos-vector-playervelocity-entity-ladder","text":"","title":"void TryPlaceLadder (Vector PlayerPos, Vector PlayerVelocity, Entity Ladder )"},{"location":"Room/#boolean-tryspawnbluewombdoor-boolean-firsttime-boolean-ignoretime","text":"","title":"boolean TrySpawnBlueWombDoor (boolean FirstTime, boolean IgnoreTime )"},{"location":"Room/#boolean-tryspawnbossrushdoor-boolean-ignoretime","text":"","title":"boolean TrySpawnBossRushDoor (boolean IgnoreTime)"},{"location":"Room/#boolean-tryspawndevilroomdoor-boolean-animate","text":"","title":"boolean TrySpawnDevilRoomDoor (boolean Animate)"},{"location":"Room/#boolean-tryspawnmegasatanroomdoor","text":"","title":"boolean TrySpawnMegaSatanRoomDoor ()"},{"location":"Room/#boolean-tryspawnthevoiddoor","text":"","title":"boolean TrySpawnTheVoidDoor ()"},{"location":"Room/#void-turngold","text":"","title":"void TurnGold ()"},{"location":"Room/#void-update","text":"Updates the current room.","title":"void Update ()"},{"location":"Room/#vector-worldtoscreenposition-vector-worldpos","text":"Converts an entity position to one that can be used to render to the screen.","title":"Vector WorldToScreenPosition (Vector WorldPos)"},{"location":"RoomConfig/","text":"Class \"RoomConfig\" \u2693\ufe0e","title":"RoomConfig"},{"location":"RoomConfig/#class-roomconfig","text":"","title":"Class \"RoomConfig\""},{"location":"RoomConfig_Entry/","text":"Class \"RoomConfig::Entry\" \u2693\ufe0e u16 Subtype \u2693\ufe0e RoomType Type \u2693\ufe0e u16 Variant \u2693\ufe0e float Weight \u2693\ufe0e","title":"RoomConfig::Entry"},{"location":"RoomConfig_Entry/#class-roomconfigentry","text":"","title":"Class \"RoomConfig::Entry\""},{"location":"RoomConfig_Entry/#u16-subtype","text":"","title":"u16 Subtype"},{"location":"RoomConfig_Entry/#roomtype-type","text":"","title":"RoomType Type"},{"location":"RoomConfig_Entry/#u16-variant","text":"","title":"u16 Variant"},{"location":"RoomConfig_Entry/#float-weight","text":"","title":"float Weight"},{"location":"RoomConfig_Room/","text":"Class \"RoomConfig::Room\" \u2693\ufe0e Difficulty Difficulty \u2693\ufe0e IntList Doors \u2693\ufe0e integer Height \u2693\ufe0e float InitialWeight \u2693\ufe0e string Name \u2693\ufe0e RoomShape Shape \u2693\ufe0e integer SpawnCount \u2693\ufe0e SpawnList Spawns \u2693\ufe0e s32 StageID \u2693\ufe0e integer Subtype \u2693\ufe0e RoomType Type \u2693\ufe0e integer Variant \u2693\ufe0e float Weight \u2693\ufe0e integer Width \u2693\ufe0e","title":"RoomConfig::Room"},{"location":"RoomConfig_Room/#class-roomconfigroom","text":"","title":"Class \"RoomConfig::Room\""},{"location":"RoomConfig_Room/#difficulty-difficulty","text":"","title":"Difficulty Difficulty"},{"location":"RoomConfig_Room/#intlist-doors","text":"","title":"IntList Doors"},{"location":"RoomConfig_Room/#integer-height","text":"","title":"integer Height"},{"location":"RoomConfig_Room/#float-initialweight","text":"","title":"float InitialWeight"},{"location":"RoomConfig_Room/#string-name","text":"","title":"string Name"},{"location":"RoomConfig_Room/#roomshape-shape","text":"","title":"RoomShape Shape"},{"location":"RoomConfig_Room/#integer-spawncount","text":"","title":"integer SpawnCount"},{"location":"RoomConfig_Room/#spawnlist-spawns","text":"","title":"SpawnList Spawns"},{"location":"RoomConfig_Room/#s32-stageid","text":"","title":"s32 StageID"},{"location":"RoomConfig_Room/#integer-subtype","text":"","title":"integer Subtype"},{"location":"RoomConfig_Room/#roomtype-type","text":"","title":"RoomType Type"},{"location":"RoomConfig_Room/#integer-variant","text":"","title":"integer Variant"},{"location":"RoomConfig_Room/#float-weight","text":"","title":"float Weight"},{"location":"RoomConfig_Room/#integer-width","text":"","title":"integer Width"},{"location":"RoomConfig_Spawn/","text":"Class \"RoomConfig::Spawn\" \u2693\ufe0e const Entry PickEntry (float r) \u2693\ufe0e r is a value between 0 and 1 u8 EntryCount \u2693\ufe0e float SumWeights \u2693\ufe0e s16 X \u2693\ufe0e s16 Y \u2693\ufe0e","title":"RoomConfig::Spawn"},{"location":"RoomConfig_Spawn/#class-roomconfigspawn","text":"","title":"Class \"RoomConfig::Spawn\""},{"location":"RoomConfig_Spawn/#const-entry-pickentry-float-r","text":"r is a value between 0 and 1","title":"const Entry PickEntry (float r)"},{"location":"RoomConfig_Spawn/#u8-entrycount","text":"","title":"u8 EntryCount"},{"location":"RoomConfig_Spawn/#float-sumweights","text":"","title":"float SumWeights"},{"location":"RoomConfig_Spawn/#s16-x","text":"","title":"s16 X"},{"location":"RoomConfig_Spawn/#s16-y","text":"","title":"s16 Y"},{"location":"RoomDescriptor/","text":"Class \"RoomDescriptor\" \u2693\ufe0e DoorSet AllowedDoors \u2693\ufe0e Contains just on load swapped data (in cases like minibosses, or other such events) integer AwardSeed \u2693\ufe0e used to spawn clear awards (normal, miniboss, boss rooms) and initialize shop items (shop, devil rooms) boolean ChallengeDone \u2693\ufe0e boolean Clear \u2693\ufe0e integer ClearCount \u2693\ufe0e room is clear, don't spawn enemies when visiting bool Clear; RoomDescriptorData Data \u2693\ufe0e integer DecorationSeed \u2693\ufe0e bool AltBossMusic; used for cosmetic stuff like backdrops, room decorations, shopkeeper skins integer DeliriumDistance \u2693\ufe0e Helper for The Void stage, holds the distance to the Delirium boss in room nr. integer DisplayFlags \u2693\ufe0e Indicates what is visible on the minimap. Display Flags (bitwise): 1 << -1 -- Invisible 1 << 0 -- Visible 1 << 1 -- Room Shadow 1 << 2 -- Show Icon The flags are hard to interpret, but here are some examples: 000 = invisible, this is how most rooms start 101 = standard room visibility, this includes rooms that are adjacent and you haven't actively visited. This will usually show icons. 011 = secret room, locked rooms, sac rooms pre-entry* 111 = 011 rooms after entry, but also the rooms directly adjacent to them* (applied after entry) If you have spelunker's hat, bit 1 is completely unused. All special rooms will have the normal behavior of either 000 or 101. iirc this is unique to spelunker's hat, mapping items follow the normal rules. From this my best guess is that bits 1 and 2 are special rendering (display hehe) flags that may have more meaning down below. The important bit for using them is minding that they're used differently mostly for special rooms. As far as I've seen, 001 is completely unused. 010, 100, and 110 may be used for compass or blue map, I don't remember. I think they use 100 integer GridIndex \u2693\ufe0e index in the level grid (always top left) Notes This will always return the top left coordinate of the room on the levelgrid. Therefore, it will return an index not part of the actual room, when checking this value for J-shaped rooms. (See graphic below) boolean HasWater \u2693\ufe0e integer ListIndex \u2693\ufe0e index in the room list boolean NoReward \u2693\ufe0e RoomDescriptorData OverrideData \u2693\ufe0e Tim's reminder to himself: The room variant is in Data. Because Room::Init uses a mix of datas, one from level layout and one from replacement data like minibosses, we need to hold the new room data somewhere. integer PitsCount \u2693\ufe0e integer PoopCount \u2693\ufe0e bool HasWater; boolean PressurePlatesTriggered \u2693\ufe0e boolean SacrificeDone \u2693\ufe0e integer SafeGridIndex \u2693\ufe0e index in the level grid (not always top left, but is guaranteed to point to the room. this is important for LTL shapes!) Notes This will always return the top left coordinate of the room on the levelgrid, except for J-shaped rooms, where it returns the top right index. (see graphic below) integer ShopItemDiscountIdx \u2693\ufe0e integer ShopItemIdx \u2693\ufe0e integer SpawnSeed \u2693\ufe0e used to spawn entities at room load and initialize enemy drop seeds boolean SurpriseMiniboss \u2693\ufe0e integer VisitedCount \u2693\ufe0e how often the room has been visited","title":"RoomDescriptor"},{"location":"RoomDescriptor/#class-roomdescriptor","text":"","title":"Class \"RoomDescriptor\""},{"location":"RoomDescriptor/#doorset-alloweddoors","text":"Contains just on load swapped data (in cases like minibosses, or other such events)","title":"DoorSet AllowedDoors"},{"location":"RoomDescriptor/#integer-awardseed","text":"used to spawn clear awards (normal, miniboss, boss rooms) and initialize shop items (shop, devil rooms)","title":"integer AwardSeed"},{"location":"RoomDescriptor/#boolean-challengedone","text":"","title":"boolean ChallengeDone"},{"location":"RoomDescriptor/#boolean-clear","text":"","title":"boolean Clear"},{"location":"RoomDescriptor/#integer-clearcount","text":"room is clear, don't spawn enemies when visiting bool Clear;","title":"integer ClearCount"},{"location":"RoomDescriptor/#roomdescriptordata-data","text":"","title":"RoomDescriptorData Data"},{"location":"RoomDescriptor/#integer-decorationseed","text":"bool AltBossMusic; used for cosmetic stuff like backdrops, room decorations, shopkeeper skins","title":"integer DecorationSeed"},{"location":"RoomDescriptor/#integer-deliriumdistance","text":"Helper for The Void stage, holds the distance to the Delirium boss in room nr.","title":"integer DeliriumDistance"},{"location":"RoomDescriptor/#integer-displayflags","text":"Indicates what is visible on the minimap. Display Flags (bitwise): 1 << -1 -- Invisible 1 << 0 -- Visible 1 << 1 -- Room Shadow 1 << 2 -- Show Icon The flags are hard to interpret, but here are some examples: 000 = invisible, this is how most rooms start 101 = standard room visibility, this includes rooms that are adjacent and you haven't actively visited. This will usually show icons. 011 = secret room, locked rooms, sac rooms pre-entry* 111 = 011 rooms after entry, but also the rooms directly adjacent to them* (applied after entry) If you have spelunker's hat, bit 1 is completely unused. All special rooms will have the normal behavior of either 000 or 101. iirc this is unique to spelunker's hat, mapping items follow the normal rules. From this my best guess is that bits 1 and 2 are special rendering (display hehe) flags that may have more meaning down below. The important bit for using them is minding that they're used differently mostly for special rooms. As far as I've seen, 001 is completely unused. 010, 100, and 110 may be used for compass or blue map, I don't remember. I think they use 100","title":"integer DisplayFlags"},{"location":"RoomDescriptor/#integer-gridindex","text":"index in the level grid (always top left)","title":"integer GridIndex"},{"location":"RoomDescriptor/#boolean-haswater","text":"","title":"boolean HasWater"},{"location":"RoomDescriptor/#integer-listindex","text":"index in the room list","title":"integer ListIndex"},{"location":"RoomDescriptor/#boolean-noreward","text":"","title":"boolean NoReward"},{"location":"RoomDescriptor/#roomdescriptordata-overridedata","text":"Tim's reminder to himself: The room variant is in Data. Because Room::Init uses a mix of datas, one from level layout and one from replacement data like minibosses, we need to hold the new room data somewhere.","title":"RoomDescriptorData OverrideData"},{"location":"RoomDescriptor/#integer-pitscount","text":"","title":"integer PitsCount"},{"location":"RoomDescriptor/#integer-poopcount","text":"bool HasWater;","title":"integer PoopCount"},{"location":"RoomDescriptor/#boolean-pressureplatestriggered","text":"","title":"boolean PressurePlatesTriggered"},{"location":"RoomDescriptor/#boolean-sacrificedone","text":"","title":"boolean SacrificeDone"},{"location":"RoomDescriptor/#integer-safegridindex","text":"index in the level grid (not always top left, but is guaranteed to point to the room. this is important for LTL shapes!)","title":"integer SafeGridIndex"},{"location":"RoomDescriptor/#integer-shopitemdiscountidx","text":"","title":"integer ShopItemDiscountIdx"},{"location":"RoomDescriptor/#integer-shopitemidx","text":"","title":"integer ShopItemIdx"},{"location":"RoomDescriptor/#integer-spawnseed","text":"used to spawn entities at room load and initialize enemy drop seeds","title":"integer SpawnSeed"},{"location":"RoomDescriptor/#boolean-surpriseminiboss","text":"","title":"boolean SurpriseMiniboss"},{"location":"RoomDescriptor/#integer-visitedcount","text":"how often the room has been visited","title":"integer VisitedCount"},{"location":"RoomDescriptorData/","text":"Class \"RoomDescriptorData\" \u2693\ufe0e integer StageID \u2693\ufe0e userdata Spawns \u2693\ufe0e Bugs Uses userdata, which is a datatype that cant be read/altered via LUA. integer Type \u2693\ufe0e integer Difficulty \u2693\ufe0e integer Subtype \u2693\ufe0e integer Variant \u2693\ufe0e string Name \u2693\ufe0e RoomShape Shape \u2693\ufe0e integer SpawnCount \u2693\ufe0e integer Height \u2693\ufe0e integer InitialWeight \u2693\ufe0e integer Doors \u2693\ufe0e integer Weight \u2693\ufe0e integer Width \u2693\ufe0e","title":"RoomDescriptorData"},{"location":"RoomDescriptorData/#class-roomdescriptordata","text":"","title":"Class \"RoomDescriptorData\""},{"location":"RoomDescriptorData/#integer-stageid","text":"","title":"integer StageID"},{"location":"RoomDescriptorData/#userdata-spawns","text":"","title":"userdata Spawns"},{"location":"RoomDescriptorData/#integer-type","text":"","title":"integer Type"},{"location":"RoomDescriptorData/#integer-difficulty","text":"","title":"integer Difficulty"},{"location":"RoomDescriptorData/#integer-subtype","text":"","title":"integer Subtype"},{"location":"RoomDescriptorData/#integer-variant","text":"","title":"integer Variant"},{"location":"RoomDescriptorData/#string-name","text":"","title":"string Name"},{"location":"RoomDescriptorData/#roomshape-shape","text":"","title":"RoomShape Shape"},{"location":"RoomDescriptorData/#integer-spawncount","text":"","title":"integer SpawnCount"},{"location":"RoomDescriptorData/#integer-height","text":"","title":"integer Height"},{"location":"RoomDescriptorData/#integer-initialweight","text":"","title":"integer InitialWeight"},{"location":"RoomDescriptorData/#integer-doors","text":"","title":"integer Doors"},{"location":"RoomDescriptorData/#integer-weight","text":"","title":"integer Weight"},{"location":"RoomDescriptorData/#integer-width","text":"","title":"integer Width"},{"location":"SFXManager/","text":"Class \"SFXManager\" \u2693\ufe0e void AdjustPitch (SoundEffect ID, float Pitch ) \u2693\ufe0e mostly useful for repeating sounds void AdjustVolume (SoundEffect ID, float Volume ) \u2693\ufe0e mostly useful for repeating sounds float GetAmbientSoundVolume (SoundEffect ID) \u2693\ufe0e boolean IsPlaying (SoundEffect ID) \u2693\ufe0e void Play (SoundEffect ID, float Volume, integer FrameDelay, boolean Loop, float Pitch ) \u2693\ufe0e void Preload (SoundEffect ID) \u2693\ufe0e void SetAmbientSound (SoundEffect ID, float Volume, float Pitch ) \u2693\ufe0e void Stop (SoundEffect ID) \u2693\ufe0e void StopLoopingSounds () \u2693\ufe0e","title":"SFXManager"},{"location":"SFXManager/#class-sfxmanager","text":"","title":"Class \"SFXManager\""},{"location":"SFXManager/#void-adjustpitch-soundeffect-id-float-pitch","text":"mostly useful for repeating sounds","title":"void AdjustPitch (SoundEffect ID, float Pitch )"},{"location":"SFXManager/#void-adjustvolume-soundeffect-id-float-volume","text":"mostly useful for repeating sounds","title":"void AdjustVolume (SoundEffect ID, float Volume )"},{"location":"SFXManager/#float-getambientsoundvolume-soundeffect-id","text":"","title":"float GetAmbientSoundVolume (SoundEffect ID)"},{"location":"SFXManager/#boolean-isplaying-soundeffect-id","text":"","title":"boolean IsPlaying (SoundEffect ID)"},{"location":"SFXManager/#void-play-soundeffect-id-float-volume-integer-framedelay-boolean-loop-float-pitch","text":"","title":"void Play (SoundEffect ID, float Volume, integer FrameDelay, boolean Loop, float Pitch )"},{"location":"SFXManager/#void-preload-soundeffect-id","text":"","title":"void Preload (SoundEffect ID)"},{"location":"SFXManager/#void-setambientsound-soundeffect-id-float-volume-float-pitch","text":"","title":"void SetAmbientSound (SoundEffect ID, float Volume, float Pitch )"},{"location":"SFXManager/#void-stop-soundeffect-id","text":"","title":"void Stop (SoundEffect ID)"},{"location":"SFXManager/#void-stoploopingsounds","text":"","title":"void StopLoopingSounds ()"},{"location":"Seeds/","text":"Class \"Seeds\" \u2693\ufe0e void AddSeedEffect (SeedEffect Value) \u2693\ufe0e boolean CanAddSeedEffect (SeedEffect Value) \u2693\ufe0e void ClearSeedEffects () \u2693\ufe0e void ClearStartSeed () \u2693\ufe0e integer CountSeedEffects () \u2693\ufe0e static integer CountUnlockedSeedEffects () \u2693\ufe0e void ForgetStageSeed (LevelStage Stage) \u2693\ufe0e integer GetNextSeed () \u2693\ufe0e integer GetPlayerInitSeed () \u2693\ufe0e static SeedEffect GetSeedEffect (string str) \u2693\ufe0e integer GetStageSeed (LevelStage Stage) \u2693\ufe0e integer GetStartSeed () \u2693\ufe0e string GetStartSeedString () \u2693\ufe0e boolean HasSeedEffect (SeedEffect Value) \u2693\ufe0e static InitSeedInfo () \u2693\ufe0e boolean IsCustomRun () \u2693\ufe0e Returns true if the player is in a challenge run or a seeded run. boolean IsInitialized () \u2693\ufe0e boolean IsSeedComboBanned (SeedEffect Seed1, SeedEffect Seed2 ) \u2693\ufe0e static boolean IsSpecialSeed (string str) \u2693\ufe0e static boolean IsStringValidSeed (string str) \u2693\ufe0e void RemoveBlockingSeedEffects (SeedEffect Value) \u2693\ufe0e Removes seeds that are banned in conjunction with the given seed. void RemoveSeedEffect (SeedEffect Value) \u2693\ufe0e void Reset () \u2693\ufe0e Removes all seed effects, only goes into effect when the run is restarted void Restart (Challenge CurrentChallenge) \u2693\ufe0e Re-selects a random start seed but only if the start seed was not custom. static string Seed2String (integer seed) \u2693\ufe0e void SetStartSeed (string StartSeed) \u2693\ufe0e Empty string means we will pick a new random seed. static integer String2Seed (string str) \u2693\ufe0e void RestoreGameState(const GameState& State); void SaveGameState(GameState& State);","title":"Seeds"},{"location":"Seeds/#class-seeds","text":"","title":"Class \"Seeds\""},{"location":"Seeds/#void-addseedeffect-seedeffect-value","text":"","title":"void AddSeedEffect (SeedEffect Value)"},{"location":"Seeds/#boolean-canaddseedeffect-seedeffect-value","text":"","title":"boolean CanAddSeedEffect (SeedEffect Value)"},{"location":"Seeds/#void-clearseedeffects","text":"","title":"void ClearSeedEffects ()"},{"location":"Seeds/#void-clearstartseed","text":"","title":"void ClearStartSeed ()"},{"location":"Seeds/#integer-countseedeffects","text":"","title":"integer CountSeedEffects ()"},{"location":"Seeds/#static-integer-countunlockedseedeffects","text":"","title":"static integer CountUnlockedSeedEffects ()"},{"location":"Seeds/#void-forgetstageseed-levelstage-stage","text":"","title":"void ForgetStageSeed (LevelStage Stage)"},{"location":"Seeds/#integer-getnextseed","text":"","title":"integer GetNextSeed ()"},{"location":"Seeds/#integer-getplayerinitseed","text":"","title":"integer GetPlayerInitSeed ()"},{"location":"Seeds/#static-seedeffect-getseedeffect-string-str","text":"","title":"static SeedEffect GetSeedEffect (string str)"},{"location":"Seeds/#integer-getstageseed-levelstage-stage","text":"","title":"integer GetStageSeed (LevelStage Stage)"},{"location":"Seeds/#integer-getstartseed","text":"","title":"integer GetStartSeed ()"},{"location":"Seeds/#string-getstartseedstring","text":"","title":"string GetStartSeedString ()"},{"location":"Seeds/#boolean-hasseedeffect-seedeffect-value","text":"","title":"boolean HasSeedEffect (SeedEffect Value)"},{"location":"Seeds/#static-initseedinfo","text":"","title":"static InitSeedInfo ()"},{"location":"Seeds/#boolean-iscustomrun","text":"Returns true if the player is in a challenge run or a seeded run.","title":"boolean IsCustomRun ()"},{"location":"Seeds/#boolean-isinitialized","text":"","title":"boolean IsInitialized ()"},{"location":"Seeds/#boolean-isseedcombobanned-seedeffect-seed1-seedeffect-seed2","text":"","title":"boolean IsSeedComboBanned (SeedEffect Seed1, SeedEffect Seed2 )"},{"location":"Seeds/#static-boolean-isspecialseed-string-str","text":"","title":"static boolean IsSpecialSeed (string str)"},{"location":"Seeds/#static-boolean-isstringvalidseed-string-str","text":"","title":"static boolean IsStringValidSeed (string str)"},{"location":"Seeds/#void-removeblockingseedeffects-seedeffect-value","text":"Removes seeds that are banned in conjunction with the given seed.","title":"void RemoveBlockingSeedEffects (SeedEffect Value)"},{"location":"Seeds/#void-removeseedeffect-seedeffect-value","text":"","title":"void RemoveSeedEffect (SeedEffect Value)"},{"location":"Seeds/#void-reset","text":"Removes all seed effects, only goes into effect when the run is restarted","title":"void Reset ()"},{"location":"Seeds/#void-restart-challenge-currentchallenge","text":"Re-selects a random start seed but only if the start seed was not custom.","title":"void Restart (Challenge CurrentChallenge)"},{"location":"Seeds/#static-string-seed2string-integer-seed","text":"","title":"static string Seed2String (integer seed)"},{"location":"Seeds/#void-setstartseed-string-startseed","text":"Empty string means we will pick a new random seed.","title":"void SetStartSeed (string StartSeed)"},{"location":"Seeds/#static-integer-string2seed-string-str","text":"void RestoreGameState(const GameState& State); void SaveGameState(GameState& State);","title":"static integer String2Seed (string str)"},{"location":"ShockwaveParams/","text":"Class \"ShockwaveParams\" \u2693\ufe0e integer Age \u2693\ufe0e integer LifeSpan \u2693\ufe0e Vector Position \u2693\ufe0e float Strength \u2693\ufe0e float Time \u2693\ufe0e float TimeDT \u2693\ufe0e","title":"ShockwaveParams"},{"location":"ShockwaveParams/#class-shockwaveparams","text":"","title":"Class \"ShockwaveParams\""},{"location":"ShockwaveParams/#integer-age","text":"","title":"integer Age"},{"location":"ShockwaveParams/#integer-lifespan","text":"","title":"integer LifeSpan"},{"location":"ShockwaveParams/#vector-position","text":"","title":"Vector Position"},{"location":"ShockwaveParams/#float-strength","text":"","title":"float Strength"},{"location":"ShockwaveParams/#float-time","text":"","title":"float Time"},{"location":"ShockwaveParams/#float-timedt","text":"","title":"float TimeDT"},{"location":"Sprite/","text":"Class \"Sprite\" \u2693\ufe0e void Sprite (void ) \u2693\ufe0e const string GetDefaultAnimation () \u2693\ufe0e const string GetDefaultAnimationName () \u2693\ufe0e string GetFilename () \u2693\ufe0e integer GetFrame () \u2693\ufe0e integer GetLayerCount () \u2693\ufe0e integer GetOverlayFrame () \u2693\ufe0e Color GetTexel (Vector SamplePos, Vector RenderPos, float AlphaThreshold ) \u2693\ufe0e boolean IsEventTriggered (string EventName) \u2693\ufe0e boolean IsFinished (string AnimationName) \u2693\ufe0e boolean IsLoaded () \u2693\ufe0e boolean IsOverlayFinished (string AnimationName) \u2693\ufe0e boolean IsOverlayPlaying (string AnimationName) \u2693\ufe0e boolean IsPlaying (string AnimationName) \u2693\ufe0e void Load (string Filename, boolean LoadGraphics ) \u2693\ufe0e void LoadGraphics () \u2693\ufe0e void Play (string AnimationName, boolean Force ) \u2693\ufe0e void PlayOverlay (string AnimationName, boolean Force ) \u2693\ufe0e void PlayRandom (integer Seed) \u2693\ufe0e void Reload () \u2693\ufe0e void RemoveOverlay () \u2693\ufe0e void Render (Vector Pos, Vector TopLeftClamp, Vector BottomRightClamp ) \u2693\ufe0e void RenderLayer (integer LayerId, Vector Pos ) \u2693\ufe0e void ReplaceSpritesheet (integer LayerId, string PngFilename ) \u2693\ufe0e void Reset () \u2693\ufe0e boolean SetAnimation (string AnimationName) \u2693\ufe0e void SetFrame (string AnimationName, integer FrameNum ) \u2693\ufe0e void SetLastFrame () \u2693\ufe0e void SetLayerFrame (integer LayerId, integer FrameNum ) \u2693\ufe0e boolean SetOverlayAnimation (string AnimationName) \u2693\ufe0e void SetOverlayFrame (string AnimationName, integer FrameNum ) \u2693\ufe0e void SetOverlayRenderPriority (boolean RenderFirst) \u2693\ufe0e void Stop () \u2693\ufe0e void Update () \u2693\ufe0e boolean WasEventTriggered (string EventName) \u2693\ufe0e boolean FlipX \u2693\ufe0e boolean FlipY \u2693\ufe0e const Color Color \u2693\ufe0e const Vector Offset \u2693\ufe0e float PlaybackSpeed \u2693\ufe0e float Rotation \u2693\ufe0e const Vector Scale \u2693\ufe0e","title":"Sprite"},{"location":"Sprite/#class-sprite","text":"","title":"Class \"Sprite\""},{"location":"Sprite/#void-sprite-void","text":"","title":"void Sprite (void )"},{"location":"Sprite/#const-string-getdefaultanimation","text":"","title":"const string GetDefaultAnimation ()"},{"location":"Sprite/#const-string-getdefaultanimationname","text":"","title":"const string GetDefaultAnimationName ()"},{"location":"Sprite/#string-getfilename","text":"","title":"string GetFilename ()"},{"location":"Sprite/#integer-getframe","text":"","title":"integer GetFrame ()"},{"location":"Sprite/#integer-getlayercount","text":"","title":"integer GetLayerCount ()"},{"location":"Sprite/#integer-getoverlayframe","text":"","title":"integer GetOverlayFrame ()"},{"location":"Sprite/#color-gettexel-vector-samplepos-vector-renderpos-float-alphathreshold","text":"","title":"Color GetTexel (Vector SamplePos, Vector RenderPos, float AlphaThreshold )"},{"location":"Sprite/#boolean-iseventtriggered-string-eventname","text":"","title":"boolean IsEventTriggered (string EventName)"},{"location":"Sprite/#boolean-isfinished-string-animationname","text":"","title":"boolean IsFinished (string AnimationName)"},{"location":"Sprite/#boolean-isloaded","text":"","title":"boolean IsLoaded ()"},{"location":"Sprite/#boolean-isoverlayfinished-string-animationname","text":"","title":"boolean IsOverlayFinished (string AnimationName)"},{"location":"Sprite/#boolean-isoverlayplaying-string-animationname","text":"","title":"boolean IsOverlayPlaying (string AnimationName)"},{"location":"Sprite/#boolean-isplaying-string-animationname","text":"","title":"boolean IsPlaying (string AnimationName)"},{"location":"Sprite/#void-load-string-filename-boolean-loadgraphics","text":"","title":"void Load (string Filename, boolean LoadGraphics )"},{"location":"Sprite/#void-loadgraphics","text":"","title":"void LoadGraphics ()"},{"location":"Sprite/#void-play-string-animationname-boolean-force","text":"","title":"void Play (string AnimationName, boolean Force )"},{"location":"Sprite/#void-playoverlay-string-animationname-boolean-force","text":"","title":"void PlayOverlay (string AnimationName, boolean Force )"},{"location":"Sprite/#void-playrandom-integer-seed","text":"","title":"void PlayRandom (integer Seed)"},{"location":"Sprite/#void-reload","text":"","title":"void Reload ()"},{"location":"Sprite/#void-removeoverlay","text":"","title":"void RemoveOverlay ()"},{"location":"Sprite/#void-render-vector-pos-vector-topleftclamp-vector-bottomrightclamp","text":"","title":"void Render (Vector Pos, Vector TopLeftClamp, Vector BottomRightClamp )"},{"location":"Sprite/#void-renderlayer-integer-layerid-vector-pos","text":"","title":"void RenderLayer (integer LayerId, Vector Pos )"},{"location":"Sprite/#void-replacespritesheet-integer-layerid-string-pngfilename","text":"","title":"void ReplaceSpritesheet (integer LayerId, string PngFilename )"},{"location":"Sprite/#void-reset","text":"","title":"void Reset ()"},{"location":"Sprite/#boolean-setanimation-string-animationname","text":"","title":"boolean SetAnimation (string AnimationName)"},{"location":"Sprite/#void-setframe-string-animationname-integer-framenum","text":"","title":"void SetFrame (string AnimationName, integer FrameNum )"},{"location":"Sprite/#void-setlastframe","text":"","title":"void SetLastFrame ()"},{"location":"Sprite/#void-setlayerframe-integer-layerid-integer-framenum","text":"","title":"void SetLayerFrame (integer LayerId, integer FrameNum )"},{"location":"Sprite/#boolean-setoverlayanimation-string-animationname","text":"","title":"boolean SetOverlayAnimation (string AnimationName)"},{"location":"Sprite/#void-setoverlayframe-string-animationname-integer-framenum","text":"","title":"void SetOverlayFrame (string AnimationName, integer FrameNum )"},{"location":"Sprite/#void-setoverlayrenderpriority-boolean-renderfirst","text":"","title":"void SetOverlayRenderPriority (boolean RenderFirst)"},{"location":"Sprite/#void-stop","text":"","title":"void Stop ()"},{"location":"Sprite/#void-update","text":"","title":"void Update ()"},{"location":"Sprite/#boolean-waseventtriggered-string-eventname","text":"","title":"boolean WasEventTriggered (string EventName)"},{"location":"Sprite/#boolean-flipx","text":"","title":"boolean FlipX"},{"location":"Sprite/#boolean-flipy","text":"","title":"boolean FlipY"},{"location":"Sprite/#const-color-color","text":"","title":"const Color Color"},{"location":"Sprite/#const-vector-offset","text":"","title":"const Vector Offset"},{"location":"Sprite/#float-playbackspeed","text":"","title":"float PlaybackSpeed"},{"location":"Sprite/#float-rotation","text":"","title":"float Rotation"},{"location":"Sprite/#const-vector-scale","text":"","title":"const Vector Scale"},{"location":"TearParams/","text":"Class \"TearParams\" \u2693\ufe0e integer BombVariant \u2693\ufe0e Color TearColor \u2693\ufe0e float TearDamage \u2693\ufe0e integer TearFlags \u2693\ufe0e float TearHeight \u2693\ufe0e float TearScale \u2693\ufe0e integer TearVariant \u2693\ufe0e","title":"TearParams"},{"location":"TearParams/#class-tearparams","text":"","title":"Class \"TearParams\""},{"location":"TearParams/#integer-bombvariant","text":"","title":"integer BombVariant"},{"location":"TearParams/#color-tearcolor","text":"","title":"Color TearColor"},{"location":"TearParams/#float-teardamage","text":"","title":"float TearDamage"},{"location":"TearParams/#integer-tearflags","text":"","title":"integer TearFlags"},{"location":"TearParams/#float-tearheight","text":"","title":"float TearHeight"},{"location":"TearParams/#float-tearscale","text":"","title":"float TearScale"},{"location":"TearParams/#integer-tearvariant","text":"","title":"integer TearVariant"},{"location":"TemporaryEffect/","text":"Class \"TemporaryEffect\" \u2693\ufe0e integer Cooldown \u2693\ufe0e integer Count \u2693\ufe0e Config::Item Item \u2693\ufe0e","title":"TemporaryEffect"},{"location":"TemporaryEffect/#class-temporaryeffect","text":"","title":"Class \"TemporaryEffect\""},{"location":"TemporaryEffect/#integer-cooldown","text":"","title":"integer Cooldown"},{"location":"TemporaryEffect/#integer-count","text":"","title":"integer Count"},{"location":"TemporaryEffect/#configitem-item","text":"","title":"Config::Item Item"},{"location":"TemporaryEffects/","text":"Class \"TemporaryEffects\" \u2693\ufe0e void AddCollectibleEffect (CollectibleType CollectibleType, boolean AddCostume ) \u2693\ufe0e void AddNullEffect (Config::NullItemID NullId, boolean AddCostume ) \u2693\ufe0e void AddTrinketEffect (TrinketType TrinketType, boolean AddCostume ) \u2693\ufe0e void ClearEffects () \u2693\ufe0e const TemporaryEffect GetCollectibleEffect (CollectibleType CollectibleType) \u2693\ufe0e integer GetCollectibleEffectNum (CollectibleType CollectibleType) \u2693\ufe0e const EffectList GetEffectsList () \u2693\ufe0e const TemporaryEffect GetNullEffect (Config::NullItemID NullId) \u2693\ufe0e integer GetNullEffectNum (Config::NullItemID NullId) \u2693\ufe0e const TemporaryEffect GetTrinketEffect (TrinketType TrinketType) \u2693\ufe0e integer GetTrinketEffectNum (TrinketType TrinketType) \u2693\ufe0e boolean HasCollectibleEffect (CollectibleType CollectibleType) \u2693\ufe0e boolean HasNullEffect (Config::NullItemID NullId) \u2693\ufe0e boolean HasTrinketEffect (TrinketType TrinketType) \u2693\ufe0e void RemoveCollectibleEffect (CollectibleType CollectibleType) \u2693\ufe0e void RemoveNullEffect (Config::NullItemID NullId) \u2693\ufe0e void RemoveTrinketEffect (TrinketType TrinketType) \u2693\ufe0e","title":"TemporaryEffects"},{"location":"TemporaryEffects/#class-temporaryeffects","text":"","title":"Class \"TemporaryEffects\""},{"location":"TemporaryEffects/#void-addcollectibleeffect-collectibletype-collectibletype-boolean-addcostume","text":"","title":"void AddCollectibleEffect (CollectibleType CollectibleType, boolean AddCostume )"},{"location":"TemporaryEffects/#void-addnulleffect-confignullitemid-nullid-boolean-addcostume","text":"","title":"void AddNullEffect (Config::NullItemID NullId, boolean AddCostume )"},{"location":"TemporaryEffects/#void-addtrinketeffect-trinkettype-trinkettype-boolean-addcostume","text":"","title":"void AddTrinketEffect (TrinketType TrinketType, boolean AddCostume )"},{"location":"TemporaryEffects/#void-cleareffects","text":"","title":"void ClearEffects ()"},{"location":"TemporaryEffects/#const-temporaryeffect-getcollectibleeffect-collectibletype-collectibletype","text":"","title":"const TemporaryEffect GetCollectibleEffect (CollectibleType CollectibleType)"},{"location":"TemporaryEffects/#integer-getcollectibleeffectnum-collectibletype-collectibletype","text":"","title":"integer GetCollectibleEffectNum (CollectibleType CollectibleType)"},{"location":"TemporaryEffects/#const-effectlist-geteffectslist","text":"","title":"const EffectList GetEffectsList ()"},{"location":"TemporaryEffects/#const-temporaryeffect-getnulleffect-confignullitemid-nullid","text":"","title":"const TemporaryEffect GetNullEffect (Config::NullItemID NullId)"},{"location":"TemporaryEffects/#integer-getnulleffectnum-confignullitemid-nullid","text":"","title":"integer GetNullEffectNum (Config::NullItemID NullId)"},{"location":"TemporaryEffects/#const-temporaryeffect-gettrinketeffect-trinkettype-trinkettype","text":"","title":"const TemporaryEffect GetTrinketEffect (TrinketType TrinketType)"},{"location":"TemporaryEffects/#integer-gettrinketeffectnum-trinkettype-trinkettype","text":"","title":"integer GetTrinketEffectNum (TrinketType TrinketType)"},{"location":"TemporaryEffects/#boolean-hascollectibleeffect-collectibletype-collectibletype","text":"","title":"boolean HasCollectibleEffect (CollectibleType CollectibleType)"},{"location":"TemporaryEffects/#boolean-hasnulleffect-confignullitemid-nullid","text":"","title":"boolean HasNullEffect (Config::NullItemID NullId)"},{"location":"TemporaryEffects/#boolean-hastrinketeffect-trinkettype-trinkettype","text":"","title":"boolean HasTrinketEffect (TrinketType TrinketType)"},{"location":"TemporaryEffects/#void-removecollectibleeffect-collectibletype-collectibletype","text":"","title":"void RemoveCollectibleEffect (CollectibleType CollectibleType)"},{"location":"TemporaryEffects/#void-removenulleffect-confignullitemid-nullid","text":"","title":"void RemoveNullEffect (Config::NullItemID NullId)"},{"location":"TemporaryEffects/#void-removetrinketeffect-trinkettype-trinkettype","text":"","title":"void RemoveTrinketEffect (TrinketType TrinketType)"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/","text":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\" \u2693\ufe0e","title":"[Tutorial] Adding Costumes to items without LUA"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/#class-tutorialaddingcostumestoitemswithoutlua","text":"","title":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\""},{"location":"Tutorial-Rendertext/","text":"Class \"[Tutorial]Rendertext\" \u2693\ufe0e","title":"[Tutorial] Render text"},{"location":"Tutorial-Rendertext/#class-tutorialrendertext","text":"","title":"Class \"[Tutorial]Rendertext\""},{"location":"UsingZeroBraneStudiotodebugyourscripts/","text":"Class \"UsingZeroBraneStudiotodebugyourscripts\" \u2693\ufe0e","title":"Using ZeroBrane Studio to debug your scripts"},{"location":"UsingZeroBraneStudiotodebugyourscripts/#class-usingzerobranestudiotodebugyourscripts","text":"","title":"Class \"UsingZeroBraneStudiotodebugyourscripts\""},{"location":"Usingadditional.luaFiles/","text":"Class \"Usingadditional.luaFiles\" \u2693\ufe0e","title":"Using additional .lua Files"},{"location":"Usingadditional.luaFiles/#class-usingadditionalluafiles","text":"","title":"Class \"Usingadditional.luaFiles\""},{"location":"Vector/","text":"Class \"Vector\" \u2693\ufe0e void Vector (float , float ) \u2693\ufe0e Vector __add (Vector Right) \u2693\ufe0e Addition operators Vector __div (float Modifier) \u2693\ufe0e Division operators Vector __mul (float Modifier) \u2693\ufe0e Multiplication operators Vector __sub (Vector Right) \u2693\ufe0e Subtraction operators Vector __unm (Vector Right) \u2693\ufe0e Subtraction operators void Clamp (float MinX, float MinY, float MaxX, float MaxY ) \u2693\ufe0e Clamps the vector based on left, top, right, bottom boundings. Doesn't keep direction Vector Clamped (float MinX, float MinY, float MaxX, float MaxY ) \u2693\ufe0e Returns a clamped version of the vector. float Cross (Vector second) \u2693\ufe0e Cross product this is the 2x2 matrix determinant or the resulting z value for their 3D versions with z=0 float Distance (Vector first, Vector second ) \u2693\ufe0e Returns distance between two vectors Example Code local sqtDist = Vector(2,0):Distance(Vector(4,0))) --sqtDist = 2 float DistanceSquared (Vector first, Vector second ) \u2693\ufe0e Returns squared distance between two vectors Example Code local sqtDist = Vector(2,0):DistanceSquared(Vector(4,0))) --sqtDist = 4 float Dot (Vector second) \u2693\ufe0e Dot product static Vector FromAngle (float AngleDegrees) \u2693\ufe0e Build a Vector from an angle, returns a normalized vector. Angle 0 will result in (1, 0). Angle 90 will result in (0, 1). Example Code This code returns a vector that has a 45 degree angle local vec = Vector.GetAngleDegrees(45)) --vec is now Vector(0.70711,0.70711) float GetAngleDegrees () \u2693\ufe0e Returns the angle the vector is facing. The vector (1, 0) will be at 0 degrees. The vector (0, 1) will be at 90 degrees. Example Code This code returns the angle between two positions. local v1 = Vector(1,0) -- has angle 0.0 local v2 = Vector(0,1) -- has angle 90.0 local v3 = v2-v1 -- subtraction of 2 points is a vector connecting the two points print(v3:GetAngleDegrees()) -- prints 45.0 float Length () \u2693\ufe0e Returns the length of the vector float LengthSquared () \u2693\ufe0e Returns the length squared of the vector Vector Lerp (Vector first, Vector second, float t ) \u2693\ufe0e Linear interpolation between two vectors. For t = 0 it returns the first Vector, for t = 1 it returns the second. This function does the same as Lerp, but will not alter the input vectors. function Lerp(vec1, vec2, percent) return vec1 * (1 - percent) + vec2 * percent end Example Code This code will make v1 the vector 50% in between v1 and v2 local v1 = Vector(0,0) local v2 = Vector(1,1) v1:Lerp(v2,0.5) -- v1 equals Vector(0.5,0.5) now void Normalize () \u2693\ufe0e Normalizes this vector Vector Normalized () \u2693\ufe0e Returns a normalized version of this vector void Resize (float NewLength) \u2693\ufe0e Resizes the vector length. Vector Resized (float NewLength) \u2693\ufe0e Returns a resized version of the vector. Vector Rotated (float AngleDegrees) \u2693\ufe0e Returns a rotated version of the vector by AngleDegrees float X \u2693\ufe0e Components of vector. float Y \u2693\ufe0e","title":"Vector"},{"location":"Vector/#class-vector","text":"","title":"Class \"Vector\""},{"location":"Vector/#void-vector-float-float","text":"","title":"void Vector (float , float  )"},{"location":"Vector/#vector-__add-vector-right","text":"Addition operators","title":"Vector __add (Vector Right)"},{"location":"Vector/#vector-__div-float-modifier","text":"Division operators","title":"Vector __div (float Modifier)"},{"location":"Vector/#vector-__mul-float-modifier","text":"Multiplication operators","title":"Vector __mul (float Modifier)"},{"location":"Vector/#vector-__sub-vector-right","text":"Subtraction operators","title":"Vector __sub (Vector Right)"},{"location":"Vector/#vector-__unm-vector-right","text":"Subtraction operators","title":"Vector __unm (Vector Right)"},{"location":"Vector/#void-clamp-float-minx-float-miny-float-maxx-float-maxy","text":"Clamps the vector based on left, top, right, bottom boundings. Doesn't keep direction","title":"void Clamp (float MinX, float MinY, float MaxX, float MaxY )"},{"location":"Vector/#vector-clamped-float-minx-float-miny-float-maxx-float-maxy","text":"Returns a clamped version of the vector.","title":"Vector Clamped (float MinX, float MinY, float MaxX, float MaxY )"},{"location":"Vector/#float-cross-vector-second","text":"Cross product this is the 2x2 matrix determinant or the resulting z value for their 3D versions with z=0","title":"float Cross (Vector second)"},{"location":"Vector/#float-distance-vector-first-vector-second","text":"Returns distance between two vectors","title":"float Distance (Vector first, Vector second )"},{"location":"Vector/#float-distancesquared-vector-first-vector-second","text":"Returns squared distance between two vectors","title":"float DistanceSquared (Vector first, Vector second )"},{"location":"Vector/#float-dot-vector-second","text":"Dot product","title":"float Dot (Vector second)"},{"location":"Vector/#static-vector-fromangle-float-angledegrees","text":"Build a Vector from an angle, returns a normalized vector. Angle 0 will result in (1, 0). Angle 90 will result in (0, 1).","title":"static Vector FromAngle (float AngleDegrees)"},{"location":"Vector/#float-getangledegrees","text":"Returns the angle the vector is facing. The vector (1, 0) will be at 0 degrees. The vector (0, 1) will be at 90 degrees.","title":"float GetAngleDegrees ()"},{"location":"Vector/#float-length","text":"Returns the length of the vector","title":"float Length ()"},{"location":"Vector/#float-lengthsquared","text":"Returns the length squared of the vector","title":"float LengthSquared ()"},{"location":"Vector/#vector-lerp-vector-first-vector-second-float-t","text":"Linear interpolation between two vectors. For t = 0 it returns the first Vector, for t = 1 it returns the second. This function does the same as Lerp, but will not alter the input vectors. function Lerp(vec1, vec2, percent) return vec1 * (1 - percent) + vec2 * percent end","title":"Vector Lerp (Vector first, Vector second, float t )"},{"location":"Vector/#void-normalize","text":"Normalizes this vector","title":"void Normalize ()"},{"location":"Vector/#vector-normalized","text":"Returns a normalized version of this vector","title":"Vector Normalized ()"},{"location":"Vector/#void-resize-float-newlength","text":"Resizes the vector length.","title":"void Resize (float NewLength)"},{"location":"Vector/#vector-resized-float-newlength","text":"Returns a resized version of the vector.","title":"Vector Resized (float NewLength)"},{"location":"Vector/#vector-rotated-float-angledegrees","text":"Returns a rotated version of the vector by AngleDegrees","title":"Vector Rotated (float AngleDegrees)"},{"location":"Vector/#float-x","text":"Components of vector.","title":"float X"},{"location":"Vector/#float-y","text":"","title":"float Y"},{"location":"Writingscreenshaders/","text":"Class \"Writingscreenshaders\" \u2693\ufe0e","title":"Writing screen shaders"},{"location":"Writingscreenshaders/#class-writingscreenshaders","text":"","title":"Class \"Writingscreenshaders\""},{"location":"XMLFiledocumentation/","text":"Class \"XMLFiledocumentation\" \u2693\ufe0e","title":"XML File documentation"},{"location":"XMLFiledocumentation/#class-xmlfiledocumentation","text":"","title":"Class \"XMLFiledocumentation\""}]}