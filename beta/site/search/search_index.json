{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Home \u2693\ufe0e Lua API Documentation for The Binding of Isaac - Afterbirth+ \u2693\ufe0e This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2 THIS PROJECT IS STILL IN EARLY DEVELOPEMENT! If you want to have a specific part of the Documentation explained, consider messaging me. Discord : Wofsauge#6503 Reddit : /u/Wofsauge","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#lua-api-documentation-for-the-binding-of-isaac-afterbirth","text":"This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2","title":"Lua API Documentation for The Binding of Isaac - Afterbirth+"},{"location":"Color/","text":"Class \"Color\" \u2693\ufe0e Functions \u2693\ufe0e Color () \u2693\ufe0e void Color ( float R, float G, float B, float A, int RO, int GO, int BO ) Constructor for the \"Color\" class. Notes: You need to use the KColor() constructor when using the Font class. Colors are made of three separate components, tint, colorize and offset. Tint acts like a color multiplicator. Offset is a color which is added after the tint is applied. Colorize is complicated. See the SetColorize () function for a detailed description. R, G, B and A accept numbers between 0 and 1. RO, GO and BO accept numbers between -255 and 255. WRONG PARSING __mul () \u2693\ufe0e Color __mul ( Color right) Multiplication of two colors. Lerp () \u2693\ufe0e static Color Lerp ( Color m1, Color m2, float t ) Linear Interpolation between two colors. t is the \"progress\" of the interpolation. Setting t = 0.5 means that the color in the middle of m1 and m2 will be returned. Reset () \u2693\ufe0e void Reset ( ) SetColorize () \u2693\ufe0e void SetColorize ( float Red, float Green, float Blue, float Amount ) The colorize function can be used to change the color of sprites. Its the best for that purpose, since it doesnt affect existing coloranimations like the flashing of creep. The values can be between 0 and 1 for normal coloration. if you use higher numbers the color gets more vibrant. Notes The alpha component determines how much colorization must be applied. The function takes the original color, converts it to grayscale, multiplies it by the RGB components and then blends it back with the original color. The alpha value determines the blending factor. Colorization is applied after the tint and before the offset function. Example Code SetColorize ( 1 , 1 , 1 , 1 ) will turn the sprite into grayscale. SetColorize ( 1 , 0 , 0 , 1 ) will turn it red but not as a red tint but as shades of red. SetColorize ( 1 , 1 , 1 , 2 ) will invert the sprite without touching its luminosity. This code changes the color of red Creep to be purple 1 2 3 4 5 6 7 Test : AddCallback ( ModCallbacks . MC_POST_EFFECT_INIT , function ( _ , self ) if self . Variant == EffectVariant . CREEP_RED then local color = Color ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ) color : SetColorize ( 4 , 0 , 4 , 1 ) self : GetSprite (). Color = color end end ) SetOffset () \u2693\ufe0e void SetOffset ( float RedOffset, float GreenOffset, float BlueOffset ) Offset is a color that gets added to the sprite after the Tint was applied. SetTint () \u2693\ufe0e void SetTint ( float RedTint, float GreenTint, float BlueTint, float AlphaTint ) Tint acts like a color multiplicator. Variables \u2693\ufe0e A \u2693\ufe0e float A B \u2693\ufe0e float B BO \u2693\ufe0e float BO G \u2693\ufe0e float G GO \u2693\ufe0e float GO R \u2693\ufe0e float R RO \u2693\ufe0e float RO","title":"Color"},{"location":"Color/#class-color","text":"","title":"Class \"Color\""},{"location":"Color/#functions","text":"","title":"Functions"},{"location":"Color/#color","text":"","title":"Color ()"},{"location":"Color/#__mul","text":"","title":"__mul ()"},{"location":"Color/#lerp","text":"","title":"Lerp ()"},{"location":"Color/#reset","text":"","title":"Reset ()"},{"location":"Color/#setcolorize","text":"","title":"SetColorize ()"},{"location":"Color/#setoffset","text":"","title":"SetOffset ()"},{"location":"Color/#settint","text":"","title":"SetTint ()"},{"location":"Color/#variables","text":"","title":"Variables"},{"location":"Color/#a","text":"","title":"A"},{"location":"Color/#b","text":"","title":"B"},{"location":"Color/#bo","text":"","title":"BO"},{"location":"Color/#g","text":"","title":"G"},{"location":"Color/#go","text":"","title":"GO"},{"location":"Color/#r","text":"","title":"R"},{"location":"Color/#ro","text":"","title":"RO"},{"location":"CppContainer_ArrayProxy/","text":"Class \"CppContainer::ArrayProxy\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx) Size () \u2693\ufe0e class RoomList Size","title":"ArrayProxy"},{"location":"CppContainer_ArrayProxy/#class-cppcontainerarrayproxy","text":"","title":"Class \"CppContainer::ArrayProxy\""},{"location":"CppContainer_ArrayProxy/#functions","text":"","title":"Functions"},{"location":"CppContainer_ArrayProxy/#get","text":"","title":"Get ()"},{"location":"CppContainer_ArrayProxy/#size","text":"","title":"Size ()"},{"location":"CppContainer_ArrayProxy_RoomList/","text":"Class \"CppContainer::ArrayProxy::RoomList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"ArrayProxy::RoomList"},{"location":"CppContainer_ArrayProxy_RoomList/#class-cppcontainerarrayproxyroomlist","text":"","title":"Class \"CppContainer::ArrayProxy::RoomList\""},{"location":"CppContainer_ArrayProxy_RoomList/#functions","text":"","title":"Functions"},{"location":"CppContainer_ArrayProxy_RoomList/#get","text":"","title":"Get ()"},{"location":"CppContainer_ArrayProxy_RoomList/#variables","text":"","title":"Variables"},{"location":"CppContainer_ArrayProxy_RoomList/#size","text":"","title":"Size"},{"location":"CppContainer_EntityList/","text":"Class \"CppContainer::EntityList\" \u2693\ufe0e Functions \u2693\ufe0e __len () \u2693\ufe0e int __len ( ) Get () \u2693\ufe0e Entity Get ( int idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"EntityList"},{"location":"CppContainer_EntityList/#class-cppcontainerentitylist","text":"","title":"Class \"CppContainer::EntityList\""},{"location":"CppContainer_EntityList/#functions","text":"","title":"Functions"},{"location":"CppContainer_EntityList/#__len","text":"","title":"__len ()"},{"location":"CppContainer_EntityList/#get","text":"","title":"Get ()"},{"location":"CppContainer_EntityList/#variables","text":"","title":"Variables"},{"location":"CppContainer_EntityList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_CardConfigList/","text":"Class \"CppContainer::Vector::CardConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Card Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::CardConfigList"},{"location":"CppContainer_Vector_CardConfigList/#class-cppcontainervectorcardconfiglist","text":"","title":"Class \"CppContainer::Vector::CardConfigList\""},{"location":"CppContainer_Vector_CardConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_CardConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_CardConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_CardConfigList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_CostumeConfigList/","text":"Class \"CppContainer::Vector::CostumeConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Costume Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::CostumeConfigList"},{"location":"CppContainer_Vector_CostumeConfigList/#class-cppcontainervectorcostumeconfiglist","text":"","title":"Class \"CppContainer::Vector::CostumeConfigList\""},{"location":"CppContainer_Vector_CostumeConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_CostumeConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_CostumeConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_CostumeConfigList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_EffectList/","text":"Class \"CppContainer::Vector::EffectList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e TemporaryEffect Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::EffectList"},{"location":"CppContainer_Vector_EffectList/#class-cppcontainervectoreffectlist","text":"","title":"Class \"CppContainer::Vector::EffectList\""},{"location":"CppContainer_Vector_EffectList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_EffectList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_EffectList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_EffectList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_ItemConfigList/","text":"Class \"CppContainer::Vector::ItemConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Item Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::ItemConfigList"},{"location":"CppContainer_Vector_ItemConfigList/#class-cppcontainervectoritemconfiglist","text":"","title":"Class \"CppContainer::Vector::ItemConfigList\""},{"location":"CppContainer_Vector_ItemConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_ItemConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_ItemConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_ItemConfigList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_PillConfigList/","text":"Class \"CppContainer::Vector::PillConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e PillEffect Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::PillConfigList"},{"location":"CppContainer_Vector_PillConfigList/#class-cppcontainervectorpillconfiglist","text":"","title":"Class \"CppContainer::Vector::PillConfigList\""},{"location":"CppContainer_Vector_PillConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_PillConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_PillConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_PillConfigList/#size","text":"","title":"Size"},{"location":"CppContainer_Vector_VectorList/","text":"Class \"CppContainer::Vector::VectorList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx) Variables \u2693\ufe0e Size \u2693\ufe0e int Size","title":"Vector::VectorList"},{"location":"CppContainer_Vector_VectorList/#class-cppcontainervectorvectorlist","text":"","title":"Class \"CppContainer::Vector::VectorList\""},{"location":"CppContainer_Vector_VectorList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_VectorList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_VectorList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_VectorList/#size","text":"","title":"Size"},{"location":"DebugConsole/","text":"Class \"DebugConsole\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Debug Console"},{"location":"DebugConsole/#class-debugconsole","text":"","title":"Class \"DebugConsole\""},{"location":"DebugConsole/#functions","text":"","title":"Functions"},{"location":"Entity/","text":"Class \"Entity\" \u2693\ufe0e Functions \u2693\ufe0e AddBurn () \u2693\ufe0e void AddBurn ( EntityRef Source, int Duration, float Damage ) Adds a burn-effect to an enemy. Duration is in Number of Frames. Damage is the Damage taken per frame. Example Code This code damages every entity in the room for 1 second with the damagesource set to the player. The total damage dealt is 30. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddBurn ( player , 30 , 1 ) end AddCharmed () \u2693\ufe0e void AddCharmed ( int Duration) Adds a charmed-effect to an enemy. Duration is in Number of Frames. Charmed enemies are friendly towards isaac and attack other enemies. AddCharmed ( - 1 ) makes the effect permanent and the enemy will follow you even to different rooms. Example Code This code charms every entity in the room for 1 second. 1 2 3 for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddCharmed ( 30 ) end AddConfusion () \u2693\ufe0e void AddConfusion ( EntityRef Source, int Duration, boolean IgnoreBosses ) Adds a confusion effect to an entity. Example Code This code confuses every entity in the room for 1 second while ignoring bosses. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddConfusion ( player , 30 , true ) end AddEntityFlags () \u2693\ufe0e void AddEntityFlags ( int Flags) Add EntityFlags to the entity. Flags are used to add specific effects like poisoning or freeze. You can add multiple flags at the same time by bitwise-concatenating them. Example Code This code adds slowing and confusion to the enetity. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddEntityFlags ( EntityFlag . FLAG_SLOW | EntityFlag . FLAG_CONFUSION ) end WRONG PARSING AddFear () \u2693\ufe0e void AddFear ( EntityRef Source, int Duration ) Adds a fear-effect to an entity. Example Code This code frightens every entity in the room for 1 second. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddFear ( player , 30 ) end AddFreeze () \u2693\ufe0e void AddFreeze ( EntityRef Source, int Duration ) Freezes an entity, making it unable to move and attack. Example Code This code freezes every entity in the room for half a second. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddFreeze ( player , 30 ) end AddHealth () \u2693\ufe0e void AddHealth ( float HitPoints) Heals an entity. AddMidasFreeze () \u2693\ufe0e void AddMidasFreeze ( EntityRef Source, int Duration ) Turns the entity into a gold statue (can't move, can't attack, drops coins when killed) AddPoison () \u2693\ufe0e void AddPoison ( EntityRef Source, int Duration, float Damage ) Adds a poison effect to the entity. AddShrink () \u2693\ufe0e void AddShrink ( EntityRef Source, int Duration ) Adds a shrink effect to the entity. AddSlowing () \u2693\ufe0e void AddSlowing ( EntityRef Source, int Duration, float SlowValue, Color SlowColor ) Makes the friction higher. AddVelocity () \u2693\ufe0e void AddVelocity ( Vector Velocity) Adds velocity to the entity. This can be used to move him in a certain direktion (for example as a result of collision) BloodExplode () \u2693\ufe0e void BloodExplode ( ) Explodes with gibs and blood. CanShutDoors () \u2693\ufe0e boolean CanShutDoors ( ) enemies keep the doors shut. ClearEntityFlags () \u2693\ufe0e void ClearEntityFlags ( int Flags) Removes all EntityFlags from the entity. WRONG PARSING CollidesWithGrid () \u2693\ufe0e boolean CollidesWithGrid ( ) Returns true, if the entity is able to collide with the grid. Die () \u2693\ufe0e void Die ( ) Kills the entity and trigger its death animation. Exists () \u2693\ufe0e boolean Exists ( ) Returns true, if this entity still exists. GetBossID () \u2693\ufe0e BossId GetBossID ( ) If the entity is a boss, it returns its specific boss id. If it isnt a boss it will return 0. GetColor () \u2693\ufe0e Color GetColor ( ) Returns the Color object assosiated to this entity. GetData () \u2693\ufe0e table GetData ( ) Returns a table that contains all data assosiated with the entity. This can be used to add custom data as well. Notes Data associated with an entity does only persists in between rooms, when the entity is a player, familiar or the entity has the \"EntityFlag.FLAG_PERSISTENT\" Flag active. Data does not persists in between exiting the game to a menu, or when restarting/finishing a run. Example Code This code adds custom data to an entity or prints it in the console if it exists. 1 2 3 4 5 if type ( entity : GetData ()[ \"MyValue\" ]) == type ( nil ) then -- checks , if the Data does exist already entity : GetData ()[ \"MyValue\" ] = \"Cool\" -- assign a value to the data else print ( entity : GetData ()[ \"MyValue\" ]) -- this will print \"Cool\" in the console end GetDropRNG () \u2693\ufe0e RNG GetDropRNG ( ) Returns the assigned RNG object for the entity. This RNG is used to determine the items that are dropped on the entities death. GetEntityFlags () \u2693\ufe0e int GetEntityFlags ( ) Get the EntityFlags of the entity. This will be a number which acts like a bitmask. Example Code This code prints something in the console, if the entity has a specific EntityFlag . 1 2 3 if entity : GetEntityFlags () & amp ; EntityFlag . FLAG_CONFUSION == EntityFlag . FLAG_CONFUSION then print ( \"This entity is confused!\" ) end WRONG PARSING GetLastChild () \u2693\ufe0e Entity GetLastChild ( ) Returns the last entity spawned by this entity. GetLastParent () \u2693\ufe0e Entity GetLastParent ( ) Returns the last parent of this entity. GetSprite () \u2693\ufe0e Sprite GetSprite ( ) Return the sprite object of the entity. HasCommonParentWithEntity () \u2693\ufe0e boolean HasCommonParentWithEntity ( Entity Other) HasEntityFlags () \u2693\ufe0e boolean HasEntityFlags ( int Flags) Returns true, if the entity has all named EntityFlags set. Example Code This code prints something in the console, if the entity has a specific EntityFlag . 1 2 3 if entity : HasEntityFlags ( EntityFlag . FLAG_CONFUSION ) then print ( \"This entity is confused!\" ) end WRONG PARSING HasFullHealth () \u2693\ufe0e boolean HasFullHealth ( ) HasMortalDamage () \u2693\ufe0e boolean HasMortalDamage ( ) Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. HasMortalDamage() returns true if the buffered damage is enough to kill the entity. HasMortalDamage() will be updated additionally after TakeDamage() is called. IsActiveEnemy () \u2693\ufe0e boolean IsActiveEnemy ( boolean includeDead) return true for non background NPCs (ex: every enemy except fire and shopkeepers) IsBoss () \u2693\ufe0e boolean IsBoss ( ) bosses display health bar IsDead () \u2693\ufe0e boolean IsDead ( ) IsEnemy () \u2693\ufe0e boolean IsEnemy ( ) return true for NPCs that are not controlled by the player IsFlying () \u2693\ufe0e boolean IsFlying ( ) IsFrame () \u2693\ufe0e boolean IsFrame ( int Frame, int Offset ) true every X frames IsInvincible () \u2693\ufe0e boolean IsInvincible ( ) IsVisible () \u2693\ufe0e boolean IsVisible ( ) IsVulnerableEnemy () \u2693\ufe0e boolean IsVulnerableEnemy ( ) return true for enemies that can be damaged Kill () \u2693\ufe0e void Kill ( ) Kills the entity and makes a blood splat or gibs. MultiplyFriction () \u2693\ufe0e void MultiplyFriction ( float Value) PostRender () \u2693\ufe0e void PostRender ( ) Remove () \u2693\ufe0e void Remove ( ) Remove the entity from the game instantly, without doing any additional effects/animations. RemoveStatusEffects () \u2693\ufe0e void RemoveStatusEffects ( ) Removes all Status Effects from the entity. Render () \u2693\ufe0e void Render ( Vector Offset) Render the current sprite of the Entity at the current entity position + offset. RenderShadowLayer () \u2693\ufe0e boolean RenderShadowLayer ( Vector Offset) Render the shadow / shadow layer again. SetColor () \u2693\ufe0e void SetColor ( Color Color, int Duration, int Priority, boolean Fadeout, boolean Share ) Set the colormask for the entity. This can be used to tint the sprites in different colors. Example Code This code changes the color of the sprite to a fully white sprite for 15 frames. 1 entity : SetColor ( Color ( 1 , 1 , 1 , 1 , 255 , 255 , 255 ), 15 , 1 , false , false ) SetSize () \u2693\ufe0e void SetSize ( float Size, Vector SizeMulti, int NumGridCollisionPoints ) Set the size ofthe entity. SetSpriteFrame () \u2693\ufe0e void SetSpriteFrame ( string AnimationName, int FrameNum ) SetSpriteOverlayFrame () \u2693\ufe0e void SetSpriteOverlayFrame ( string AnimationName, int FrameNum ) TakeDamage () \u2693\ufe0e boolean TakeDamage ( float Damage, int Flags, EntityRef Source, int DamageCountdown ) Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. Therefore, TakeDamage() will not decremented the entities HP immediately upon calling the function. Rather, it is only updated on the frame afterwards. ToBomb () \u2693\ufe0e EntityBomb ToBomb ( ) ToEffect () \u2693\ufe0e EntityEffect ToEffect ( ) ToFamiliar () \u2693\ufe0e EntityFamiliar ToFamiliar ( ) ToKnife () \u2693\ufe0e EntityKnife ToKnife ( ) ToLaser () \u2693\ufe0e EntityLaser ToLaser ( ) ToNPC () \u2693\ufe0e EntityNPC ToNPC ( ) ToPickup () \u2693\ufe0e EntityPickup ToPickup ( ) ToPlayer () \u2693\ufe0e EntityPlayer ToPlayer ( ) ToProjectile () \u2693\ufe0e EntityProjectile ToProjectile ( ) ToTear () \u2693\ufe0e EntityTear ToTear ( ) Update () \u2693\ufe0e void Update ( ) Child () \u2693\ufe0e Entity Child Variables \u2693\ufe0e CollisionDamage \u2693\ufe0e float CollisionDamage DepthOffset \u2693\ufe0e float DepthOffset Get/Set the depth-offset of the entity. This value is added to the Y Position of the entity, which is then used to determine the rendering order of each entity. Default value is 0 for all entities. Example Code This code explains how this variable works. 1 2 3 4 5 6 7 entity1 . Position . Y -- =& gt ; 50 entity2 . Position . Y -- =& gt ; 45 -- Entity1 is rendered in front of Entity2 entity1 . DepthOffset = - 10 -- new Entity1 renderYPosition =& gt ; 40 -- Entity2 is rendered in front of Entity1 DropSeed \u2693\ufe0e int DropSeed Get/set the Seed of the Drop RNG. EntityCollisionClass \u2693\ufe0e EntityCollisionClass EntityCollisionClass FlipX \u2693\ufe0e boolean FlipX FrameCount \u2693\ufe0e int FrameCount Friction \u2693\ufe0e float Friction loaded from entity config GridCollisionClass \u2693\ufe0e GridCollisionClass GridCollisionClass HitPoints \u2693\ufe0e float HitPoints Notes The HitPoints value is not decremented immediately upon taking damage like you would expect. Rather, it is only updated on the frame after the entity takes damage. Index \u2693\ufe0e int Index InitSeed \u2693\ufe0e int InitSeed Mass \u2693\ufe0e float Mass MaxHitPoints \u2693\ufe0e float MaxHitPoints Parent \u2693\ufe0e Entity Parent Position \u2693\ufe0e Vector Position PositionOffset \u2693\ufe0e Vector PositionOffset RenderZOffset \u2693\ufe0e int RenderZOffset Bugs This variable doesnt seem to do anything useful. Use DepthOffset instead. SizeMulti \u2693\ufe0e Vector SizeMulti SpawnerEntity \u2693\ufe0e Entity SpawnerEntity SpawnerType \u2693\ufe0e EntityType SpawnerType SpawnerVariant \u2693\ufe0e int SpawnerVariant SpawnGridIndex \u2693\ufe0e int SpawnGridIndex SplatColor \u2693\ufe0e Color SplatColor SpriteOffset \u2693\ufe0e Vector SpriteOffset SpriteRotation \u2693\ufe0e float SpriteRotation SpriteScale \u2693\ufe0e Vector SpriteScale SubType \u2693\ufe0e int SubType Target \u2693\ufe0e Entity Target TargetPosition \u2693\ufe0e Vector TargetPosition Type \u2693\ufe0e EntityType Type Variant \u2693\ufe0e int Variant Velocity \u2693\ufe0e Vector Velocity Visible \u2693\ufe0e boolean Visible Size \u2693\ufe0e float Size Returns the size of the hitbox on an entity.","title":"Entity"},{"location":"Entity/#class-entity","text":"","title":"Class \"Entity\""},{"location":"Entity/#functions","text":"","title":"Functions"},{"location":"Entity/#addburn","text":"","title":"AddBurn ()"},{"location":"Entity/#addcharmed","text":"","title":"AddCharmed ()"},{"location":"Entity/#addconfusion","text":"","title":"AddConfusion ()"},{"location":"Entity/#addentityflags","text":"","title":"AddEntityFlags ()"},{"location":"Entity/#addfear","text":"","title":"AddFear ()"},{"location":"Entity/#addfreeze","text":"","title":"AddFreeze ()"},{"location":"Entity/#addhealth","text":"","title":"AddHealth ()"},{"location":"Entity/#addmidasfreeze","text":"","title":"AddMidasFreeze ()"},{"location":"Entity/#addpoison","text":"","title":"AddPoison ()"},{"location":"Entity/#addshrink","text":"","title":"AddShrink ()"},{"location":"Entity/#addslowing","text":"","title":"AddSlowing ()"},{"location":"Entity/#addvelocity","text":"","title":"AddVelocity ()"},{"location":"Entity/#bloodexplode","text":"","title":"BloodExplode ()"},{"location":"Entity/#canshutdoors","text":"","title":"CanShutDoors ()"},{"location":"Entity/#clearentityflags","text":"","title":"ClearEntityFlags ()"},{"location":"Entity/#collideswithgrid","text":"","title":"CollidesWithGrid ()"},{"location":"Entity/#die","text":"","title":"Die ()"},{"location":"Entity/#exists","text":"","title":"Exists ()"},{"location":"Entity/#getbossid","text":"","title":"GetBossID ()"},{"location":"Entity/#getcolor","text":"","title":"GetColor ()"},{"location":"Entity/#getdata","text":"","title":"GetData ()"},{"location":"Entity/#getdroprng","text":"","title":"GetDropRNG ()"},{"location":"Entity/#getentityflags","text":"","title":"GetEntityFlags ()"},{"location":"Entity/#getlastchild","text":"","title":"GetLastChild ()"},{"location":"Entity/#getlastparent","text":"","title":"GetLastParent ()"},{"location":"Entity/#getsprite","text":"","title":"GetSprite ()"},{"location":"Entity/#hascommonparentwithentity","text":"","title":"HasCommonParentWithEntity ()"},{"location":"Entity/#hasentityflags","text":"","title":"HasEntityFlags ()"},{"location":"Entity/#hasfullhealth","text":"","title":"HasFullHealth ()"},{"location":"Entity/#hasmortaldamage","text":"","title":"HasMortalDamage ()"},{"location":"Entity/#isactiveenemy","text":"","title":"IsActiveEnemy ()"},{"location":"Entity/#isboss","text":"","title":"IsBoss ()"},{"location":"Entity/#isdead","text":"","title":"IsDead ()"},{"location":"Entity/#isenemy","text":"","title":"IsEnemy ()"},{"location":"Entity/#isflying","text":"","title":"IsFlying ()"},{"location":"Entity/#isframe","text":"","title":"IsFrame ()"},{"location":"Entity/#isinvincible","text":"","title":"IsInvincible ()"},{"location":"Entity/#isvisible","text":"","title":"IsVisible ()"},{"location":"Entity/#isvulnerableenemy","text":"","title":"IsVulnerableEnemy ()"},{"location":"Entity/#kill","text":"","title":"Kill ()"},{"location":"Entity/#multiplyfriction","text":"","title":"MultiplyFriction ()"},{"location":"Entity/#postrender","text":"","title":"PostRender ()"},{"location":"Entity/#remove","text":"","title":"Remove ()"},{"location":"Entity/#removestatuseffects","text":"","title":"RemoveStatusEffects ()"},{"location":"Entity/#render","text":"","title":"Render ()"},{"location":"Entity/#rendershadowlayer","text":"","title":"RenderShadowLayer ()"},{"location":"Entity/#setcolor","text":"","title":"SetColor ()"},{"location":"Entity/#setsize","text":"","title":"SetSize ()"},{"location":"Entity/#setspriteframe","text":"","title":"SetSpriteFrame ()"},{"location":"Entity/#setspriteoverlayframe","text":"","title":"SetSpriteOverlayFrame ()"},{"location":"Entity/#takedamage","text":"","title":"TakeDamage ()"},{"location":"Entity/#tobomb","text":"","title":"ToBomb ()"},{"location":"Entity/#toeffect","text":"","title":"ToEffect ()"},{"location":"Entity/#tofamiliar","text":"","title":"ToFamiliar ()"},{"location":"Entity/#toknife","text":"","title":"ToKnife ()"},{"location":"Entity/#tolaser","text":"","title":"ToLaser ()"},{"location":"Entity/#tonpc","text":"","title":"ToNPC ()"},{"location":"Entity/#topickup","text":"","title":"ToPickup ()"},{"location":"Entity/#toplayer","text":"","title":"ToPlayer ()"},{"location":"Entity/#toprojectile","text":"","title":"ToProjectile ()"},{"location":"Entity/#totear","text":"","title":"ToTear ()"},{"location":"Entity/#update","text":"","title":"Update ()"},{"location":"Entity/#child","text":"","title":"Child ()"},{"location":"Entity/#variables","text":"","title":"Variables"},{"location":"Entity/#collisiondamage","text":"","title":"CollisionDamage"},{"location":"Entity/#depthoffset","text":"","title":"DepthOffset"},{"location":"Entity/#dropseed","text":"","title":"DropSeed"},{"location":"Entity/#entitycollisionclass","text":"","title":"EntityCollisionClass"},{"location":"Entity/#flipx","text":"","title":"FlipX"},{"location":"Entity/#framecount","text":"","title":"FrameCount"},{"location":"Entity/#friction","text":"","title":"Friction"},{"location":"Entity/#gridcollisionclass","text":"","title":"GridCollisionClass"},{"location":"Entity/#hitpoints","text":"","title":"HitPoints"},{"location":"Entity/#index","text":"","title":"Index"},{"location":"Entity/#initseed","text":"","title":"InitSeed"},{"location":"Entity/#mass","text":"","title":"Mass"},{"location":"Entity/#maxhitpoints","text":"","title":"MaxHitPoints"},{"location":"Entity/#parent","text":"","title":"Parent"},{"location":"Entity/#position","text":"","title":"Position"},{"location":"Entity/#positionoffset","text":"","title":"PositionOffset"},{"location":"Entity/#renderzoffset","text":"","title":"RenderZOffset"},{"location":"Entity/#sizemulti","text":"","title":"SizeMulti"},{"location":"Entity/#spawnerentity","text":"","title":"SpawnerEntity"},{"location":"Entity/#spawnertype","text":"","title":"SpawnerType"},{"location":"Entity/#spawnervariant","text":"","title":"SpawnerVariant"},{"location":"Entity/#spawngridindex","text":"","title":"SpawnGridIndex"},{"location":"Entity/#splatcolor","text":"","title":"SplatColor"},{"location":"Entity/#spriteoffset","text":"","title":"SpriteOffset"},{"location":"Entity/#spriterotation","text":"","title":"SpriteRotation"},{"location":"Entity/#spritescale","text":"","title":"SpriteScale"},{"location":"Entity/#subtype","text":"","title":"SubType"},{"location":"Entity/#target","text":"","title":"Target"},{"location":"Entity/#targetposition","text":"","title":"TargetPosition"},{"location":"Entity/#type","text":"","title":"Type"},{"location":"Entity/#variant","text":"","title":"Variant"},{"location":"Entity/#velocity","text":"","title":"Velocity"},{"location":"Entity/#visible","text":"","title":"Visible"},{"location":"Entity/#size","text":"","title":"Size"},{"location":"EntityBomb/","text":"Class \"EntityBomb\" \u2693\ufe0e Functions \u2693\ufe0e SetExplosionCountdown () \u2693\ufe0e void SetExplosionCountdown ( int Countdown) Variables \u2693\ufe0e ExplosionDamage \u2693\ufe0e float ExplosionDamage Flags \u2693\ufe0e int Flags Uses TearFlags to alter the behavior of the bomb. WRONG PARSING IsFetus \u2693\ufe0e boolean IsFetus RadiusMultiplier \u2693\ufe0e float RadiusMultiplier","title":"EntityBomb"},{"location":"EntityBomb/#class-entitybomb","text":"","title":"Class \"EntityBomb\""},{"location":"EntityBomb/#functions","text":"","title":"Functions"},{"location":"EntityBomb/#setexplosioncountdown","text":"","title":"SetExplosionCountdown ()"},{"location":"EntityBomb/#variables","text":"","title":"Variables"},{"location":"EntityBomb/#explosiondamage","text":"","title":"ExplosionDamage"},{"location":"EntityBomb/#flags","text":"","title":"Flags"},{"location":"EntityBomb/#isfetus","text":"","title":"IsFetus"},{"location":"EntityBomb/#radiusmultiplier","text":"","title":"RadiusMultiplier"},{"location":"EntityEffect/","text":"Class \"EntityEffect\" \u2693\ufe0e Functions \u2693\ufe0e FollowParent () \u2693\ufe0e void FollowParent ( Entity Parent) IsPlayerCreep () \u2693\ufe0e static boolean IsPlayerCreep ( int Variant) SetDamageSource () \u2693\ufe0e void SetDamageSource ( EntityType DamageSource) SetRadii () \u2693\ufe0e void SetRadii ( float min, float max ) For shockwaves. SetTimeout () \u2693\ufe0e void SetTimeout ( int Timeout) Variables \u2693\ufe0e DamageSource \u2693\ufe0e int DamageSource FallingAcceleration \u2693\ufe0e float FallingAcceleration FallingSpeed \u2693\ufe0e float FallingSpeed IsFollowing \u2693\ufe0e boolean IsFollowing LifeSpan \u2693\ufe0e int LifeSpan m_Height \u2693\ufe0e float m_Height for particles .dy MaxRadius \u2693\ufe0e float MaxRadius MinRadius \u2693\ufe0e float MinRadius For shockwaves. ParentOffset \u2693\ufe0e Vector ParentOffset probably obsolete soon, in favor of m_SpriteOffset Rotation \u2693\ufe0e float Rotation Scale \u2693\ufe0e float Scale State \u2693\ufe0e int State state var, may be used ad lib initialized to 0 in Init() Timeout \u2693\ufe0e int Timeout","title":"EntityEffect"},{"location":"EntityEffect/#class-entityeffect","text":"","title":"Class \"EntityEffect\""},{"location":"EntityEffect/#functions","text":"","title":"Functions"},{"location":"EntityEffect/#followparent","text":"","title":"FollowParent ()"},{"location":"EntityEffect/#isplayercreep","text":"","title":"IsPlayerCreep ()"},{"location":"EntityEffect/#setdamagesource","text":"","title":"SetDamageSource ()"},{"location":"EntityEffect/#setradii","text":"","title":"SetRadii ()"},{"location":"EntityEffect/#settimeout","text":"","title":"SetTimeout ()"},{"location":"EntityEffect/#variables","text":"","title":"Variables"},{"location":"EntityEffect/#damagesource","text":"","title":"DamageSource"},{"location":"EntityEffect/#fallingacceleration","text":"","title":"FallingAcceleration"},{"location":"EntityEffect/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityEffect/#isfollowing","text":"","title":"IsFollowing"},{"location":"EntityEffect/#lifespan","text":"","title":"LifeSpan"},{"location":"EntityEffect/#m_height","text":"","title":"m_Height"},{"location":"EntityEffect/#maxradius","text":"","title":"MaxRadius"},{"location":"EntityEffect/#minradius","text":"","title":"MinRadius"},{"location":"EntityEffect/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityEffect/#rotation","text":"","title":"Rotation"},{"location":"EntityEffect/#scale","text":"","title":"Scale"},{"location":"EntityEffect/#state","text":"","title":"State"},{"location":"EntityEffect/#timeout","text":"","title":"Timeout"},{"location":"EntityFamiliar/","text":"Class \"EntityFamiliar\" \u2693\ufe0e Functions \u2693\ufe0e AddCoins () \u2693\ufe0e void AddCoins ( int Value) AddHearts () \u2693\ufe0e void AddHearts ( int Hearts) AddKeys () \u2693\ufe0e void AddKeys ( int Keys) AddToDelayed () \u2693\ufe0e void AddToDelayed ( ) Adds to delayed. This doesn't remove other flags! AddToFollowers () \u2693\ufe0e void AddToFollowers ( ) Adds to followers. This doesn't remove other flags! AddToOrbit () \u2693\ufe0e void AddToOrbit ( int Layer) Adds to orbitals. This doesn't remove other flags! FireProjectile () \u2693\ufe0e EntityTear FireProjectile ( Vector Dir) Shoots a projectile from the center of the familiar in the direction you defined. If used on a familiar that shoots multiple projectiles (example: harlequin baby), this function will only return the left most projectile based on the direction. If used on familiars with special tears (example: Lil Brimstone,...), this will just shoot a regular tear. This function will not play the shoot animation of the familiar. FollowParent () \u2693\ufe0e void FollowParent ( ) FollowPosition () \u2693\ufe0e void FollowPosition ( Vector Pos) GetOrbitDistance () \u2693\ufe0e static Vector GetOrbitDistance ( int Layer) GetOrbitPosition () \u2693\ufe0e Vector GetOrbitPosition ( Vector Pos) Returns the position of an orbiting familiar relative to the player's position. Returns Vector ( 0 , 0 ) if its a normal familiar . The \"pos\" argument is used as an offset. MoveDelayed () \u2693\ufe0e void MoveDelayed ( int NumFrames) MoveDiagonally () \u2693\ufe0e void MoveDiagonally ( float Speed) PickEnemyTarget () \u2693\ufe0e void PickEnemyTarget ( float MaxDistance, int FrameInterval ) PlayChargeAnim () \u2693\ufe0e void PlayChargeAnim ( Direction Dir) PlayFloatAnim () \u2693\ufe0e void PlayFloatAnim ( Direction Dir) PlayShootAnim () \u2693\ufe0e void PlayShootAnim ( Direction Dir) RecalculateOrbitOffset () \u2693\ufe0e int RecalculateOrbitOffset ( int Layer, boolean Add ) Returns the number of familiars in that layer. RemoveFromDelayed () \u2693\ufe0e void RemoveFromDelayed ( ) RemoveFromFollowers () \u2693\ufe0e void RemoveFromFollowers ( ) RemoveFromOrbit () \u2693\ufe0e void RemoveFromOrbit ( ) Shoot () \u2693\ufe0e void Shoot ( ) Bugs This function does not seem to work. Variables \u2693\ufe0e Coins \u2693\ufe0e int Coins FireCooldown \u2693\ufe0e int FireCooldown HeadFrameDelay \u2693\ufe0e int HeadFrameDelay Hearts \u2693\ufe0e int Hearts Keys \u2693\ufe0e int Keys LastDirection \u2693\ufe0e Direction LastDirection MoveDirection \u2693\ufe0e Direction MoveDirection OrbitAngleOffset \u2693\ufe0e float OrbitAngleOffset Can be used to override the angular position of the familiar on its orbit based on the initial starting position of the orbit. Example Code This code will make all of your orbitals move as a tight wall around you. 1 2 3 4 5 for i , v in ipairs ( Isaac . GetRoomEntities ()) do if v . Type == 3 then v : ToFamiliar (). OrbitAngleOffset = 0.25 * i end end Result: WRONG PARSING OrbitDistance \u2693\ufe0e Vector OrbitDistance Defines the orbit of the familiar, if its an orbital. The Vector is interpreted as the dimensions of the circle/oval orbit. Example: Vector ( 110 , 90 ) is the orbital of \"Forever alone\". Player \u2693\ufe0e EntityPlayer Player RoomClearCount \u2693\ufe0e int RoomClearCount ShootDirection \u2693\ufe0e Direction ShootDirection State \u2693\ufe0e int State","title":"EntityFamiliar"},{"location":"EntityFamiliar/#class-entityfamiliar","text":"","title":"Class \"EntityFamiliar\""},{"location":"EntityFamiliar/#functions","text":"","title":"Functions"},{"location":"EntityFamiliar/#addcoins","text":"","title":"AddCoins ()"},{"location":"EntityFamiliar/#addhearts","text":"","title":"AddHearts ()"},{"location":"EntityFamiliar/#addkeys","text":"","title":"AddKeys ()"},{"location":"EntityFamiliar/#addtodelayed","text":"","title":"AddToDelayed ()"},{"location":"EntityFamiliar/#addtofollowers","text":"","title":"AddToFollowers ()"},{"location":"EntityFamiliar/#addtoorbit","text":"","title":"AddToOrbit ()"},{"location":"EntityFamiliar/#fireprojectile","text":"","title":"FireProjectile ()"},{"location":"EntityFamiliar/#followparent","text":"","title":"FollowParent ()"},{"location":"EntityFamiliar/#followposition","text":"","title":"FollowPosition ()"},{"location":"EntityFamiliar/#getorbitdistance","text":"","title":"GetOrbitDistance ()"},{"location":"EntityFamiliar/#getorbitposition","text":"","title":"GetOrbitPosition ()"},{"location":"EntityFamiliar/#movedelayed","text":"","title":"MoveDelayed ()"},{"location":"EntityFamiliar/#movediagonally","text":"","title":"MoveDiagonally ()"},{"location":"EntityFamiliar/#pickenemytarget","text":"","title":"PickEnemyTarget ()"},{"location":"EntityFamiliar/#playchargeanim","text":"","title":"PlayChargeAnim ()"},{"location":"EntityFamiliar/#playfloatanim","text":"","title":"PlayFloatAnim ()"},{"location":"EntityFamiliar/#playshootanim","text":"","title":"PlayShootAnim ()"},{"location":"EntityFamiliar/#recalculateorbitoffset","text":"","title":"RecalculateOrbitOffset ()"},{"location":"EntityFamiliar/#removefromdelayed","text":"","title":"RemoveFromDelayed ()"},{"location":"EntityFamiliar/#removefromfollowers","text":"","title":"RemoveFromFollowers ()"},{"location":"EntityFamiliar/#removefromorbit","text":"","title":"RemoveFromOrbit ()"},{"location":"EntityFamiliar/#shoot","text":"","title":"Shoot ()"},{"location":"EntityFamiliar/#variables","text":"","title":"Variables"},{"location":"EntityFamiliar/#coins","text":"","title":"Coins"},{"location":"EntityFamiliar/#firecooldown","text":"","title":"FireCooldown"},{"location":"EntityFamiliar/#headframedelay","text":"","title":"HeadFrameDelay"},{"location":"EntityFamiliar/#hearts","text":"","title":"Hearts"},{"location":"EntityFamiliar/#keys","text":"","title":"Keys"},{"location":"EntityFamiliar/#lastdirection","text":"","title":"LastDirection"},{"location":"EntityFamiliar/#movedirection","text":"","title":"MoveDirection"},{"location":"EntityFamiliar/#orbitangleoffset","text":"","title":"OrbitAngleOffset"},{"location":"EntityFamiliar/#orbitdistance","text":"","title":"OrbitDistance"},{"location":"EntityFamiliar/#player","text":"","title":"Player"},{"location":"EntityFamiliar/#roomclearcount","text":"","title":"RoomClearCount"},{"location":"EntityFamiliar/#shootdirection","text":"","title":"ShootDirection"},{"location":"EntityFamiliar/#state","text":"","title":"State"},{"location":"EntityKnife/","text":"Class \"EntityKnife\" \u2693\ufe0e Functions \u2693\ufe0e GetKnifeDistance () \u2693\ufe0e float GetKnifeDistance ( ) GetKnifeVelocity () \u2693\ufe0e float GetKnifeVelocity ( ) GetRenderZ () \u2693\ufe0e int GetRenderZ ( ) IsFlying () \u2693\ufe0e boolean IsFlying ( ) Reset () \u2693\ufe0e void Reset ( ) Used for master knifes, to get back to player. SetPathFollowSpeed () \u2693\ufe0e void SetPathFollowSpeed ( float Speed) Shoot () \u2693\ufe0e void Shoot ( float Charge, float Range ) Variables \u2693\ufe0e Charge \u2693\ufe0e float Charge IsFlying \u2693\ufe0e boolean IsFlying MaxDistance \u2693\ufe0e float MaxDistance PathFollowSpeed \u2693\ufe0e float PathFollowSpeed Unit speed of path moving knifes. PathOffset \u2693\ufe0e float PathOffset Rotation \u2693\ufe0e float Rotation RotationOffset \u2693\ufe0e float RotationOffset Scale \u2693\ufe0e float Scale TearFlags \u2693\ufe0e int TearFlags","title":"EntityKnife"},{"location":"EntityKnife/#class-entityknife","text":"","title":"Class \"EntityKnife\""},{"location":"EntityKnife/#functions","text":"","title":"Functions"},{"location":"EntityKnife/#getknifedistance","text":"","title":"GetKnifeDistance ()"},{"location":"EntityKnife/#getknifevelocity","text":"","title":"GetKnifeVelocity ()"},{"location":"EntityKnife/#getrenderz","text":"","title":"GetRenderZ ()"},{"location":"EntityKnife/#isflying","text":"","title":"IsFlying ()"},{"location":"EntityKnife/#reset","text":"","title":"Reset ()"},{"location":"EntityKnife/#setpathfollowspeed","text":"","title":"SetPathFollowSpeed ()"},{"location":"EntityKnife/#shoot","text":"","title":"Shoot ()"},{"location":"EntityKnife/#variables","text":"","title":"Variables"},{"location":"EntityKnife/#charge","text":"","title":"Charge"},{"location":"EntityKnife/#isflying_1","text":"","title":"IsFlying"},{"location":"EntityKnife/#maxdistance","text":"","title":"MaxDistance"},{"location":"EntityKnife/#pathfollowspeed","text":"","title":"PathFollowSpeed"},{"location":"EntityKnife/#pathoffset","text":"","title":"PathOffset"},{"location":"EntityKnife/#rotation","text":"","title":"Rotation"},{"location":"EntityKnife/#rotationoffset","text":"","title":"RotationOffset"},{"location":"EntityKnife/#scale","text":"","title":"Scale"},{"location":"EntityKnife/#tearflags","text":"","title":"TearFlags"},{"location":"EntityLaser/","text":"Class \"EntityLaser\" \u2693\ufe0e Functions \u2693\ufe0e CalculateEndPoint () \u2693\ufe0e static Vector CalculateEndPoint ( Vector Start, Vector Dir, Vector PositionOffset, Entity Parent, float Margin ) GetEndPoint () \u2693\ufe0e Vector GetEndPoint ( ) GetNonOptimizedSamples () \u2693\ufe0e HomingLaser::SampleList GetNonOptimizedSamples ( ) GetRenderZ () \u2693\ufe0e int GetRenderZ ( ) GetSamples () \u2693\ufe0e HomingLaser::SampleList GetSamples ( ) IsCircleLaser () \u2693\ufe0e boolean IsCircleLaser ( ) IsSampleLaser () \u2693\ufe0e boolean IsSampleLaser ( ) SetActiveRotation () \u2693\ufe0e void SetActiveRotation ( int Delay, float AngleDegrees, float RotationSpd, boolean TimeoutComplete ) SetBlackHpDropChance () \u2693\ufe0e void SetBlackHpDropChance ( float Chance) SetHomingType () \u2693\ufe0e void SetHomingType ( LaserHomingType Type) SetMaxDistance () \u2693\ufe0e void SetMaxDistance ( float Distance) SetMultidimensionalTouched () \u2693\ufe0e void SetMultidimensionalTouched ( boolean Value) SetOneHit () \u2693\ufe0e void SetOneHit ( boolean Value) SetTimeout () \u2693\ufe0e void SetTimeout ( int Value) ShootAngle () \u2693\ufe0e static EntityLaser ShootAngle ( int Variant, Vector SourcePos, float AngleDegrees, int Timeout, Vector PosOffset, Entity Source ) static helper to simplify spawning lasers Variables \u2693\ufe0e Angle \u2693\ufe0e float Angle AngleDegrees \u2693\ufe0e float AngleDegrees BlackHpDropChance \u2693\ufe0e float BlackHpDropChance For maw of void. BounceLaser \u2693\ufe0e Entity BounceLaser CurveStrength \u2693\ufe0e float CurveStrength My Reflection. DisableFollowParent \u2693\ufe0e boolean DisableFollowParent Set on children of other lasers, for instance Rubber Cement reflections. Disables m_ParentOffset. EndPoint \u2693\ufe0e Vector EndPoint Will hold the endpoint so it will not need to be recalculated when accessed from extern. FirstUpdate \u2693\ufe0e boolean FirstUpdate GridHit \u2693\ufe0e boolean GridHit true if laser can be clipped by grid entities and it was clipped at that frame. HomingLaser \u2693\ufe0e HomingLaser HomingLaser HomingType \u2693\ufe0e LaserHomingType HomingType IsActiveRotating \u2693\ufe0e boolean IsActiveRotating LaserLength \u2693\ufe0e float LaserLength LastAngleDegrees \u2693\ufe0e float LastAngleDegrees MaxDistance \u2693\ufe0e float MaxDistance Used to trim brimstone for Azazel (0 - off) OneHit \u2693\ufe0e boolean OneHit Laser hits only once. ParentOffset \u2693\ufe0e Vector ParentOffset Radius \u2693\ufe0e float Radius RotationDegrees \u2693\ufe0e float RotationDegrees RotationDelay \u2693\ufe0e int RotationDelay RotationSpd \u2693\ufe0e float RotationSpd SampleLaser \u2693\ufe0e boolean SampleLaser Shrink \u2693\ufe0e boolean Shrink StartAngleDegrees \u2693\ufe0e float StartAngleDegrees Some lasers have a bit of random variation in rotation so they need to remember their starting point. TearFlags \u2693\ufe0e int TearFlags float m_DepthOffset; float GetDepthOffset(void) const { return m_DepthOffset; } void SetDepthOffset(float Value) { m_DepthOffset = Value; } Timeout \u2693\ufe0e int Timeout","title":"EntityLaser"},{"location":"EntityLaser/#class-entitylaser","text":"","title":"Class \"EntityLaser\""},{"location":"EntityLaser/#functions","text":"","title":"Functions"},{"location":"EntityLaser/#calculateendpoint","text":"","title":"CalculateEndPoint ()"},{"location":"EntityLaser/#getendpoint","text":"","title":"GetEndPoint ()"},{"location":"EntityLaser/#getnonoptimizedsamples","text":"","title":"GetNonOptimizedSamples ()"},{"location":"EntityLaser/#getrenderz","text":"","title":"GetRenderZ ()"},{"location":"EntityLaser/#getsamples","text":"","title":"GetSamples ()"},{"location":"EntityLaser/#iscirclelaser","text":"","title":"IsCircleLaser ()"},{"location":"EntityLaser/#issamplelaser","text":"","title":"IsSampleLaser ()"},{"location":"EntityLaser/#setactiverotation","text":"","title":"SetActiveRotation ()"},{"location":"EntityLaser/#setblackhpdropchance","text":"","title":"SetBlackHpDropChance ()"},{"location":"EntityLaser/#sethomingtype","text":"","title":"SetHomingType ()"},{"location":"EntityLaser/#setmaxdistance","text":"","title":"SetMaxDistance ()"},{"location":"EntityLaser/#setmultidimensionaltouched","text":"","title":"SetMultidimensionalTouched ()"},{"location":"EntityLaser/#setonehit","text":"","title":"SetOneHit ()"},{"location":"EntityLaser/#settimeout","text":"","title":"SetTimeout ()"},{"location":"EntityLaser/#shootangle","text":"","title":"ShootAngle ()"},{"location":"EntityLaser/#variables","text":"","title":"Variables"},{"location":"EntityLaser/#angle","text":"","title":"Angle"},{"location":"EntityLaser/#angledegrees","text":"","title":"AngleDegrees"},{"location":"EntityLaser/#blackhpdropchance","text":"","title":"BlackHpDropChance"},{"location":"EntityLaser/#bouncelaser","text":"","title":"BounceLaser"},{"location":"EntityLaser/#curvestrength","text":"","title":"CurveStrength"},{"location":"EntityLaser/#disablefollowparent","text":"","title":"DisableFollowParent"},{"location":"EntityLaser/#endpoint","text":"","title":"EndPoint"},{"location":"EntityLaser/#firstupdate","text":"","title":"FirstUpdate"},{"location":"EntityLaser/#gridhit","text":"","title":"GridHit"},{"location":"EntityLaser/#hominglaser","text":"","title":"HomingLaser"},{"location":"EntityLaser/#homingtype","text":"","title":"HomingType"},{"location":"EntityLaser/#isactiverotating","text":"","title":"IsActiveRotating"},{"location":"EntityLaser/#laserlength","text":"","title":"LaserLength"},{"location":"EntityLaser/#lastangledegrees","text":"","title":"LastAngleDegrees"},{"location":"EntityLaser/#maxdistance","text":"","title":"MaxDistance"},{"location":"EntityLaser/#onehit","text":"","title":"OneHit"},{"location":"EntityLaser/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityLaser/#radius","text":"","title":"Radius"},{"location":"EntityLaser/#rotationdegrees","text":"","title":"RotationDegrees"},{"location":"EntityLaser/#rotationdelay","text":"","title":"RotationDelay"},{"location":"EntityLaser/#rotationspd","text":"","title":"RotationSpd"},{"location":"EntityLaser/#samplelaser","text":"","title":"SampleLaser"},{"location":"EntityLaser/#shrink","text":"","title":"Shrink"},{"location":"EntityLaser/#startangledegrees","text":"","title":"StartAngleDegrees"},{"location":"EntityLaser/#tearflags","text":"","title":"TearFlags"},{"location":"EntityLaser/#timeout","text":"","title":"Timeout"},{"location":"EntityNPC/","text":"Class \"EntityNPC\" \u2693\ufe0e Functions \u2693\ufe0e AnimWalkFrame () \u2693\ufe0e void AnimWalkFrame ( string HorizontalAnim, string VerticalAnim, float SpeedThreshold ) CalcTargetPosition () \u2693\ufe0e Vector CalcTargetPosition ( float DistanceLimit) CanBeDamagedFromVelocity () \u2693\ufe0e boolean CanBeDamagedFromVelocity ( Vector Velocity) CanReroll () \u2693\ufe0e boolean CanReroll ( ) FireBossProjectiles () \u2693\ufe0e EntityProjectile FireBossProjectiles ( int NumProjectiles, Vector TargetPos, float TrajectoryModifier, ProjectileParams Params ) fire a number of projectiles, optionally targeting the player direction is randomized, or slightly randomized when targeting the player FallingAccelModifier can be used to make projectiles fall faster to the ground returns a pointer to the projectile spawned last (useful e.g. when NumProjectiles=1) FireProjectiles () \u2693\ufe0e void FireProjectiles ( Vector Pos, Vector Velocity, ProjectilesMode Mode, ProjectileParams Params ) GetAliveEnemyCount () \u2693\ufe0e int GetAliveEnemyCount ( ) Used to redirect close door enemies to any enemies for friendly npcs. GetBossColorIdx () \u2693\ufe0e int GetBossColorIdx ( ) Notes This will return the boss color idx reduced by 1. To get the actual color as set in bosscolors.xml, add +1 to the result. GetChampionColorIdx () \u2693\ufe0e int GetChampionColorIdx ( ) Notes A list of Champion colors can be found here : ChampionColorIdx GetPlayerTarget () \u2693\ufe0e Entity GetPlayerTarget ( ) if there are no modifiers (best friend) this will return the player IsBoss () \u2693\ufe0e boolean IsBoss ( ) IsChampion () \u2693\ufe0e boolean IsChampion ( ) KillUnique () \u2693\ufe0e void KillUnique ( ) For entities with unique death animation, like Flush! vs poop enemies. MakeChampion () \u2693\ufe0e void MakeChampion ( int Seed) Forces a non champion to become a champion, resets hp to max hp. Notes Hard to use because there are millions of possible seeds to input here.Use Morph() to change the champion Color instead! MakeSplat () \u2693\ufe0e EntityEffect MakeSplat ( float Size) Morph () \u2693\ufe0e boolean Morph ( EntityType , int Variant, int SubType, int ChampionColorIdx ) Morph the current entity into another one. ChampionColorIdx can be used to turn the entity into a champion. Use - 1 to turn it into a regular entity. A list of Champion colors can be found here : ChampionColorIdx Example Code This code turns an entity into a gaper. 1 entity : ToNPC () : Morph ( EntityType . ENTITY_GAPER , 0 , 0 , - 1 ) WRONG PARSING PlaySound () \u2693\ufe0e void PlaySound ( SoundEffect ID, float Volume, int FrameDelay, boolean Loop, float Pitch ) QueryNPCsGroup () \u2693\ufe0e EntityList QueryNPCsGroup ( int GroupIdx) QueryNPCsSpawnerType () \u2693\ufe0e EntityList QueryNPCsSpawnerType ( EntityType SpawnerType, EntityType Type, boolean OnlyEnemies ) QueryNPCsType () \u2693\ufe0e EntityList QueryNPCsType ( EntityType Type, int Variant ) ResetPathFinderTarget () \u2693\ufe0e void ResetPathFinderTarget ( ) ThrowSpider () \u2693\ufe0e static ThrowSpider ( Vector Position, Entity Spawner, Vector TargetPos, boolean Big, float YOffset ) Variables \u2693\ufe0e CanShutDoors \u2693\ufe0e boolean CanShutDoors ChildNPC \u2693\ufe0e EntityNPC ChildNPC EntityRef \u2693\ufe0e Entity EntityRef GroupIdx \u2693\ufe0e int GroupIdx Used to identify multichunks groups. I1 \u2693\ufe0e int I1 general usage ints for ai_ I2 \u2693\ufe0e int I2 same as m_I1 ParentNPC \u2693\ufe0e EntityNPC ParentNPC parent entity, for multi-entity NPCs like Larry Jr. Pathfinder \u2693\ufe0e PathFinder Pathfinder ProjectileCooldown \u2693\ufe0e int ProjectileCooldown projectiles can fire again when it reaches 0 ProjectileDelay \u2693\ufe0e int ProjectileDelay >0: projectile will be fired in n frames Scale \u2693\ufe0e float Scale State \u2693\ufe0e int State StateFrame \u2693\ufe0e int StateFrame V1 \u2693\ufe0e Vector V1 general usage for ai_* functions, initialized to (0,0) V2 \u2693\ufe0e Vector V2 like m_V1, in case we need two of those","title":"EntityNPC"},{"location":"EntityNPC/#class-entitynpc","text":"","title":"Class \"EntityNPC\""},{"location":"EntityNPC/#functions","text":"","title":"Functions"},{"location":"EntityNPC/#animwalkframe","text":"","title":"AnimWalkFrame ()"},{"location":"EntityNPC/#calctargetposition","text":"","title":"CalcTargetPosition ()"},{"location":"EntityNPC/#canbedamagedfromvelocity","text":"","title":"CanBeDamagedFromVelocity ()"},{"location":"EntityNPC/#canreroll","text":"","title":"CanReroll ()"},{"location":"EntityNPC/#firebossprojectiles","text":"","title":"FireBossProjectiles ()"},{"location":"EntityNPC/#fireprojectiles","text":"","title":"FireProjectiles ()"},{"location":"EntityNPC/#getaliveenemycount","text":"","title":"GetAliveEnemyCount ()"},{"location":"EntityNPC/#getbosscoloridx","text":"","title":"GetBossColorIdx ()"},{"location":"EntityNPC/#getchampioncoloridx","text":"","title":"GetChampionColorIdx ()"},{"location":"EntityNPC/#getplayertarget","text":"","title":"GetPlayerTarget ()"},{"location":"EntityNPC/#isboss","text":"","title":"IsBoss ()"},{"location":"EntityNPC/#ischampion","text":"","title":"IsChampion ()"},{"location":"EntityNPC/#killunique","text":"","title":"KillUnique ()"},{"location":"EntityNPC/#makechampion","text":"","title":"MakeChampion ()"},{"location":"EntityNPC/#makesplat","text":"","title":"MakeSplat ()"},{"location":"EntityNPC/#morph","text":"","title":"Morph ()"},{"location":"EntityNPC/#playsound","text":"","title":"PlaySound ()"},{"location":"EntityNPC/#querynpcsgroup","text":"","title":"QueryNPCsGroup ()"},{"location":"EntityNPC/#querynpcsspawnertype","text":"","title":"QueryNPCsSpawnerType ()"},{"location":"EntityNPC/#querynpcstype","text":"","title":"QueryNPCsType ()"},{"location":"EntityNPC/#resetpathfindertarget","text":"","title":"ResetPathFinderTarget ()"},{"location":"EntityNPC/#throwspider","text":"","title":"ThrowSpider ()"},{"location":"EntityNPC/#variables","text":"","title":"Variables"},{"location":"EntityNPC/#canshutdoors","text":"","title":"CanShutDoors"},{"location":"EntityNPC/#childnpc","text":"","title":"ChildNPC"},{"location":"EntityNPC/#entityref","text":"","title":"EntityRef"},{"location":"EntityNPC/#groupidx","text":"","title":"GroupIdx"},{"location":"EntityNPC/#i1","text":"","title":"I1"},{"location":"EntityNPC/#i2","text":"","title":"I2"},{"location":"EntityNPC/#parentnpc","text":"","title":"ParentNPC"},{"location":"EntityNPC/#pathfinder","text":"","title":"Pathfinder"},{"location":"EntityNPC/#projectilecooldown","text":"","title":"ProjectileCooldown"},{"location":"EntityNPC/#projectiledelay","text":"","title":"ProjectileDelay"},{"location":"EntityNPC/#scale","text":"","title":"Scale"},{"location":"EntityNPC/#state","text":"","title":"State"},{"location":"EntityNPC/#stateframe","text":"","title":"StateFrame"},{"location":"EntityNPC/#v1","text":"","title":"V1"},{"location":"EntityNPC/#v2","text":"","title":"V2"},{"location":"EntityPickup/","text":"Class \"EntityPickup\" \u2693\ufe0e Functions \u2693\ufe0e AppearFast () \u2693\ufe0e void AppearFast ( ) CanReroll () \u2693\ufe0e boolean CanReroll ( ) GetCoinValue () \u2693\ufe0e int GetCoinValue ( ) If this is a coin, return its face value, else zero. IsShopItem () \u2693\ufe0e boolean IsShopItem ( ) Morph () \u2693\ufe0e void Morph ( EntityType Type, int Variant, int SubType, boolean KeepPrice ) PlayDropSound () \u2693\ufe0e void PlayDropSound ( ) PlayPickupSound () \u2693\ufe0e void PlayPickupSound ( ) TryOpenChest () \u2693\ufe0e boolean TryOpenChest ( ) Variables \u2693\ufe0e AutoUpdatePrice \u2693\ufe0e boolean AutoUpdatePrice Charge \u2693\ufe0e int Charge Price \u2693\ufe0e int Price ShopItemId \u2693\ufe0e int ShopItemId State \u2693\ufe0e int State TheresOptionsPickup \u2693\ufe0e boolean TheresOptionsPickup Timeout \u2693\ufe0e int Timeout Touched \u2693\ufe0e boolean Touched Wait \u2693\ufe0e int Wait","title":"EntityPickup"},{"location":"EntityPickup/#class-entitypickup","text":"","title":"Class \"EntityPickup\""},{"location":"EntityPickup/#functions","text":"","title":"Functions"},{"location":"EntityPickup/#appearfast","text":"","title":"AppearFast ()"},{"location":"EntityPickup/#canreroll","text":"","title":"CanReroll ()"},{"location":"EntityPickup/#getcoinvalue","text":"","title":"GetCoinValue ()"},{"location":"EntityPickup/#isshopitem","text":"","title":"IsShopItem ()"},{"location":"EntityPickup/#morph","text":"","title":"Morph ()"},{"location":"EntityPickup/#playdropsound","text":"","title":"PlayDropSound ()"},{"location":"EntityPickup/#playpickupsound","text":"","title":"PlayPickupSound ()"},{"location":"EntityPickup/#tryopenchest","text":"","title":"TryOpenChest ()"},{"location":"EntityPickup/#variables","text":"","title":"Variables"},{"location":"EntityPickup/#autoupdateprice","text":"","title":"AutoUpdatePrice"},{"location":"EntityPickup/#charge","text":"","title":"Charge"},{"location":"EntityPickup/#price","text":"","title":"Price"},{"location":"EntityPickup/#shopitemid","text":"","title":"ShopItemId"},{"location":"EntityPickup/#state","text":"","title":"State"},{"location":"EntityPickup/#theresoptionspickup","text":"","title":"TheresOptionsPickup"},{"location":"EntityPickup/#timeout","text":"","title":"Timeout"},{"location":"EntityPickup/#touched","text":"","title":"Touched"},{"location":"EntityPickup/#wait","text":"","title":"Wait"},{"location":"EntityPlayer/","text":"Class \"EntityPlayer\" \u2693\ufe0e Functions \u2693\ufe0e AddBlackHearts () \u2693\ufe0e void AddBlackHearts ( int BlackHearts) Adds Black hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full black heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddBlackHearts ( 2 ) AddBlueFlies () \u2693\ufe0e Entity AddBlueFlies ( int Amount, Vector Position, Entity Target ) AddBlueSpider () \u2693\ufe0e Entity AddBlueSpider ( Vector Position) AddBombs () \u2693\ufe0e void AddBombs ( int Amount) Adds bombs to the player. Remove them with negative numbers. Example Code This code removes 1 bomb from the player. 1 Isaac . GetPlayer ( 0 ) : AddBombs ( - 1 ) AddBoneHearts () \u2693\ufe0e void AddBoneHearts ( int Hearts) Adds bone hearts to the player. 1 unit is a single bone heart. Remove them with negative numbers. Example Code This code adds 1 bone heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddBoneHearts ( 1 ) AddCacheFlags () \u2693\ufe0e void AddCacheFlags ( CacheFlag CacheFlag) Will reevaluate the cache flags provided in the next cache reevaluation. AddCard () \u2693\ufe0e void AddCard ( Card Card) AddCoins () \u2693\ufe0e void AddCoins ( int Amount) Adds coins to the player. Remove them with negative numbers. Example Code This code adds 1 coin to the player. 1 Isaac . GetPlayer ( 0 ) : AddCoins ( 1 ) AddCollectible () \u2693\ufe0e void AddCollectible ( CollectibleType Type, int Charge, boolean AddConsumables ) AddControlsCooldown () \u2693\ufe0e void AddControlsCooldown ( int Cooldown) AddCostume () \u2693\ufe0e void AddCostume ( Config::Item Item, boolean ItemStateOnly ) AddDeadEyeCharge () \u2693\ufe0e void AddDeadEyeCharge ( ) AddDollarBillEffect () \u2693\ufe0e void AddDollarBillEffect ( ) AddEternalHearts () \u2693\ufe0e void AddEternalHearts ( int EternalHearts) Adds eternal hearts to the player. 1 unit is half a heart. Remove them with negative numbers. (Note that eternal hearts automatically turn to full hearts, when you have more than one.) Example Code This code adds 1 eternal heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddEternalHearts ( 1 ) AddGoldenBomb () \u2693\ufe0e void AddGoldenBomb ( ) AddGoldenHearts () \u2693\ufe0e void AddGoldenHearts ( int Hearts) Adds golden hearts to the player. 1 unit is a single gold heart. Remove them with negative numbers. Example Code This code adds 1 golden heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddGoldenHearts ( 1 ) AddGoldenKey () \u2693\ufe0e void AddGoldenKey ( ) AddHearts () \u2693\ufe0e void AddHearts ( int Hearts) Adds red hearts to the player if there are any empty heart containers. 1 unit is half a heart. Remove health with negative numbers. Example Code This code adds 1 full red heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddHearts ( 2 ) AddJarFlies () \u2693\ufe0e void AddJarFlies ( int Flies) AddJarHearts () \u2693\ufe0e void AddJarHearts ( int Hearts) AddKeys () \u2693\ufe0e void AddKeys ( int Amount) Adds keys to the player. Remove them with negative numbers. Example Code This code adds 1 key to the player. 1 Isaac . GetPlayer ( 0 ) : AddKeys ( 1 ) AddMaxHearts () \u2693\ufe0e void AddMaxHearts ( int MaxHearts, boolean IgnoreKeeper ) Adds heart containers to the player. 2 units is a full heart container. Remove them with negative numbers. Notes It is possible to add a half heart container to the player. This will appear as a regular heart container but can only be filled half-way. Example Code This code adds 1 heart container to the player. 1 Isaac . GetPlayer ( 0 ) : AddMaxHearts ( 2 , true ) Bugs IgnoreKeeper does not appear to work as intended. Max hearts can be added or removed from Keeper regardless of what this boolean is. If Keeper has Greed's Gullet and this boolean is set to false, max hearts cannot be added to Keeper, but can be removed normally. If Keeper has Greed's Gullet and this boolean is set to true, Max hearts can be added or removed from Keeper normally. AddNullCostume () \u2693\ufe0e void AddNullCostume ( Config::NullItemID NullId) for Lua AddPill () \u2693\ufe0e void AddPill ( PillColor Pill) AddPlayerFormCostume () \u2693\ufe0e void AddPlayerFormCostume ( PlayerForm Form) AddPrettyFly () \u2693\ufe0e void AddPrettyFly ( ) AddSoulHearts () \u2693\ufe0e void AddSoulHearts ( int SoulHearts) Adds soul hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full soul heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddSoulHearts ( 2 ) AddTrinket () \u2693\ufe0e void AddTrinket ( TrinketType Type) AnimateAppear () \u2693\ufe0e void AnimateAppear ( ) Play the animation that is normally played at the beginning of a stage. AnimateCard () \u2693\ufe0e void AnimateCard ( Card Card, string AnimName ) AnimateCollectible () \u2693\ufe0e void AnimateCollectible ( CollectibleType Collectible, string AnimName, string SpriteAnimName ) AnimateHappy () \u2693\ufe0e void AnimateHappy ( ) thumbs up AnimateLightTravel () \u2693\ufe0e void AnimateLightTravel ( ) end of a stage AnimatePill () \u2693\ufe0e void AnimatePill ( PillColor Pill, string AnimName ) AnimatePitfallIn () \u2693\ufe0e void AnimatePitfallIn ( ) Fall into pitfall. AnimatePitfallOut () \u2693\ufe0e void AnimatePitfallOut ( ) Jump out of pitfall. AnimateSad () \u2693\ufe0e void AnimateSad ( ) oh no! AnimateTeleport () \u2693\ufe0e void AnimateTeleport ( boolean Up) teleport to another room AnimateTrapdoor () \u2693\ufe0e void AnimateTrapdoor ( ) end of a stage AnimateTrinket () \u2693\ufe0e void AnimateTrinket ( TrinketType Trinket, string AnimName, string SpriteAnimName ) AreControlsEnabled () \u2693\ufe0e boolean AreControlsEnabled ( ) AreOpposingShootDirectionsPressed () \u2693\ufe0e boolean AreOpposingShootDirectionsPressed ( ) Returns the non-zero joystick direction from the most recent movement input, but goes to zero after the player comes to a stop. CanAddCollectible () \u2693\ufe0e boolean CanAddCollectible ( ) CanPickBlackHearts () \u2693\ufe0e boolean CanPickBlackHearts ( ) returns true if player has room for more black hearts CanPickBoneHearts () \u2693\ufe0e boolean CanPickBoneHearts ( ) returns true if player has room for more bone hearts CanPickGoldenHearts () \u2693\ufe0e boolean CanPickGoldenHearts ( ) returns true if player has room for more golden hearts CanPickRedHearts () \u2693\ufe0e boolean CanPickRedHearts ( ) CanPickSoulHearts () \u2693\ufe0e boolean CanPickSoulHearts ( ) returns true if player has room for more soul hearts CanPickupItem () \u2693\ufe0e boolean CanPickupItem ( ) Can Player pick up an item right now? CanShoot () \u2693\ufe0e boolean CanShoot ( ) CanTurnHead () \u2693\ufe0e boolean CanTurnHead ( ) returns true if head should react to keys or false otherwise CheckFamiliar () \u2693\ufe0e void CheckFamiliar ( int FamiliarVariant, int TargetCount, RNG rng ) ClearCostumes () \u2693\ufe0e void ClearCostumes ( ) ClearDeadEyeCharge () \u2693\ufe0e void ClearDeadEyeCharge ( ) ClearTemporaryEffects () \u2693\ufe0e void ClearTemporaryEffects ( ) Will be called when player exits the room. DischargeActiveItem () \u2693\ufe0e void DischargeActiveItem ( ) Sets the charge of your active item to 0 without triggering the active item effect. DonateLuck () \u2693\ufe0e void DonateLuck ( int Luck) DoZitEffect () \u2693\ufe0e void DoZitEffect ( Vector Direction) DropPoketItem () \u2693\ufe0e void DropPoketItem ( int PocketNum, Vector Pos ) Drops a held pocketitem (Card, Pill, Rune...) from the given itemslot at the given position. Possible pocketnumbers are [0, 1] Bugs This function is spelled wrong. Removing the pocketitem in slot 0, while having a second item in slot 1 will not update the UI correctly. The second item will still be in the second slot, which will in turn prevent the player from using this card right away. The player needs to switch between cards to fix this. DropTrinket () \u2693\ufe0e void DropTrinket ( Vector DropPos, boolean ReplaceTick ) EvaluateItems () \u2693\ufe0e void EvaluateItems ( ) Triggers a cache reevaluation. Will trigger the MC_EVALUATE_CACHE callback. FireBomb () \u2693\ufe0e EntityBomb FireBomb ( Vector Position, Vector Velocity ) FireBrimstone () \u2693\ufe0e EntityLaser FireBrimstone ( Vector Direction) FireDelayedBrimstone () \u2693\ufe0e EntityLaser FireDelayedBrimstone ( float Angle, Entity Parent ) FireKnife () \u2693\ufe0e EntityKnife FireKnife ( Entity Parent, float RotationOffset, boolean CantOverwrite, int SubType ) FireTear () \u2693\ufe0e EntityTear FireTear ( Vector Position, Vector Velocity, boolean CanBeEye, boolean NoTractorBeam, boolean CanTriggerStreakEnd ) This replaces the protected fire_tear() to allow other entities (Such as bombs) to easily shoot tears in the same manner and with all the effects the player does. (Ex. Sad Bombs) FireTechLaser () \u2693\ufe0e EntityLaser FireTechLaser ( Vector Position, LaserOffset OffsetID, Vector Direction, boolean LeftEye, boolean OneHit ) FireTechXLaser () \u2693\ufe0e EntityLaser FireTechXLaser ( Vector Position, Vector Direction, float Radius ) FlushQueueItem () \u2693\ufe0e boolean FlushQueueItem ( ) called after animation is finished, or on special occasions to prevent bugs FullCharge () \u2693\ufe0e boolean FullCharge ( ) Fully charges the active item. Returns true if the item was fully charged, false otherwise. If player has battery it will first try to fill first charge slot, then the battery slot. GetActiveCharge () \u2693\ufe0e int GetActiveCharge ( ) Get the current charge of your active item. GetActiveItem () \u2693\ufe0e CollectibleType GetActiveItem ( ) Returns the currently held item. GetActiveSubCharge () \u2693\ufe0e int GetActiveSubCharge ( ) Get the current items subcharge. (Useful for items that charge up over time.) GetActiveWeaponEntity () \u2693\ufe0e Entity GetActiveWeaponEntity ( ) GetAimDirection () \u2693\ufe0e Vector GetAimDirection ( ) GetBabySkin () \u2693\ufe0e BabySubType GetBabySkin ( ) GetBatteryCharge () \u2693\ufe0e int GetBatteryCharge ( ) Get the current charge progress of the second charge of your current active item. This bar is only active, when you have the Collectible \"The Battery\" GetBlackHearts () \u2693\ufe0e int GetBlackHearts ( ) This does not return the # of black hearts, this returns the bit mask for which soul hearts are black hearts. GetBombFlags () \u2693\ufe0e int GetBombFlags ( ) GetBombVariant () \u2693\ufe0e EntityBomb::BombVariant GetBombVariant ( int TearFlags, boolean ForceSmallBomb ) Pass tear flags to add extra effects to the bomb visual like burn -> hot bombs, even if player doesn't have Hot Bombs collectible. ForceSmallBomb will override large bomb variants for TEAR_PERSISTENT. GetBoneHearts () \u2693\ufe0e int GetBoneHearts ( ) Returns the number of bone hearts as an integer value. 1 Boneheart = 1. Example Code This code gets the total amount of red heart containers including bone hearts. The bonehearts need to be mulltiplied by 2, since in GetMaxHearts() 2 equals 1 full heart. 1 2 local player = Isaac . GetPlayer ( 0 ) player : GetMaxHearts () + player : GetBoneHearts () * 2 GetCard () \u2693\ufe0e Card GetCard ( int SlotId) Gets the ID of the card the player is holding in the given itemslot (0 or 1). GetCardRNG () \u2693\ufe0e RNG GetCardRNG ( Card ID) GetCollectibleCount () \u2693\ufe0e int GetCollectibleCount ( ) GetCollectibleNum () \u2693\ufe0e int GetCollectibleNum ( CollectibleType Type) GetCollectibleRNG () \u2693\ufe0e RNG GetCollectibleRNG ( CollectibleType ID) GetCostumeNullPos () \u2693\ufe0e Vector GetCostumeNullPos ( string NullFrameName, boolean HeadScale, Vector Direction ) GetDamageCooldown () \u2693\ufe0e int GetDamageCooldown ( ) GetEffectiveMaxHearts () \u2693\ufe0e int GetEffectiveMaxHearts ( ) Returns the amount of Red Hearts the player can contain in their Heart Containers and Bone Hearts. 1 unit is half a red heart. Example: you have 3 red heart container and one bone heart. 6(red) + 2(bone) = 8 GetEffects () \u2693\ufe0e TemporaryEffects GetEffects ( ) GetEternalHearts () \u2693\ufe0e int GetEternalHearts ( ) Returns the amount of eternal hearts the player has. GetExtraLives () \u2693\ufe0e int GetExtraLives ( ) GetFireDirection () \u2693\ufe0e Direction GetFireDirection ( ) GetFlyingOffset () \u2693\ufe0e Vector GetFlyingOffset ( ) GetGoldenHearts () \u2693\ufe0e int GetGoldenHearts ( ) Returns the amount of golden hearts the player has. GetGreedDonationBreakChance () \u2693\ufe0e float GetGreedDonationBreakChance ( ) GetHeadDirection () \u2693\ufe0e Direction GetHeadDirection ( ) GetHeartLimit () \u2693\ufe0e int GetHeartLimit ( ) GetHearts () \u2693\ufe0e int GetHearts ( ) Returns the amount of red hearts the player has inside their heart containers and bone hearts. 1 unit is half a heart. GetItemState () \u2693\ufe0e CollectibleType GetItemState ( ) GetJarFlies () \u2693\ufe0e int GetJarFlies ( ) GetJarHearts () \u2693\ufe0e int GetJarHearts ( ) GetLaserOffset () \u2693\ufe0e Vector GetLaserOffset ( LaserOffset ID, Vector Direction ) GetLastActionTriggers () \u2693\ufe0e int GetLastActionTriggers ( ) GetLastDamageFlags () \u2693\ufe0e int GetLastDamageFlags ( ) GetLastDamageSource () \u2693\ufe0e EntityRef GetLastDamageSource ( ) GetLastDirection () \u2693\ufe0e Vector GetLastDirection ( ) GetMaxHearts () \u2693\ufe0e int GetMaxHearts ( ) Returns the amount of Heart Containers the player has. 1 unit is half a heart container. GetMaxPoketItems () \u2693\ufe0e int GetMaxPoketItems ( ) Get the number of Pickup items you can carry. (1 on default. 2 with belly button or similar) Bugs This function is spelled wrong. GetMaxTrinkets () \u2693\ufe0e int GetMaxTrinkets ( ) Get the number of trinkets you can carry. (1 on default. 2 with moms purse or similar) GetMovementDirection () \u2693\ufe0e Direction GetMovementDirection ( ) GetMovementInput () \u2693\ufe0e Vector GetMovementInput ( ) GetMovementJoystick () \u2693\ufe0e Vector GetMovementJoystick ( ) GetMovementVector () \u2693\ufe0e Vector GetMovementVector ( ) GetMultiShotParams () \u2693\ufe0e MultiShotParams GetMultiShotParams ( ) GetMultiShotPositionVelocity () \u2693\ufe0e PosVel GetMultiShotPositionVelocity ( int LoopIndex, WeaponType Weapon, Vector ShotDirection, float ShotSpeed, MultiShotParams params ) Call this function in a loop with values from 0 to MultiShotParams.NumProjectiles-1 (inclusive) GetName () \u2693\ufe0e string GetName ( ) Returns the name of the player. (Isaac, Cain, Azazel,...) GetNPCTarget () \u2693\ufe0e Entity GetNPCTarget ( ) normally returns the player itself. Can redirect enemy attacks to a different entity such as Best Friend GetNumBlueFlies () \u2693\ufe0e int GetNumBlueFlies ( ) GetNumBlueSpiders () \u2693\ufe0e int GetNumBlueSpiders ( ) GetNumBombs () \u2693\ufe0e int GetNumBombs ( ) GetNumCoins () \u2693\ufe0e int GetNumCoins ( ) GetNumKeys () \u2693\ufe0e int GetNumKeys ( ) GetPill () \u2693\ufe0e PillColor GetPill ( int SlotId) Gets the ID of the pill the player is holding in the given itemslot (0 or 1). GetPillRNG () \u2693\ufe0e RNG GetPillRNG ( PillEffect ID) GetPlayerType () \u2693\ufe0e PlayerType GetPlayerType ( ) GetPocketItem () \u2693\ufe0e PlayerPocketItem GetPocketItem ( int SlotId) Get the userdata of the pocketitem (Card,Pill,rune) in a said slot. Bugs This function returns userdata, which cant be processed. It is therefore broken and should not be used! GetRecentMovementVector () \u2693\ufe0e Vector GetRecentMovementVector ( ) Returns the joystick direction that drives player movement, taking into account certain modifiers like disabled controls and seed effects. GetShootingInput () \u2693\ufe0e Vector GetShootingInput ( ) GetShootingJoystick () \u2693\ufe0e Vector GetShootingJoystick ( ) GetSmoothBodyRotation () \u2693\ufe0e float GetSmoothBodyRotation ( ) GetSoulHearts () \u2693\ufe0e int GetSoulHearts ( ) Returns the amount of Soul Hearts the player has. 1 unit is half a heart. Notes Black Hearts count toward this total, as the game sees them as soul hearts. GetSubPlayer () \u2693\ufe0e EntityPlayer GetSubPlayer ( ) GetTearHitParams () \u2693\ufe0e TearParams GetTearHitParams ( WeaponType WeaponType, float DamageScale, int TearDisplacement ) Used for tear parameters that are calculated on hit (ex: Tough love, Common cold), DamageScale is used for scale calculation based on damage GetTearMovementInheritance () \u2693\ufe0e Vector GetTearMovementInheritance ( Vector ShotDirection) GetTearPoisonDamage () \u2693\ufe0e float GetTearPoisonDamage ( ) GetTearRangeModifier () \u2693\ufe0e int GetTearRangeModifier ( ) GetTotalDamageTaken () \u2693\ufe0e int GetTotalDamageTaken ( ) GetTractorBeam () \u2693\ufe0e Entity GetTractorBeam ( ) GetTrinket () \u2693\ufe0e TrinketType GetTrinket ( int TrinketIndex) Gets the ID of the trinket the player is holding in the given trinketslot (0 or 1). GetTrinketMultiplier () \u2693\ufe0e int GetTrinketMultiplier ( ) GetTrinketRNG () \u2693\ufe0e RNG GetTrinketRNG ( TrinketType ID) GetVelocityBeforeUpdate () \u2693\ufe0e Vector GetVelocityBeforeUpdate ( ) GetZodiacEffect () \u2693\ufe0e CollectibleType GetZodiacEffect ( ) HasCollectible () \u2693\ufe0e boolean HasCollectible ( CollectibleType Type) HasFullHearts () \u2693\ufe0e boolean HasFullHearts ( ) HasFullHeartsAndSoulHearts () \u2693\ufe0e boolean HasFullHeartsAndSoulHearts ( ) HasGoldenBomb () \u2693\ufe0e boolean HasGoldenBomb ( ) HasGoldenKey () \u2693\ufe0e boolean HasGoldenKey ( ) HasInvincibility () \u2693\ufe0e boolean HasInvincibility ( ) returns true when player is in an invincibility state HasPlayerForm () \u2693\ufe0e boolean HasPlayerForm ( PlayerForm Form) HasTimedItem () \u2693\ufe0e boolean HasTimedItem ( ) Kept for avoiding modding issues. HasTrinket () \u2693\ufe0e boolean HasTrinket ( TrinketType Type) HasWeaponType () \u2693\ufe0e boolean HasWeaponType ( WeaponType WeaponType) InitBabySkin () \u2693\ufe0e void InitBabySkin ( ) IsBlackHeart () \u2693\ufe0e boolean IsBlackHeart ( int Heart) IsBoneHeart () \u2693\ufe0e boolean IsBoneHeart ( int heart) IsExtraAnimationFinished () \u2693\ufe0e boolean IsExtraAnimationFinished ( ) IsFullSpriteRendering () \u2693\ufe0e boolean IsFullSpriteRendering ( ) IsHeldItemVisible () \u2693\ufe0e boolean IsHeldItemVisible ( ) IsHoldingItem () \u2693\ufe0e boolean IsHoldingItem ( ) Is Player holding up an item (card/collectible/etc) IsItemQueueEmpty () \u2693\ufe0e boolean IsItemQueueEmpty ( ) IsP2Appearing () \u2693\ufe0e boolean IsP2Appearing ( ) IsPosInSpotLight () \u2693\ufe0e boolean IsPosInSpotLight ( Vector Position) IsSubPlayer () \u2693\ufe0e boolean IsSubPlayer ( ) This is for players that require multiple player entities, such as the Forgotten (this has nothing to do with co-players!) NeedsCharge () \u2693\ufe0e boolean NeedsCharge ( ) PlayExtraAnimation () \u2693\ufe0e void PlayExtraAnimation ( string Animation) QueueExtraAnimation () \u2693\ufe0e void QueueExtraAnimation ( string Animation) QueueItem () \u2693\ufe0e void QueueItem ( Config::Item Item, int Charge, boolean Touched ) Add Collectible/Trinket after animation is finished. RemoveBlackHeart () \u2693\ufe0e void RemoveBlackHeart ( int BlackHeart) RemoveBlueFly () \u2693\ufe0e void RemoveBlueFly ( ) RemoveBlueSpider () \u2693\ufe0e void RemoveBlueSpider ( ) RemoveCollectible () \u2693\ufe0e void RemoveCollectible ( CollectibleType Type) RemoveCostume () \u2693\ufe0e void RemoveCostume ( Config::Item Item) RemoveGoldenBomb () \u2693\ufe0e void RemoveGoldenBomb ( ) RemoveGoldenKey () \u2693\ufe0e void RemoveGoldenKey ( ) RemoveSkinCostume () \u2693\ufe0e void RemoveSkinCostume ( ) RenderBody () \u2693\ufe0e void RenderBody ( Vector position) RenderGlow () \u2693\ufe0e void RenderGlow ( Vector position) RenderHead () \u2693\ufe0e void RenderHead ( Vector position) RenderTop () \u2693\ufe0e void RenderTop ( Vector position) ReplaceCostumeSprite () \u2693\ufe0e void ReplaceCostumeSprite ( Config::Item Item, string SpritePath, int SpriteId ) ResetDamageCooldown () \u2693\ufe0e void ResetDamageCooldown ( ) ResetItemState () \u2693\ufe0e void ResetItemState ( ) Made this public so Room transtiions can call this to prevent lock ups. WRONG PARSING RespawnFamiliars () \u2693\ufe0e void RespawnFamiliars ( ) Revive () \u2693\ufe0e void Revive ( ) revive player SetActiveCharge () \u2693\ufe0e void SetActiveCharge ( int Charge) SetCard () \u2693\ufe0e void SetCard ( int SlotId, Card Card ) Change the card/rune the player is holding in the given itemslot (0 or 1). SetFullHearts () \u2693\ufe0e void SetFullHearts ( ) SetMinDamageCooldown () \u2693\ufe0e void SetMinDamageCooldown ( int DamageCooldown) SetPill () \u2693\ufe0e void SetPill ( int SlotId, PillColor Pill ) Change the pill the player is holding in the given itemslot (0 or 1). SetShootingCooldown () \u2693\ufe0e void SetShootingCooldown ( int Cooldown) SetTargetTrapDoor () \u2693\ufe0e void SetTargetTrapDoor ( GridEntity TrapDoor) ShootRedCandle () \u2693\ufe0e void ShootRedCandle ( Vector Direction) for ghost pepper item + poop and farts SpawnMawOfVoid () \u2693\ufe0e EntityLaser SpawnMawOfVoid ( int Timeout) StopExtraAnimation () \u2693\ufe0e void StopExtraAnimation ( ) SwapActiveItems () \u2693\ufe0e void SwapActiveItems ( ) ThrowBlueSpider () \u2693\ufe0e Entity ThrowBlueSpider ( Vector Position, Vector Target ) TryHoldTrinket () \u2693\ufe0e boolean TryHoldTrinket ( TrinketType Type) Returns true if an active item pickup cooldown is over. returns true if trinket can be added, else false TryRemoveCollectibleCostume () \u2693\ufe0e void TryRemoveCollectibleCostume ( CollectibleType Collectible, boolean KeepPersistent ) tries to remove a costume based on some filters TryRemoveNullCostume () \u2693\ufe0e void TryRemoveNullCostume ( Config::NullItemID NullId) TryRemoveTrinket () \u2693\ufe0e boolean TryRemoveTrinket ( TrinketType Type) TryRemoveTrinketCostume () \u2693\ufe0e void TryRemoveTrinketCostume ( TrinketType Trinket) tries to remove a costume based on some filters TryUseKey () \u2693\ufe0e boolean TryUseKey ( ) UpdateCanShoot () \u2693\ufe0e void UpdateCanShoot ( ) UseActiveItem () \u2693\ufe0e void UseActiveItem ( CollectibleType Item, boolean ShowAnim, boolean KeepActiveItem, boolean AllowNonMainPlayer, boolean ToAddCostume ) UseCard () \u2693\ufe0e void UseCard ( Card Card) UsePill () \u2693\ufe0e void UsePill ( PillEffect PillEffect, PillColor PillColor ) WillPlayerRevive () \u2693\ufe0e boolean WillPlayerRevive ( ) BabySkin () \u2693\ufe0e BabySubType BabySkin P2 Skin section Used to hold the selected skin (in case of glitched baby it will pick a random one) Variables \u2693\ufe0e CanFly \u2693\ufe0e boolean CanFly Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Can the player fly over rocks and pits? ControllerIndex \u2693\ufe0e int ControllerIndex s32 GetItemStateCooldown( void ) const { return m_ItemStateCooldown; } ControlsCooldown \u2693\ufe0e int ControlsCooldown ControlsEnabled \u2693\ufe0e boolean ControlsEnabled Damage \u2693\ufe0e float Damage Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Damage Stat. How much damage do the players tears or other main weapons do? FireDelay \u2693\ufe0e int FireDelay How long until the player can spawn their next tear? FriendBallEnemy \u2693\ufe0e EntityDesc FriendBallEnemy HeadFrameDelay \u2693\ufe0e int HeadFrameDelay ItemHoldCooldown \u2693\ufe0e int ItemHoldCooldown Used for avoiding player get stucked between rocks when switching a flying item with other active item. LaserColor \u2693\ufe0e Color LaserColor Luck \u2693\ufe0e float Luck Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Luck Stat. Better luck generally means better random events. MaxFireDelay \u2693\ufe0e int MaxFireDelay Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Tears Stat. How long between each tear can spawn? MoveSpeed \u2693\ufe0e float MoveSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Speed Stat. How fast can the player move? QueuedItem \u2693\ufe0e QueueItemData QueuedItem item queue for when the player is picking up an item. the item is in effect as soon as the animation is finished and will be removed from the queue. SecondaryActiveItem \u2693\ufe0e ActiveItemDesc SecondaryActiveItem ShotSpeed \u2693\ufe0e float ShotSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the ShotSpeed Stat. How fast does the tear travel when spawned? SpriteScale \u2693\ufe0e Vector SpriteScale TearColor \u2693\ufe0e Color TearColor TearFallingAcceleration \u2693\ufe0e float TearFallingAcceleration TearFallingSpeed \u2693\ufe0e float TearFallingSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. How fast is the tear moving up or down when it spawns? Affects range. TearFlags \u2693\ufe0e int TearFlags Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Various tear flags . Example Code This code makes Isaac's tears spectral. 1 2 3 4 5 local mod : OnEvaluateTearFlags ( player , flag ) player . TearFlags = player . TearFlags | TearFlags . TEAR_SPECTRAL end mod : AddCallback ( ModCallbacks . MC_EVALUATE_CACHE , mod . OnEvaluateTearFlags , CacheFlag . CACHE_TEARFLAG ) WRONG PARSING TearHeight \u2693\ufe0e float TearHeight Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Range Stat * -1. How high above the ground is the tear when it spawns? Example Code This code gives Isaac a +5 range up. 1 2 3 4 5 6 local mod : OnEvaluateRange ( player , flag ) -- we give - 5 because the TearHeight stat is always negative ; the lower the number - the further the tear travels player . TearHeight = player . TearHeight - 5 end mod : AddCallback ( ModCallbacks . MC_EVALUATE_CACHE , mod . OnEvaluateRange , CacheFlag . CACHE_RANGE ) TearsOffset \u2693\ufe0e Vector TearsOffset","title":"EntityPlayer"},{"location":"EntityPlayer/#class-entityplayer","text":"","title":"Class \"EntityPlayer\""},{"location":"EntityPlayer/#functions","text":"","title":"Functions"},{"location":"EntityPlayer/#addblackhearts","text":"","title":"AddBlackHearts ()"},{"location":"EntityPlayer/#addblueflies","text":"","title":"AddBlueFlies ()"},{"location":"EntityPlayer/#addbluespider","text":"","title":"AddBlueSpider ()"},{"location":"EntityPlayer/#addbombs","text":"","title":"AddBombs ()"},{"location":"EntityPlayer/#addbonehearts","text":"","title":"AddBoneHearts ()"},{"location":"EntityPlayer/#addcacheflags","text":"","title":"AddCacheFlags ()"},{"location":"EntityPlayer/#addcard","text":"","title":"AddCard ()"},{"location":"EntityPlayer/#addcoins","text":"","title":"AddCoins ()"},{"location":"EntityPlayer/#addcollectible","text":"","title":"AddCollectible ()"},{"location":"EntityPlayer/#addcontrolscooldown","text":"","title":"AddControlsCooldown ()"},{"location":"EntityPlayer/#addcostume","text":"","title":"AddCostume ()"},{"location":"EntityPlayer/#adddeadeyecharge","text":"","title":"AddDeadEyeCharge ()"},{"location":"EntityPlayer/#adddollarbilleffect","text":"","title":"AddDollarBillEffect ()"},{"location":"EntityPlayer/#addeternalhearts","text":"","title":"AddEternalHearts ()"},{"location":"EntityPlayer/#addgoldenbomb","text":"","title":"AddGoldenBomb ()"},{"location":"EntityPlayer/#addgoldenhearts","text":"","title":"AddGoldenHearts ()"},{"location":"EntityPlayer/#addgoldenkey","text":"","title":"AddGoldenKey ()"},{"location":"EntityPlayer/#addhearts","text":"","title":"AddHearts ()"},{"location":"EntityPlayer/#addjarflies","text":"","title":"AddJarFlies ()"},{"location":"EntityPlayer/#addjarhearts","text":"","title":"AddJarHearts ()"},{"location":"EntityPlayer/#addkeys","text":"","title":"AddKeys ()"},{"location":"EntityPlayer/#addmaxhearts","text":"","title":"AddMaxHearts ()"},{"location":"EntityPlayer/#addnullcostume","text":"","title":"AddNullCostume ()"},{"location":"EntityPlayer/#addpill","text":"","title":"AddPill ()"},{"location":"EntityPlayer/#addplayerformcostume","text":"","title":"AddPlayerFormCostume ()"},{"location":"EntityPlayer/#addprettyfly","text":"","title":"AddPrettyFly ()"},{"location":"EntityPlayer/#addsoulhearts","text":"","title":"AddSoulHearts ()"},{"location":"EntityPlayer/#addtrinket","text":"","title":"AddTrinket ()"},{"location":"EntityPlayer/#animateappear","text":"","title":"AnimateAppear ()"},{"location":"EntityPlayer/#animatecard","text":"","title":"AnimateCard ()"},{"location":"EntityPlayer/#animatecollectible","text":"","title":"AnimateCollectible ()"},{"location":"EntityPlayer/#animatehappy","text":"","title":"AnimateHappy ()"},{"location":"EntityPlayer/#animatelighttravel","text":"","title":"AnimateLightTravel ()"},{"location":"EntityPlayer/#animatepill","text":"","title":"AnimatePill ()"},{"location":"EntityPlayer/#animatepitfallin","text":"","title":"AnimatePitfallIn ()"},{"location":"EntityPlayer/#animatepitfallout","text":"","title":"AnimatePitfallOut ()"},{"location":"EntityPlayer/#animatesad","text":"","title":"AnimateSad ()"},{"location":"EntityPlayer/#animateteleport","text":"","title":"AnimateTeleport ()"},{"location":"EntityPlayer/#animatetrapdoor","text":"","title":"AnimateTrapdoor ()"},{"location":"EntityPlayer/#animatetrinket","text":"","title":"AnimateTrinket ()"},{"location":"EntityPlayer/#arecontrolsenabled","text":"","title":"AreControlsEnabled ()"},{"location":"EntityPlayer/#areopposingshootdirectionspressed","text":"","title":"AreOpposingShootDirectionsPressed ()"},{"location":"EntityPlayer/#canaddcollectible","text":"","title":"CanAddCollectible ()"},{"location":"EntityPlayer/#canpickblackhearts","text":"","title":"CanPickBlackHearts ()"},{"location":"EntityPlayer/#canpickbonehearts","text":"","title":"CanPickBoneHearts ()"},{"location":"EntityPlayer/#canpickgoldenhearts","text":"","title":"CanPickGoldenHearts ()"},{"location":"EntityPlayer/#canpickredhearts","text":"","title":"CanPickRedHearts ()"},{"location":"EntityPlayer/#canpicksoulhearts","text":"","title":"CanPickSoulHearts ()"},{"location":"EntityPlayer/#canpickupitem","text":"","title":"CanPickupItem ()"},{"location":"EntityPlayer/#canshoot","text":"","title":"CanShoot ()"},{"location":"EntityPlayer/#canturnhead","text":"","title":"CanTurnHead ()"},{"location":"EntityPlayer/#checkfamiliar","text":"","title":"CheckFamiliar ()"},{"location":"EntityPlayer/#clearcostumes","text":"","title":"ClearCostumes ()"},{"location":"EntityPlayer/#cleardeadeyecharge","text":"","title":"ClearDeadEyeCharge ()"},{"location":"EntityPlayer/#cleartemporaryeffects","text":"","title":"ClearTemporaryEffects ()"},{"location":"EntityPlayer/#dischargeactiveitem","text":"","title":"DischargeActiveItem ()"},{"location":"EntityPlayer/#donateluck","text":"","title":"DonateLuck ()"},{"location":"EntityPlayer/#doziteffect","text":"","title":"DoZitEffect ()"},{"location":"EntityPlayer/#droppoketitem","text":"","title":"DropPoketItem ()"},{"location":"EntityPlayer/#droptrinket","text":"","title":"DropTrinket ()"},{"location":"EntityPlayer/#evaluateitems","text":"","title":"EvaluateItems ()"},{"location":"EntityPlayer/#firebomb","text":"","title":"FireBomb ()"},{"location":"EntityPlayer/#firebrimstone","text":"","title":"FireBrimstone ()"},{"location":"EntityPlayer/#firedelayedbrimstone","text":"","title":"FireDelayedBrimstone ()"},{"location":"EntityPlayer/#fireknife","text":"","title":"FireKnife ()"},{"location":"EntityPlayer/#firetear","text":"","title":"FireTear ()"},{"location":"EntityPlayer/#firetechlaser","text":"","title":"FireTechLaser ()"},{"location":"EntityPlayer/#firetechxlaser","text":"","title":"FireTechXLaser ()"},{"location":"EntityPlayer/#flushqueueitem","text":"","title":"FlushQueueItem ()"},{"location":"EntityPlayer/#fullcharge","text":"","title":"FullCharge ()"},{"location":"EntityPlayer/#getactivecharge","text":"","title":"GetActiveCharge ()"},{"location":"EntityPlayer/#getactiveitem","text":"","title":"GetActiveItem ()"},{"location":"EntityPlayer/#getactivesubcharge","text":"","title":"GetActiveSubCharge ()"},{"location":"EntityPlayer/#getactiveweaponentity","text":"","title":"GetActiveWeaponEntity ()"},{"location":"EntityPlayer/#getaimdirection","text":"","title":"GetAimDirection ()"},{"location":"EntityPlayer/#getbabyskin","text":"","title":"GetBabySkin ()"},{"location":"EntityPlayer/#getbatterycharge","text":"","title":"GetBatteryCharge ()"},{"location":"EntityPlayer/#getblackhearts","text":"","title":"GetBlackHearts ()"},{"location":"EntityPlayer/#getbombflags","text":"","title":"GetBombFlags ()"},{"location":"EntityPlayer/#getbombvariant","text":"","title":"GetBombVariant ()"},{"location":"EntityPlayer/#getbonehearts","text":"","title":"GetBoneHearts ()"},{"location":"EntityPlayer/#getcard","text":"","title":"GetCard ()"},{"location":"EntityPlayer/#getcardrng","text":"","title":"GetCardRNG ()"},{"location":"EntityPlayer/#getcollectiblecount","text":"","title":"GetCollectibleCount ()"},{"location":"EntityPlayer/#getcollectiblenum","text":"","title":"GetCollectibleNum ()"},{"location":"EntityPlayer/#getcollectiblerng","text":"","title":"GetCollectibleRNG ()"},{"location":"EntityPlayer/#getcostumenullpos","text":"","title":"GetCostumeNullPos ()"},{"location":"EntityPlayer/#getdamagecooldown","text":"","title":"GetDamageCooldown ()"},{"location":"EntityPlayer/#geteffectivemaxhearts","text":"","title":"GetEffectiveMaxHearts ()"},{"location":"EntityPlayer/#geteffects","text":"","title":"GetEffects ()"},{"location":"EntityPlayer/#geteternalhearts","text":"","title":"GetEternalHearts ()"},{"location":"EntityPlayer/#getextralives","text":"","title":"GetExtraLives ()"},{"location":"EntityPlayer/#getfiredirection","text":"","title":"GetFireDirection ()"},{"location":"EntityPlayer/#getflyingoffset","text":"","title":"GetFlyingOffset ()"},{"location":"EntityPlayer/#getgoldenhearts","text":"","title":"GetGoldenHearts ()"},{"location":"EntityPlayer/#getgreeddonationbreakchance","text":"","title":"GetGreedDonationBreakChance ()"},{"location":"EntityPlayer/#getheaddirection","text":"","title":"GetHeadDirection ()"},{"location":"EntityPlayer/#getheartlimit","text":"","title":"GetHeartLimit ()"},{"location":"EntityPlayer/#gethearts","text":"","title":"GetHearts ()"},{"location":"EntityPlayer/#getitemstate","text":"","title":"GetItemState ()"},{"location":"EntityPlayer/#getjarflies","text":"","title":"GetJarFlies ()"},{"location":"EntityPlayer/#getjarhearts","text":"","title":"GetJarHearts ()"},{"location":"EntityPlayer/#getlaseroffset","text":"","title":"GetLaserOffset ()"},{"location":"EntityPlayer/#getlastactiontriggers","text":"","title":"GetLastActionTriggers ()"},{"location":"EntityPlayer/#getlastdamageflags","text":"","title":"GetLastDamageFlags ()"},{"location":"EntityPlayer/#getlastdamagesource","text":"","title":"GetLastDamageSource ()"},{"location":"EntityPlayer/#getlastdirection","text":"","title":"GetLastDirection ()"},{"location":"EntityPlayer/#getmaxhearts","text":"","title":"GetMaxHearts ()"},{"location":"EntityPlayer/#getmaxpoketitems","text":"","title":"GetMaxPoketItems ()"},{"location":"EntityPlayer/#getmaxtrinkets","text":"","title":"GetMaxTrinkets ()"},{"location":"EntityPlayer/#getmovementdirection","text":"","title":"GetMovementDirection ()"},{"location":"EntityPlayer/#getmovementinput","text":"","title":"GetMovementInput ()"},{"location":"EntityPlayer/#getmovementjoystick","text":"","title":"GetMovementJoystick ()"},{"location":"EntityPlayer/#getmovementvector","text":"","title":"GetMovementVector ()"},{"location":"EntityPlayer/#getmultishotparams","text":"","title":"GetMultiShotParams ()"},{"location":"EntityPlayer/#getmultishotpositionvelocity","text":"","title":"GetMultiShotPositionVelocity ()"},{"location":"EntityPlayer/#getname","text":"","title":"GetName ()"},{"location":"EntityPlayer/#getnpctarget","text":"","title":"GetNPCTarget ()"},{"location":"EntityPlayer/#getnumblueflies","text":"","title":"GetNumBlueFlies ()"},{"location":"EntityPlayer/#getnumbluespiders","text":"","title":"GetNumBlueSpiders ()"},{"location":"EntityPlayer/#getnumbombs","text":"","title":"GetNumBombs ()"},{"location":"EntityPlayer/#getnumcoins","text":"","title":"GetNumCoins ()"},{"location":"EntityPlayer/#getnumkeys","text":"","title":"GetNumKeys ()"},{"location":"EntityPlayer/#getpill","text":"","title":"GetPill ()"},{"location":"EntityPlayer/#getpillrng","text":"","title":"GetPillRNG ()"},{"location":"EntityPlayer/#getplayertype","text":"","title":"GetPlayerType ()"},{"location":"EntityPlayer/#getpocketitem","text":"","title":"GetPocketItem ()"},{"location":"EntityPlayer/#getrecentmovementvector","text":"","title":"GetRecentMovementVector ()"},{"location":"EntityPlayer/#getshootinginput","text":"","title":"GetShootingInput ()"},{"location":"EntityPlayer/#getshootingjoystick","text":"","title":"GetShootingJoystick ()"},{"location":"EntityPlayer/#getsmoothbodyrotation","text":"","title":"GetSmoothBodyRotation ()"},{"location":"EntityPlayer/#getsoulhearts","text":"","title":"GetSoulHearts ()"},{"location":"EntityPlayer/#getsubplayer","text":"","title":"GetSubPlayer ()"},{"location":"EntityPlayer/#gettearhitparams","text":"","title":"GetTearHitParams ()"},{"location":"EntityPlayer/#gettearmovementinheritance","text":"","title":"GetTearMovementInheritance ()"},{"location":"EntityPlayer/#gettearpoisondamage","text":"","title":"GetTearPoisonDamage ()"},{"location":"EntityPlayer/#gettearrangemodifier","text":"","title":"GetTearRangeModifier ()"},{"location":"EntityPlayer/#gettotaldamagetaken","text":"","title":"GetTotalDamageTaken ()"},{"location":"EntityPlayer/#gettractorbeam","text":"","title":"GetTractorBeam ()"},{"location":"EntityPlayer/#gettrinket","text":"","title":"GetTrinket ()"},{"location":"EntityPlayer/#gettrinketmultiplier","text":"","title":"GetTrinketMultiplier ()"},{"location":"EntityPlayer/#gettrinketrng","text":"","title":"GetTrinketRNG ()"},{"location":"EntityPlayer/#getvelocitybeforeupdate","text":"","title":"GetVelocityBeforeUpdate ()"},{"location":"EntityPlayer/#getzodiaceffect","text":"","title":"GetZodiacEffect ()"},{"location":"EntityPlayer/#hascollectible","text":"","title":"HasCollectible ()"},{"location":"EntityPlayer/#hasfullhearts","text":"","title":"HasFullHearts ()"},{"location":"EntityPlayer/#hasfullheartsandsoulhearts","text":"","title":"HasFullHeartsAndSoulHearts ()"},{"location":"EntityPlayer/#hasgoldenbomb","text":"","title":"HasGoldenBomb ()"},{"location":"EntityPlayer/#hasgoldenkey","text":"","title":"HasGoldenKey ()"},{"location":"EntityPlayer/#hasinvincibility","text":"","title":"HasInvincibility ()"},{"location":"EntityPlayer/#hasplayerform","text":"","title":"HasPlayerForm ()"},{"location":"EntityPlayer/#hastimeditem","text":"","title":"HasTimedItem ()"},{"location":"EntityPlayer/#hastrinket","text":"","title":"HasTrinket ()"},{"location":"EntityPlayer/#hasweapontype","text":"","title":"HasWeaponType ()"},{"location":"EntityPlayer/#initbabyskin","text":"","title":"InitBabySkin ()"},{"location":"EntityPlayer/#isblackheart","text":"","title":"IsBlackHeart ()"},{"location":"EntityPlayer/#isboneheart","text":"","title":"IsBoneHeart ()"},{"location":"EntityPlayer/#isextraanimationfinished","text":"","title":"IsExtraAnimationFinished ()"},{"location":"EntityPlayer/#isfullspriterendering","text":"","title":"IsFullSpriteRendering ()"},{"location":"EntityPlayer/#ishelditemvisible","text":"","title":"IsHeldItemVisible ()"},{"location":"EntityPlayer/#isholdingitem","text":"","title":"IsHoldingItem ()"},{"location":"EntityPlayer/#isitemqueueempty","text":"","title":"IsItemQueueEmpty ()"},{"location":"EntityPlayer/#isp2appearing","text":"","title":"IsP2Appearing ()"},{"location":"EntityPlayer/#isposinspotlight","text":"","title":"IsPosInSpotLight ()"},{"location":"EntityPlayer/#issubplayer","text":"","title":"IsSubPlayer ()"},{"location":"EntityPlayer/#needscharge","text":"","title":"NeedsCharge ()"},{"location":"EntityPlayer/#playextraanimation","text":"","title":"PlayExtraAnimation ()"},{"location":"EntityPlayer/#queueextraanimation","text":"","title":"QueueExtraAnimation ()"},{"location":"EntityPlayer/#queueitem","text":"","title":"QueueItem ()"},{"location":"EntityPlayer/#removeblackheart","text":"","title":"RemoveBlackHeart ()"},{"location":"EntityPlayer/#removebluefly","text":"","title":"RemoveBlueFly ()"},{"location":"EntityPlayer/#removebluespider","text":"","title":"RemoveBlueSpider ()"},{"location":"EntityPlayer/#removecollectible","text":"","title":"RemoveCollectible ()"},{"location":"EntityPlayer/#removecostume","text":"","title":"RemoveCostume ()"},{"location":"EntityPlayer/#removegoldenbomb","text":"","title":"RemoveGoldenBomb ()"},{"location":"EntityPlayer/#removegoldenkey","text":"","title":"RemoveGoldenKey ()"},{"location":"EntityPlayer/#removeskincostume","text":"","title":"RemoveSkinCostume ()"},{"location":"EntityPlayer/#renderbody","text":"","title":"RenderBody ()"},{"location":"EntityPlayer/#renderglow","text":"","title":"RenderGlow ()"},{"location":"EntityPlayer/#renderhead","text":"","title":"RenderHead ()"},{"location":"EntityPlayer/#rendertop","text":"","title":"RenderTop ()"},{"location":"EntityPlayer/#replacecostumesprite","text":"","title":"ReplaceCostumeSprite ()"},{"location":"EntityPlayer/#resetdamagecooldown","text":"","title":"ResetDamageCooldown ()"},{"location":"EntityPlayer/#resetitemstate","text":"","title":"ResetItemState ()"},{"location":"EntityPlayer/#respawnfamiliars","text":"","title":"RespawnFamiliars ()"},{"location":"EntityPlayer/#revive","text":"","title":"Revive ()"},{"location":"EntityPlayer/#setactivecharge","text":"","title":"SetActiveCharge ()"},{"location":"EntityPlayer/#setcard","text":"","title":"SetCard ()"},{"location":"EntityPlayer/#setfullhearts","text":"","title":"SetFullHearts ()"},{"location":"EntityPlayer/#setmindamagecooldown","text":"","title":"SetMinDamageCooldown ()"},{"location":"EntityPlayer/#setpill","text":"","title":"SetPill ()"},{"location":"EntityPlayer/#setshootingcooldown","text":"","title":"SetShootingCooldown ()"},{"location":"EntityPlayer/#settargettrapdoor","text":"","title":"SetTargetTrapDoor ()"},{"location":"EntityPlayer/#shootredcandle","text":"","title":"ShootRedCandle ()"},{"location":"EntityPlayer/#spawnmawofvoid","text":"","title":"SpawnMawOfVoid ()"},{"location":"EntityPlayer/#stopextraanimation","text":"","title":"StopExtraAnimation ()"},{"location":"EntityPlayer/#swapactiveitems","text":"","title":"SwapActiveItems ()"},{"location":"EntityPlayer/#throwbluespider","text":"","title":"ThrowBlueSpider ()"},{"location":"EntityPlayer/#tryholdtrinket","text":"","title":"TryHoldTrinket ()"},{"location":"EntityPlayer/#tryremovecollectiblecostume","text":"","title":"TryRemoveCollectibleCostume ()"},{"location":"EntityPlayer/#tryremovenullcostume","text":"","title":"TryRemoveNullCostume ()"},{"location":"EntityPlayer/#tryremovetrinket","text":"","title":"TryRemoveTrinket ()"},{"location":"EntityPlayer/#tryremovetrinketcostume","text":"","title":"TryRemoveTrinketCostume ()"},{"location":"EntityPlayer/#tryusekey","text":"","title":"TryUseKey ()"},{"location":"EntityPlayer/#updatecanshoot","text":"","title":"UpdateCanShoot ()"},{"location":"EntityPlayer/#useactiveitem","text":"","title":"UseActiveItem ()"},{"location":"EntityPlayer/#usecard","text":"","title":"UseCard ()"},{"location":"EntityPlayer/#usepill","text":"","title":"UsePill ()"},{"location":"EntityPlayer/#willplayerrevive","text":"","title":"WillPlayerRevive ()"},{"location":"EntityPlayer/#babyskin","text":"","title":"BabySkin ()"},{"location":"EntityPlayer/#variables","text":"","title":"Variables"},{"location":"EntityPlayer/#canfly","text":"","title":"CanFly"},{"location":"EntityPlayer/#controllerindex","text":"","title":"ControllerIndex"},{"location":"EntityPlayer/#controlscooldown","text":"","title":"ControlsCooldown"},{"location":"EntityPlayer/#controlsenabled","text":"","title":"ControlsEnabled"},{"location":"EntityPlayer/#damage","text":"","title":"Damage"},{"location":"EntityPlayer/#firedelay","text":"","title":"FireDelay"},{"location":"EntityPlayer/#friendballenemy","text":"","title":"FriendBallEnemy"},{"location":"EntityPlayer/#headframedelay","text":"","title":"HeadFrameDelay"},{"location":"EntityPlayer/#itemholdcooldown","text":"","title":"ItemHoldCooldown"},{"location":"EntityPlayer/#lasercolor","text":"","title":"LaserColor"},{"location":"EntityPlayer/#luck","text":"","title":"Luck"},{"location":"EntityPlayer/#maxfiredelay","text":"","title":"MaxFireDelay"},{"location":"EntityPlayer/#movespeed","text":"","title":"MoveSpeed"},{"location":"EntityPlayer/#queueditem","text":"","title":"QueuedItem"},{"location":"EntityPlayer/#secondaryactiveitem","text":"","title":"SecondaryActiveItem"},{"location":"EntityPlayer/#shotspeed","text":"","title":"ShotSpeed"},{"location":"EntityPlayer/#spritescale","text":"","title":"SpriteScale"},{"location":"EntityPlayer/#tearcolor","text":"","title":"TearColor"},{"location":"EntityPlayer/#tearfallingacceleration","text":"","title":"TearFallingAcceleration"},{"location":"EntityPlayer/#tearfallingspeed","text":"","title":"TearFallingSpeed"},{"location":"EntityPlayer/#tearflags","text":"","title":"TearFlags"},{"location":"EntityPlayer/#tearheight","text":"","title":"TearHeight"},{"location":"EntityPlayer/#tearsoffset","text":"","title":"TearsOffset"},{"location":"EntityProjectile/","text":"Class \"EntityProjectile\" \u2693\ufe0e Functions \u2693\ufe0e AddChangeFlags () \u2693\ufe0e void AddChangeFlags ( int Flags) See ChangeFlags . WRONG PARSING AddFallingAccel () \u2693\ufe0e void AddFallingAccel ( float Value) AddFallingSpeed () \u2693\ufe0e void AddFallingSpeed ( float Value) AddHeight () \u2693\ufe0e void AddHeight ( float Value) AddProjectileFlags () \u2693\ufe0e void AddProjectileFlags ( int Flags) Uses ProjectileFlags to define the projectile attributes. WRONG PARSING AddScale () \u2693\ufe0e void AddScale ( float Value) Variables \u2693\ufe0e Acceleration \u2693\ufe0e float Acceleration ChangeFlags \u2693\ufe0e int ChangeFlags Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() WRONG PARSING ChangeTimeout \u2693\ufe0e int ChangeTimeout Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() WRONG PARSING ChangeVelocity \u2693\ufe0e float ChangeVelocity Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() WRONG PARSING CurvingStrength \u2693\ufe0e float CurvingStrength Damage \u2693\ufe0e float Damage DepthOffset \u2693\ufe0e float DepthOffset FallingAccel \u2693\ufe0e float FallingAccel FallingSpeed \u2693\ufe0e float FallingSpeed Height \u2693\ufe0e float Height Defines the height of a projectile. Height should be a negative value. Default is - 23 . HomingStrength \u2693\ufe0e float HomingStrength ProjectileFlags \u2693\ufe0e int ProjectileFlags Uses ProjectileFlags to define the projectile attributes. WRONG PARSING Scale \u2693\ufe0e float Scale WiggleFrameOffset \u2693\ufe0e int WiggleFrameOffset","title":"EntityProjectile"},{"location":"EntityProjectile/#class-entityprojectile","text":"","title":"Class \"EntityProjectile\""},{"location":"EntityProjectile/#functions","text":"","title":"Functions"},{"location":"EntityProjectile/#addchangeflags","text":"","title":"AddChangeFlags ()"},{"location":"EntityProjectile/#addfallingaccel","text":"","title":"AddFallingAccel ()"},{"location":"EntityProjectile/#addfallingspeed","text":"","title":"AddFallingSpeed ()"},{"location":"EntityProjectile/#addheight","text":"","title":"AddHeight ()"},{"location":"EntityProjectile/#addprojectileflags","text":"","title":"AddProjectileFlags ()"},{"location":"EntityProjectile/#addscale","text":"","title":"AddScale ()"},{"location":"EntityProjectile/#variables","text":"","title":"Variables"},{"location":"EntityProjectile/#acceleration","text":"","title":"Acceleration"},{"location":"EntityProjectile/#changeflags","text":"","title":"ChangeFlags"},{"location":"EntityProjectile/#changetimeout","text":"","title":"ChangeTimeout"},{"location":"EntityProjectile/#changevelocity","text":"","title":"ChangeVelocity"},{"location":"EntityProjectile/#curvingstrength","text":"","title":"CurvingStrength"},{"location":"EntityProjectile/#damage","text":"","title":"Damage"},{"location":"EntityProjectile/#depthoffset","text":"","title":"DepthOffset"},{"location":"EntityProjectile/#fallingaccel","text":"","title":"FallingAccel"},{"location":"EntityProjectile/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityProjectile/#height","text":"","title":"Height"},{"location":"EntityProjectile/#homingstrength","text":"","title":"HomingStrength"},{"location":"EntityProjectile/#projectileflags","text":"","title":"ProjectileFlags"},{"location":"EntityProjectile/#scale","text":"","title":"Scale"},{"location":"EntityProjectile/#wiggleframeoffset","text":"","title":"WiggleFrameOffset"},{"location":"EntityPtr/","text":"Class \"EntityPtr\" \u2693\ufe0e Functions \u2693\ufe0e EntityPtr () \u2693\ufe0e void EntityPtr ( Entity ) SetReference () \u2693\ufe0e void SetReference ( Entity ref) Ref () \u2693\ufe0e Entity Ref","title":"EntityPtr"},{"location":"EntityPtr/#class-entityptr","text":"","title":"Class \"EntityPtr\""},{"location":"EntityPtr/#functions","text":"","title":"Functions"},{"location":"EntityPtr/#entityptr","text":"","title":"EntityPtr ()"},{"location":"EntityPtr/#setreference","text":"","title":"SetReference ()"},{"location":"EntityPtr/#ref","text":"","title":"Ref ()"},{"location":"EntityRef/","text":"Class \"EntityRef\" \u2693\ufe0e Functions \u2693\ufe0e EntityRef () \u2693\ufe0e void EntityRef ( Entity ) Entity () \u2693\ufe0e Entity Entity optional Variables \u2693\ufe0e IsCharmed \u2693\ufe0e boolean IsCharmed IsFriendly \u2693\ufe0e boolean IsFriendly Position \u2693\ufe0e Vector Position SpawnerType \u2693\ufe0e EntityType SpawnerType SpawnerVariant \u2693\ufe0e int SpawnerVariant Type \u2693\ufe0e EntityType Type Variant \u2693\ufe0e int Variant","title":"EntityRef"},{"location":"EntityRef/#class-entityref","text":"","title":"Class \"EntityRef\""},{"location":"EntityRef/#functions","text":"","title":"Functions"},{"location":"EntityRef/#entityref","text":"","title":"EntityRef ()"},{"location":"EntityRef/#entity","text":"","title":"Entity ()"},{"location":"EntityRef/#variables","text":"","title":"Variables"},{"location":"EntityRef/#ischarmed","text":"","title":"IsCharmed"},{"location":"EntityRef/#isfriendly","text":"","title":"IsFriendly"},{"location":"EntityRef/#position","text":"","title":"Position"},{"location":"EntityRef/#spawnertype","text":"","title":"SpawnerType"},{"location":"EntityRef/#spawnervariant","text":"","title":"SpawnerVariant"},{"location":"EntityRef/#type","text":"","title":"Type"},{"location":"EntityRef/#variant","text":"","title":"Variant"},{"location":"EntityTear/","text":"Class \"EntityTear\" \u2693\ufe0e Functions \u2693\ufe0e ChangeVariant () \u2693\ufe0e void ChangeVariant ( int NewVariant) ResetSpriteScale () \u2693\ufe0e void ResetSpriteScale ( ) Resets the tear sprite animation depending on scale. SetDeadEyeIntensity () \u2693\ufe0e void SetDeadEyeIntensity ( float Intensity) SetKnockbackMultiplier () \u2693\ufe0e void SetKnockbackMultiplier ( float Multiplier) SetParentOffset () \u2693\ufe0e void SetParentOffset ( Vector Offset) SetWaitFrames () \u2693\ufe0e void SetWaitFrames ( int Value) Variables \u2693\ufe0e BaseDamage \u2693\ufe0e float BaseDamage BaseScale \u2693\ufe0e float BaseScale Bounced \u2693\ufe0e boolean Bounced true if tear bounced of something CanTriggerStreakEnd \u2693\ufe0e boolean CanTriggerStreakEnd For Onan's strak and Dead Eye. ContinueVelocity \u2693\ufe0e Vector ContinueVelocity FallingAcceleration \u2693\ufe0e float FallingAcceleration FallingSpeed \u2693\ufe0e float FallingSpeed Height \u2693\ufe0e float Height HomingFriction \u2693\ufe0e float HomingFriction KnockbackMultiplier \u2693\ufe0e float KnockbackMultiplier ParentOffset \u2693\ufe0e Vector ParentOffset Used for Position adjustment (vs PositionOffset which is a render offset) PosDisplacement \u2693\ufe0e Vector PosDisplacement Rotation \u2693\ufe0e float Rotation Scale \u2693\ufe0e float Scale StickDiff \u2693\ufe0e Vector StickDiff StickTarget \u2693\ufe0e Entity StickTarget StickTimer \u2693\ufe0e int StickTimer TearFlags \u2693\ufe0e int TearFlags TearIndex \u2693\ufe0e int TearIndex WaitFrames \u2693\ufe0e int WaitFrames","title":"EntityTear"},{"location":"EntityTear/#class-entitytear","text":"","title":"Class \"EntityTear\""},{"location":"EntityTear/#functions","text":"","title":"Functions"},{"location":"EntityTear/#changevariant","text":"","title":"ChangeVariant ()"},{"location":"EntityTear/#resetspritescale","text":"","title":"ResetSpriteScale ()"},{"location":"EntityTear/#setdeadeyeintensity","text":"","title":"SetDeadEyeIntensity ()"},{"location":"EntityTear/#setknockbackmultiplier","text":"","title":"SetKnockbackMultiplier ()"},{"location":"EntityTear/#setparentoffset","text":"","title":"SetParentOffset ()"},{"location":"EntityTear/#setwaitframes","text":"","title":"SetWaitFrames ()"},{"location":"EntityTear/#variables","text":"","title":"Variables"},{"location":"EntityTear/#basedamage","text":"","title":"BaseDamage"},{"location":"EntityTear/#basescale","text":"","title":"BaseScale"},{"location":"EntityTear/#bounced","text":"","title":"Bounced"},{"location":"EntityTear/#cantriggerstreakend","text":"","title":"CanTriggerStreakEnd"},{"location":"EntityTear/#continuevelocity","text":"","title":"ContinueVelocity"},{"location":"EntityTear/#fallingacceleration","text":"","title":"FallingAcceleration"},{"location":"EntityTear/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityTear/#height","text":"","title":"Height"},{"location":"EntityTear/#homingfriction","text":"","title":"HomingFriction"},{"location":"EntityTear/#knockbackmultiplier","text":"","title":"KnockbackMultiplier"},{"location":"EntityTear/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityTear/#posdisplacement","text":"","title":"PosDisplacement"},{"location":"EntityTear/#rotation","text":"","title":"Rotation"},{"location":"EntityTear/#scale","text":"","title":"Scale"},{"location":"EntityTear/#stickdiff","text":"","title":"StickDiff"},{"location":"EntityTear/#sticktarget","text":"","title":"StickTarget"},{"location":"EntityTear/#sticktimer","text":"","title":"StickTimer"},{"location":"EntityTear/#tearflags","text":"","title":"TearFlags"},{"location":"EntityTear/#tearindex","text":"","title":"TearIndex"},{"location":"EntityTear/#waitframes","text":"","title":"WaitFrames"},{"location":"Font/","text":"Class \"Font\" \u2693\ufe0e Functions \u2693\ufe0e Font () \u2693\ufe0e void Font ( void ) Constructor for the \"Font\" class. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawString () \u2693\ufe0e void DrawString ( string String, float PositionX, float PositionY, KColor RenderColor, u_int BoxWidth, boolean Center ) Draws a string of text to the screen Converts UTF8 to UTF16, then draws the string. Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringScaled () \u2693\ufe0e void DrawStringScaled ( string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, u_int BoxWidth, boolean Center ) Draws a scaled string of text on the screen. Converts UTF8 to UTF16, then draws the string. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringScaled ( \"Hello World!\" , 60 , 50 , 0.5 , 0.5 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringScaledUTF8 () \u2693\ufe0e void DrawStringScaledUTF8 ( string String, float PositionX, float PositionY, float ScaleX, float ScaleY, KColor RenderColor, u_int BoxWidth, boolean Center ) Draws a scaled string of Unicode text on the screen. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringScaledUTF8 ( \"Hello World!\" , 60 , 50 , 0.5 , 0.5 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringUTF8 () \u2693\ufe0e void DrawStringUTF8 ( string String, float PositionX, float PositionY, KColor RenderColor, u_int BoxWidth, boolean Center ) Draws a string of Unicode text to the screen Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringUTF8 ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y GetBaselineHeight () \u2693\ufe0e u_int GetBaselineHeight ( ) Get the number of pixels from the absolute top of the line to the base of the characters GetCharacterWidth () \u2693\ufe0e u_int GetCharacterWidth ( char Character) Returns the width of a specific character GetLineHeight () \u2693\ufe0e u_int GetLineHeight ( ) Get the distance in pixels between each line of text GetStringWidth () \u2693\ufe0e u_int GetStringWidth ( string String) Converts UTF8 to UTF16 and returns string width GetStringWidthUTF8 () \u2693\ufe0e u_int GetStringWidthUTF8 ( string String) returns string width of a Unicode text. IsLoaded () \u2693\ufe0e boolean IsLoaded ( ) Returns whether a font is loaded or not. Load () \u2693\ufe0e boolean Load ( string FilePath) Loads a font. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 ), 0 , true ) -- render string with loaded font on position 60 x50y SetMissingCharacter () \u2693\ufe0e void SetMissingCharacter ( u16 MissingCharacter) Converts UTF8 to UTF16, then draws Sets the missing character to be used by the font (the character used when missing characters are encountered) Unload () \u2693\ufe0e void Unload ( ) Unloads all our data from memory","title":"Font"},{"location":"Font/#class-font","text":"","title":"Class \"Font\""},{"location":"Font/#functions","text":"","title":"Functions"},{"location":"Font/#font","text":"","title":"Font ()"},{"location":"Font/#drawstring","text":"","title":"DrawString ()"},{"location":"Font/#drawstringscaled","text":"","title":"DrawStringScaled ()"},{"location":"Font/#drawstringscaledutf8","text":"","title":"DrawStringScaledUTF8 ()"},{"location":"Font/#drawstringutf8","text":"","title":"DrawStringUTF8 ()"},{"location":"Font/#getbaselineheight","text":"","title":"GetBaselineHeight ()"},{"location":"Font/#getcharacterwidth","text":"","title":"GetCharacterWidth ()"},{"location":"Font/#getlineheight","text":"","title":"GetLineHeight ()"},{"location":"Font/#getstringwidth","text":"","title":"GetStringWidth ()"},{"location":"Font/#getstringwidthutf8","text":"","title":"GetStringWidthUTF8 ()"},{"location":"Font/#isloaded","text":"","title":"IsLoaded ()"},{"location":"Font/#load","text":"","title":"Load ()"},{"location":"Font/#setmissingcharacter","text":"","title":"SetMissingCharacter ()"},{"location":"Font/#unload","text":"","title":"Unload ()"},{"location":"Functions/","text":"Class \"Functions\" \u2693\ufe0e Functions \u2693\ufe0e Game () \u2693\ufe0e Game Game ( ) Returns a Game object. Example Code Example usage: 1 2 Game () : IsPaused () -- returns true if the game is paused WRONG PARSING MusicManager () \u2693\ufe0e MusicManager MusicManager ( ) Returns a MusicManager object. Example Code Example usage: 1 MusicManager () : Disable () WRONG PARSING Random () \u2693\ufe0e int Random ( ) Returns a random integer. (0 to 2^32) RandomVector () \u2693\ufe0e Vector RandomVector ( ) Returns a random vector with length 1. Multiply this vector by a number for larger random vectors. SFXManager () \u2693\ufe0e SFXManager SFXManager ( ) Returns a SFXManager object. Example Code Example usage: 1 SFXManager () : Stop ( SoundEffect . SOUND_1UP ) WRONG PARSING GetPtrHash () \u2693\ufe0e int GetPtrHash ( Objectobject) Returns a hash-value of the pointer given as an input value. Valid inputs are any Isaac object, including Entity , Room , RNG , Sprite , Game etc. It can be used to easily compare two entities, making equality checks very easy. Example: If you spawn a certain entity, save it in a variable and then compare it to the entity parameter in MC_ENTITY_TAKE_DMG , this comparison will never be true even if both variables refer to the exact same entity in the game. GetPtrHash () turns pointer into a fixed number, which makes comparisons easier. Example Code Example on check if two entities saved in different variables are the same. 1 2 3 4 5 6 7 8 -- don ' t do it like this if entity1 == entity2 then -- this will always be false , because two different references on a pointer are not equal end -- use GetPtrHash () to compare them if GetPtrHash ( entity1 ) == GetPtrHash ( entity2 ) then -- this will be true , when the pointer of both variables point to the same object . end","title":"Functions"},{"location":"Functions/#class-functions","text":"","title":"Class \"Functions\""},{"location":"Functions/#functions","text":"","title":"Functions"},{"location":"Functions/#game","text":"","title":"Game ()"},{"location":"Functions/#musicmanager","text":"","title":"MusicManager ()"},{"location":"Functions/#random","text":"","title":"Random ()"},{"location":"Functions/#randomvector","text":"","title":"RandomVector ()"},{"location":"Functions/#sfxmanager","text":"","title":"SFXManager ()"},{"location":"Functions/#getptrhash","text":"","title":"GetPtrHash ()"},{"location":"Game/","text":"Class \"Game\" \u2693\ufe0e Functions \u2693\ufe0e AddDevilRoomDeal () \u2693\ufe0e void AddDevilRoomDeal ( ) AddEncounteredBoss () \u2693\ufe0e void AddEncounteredBoss ( EntityType Boss, int Variant ) AddPixelation () \u2693\ufe0e void AddPixelation ( int Duration) Triggers the effect of the \"retro vision\" pill. AddStageWithoutDamage () \u2693\ufe0e void AddStageWithoutDamage ( ) Increases the ingame counter, that keeps track of the stages you cleared without taking damage. (useful for Devil deal manipulations) AddStageWithoutHeartsPicked () \u2693\ufe0e void AddStageWithoutHeartsPicked ( ) Increases the ingame counter, that keeps track of stages you cleared without picking up hearts. AddTreasureRoomsVisited () \u2693\ufe0e void AddTreasureRoomsVisited ( ) BombDamage () \u2693\ufe0e void BombDamage ( Vector Position, float Damage, float Radius, boolean LineCheck, Entity Source, int TearFlags, int DamageFlags, boolean DamageSource ) BombExplosionEffects () \u2693\ufe0e void BombExplosionEffects ( Vector Position, float Damage, int TearFlags, Color Color, Entity Source, float RadiusMult, boolean LineCheck, boolean DamageSource ) The complete bomb explosion package: Do damage, spawn boomgraphics, and apply tearflag-based effects. BombTearflagEffects () \u2693\ufe0e void BombTearflagEffects ( Vector Position, float Radius, int TearFlags, Entity Source ) Does bomb-exclusive special effects. ButterBeanFart () \u2693\ufe0e void ButterBeanFart ( Vector Position, float Radius, Entity Source, boolean ShowEffect ) ChangeRoom () \u2693\ufe0e void ChangeRoom ( int RoomIndex) CharmFart () \u2693\ufe0e void CharmFart ( Vector Position, float Radius, Entity Source ) ClearDonationModAngel () \u2693\ufe0e void ClearDonationModAngel ( ) ClearDonationModGreed () \u2693\ufe0e void ClearDonationModGreed ( ) ClearStagesWithoutDamage () \u2693\ufe0e void ClearStagesWithoutDamage ( ) Sets the counter for stages cleared without damage to 0. ClearStagesWithoutHeartsPicked () \u2693\ufe0e void ClearStagesWithoutHeartsPicked ( ) Sets the counter for stages cleared without picking up hearts to 0. Darken () \u2693\ufe0e void Darken ( float Darkness, int Timeout ) DonateAngel () \u2693\ufe0e void DonateAngel ( int Donate) DonateGreed () \u2693\ufe0e void DonateGreed ( int Donate) End () \u2693\ufe0e void End ( Ending Ending) remove entity from the update list (render only) void EnableEntity(Entity e); add entity back to the update list (update + render) void DisableEntity(Entity e); Fadein () \u2693\ufe0e void Fadein ( float Speed) Fadeout () \u2693\ufe0e void Fadeout ( float Speed, FadeoutTarget Target ) Fart () \u2693\ufe0e void Fart ( Vector Position, float Radius, Entity Source, float FartScale, int FartSubType ) FinishChallenge () \u2693\ufe0e void FinishChallenge ( ) GetAmbush () \u2693\ufe0e Ambush GetAmbush ( ) GetDarknessModifier () \u2693\ufe0e float GetDarknessModifier ( ) GetDevilRoomDeals () \u2693\ufe0e int GetDevilRoomDeals ( ) GetDonationModAngel () \u2693\ufe0e int GetDonationModAngel ( ) Get the value that indicates the angel-counter of a shop-donation maschine. This Stat increases everytime you donate to a shop. A higher number grants a few advantages. GetDonationModGreed () \u2693\ufe0e int GetDonationModGreed ( ) GetFont () \u2693\ufe0e Font GetFont ( ) GetFrameCount () \u2693\ufe0e int GetFrameCount ( ) Returns the number of frames the gameplay is actively running. Pauses are therefore not included! 1 second equals 30 frames. This function therefore works drastically different than Isaac . GetFrameCount () Example Code This code returns hours, minutes, seconds, and milliseconds of the game running actively: 1 2 3 4 5 local curTime = Game () : GetFrameCount () local msecs = curTime % 30 * ( 10 / 3 ) -- turns the millisecond value range from [ 0 to 30 ] to [ 0 to 100 ] local secs = math . floor ( curTime / 30 ) % 60 local mins = math . floor ( curTime / 30 / 60 ) % 60 local hours = math . floor ( curTime / 30 / 60 / 60 ) % 60 WRONG PARSING GetGreedBossWaveNum () \u2693\ufe0e int GetGreedBossWaveNum ( ) GetGreedWavesNum () \u2693\ufe0e int GetGreedWavesNum ( ) GetItemHistory () \u2693\ufe0e History GetItemHistory ( ) GetItemOverlay () \u2693\ufe0e ItemOverlay GetItemOverlay ( ) GetItemPool () \u2693\ufe0e ItemPool GetItemPool ( ) LevelStage () \u2693\ufe0e void LevelStage ( UserData) GetLastDevilRoomStage ( ) Notes Since it returns UserData, this function is unusable and therefore broken. GetLastLevelWithDamage () \u2693\ufe0e LevelStage GetLastLevelWithDamage ( ) GetLastLevelWithoutHalfHp () \u2693\ufe0e LevelStage GetLastLevelWithoutHalfHp ( ) GetLevel () \u2693\ufe0e Level GetLevel ( ) GetNearestPlayer () \u2693\ufe0e EntityPlayer GetNearestPlayer ( Vector Pos) GetNumEncounteredBosses () \u2693\ufe0e int GetNumEncounteredBosses ( ) GetNumPlayers () \u2693\ufe0e int GetNumPlayers ( ) GetPlayer () \u2693\ufe0e EntityPlayer GetPlayer ( int Index) GetRandomPlayer () \u2693\ufe0e EntityPlayer GetRandomPlayer ( Vector Pos, float Radius ) GetRoom () \u2693\ufe0e Room GetRoom ( ) GetScreenShakeCountdown () \u2693\ufe0e int GetScreenShakeCountdown ( ) GetSeeds () \u2693\ufe0e Seeds GetSeeds ( ) GetStagesWithoutDamage () \u2693\ufe0e int GetStagesWithoutDamage ( ) GetStagesWithoutHeartsPicked () \u2693\ufe0e int GetStagesWithoutHeartsPicked ( ) GetStateFlag () \u2693\ufe0e boolean GetStateFlag ( StateFlag StateFlag) GetTargetDarkness () \u2693\ufe0e float GetTargetDarkness ( ) GetTreasureRoomVisitCount () \u2693\ufe0e int GetTreasureRoomVisitCount ( ) GetVictoryLap () \u2693\ufe0e int GetVictoryLap ( ) HasEncounteredBoss () \u2693\ufe0e boolean HasEncounteredBoss ( EntityType Boss, int Variant ) HasHallucination () \u2693\ufe0e int HasHallucination ( ) IsGreedMode () \u2693\ufe0e boolean IsGreedMode ( ) IsPaused () \u2693\ufe0e boolean IsPaused ( ) Returns true, if the game is in a state, where the player is unable to input any thing or the game logic is paused. This includes hiving the pause menu opened, being in room transitions/cutscenes or while displaying a \"big book\" animation. MoveToRandomRoom () \u2693\ufe0e void MoveToRandomRoom ( boolean IAmErrorRoom, int Seed ) NextVictoryLap () \u2693\ufe0e void NextVictoryLap ( ) Render () \u2693\ufe0e void Render ( ) RerollEnemy () \u2693\ufe0e boolean RerollEnemy ( Entity e) RerollLevelCollectibles () \u2693\ufe0e void RerollLevelCollectibles ( ) RerollLevelPickups () \u2693\ufe0e void RerollLevelPickups ( int Seed) SetLastDevilRoomStage () \u2693\ufe0e void SetLastDevilRoomStage ( LevelStage Stage) SetLastLevelWithDamage () \u2693\ufe0e void SetLastLevelWithDamage ( LevelStage Stage) SetLastLevelWithoutHalfHp () \u2693\ufe0e void SetLastLevelWithoutHalfHp ( LevelStage Stage) SetStateFlag () \u2693\ufe0e void SetStateFlag ( StateFlag StateFlag, boolean Val ) ShakeScreen () \u2693\ufe0e void ShakeScreen ( int Timeout) ShowFortune () \u2693\ufe0e void ShowFortune ( ) ShowHallucination () \u2693\ufe0e void ShowHallucination ( int FrameCount, Backdrop::Backdrop HallucinationBackdrop ) Plays the Delirium animation (Static noise intersected with past gameplay fotage), which will also change the background of the current room. Example Code This code emulated the effect of this function by hijacking the Delirious item effect 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local usagetime = - 1 -- stores the last time the effect was called . -- call this function to play the Hallucination effect function playHallucination () local player = Isaac . GetPlayer ( 0 ) usagetime = Game (). TimeCounter player : UseActiveItem ( 510 , false , false , false , false ) -- use the delirious item without applying the costume player : GetEffects () : RemoveCollectibleEffect ( 510 ) -- remove any unwanted side effects of the item usage end -- Removes all spawned NPC entities when activating the function function mod : onFriendlyInit ( npc ) if Game (). TimeCounter - usagetime == 0 then -- only remove enemies that spawned when the effect was called ! npc : Remove () end end mod : AddCallback ( ModCallbacks . MC_POST_NPC_INIT , mod . onFriendlyInit ) Bugs This function does not work and will crash your game on use! ShowRule () \u2693\ufe0e void ShowRule ( ) Spawn () \u2693\ufe0e Entity Spawn ( EntityType Type, int Variant, Vector Position, Vector Velocity, Entity Spawner, int SubType, int Seed ) The game has two spawn functions, Game():Spawn() (this one) and Isaac.Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . Example Code This code spawns a Leech with specific seed. 1 2 3 4 5 6 7 8 9 Game () : Spawn ( EntityType . ENTITY_LEECH , -- Type 0 , -- Variant Game () : GetRoom () : GetCenterPos (), -- Position Vector ( 0 , 0 ), -- Velocity nil , -- Parent 0 , -- SubType Game () : GetRoom () : GetSpawnSeed () -- Seed ( the \"GetSpawnSeed()\" function gets a reproducible seed based on the room , e . g . \"2496979501\" ) ) WRONG PARSING SpawnEntityDesc () \u2693\ufe0e EntityNPC SpawnEntityDesc ( Entity::EntityDesc desc, Vector Position, Entity Spawner ) SpawnParticles () \u2693\ufe0e void SpawnParticles ( Vector Pos, EntityEffect::Variant ParticleType, int NumParticles, float Speed, Color Color, float Height ) StartRoomTransition () \u2693\ufe0e void StartRoomTransition ( int RoomIndex, Direction Direction, RoomTransition::Animation Animation ) Notes Available Animation types (Discovered by \"ilise rose\" (@yatboim)): 0: (Default) Standard transition, sweeps the room in from a direction 1: (Fade) Fade to black transition, like its used for the \"goto\" - console command 2: (Stage) Pixel out transition, like used for crawlspaces and the trapdoor at the end of floors 3: (Teleport) teleport transition, isaac teleports out of the current room and into the next 5: (Ankh) Same as standard transition 6: (Dead Cat) Same as standard transition 7: (1Up) Same as standard transition 8: (Guppys Collar) Same as standard transition 9: (Judas Shadow) Same as standard transition 10: (Lazarus Rags) Same as standard transition 12: (Glowing Hourglass) Same as standard transition 13: (D7) Same as standard transition 14: (Missing Poster) Same as standard transition Bugs The Direction variable is completely ignored at all times, with the game instead calculating the direction between the two rooms itself for the animation. The two rooms are the current room and the room of the RoomIndex. It has no impact on the doors either. StartStageTransition () \u2693\ufe0e void StartStageTransition ( boolean SameStage, StageTransition::Animation Animation ) Starts a transition animation like it`s playing when entering a trapdoor to switch between stages. Stage Transition types: 0: Standard transition. Removes the playermodel before the pixel fadeout. Then plays the Stage Nightmare animation. The player starts in fetal position after the transition. 1: Standard transition with pixel fadein/out, nightmare cutscene but the player model doesnt get removed and starts in the normal standing position after the transition. >2: Same as 0 Update () \u2693\ufe0e void Update ( ) UpdateStrangeAttractor () \u2693\ufe0e void UpdateStrangeAttractor ( Vector Position) Variables \u2693\ufe0e BlueWombParTime \u2693\ufe0e int BlueWombParTime BossRushParTime \u2693\ufe0e int BossRushParTime Number of frames of game time. Challenge \u2693\ufe0e Challenge Challenge Difficulty \u2693\ufe0e Difficulty Difficulty ScreenShakeOffset \u2693\ufe0e Vector ScreenShakeOffset TimeCounter \u2693\ufe0e int TimeCounter same as FrameCounter but can be modified, mostly used for timed events (bossrush, daily, ...) and not for timestepping","title":"Game"},{"location":"Game/#class-game","text":"","title":"Class \"Game\""},{"location":"Game/#functions","text":"","title":"Functions"},{"location":"Game/#adddevilroomdeal","text":"","title":"AddDevilRoomDeal ()"},{"location":"Game/#addencounteredboss","text":"","title":"AddEncounteredBoss ()"},{"location":"Game/#addpixelation","text":"","title":"AddPixelation ()"},{"location":"Game/#addstagewithoutdamage","text":"","title":"AddStageWithoutDamage ()"},{"location":"Game/#addstagewithoutheartspicked","text":"","title":"AddStageWithoutHeartsPicked ()"},{"location":"Game/#addtreasureroomsvisited","text":"","title":"AddTreasureRoomsVisited ()"},{"location":"Game/#bombdamage","text":"","title":"BombDamage ()"},{"location":"Game/#bombexplosioneffects","text":"","title":"BombExplosionEffects ()"},{"location":"Game/#bombtearflageffects","text":"","title":"BombTearflagEffects ()"},{"location":"Game/#butterbeanfart","text":"","title":"ButterBeanFart ()"},{"location":"Game/#changeroom","text":"","title":"ChangeRoom ()"},{"location":"Game/#charmfart","text":"","title":"CharmFart ()"},{"location":"Game/#cleardonationmodangel","text":"","title":"ClearDonationModAngel ()"},{"location":"Game/#cleardonationmodgreed","text":"","title":"ClearDonationModGreed ()"},{"location":"Game/#clearstageswithoutdamage","text":"","title":"ClearStagesWithoutDamage ()"},{"location":"Game/#clearstageswithoutheartspicked","text":"","title":"ClearStagesWithoutHeartsPicked ()"},{"location":"Game/#darken","text":"","title":"Darken ()"},{"location":"Game/#donateangel","text":"","title":"DonateAngel ()"},{"location":"Game/#donategreed","text":"","title":"DonateGreed ()"},{"location":"Game/#end","text":"","title":"End ()"},{"location":"Game/#fadein","text":"","title":"Fadein ()"},{"location":"Game/#fadeout","text":"","title":"Fadeout ()"},{"location":"Game/#fart","text":"","title":"Fart ()"},{"location":"Game/#finishchallenge","text":"","title":"FinishChallenge ()"},{"location":"Game/#getambush","text":"","title":"GetAmbush ()"},{"location":"Game/#getdarknessmodifier","text":"","title":"GetDarknessModifier ()"},{"location":"Game/#getdevilroomdeals","text":"","title":"GetDevilRoomDeals ()"},{"location":"Game/#getdonationmodangel","text":"","title":"GetDonationModAngel ()"},{"location":"Game/#getdonationmodgreed","text":"","title":"GetDonationModGreed ()"},{"location":"Game/#getfont","text":"","title":"GetFont ()"},{"location":"Game/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Game/#getgreedbosswavenum","text":"","title":"GetGreedBossWaveNum ()"},{"location":"Game/#getgreedwavesnum","text":"","title":"GetGreedWavesNum ()"},{"location":"Game/#getitemhistory","text":"","title":"GetItemHistory ()"},{"location":"Game/#getitemoverlay","text":"","title":"GetItemOverlay ()"},{"location":"Game/#getitempool","text":"","title":"GetItemPool ()"},{"location":"Game/#levelstage","text":"","title":"LevelStage ()"},{"location":"Game/#getlastlevelwithdamage","text":"","title":"GetLastLevelWithDamage ()"},{"location":"Game/#getlastlevelwithouthalfhp","text":"","title":"GetLastLevelWithoutHalfHp ()"},{"location":"Game/#getlevel","text":"","title":"GetLevel ()"},{"location":"Game/#getnearestplayer","text":"","title":"GetNearestPlayer ()"},{"location":"Game/#getnumencounteredbosses","text":"","title":"GetNumEncounteredBosses ()"},{"location":"Game/#getnumplayers","text":"","title":"GetNumPlayers ()"},{"location":"Game/#getplayer","text":"","title":"GetPlayer ()"},{"location":"Game/#getrandomplayer","text":"","title":"GetRandomPlayer ()"},{"location":"Game/#getroom","text":"","title":"GetRoom ()"},{"location":"Game/#getscreenshakecountdown","text":"","title":"GetScreenShakeCountdown ()"},{"location":"Game/#getseeds","text":"","title":"GetSeeds ()"},{"location":"Game/#getstageswithoutdamage","text":"","title":"GetStagesWithoutDamage ()"},{"location":"Game/#getstageswithoutheartspicked","text":"","title":"GetStagesWithoutHeartsPicked ()"},{"location":"Game/#getstateflag","text":"","title":"GetStateFlag ()"},{"location":"Game/#gettargetdarkness","text":"","title":"GetTargetDarkness ()"},{"location":"Game/#gettreasureroomvisitcount","text":"","title":"GetTreasureRoomVisitCount ()"},{"location":"Game/#getvictorylap","text":"","title":"GetVictoryLap ()"},{"location":"Game/#hasencounteredboss","text":"","title":"HasEncounteredBoss ()"},{"location":"Game/#hashallucination","text":"","title":"HasHallucination ()"},{"location":"Game/#isgreedmode","text":"","title":"IsGreedMode ()"},{"location":"Game/#ispaused","text":"","title":"IsPaused ()"},{"location":"Game/#movetorandomroom","text":"","title":"MoveToRandomRoom ()"},{"location":"Game/#nextvictorylap","text":"","title":"NextVictoryLap ()"},{"location":"Game/#render","text":"","title":"Render ()"},{"location":"Game/#rerollenemy","text":"","title":"RerollEnemy ()"},{"location":"Game/#rerolllevelcollectibles","text":"","title":"RerollLevelCollectibles ()"},{"location":"Game/#rerolllevelpickups","text":"","title":"RerollLevelPickups ()"},{"location":"Game/#setlastdevilroomstage","text":"","title":"SetLastDevilRoomStage ()"},{"location":"Game/#setlastlevelwithdamage","text":"","title":"SetLastLevelWithDamage ()"},{"location":"Game/#setlastlevelwithouthalfhp","text":"","title":"SetLastLevelWithoutHalfHp ()"},{"location":"Game/#setstateflag","text":"","title":"SetStateFlag ()"},{"location":"Game/#shakescreen","text":"","title":"ShakeScreen ()"},{"location":"Game/#showfortune","text":"","title":"ShowFortune ()"},{"location":"Game/#showhallucination","text":"","title":"ShowHallucination ()"},{"location":"Game/#showrule","text":"","title":"ShowRule ()"},{"location":"Game/#spawn","text":"","title":"Spawn ()"},{"location":"Game/#spawnentitydesc","text":"","title":"SpawnEntityDesc ()"},{"location":"Game/#spawnparticles","text":"","title":"SpawnParticles ()"},{"location":"Game/#startroomtransition","text":"","title":"StartRoomTransition ()"},{"location":"Game/#startstagetransition","text":"","title":"StartStageTransition ()"},{"location":"Game/#update","text":"","title":"Update ()"},{"location":"Game/#updatestrangeattractor","text":"","title":"UpdateStrangeAttractor ()"},{"location":"Game/#variables","text":"","title":"Variables"},{"location":"Game/#bluewombpartime","text":"","title":"BlueWombParTime"},{"location":"Game/#bossrushpartime","text":"","title":"BossRushParTime"},{"location":"Game/#challenge","text":"","title":"Challenge"},{"location":"Game/#difficulty","text":"","title":"Difficulty"},{"location":"Game/#screenshakeoffset","text":"","title":"ScreenShakeOffset"},{"location":"Game/#timecounter","text":"","title":"TimeCounter"},{"location":"GridEntity/","text":"Class \"GridEntity\" \u2693\ufe0e Functions \u2693\ufe0e Destroy () \u2693\ufe0e boolean Destroy ( boolean Immediate) GetGridIndex () \u2693\ufe0e int GetGridIndex ( ) GetSaveState () \u2693\ufe0e Desc GetSaveState ( ) GetType () \u2693\ufe0e GridEntityType GetType ( ) GetVariant () \u2693\ufe0e int GetVariant ( ) Hurt () \u2693\ufe0e boolean Hurt ( int Damage) Init () \u2693\ufe0e void Init ( int Seed) PostInit () \u2693\ufe0e void PostInit ( ) Render () \u2693\ufe0e void Render ( Vector Offset) SetType () \u2693\ufe0e void SetType ( GridEntityType Type) SetVariant () \u2693\ufe0e void SetVariant ( int Variant) ToDoor () \u2693\ufe0e GridEntityDoor ToDoor ( ) ToPit () \u2693\ufe0e GridEntityPit ToPit ( ) ToPoop () \u2693\ufe0e GridEntityPoop ToPoop ( ) ToPressurePlate () \u2693\ufe0e GridEntityPressurePlate ToPressurePlate ( ) ToRock () \u2693\ufe0e GridEntityRock ToRock ( ) ToSpikes () \u2693\ufe0e GridEntitySpikes ToSpikes ( ) ToTNT () \u2693\ufe0e GridEntityTNT ToTNT ( ) Update () \u2693\ufe0e void Update ( ) Variables \u2693\ufe0e CollisionClass \u2693\ufe0e CollisionClass CollisionClass Desc \u2693\ufe0e Desc Desc Position \u2693\ufe0e Vector Position returns the position of the grid cell's center point RNG \u2693\ufe0e RNG RNG Sprite \u2693\ufe0e Sprite Sprite State \u2693\ufe0e int State VarData \u2693\ufe0e int VarData","title":"GridEntity"},{"location":"GridEntity/#class-gridentity","text":"","title":"Class \"GridEntity\""},{"location":"GridEntity/#functions","text":"","title":"Functions"},{"location":"GridEntity/#destroy","text":"","title":"Destroy ()"},{"location":"GridEntity/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"GridEntity/#getsavestate","text":"","title":"GetSaveState ()"},{"location":"GridEntity/#gettype","text":"","title":"GetType ()"},{"location":"GridEntity/#getvariant","text":"","title":"GetVariant ()"},{"location":"GridEntity/#hurt","text":"","title":"Hurt ()"},{"location":"GridEntity/#init","text":"","title":"Init ()"},{"location":"GridEntity/#postinit","text":"","title":"PostInit ()"},{"location":"GridEntity/#render","text":"","title":"Render ()"},{"location":"GridEntity/#settype","text":"","title":"SetType ()"},{"location":"GridEntity/#setvariant","text":"","title":"SetVariant ()"},{"location":"GridEntity/#todoor","text":"","title":"ToDoor ()"},{"location":"GridEntity/#topit","text":"","title":"ToPit ()"},{"location":"GridEntity/#topoop","text":"","title":"ToPoop ()"},{"location":"GridEntity/#topressureplate","text":"","title":"ToPressurePlate ()"},{"location":"GridEntity/#torock","text":"","title":"ToRock ()"},{"location":"GridEntity/#tospikes","text":"","title":"ToSpikes ()"},{"location":"GridEntity/#totnt","text":"","title":"ToTNT ()"},{"location":"GridEntity/#update","text":"","title":"Update ()"},{"location":"GridEntity/#variables","text":"","title":"Variables"},{"location":"GridEntity/#collisionclass","text":"","title":"CollisionClass"},{"location":"GridEntity/#desc","text":"","title":"Desc"},{"location":"GridEntity/#position","text":"","title":"Position"},{"location":"GridEntity/#rng","text":"","title":"RNG"},{"location":"GridEntity/#sprite","text":"","title":"Sprite"},{"location":"GridEntity/#state","text":"","title":"State"},{"location":"GridEntity/#vardata","text":"","title":"VarData"},{"location":"GridEntityDesc/","text":"Class \"GridEntityDesc\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Initialized \u2693\ufe0e boolean Initialized this is will be false when its first created SpawnCount \u2693\ufe0e int SpawnCount how often this entity has been spawned SpawnSeed \u2693\ufe0e int SpawnSeed State \u2693\ufe0e int State Type \u2693\ufe0e GridEntityType Type VarData \u2693\ufe0e int VarData Additional data to be stored, when State is not enought. VariableSeed \u2693\ufe0e int VariableSeed this seed is will be changed based on some events Variant \u2693\ufe0e int Variant","title":"GridEntityDesc"},{"location":"GridEntityDesc/#class-gridentitydesc","text":"","title":"Class \"GridEntityDesc\""},{"location":"GridEntityDesc/#functions","text":"","title":"Functions"},{"location":"GridEntityDesc/#variables","text":"","title":"Variables"},{"location":"GridEntityDesc/#initialized","text":"","title":"Initialized"},{"location":"GridEntityDesc/#spawncount","text":"","title":"SpawnCount"},{"location":"GridEntityDesc/#spawnseed","text":"","title":"SpawnSeed"},{"location":"GridEntityDesc/#state","text":"","title":"State"},{"location":"GridEntityDesc/#type","text":"","title":"Type"},{"location":"GridEntityDesc/#vardata","text":"","title":"VarData"},{"location":"GridEntityDesc/#variableseed","text":"","title":"VariableSeed"},{"location":"GridEntityDesc/#variant","text":"","title":"Variant"},{"location":"GridEntityDoor/","text":"Class \"GridEntityDoor\" \u2693\ufe0e Functions \u2693\ufe0e Bar () \u2693\ufe0e void Bar ( ) CanBlowOpen () \u2693\ufe0e boolean CanBlowOpen ( ) Close () \u2693\ufe0e void Close ( boolean Force) GetSpriteOffset () \u2693\ufe0e Vector GetSpriteOffset ( ) IsBusted () \u2693\ufe0e boolean IsBusted ( ) IsKeyFamiliarTarget () \u2693\ufe0e boolean IsKeyFamiliarTarget ( ) IsLocked () \u2693\ufe0e boolean IsLocked ( ) IsOpen () \u2693\ufe0e boolean IsOpen ( ) IsRoomType () \u2693\ufe0e boolean IsRoomType ( RoomType Type) IsTargetRoomArcade () \u2693\ufe0e boolean IsTargetRoomArcade ( ) Open () \u2693\ufe0e void Open ( ) SetLocked () \u2693\ufe0e void SetLocked ( boolean Locked) SetRoomTypes () \u2693\ufe0e void SetRoomTypes ( RoomType CurrentRoomType, RoomType TargetRoomType ) SpawnDust () \u2693\ufe0e void SpawnDust ( ) TryBlowOpen () \u2693\ufe0e boolean TryBlowOpen ( boolean FromExplossion) try to open the door by explosive force, true for success TryUnlock () \u2693\ufe0e boolean TryUnlock ( boolean Force) try to unlock the door using a key, true for success Variables \u2693\ufe0e Busted \u2693\ufe0e boolean Busted CloseAnimation \u2693\ufe0e string CloseAnimation CurrentRoomType \u2693\ufe0e RoomType CurrentRoomType Direction \u2693\ufe0e Direction Direction ExtraSprite \u2693\ufe0e Sprite ExtraSprite ExtraVisible \u2693\ufe0e boolean ExtraVisible LockedAnimation \u2693\ufe0e string LockedAnimation OpenAnimation \u2693\ufe0e string OpenAnimation OpenLockedAnimation \u2693\ufe0e string OpenLockedAnimation PreviousState \u2693\ufe0e State PreviousState PreviousVariant \u2693\ufe0e Variant PreviousVariant Slot \u2693\ufe0e DoorSlot Slot TargetRoomIndex \u2693\ufe0e int TargetRoomIndex TargetRoomType \u2693\ufe0e RoomType TargetRoomType","title":"GridEntityDoor"},{"location":"GridEntityDoor/#class-gridentitydoor","text":"","title":"Class \"GridEntityDoor\""},{"location":"GridEntityDoor/#functions","text":"","title":"Functions"},{"location":"GridEntityDoor/#bar","text":"","title":"Bar ()"},{"location":"GridEntityDoor/#canblowopen","text":"","title":"CanBlowOpen ()"},{"location":"GridEntityDoor/#close","text":"","title":"Close ()"},{"location":"GridEntityDoor/#getspriteoffset","text":"","title":"GetSpriteOffset ()"},{"location":"GridEntityDoor/#isbusted","text":"","title":"IsBusted ()"},{"location":"GridEntityDoor/#iskeyfamiliartarget","text":"","title":"IsKeyFamiliarTarget ()"},{"location":"GridEntityDoor/#islocked","text":"","title":"IsLocked ()"},{"location":"GridEntityDoor/#isopen","text":"","title":"IsOpen ()"},{"location":"GridEntityDoor/#isroomtype","text":"","title":"IsRoomType ()"},{"location":"GridEntityDoor/#istargetroomarcade","text":"","title":"IsTargetRoomArcade ()"},{"location":"GridEntityDoor/#open","text":"","title":"Open ()"},{"location":"GridEntityDoor/#setlocked","text":"","title":"SetLocked ()"},{"location":"GridEntityDoor/#setroomtypes","text":"","title":"SetRoomTypes ()"},{"location":"GridEntityDoor/#spawndust","text":"","title":"SpawnDust ()"},{"location":"GridEntityDoor/#tryblowopen","text":"","title":"TryBlowOpen ()"},{"location":"GridEntityDoor/#tryunlock","text":"","title":"TryUnlock ()"},{"location":"GridEntityDoor/#variables","text":"","title":"Variables"},{"location":"GridEntityDoor/#busted","text":"","title":"Busted"},{"location":"GridEntityDoor/#closeanimation","text":"","title":"CloseAnimation"},{"location":"GridEntityDoor/#currentroomtype","text":"","title":"CurrentRoomType"},{"location":"GridEntityDoor/#direction","text":"","title":"Direction"},{"location":"GridEntityDoor/#extrasprite","text":"","title":"ExtraSprite"},{"location":"GridEntityDoor/#extravisible","text":"","title":"ExtraVisible"},{"location":"GridEntityDoor/#lockedanimation","text":"","title":"LockedAnimation"},{"location":"GridEntityDoor/#openanimation","text":"","title":"OpenAnimation"},{"location":"GridEntityDoor/#openlockedanimation","text":"","title":"OpenLockedAnimation"},{"location":"GridEntityDoor/#previousstate","text":"","title":"PreviousState"},{"location":"GridEntityDoor/#previousvariant","text":"","title":"PreviousVariant"},{"location":"GridEntityDoor/#slot","text":"","title":"Slot"},{"location":"GridEntityDoor/#targetroomindex","text":"","title":"TargetRoomIndex"},{"location":"GridEntityDoor/#targetroomtype","text":"","title":"TargetRoomType"},{"location":"GridEntityPit/","text":"Class \"GridEntityPit\" \u2693\ufe0e Functions \u2693\ufe0e MakeBridge () \u2693\ufe0e void MakeBridge ( ) SetLadder () \u2693\ufe0e void SetLadder ( boolean Value) UpdateCollision () \u2693\ufe0e void UpdateCollision ( ) void InitSubclass(void); Variables \u2693\ufe0e HasLadder \u2693\ufe0e boolean HasLadder","title":"GridEntityPit"},{"location":"GridEntityPit/#class-gridentitypit","text":"","title":"Class \"GridEntityPit\""},{"location":"GridEntityPit/#functions","text":"","title":"Functions"},{"location":"GridEntityPit/#makebridge","text":"","title":"MakeBridge ()"},{"location":"GridEntityPit/#setladder","text":"","title":"SetLadder ()"},{"location":"GridEntityPit/#updatecollision","text":"","title":"UpdateCollision ()"},{"location":"GridEntityPit/#variables","text":"","title":"Variables"},{"location":"GridEntityPit/#hasladder","text":"","title":"HasLadder"},{"location":"GridEntityPoop/","text":"Class \"GridEntityPoop\" \u2693\ufe0e Functions \u2693\ufe0e ReduceSpawnRate () \u2693\ufe0e void ReduceSpawnRate ( ) RespawnRedPoop () \u2693\ufe0e void RespawnRedPoop ( ) Variables \u2693\ufe0e ReducedSpawnRate \u2693\ufe0e boolean ReducedSpawnRate ReviveTimer \u2693\ufe0e int ReviveTimer StateAnimation \u2693\ufe0e string StateAnimation UnderPlayer \u2693\ufe0e boolean UnderPlayer Used to determine when player moves away from the poop.","title":"GridEntityPoop"},{"location":"GridEntityPoop/#class-gridentitypoop","text":"","title":"Class \"GridEntityPoop\""},{"location":"GridEntityPoop/#functions","text":"","title":"Functions"},{"location":"GridEntityPoop/#reducespawnrate","text":"","title":"ReduceSpawnRate ()"},{"location":"GridEntityPoop/#respawnredpoop","text":"","title":"RespawnRedPoop ()"},{"location":"GridEntityPoop/#variables","text":"","title":"Variables"},{"location":"GridEntityPoop/#reducedspawnrate","text":"","title":"ReducedSpawnRate"},{"location":"GridEntityPoop/#revivetimer","text":"","title":"ReviveTimer"},{"location":"GridEntityPoop/#stateanimation","text":"","title":"StateAnimation"},{"location":"GridEntityPoop/#underplayer","text":"","title":"UnderPlayer"},{"location":"GridEntityPressurePlate/","text":"Class \"GridEntityPressurePlate\" \u2693\ufe0e Functions \u2693\ufe0e Reward () \u2693\ufe0e void Reward ( ) GreedModeRNG () \u2693\ufe0e RNG GreedModeRNG Variables \u2693\ufe0e NextGreedAnimation \u2693\ufe0e string NextGreedAnimation TimerPlate \u2693\ufe0e Sprite TimerPlate","title":"GridEntityPressurePlate"},{"location":"GridEntityPressurePlate/#class-gridentitypressureplate","text":"","title":"Class \"GridEntityPressurePlate\""},{"location":"GridEntityPressurePlate/#functions","text":"","title":"Functions"},{"location":"GridEntityPressurePlate/#reward","text":"","title":"Reward ()"},{"location":"GridEntityPressurePlate/#greedmoderng","text":"","title":"GreedModeRNG ()"},{"location":"GridEntityPressurePlate/#variables","text":"","title":"Variables"},{"location":"GridEntityPressurePlate/#nextgreedanimation","text":"","title":"NextGreedAnimation"},{"location":"GridEntityPressurePlate/#timerplate","text":"","title":"TimerPlate"},{"location":"GridEntityRock/","text":"Class \"GridEntityRock\" \u2693\ufe0e Functions \u2693\ufe0e GetBigRockFrame () \u2693\ufe0e int GetBigRockFrame ( ) GetRubbleAnim () \u2693\ufe0e string GetRubbleAnim ( ) GetSprite () \u2693\ufe0e Sprite GetSprite ( ) SetBigRockFrame () \u2693\ufe0e void SetBigRockFrame ( int Frame) UpdateAnimFrame () \u2693\ufe0e void UpdateAnimFrame ( ) Variables \u2693\ufe0e Anim \u2693\ufe0e string Anim FrameCnt \u2693\ufe0e int FrameCnt RubbleAnim \u2693\ufe0e string RubbleAnim","title":"GridEntityRock"},{"location":"GridEntityRock/#class-gridentityrock","text":"","title":"Class \"GridEntityRock\""},{"location":"GridEntityRock/#functions","text":"","title":"Functions"},{"location":"GridEntityRock/#getbigrockframe","text":"","title":"GetBigRockFrame ()"},{"location":"GridEntityRock/#getrubbleanim","text":"","title":"GetRubbleAnim ()"},{"location":"GridEntityRock/#getsprite","text":"","title":"GetSprite ()"},{"location":"GridEntityRock/#setbigrockframe","text":"","title":"SetBigRockFrame ()"},{"location":"GridEntityRock/#updateanimframe","text":"","title":"UpdateAnimFrame ()"},{"location":"GridEntityRock/#variables","text":"","title":"Variables"},{"location":"GridEntityRock/#anim","text":"","title":"Anim"},{"location":"GridEntityRock/#framecnt","text":"","title":"FrameCnt"},{"location":"GridEntityRock/#rubbleanim","text":"","title":"RubbleAnim"},{"location":"GridEntitySpikes/","text":"Class \"GridEntitySpikes\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Timeout \u2693\ufe0e int Timeout","title":"GridEntitySpikes"},{"location":"GridEntitySpikes/#class-gridentityspikes","text":"","title":"Class \"GridEntitySpikes\""},{"location":"GridEntitySpikes/#functions","text":"","title":"Functions"},{"location":"GridEntitySpikes/#variables","text":"","title":"Variables"},{"location":"GridEntitySpikes/#timeout","text":"","title":"Timeout"},{"location":"GridEntityTNT/","text":"Class \"GridEntityTNT\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e FrameCnt \u2693\ufe0e int FrameCnt","title":"GridEntityTNT"},{"location":"GridEntityTNT/#class-gridentitytnt","text":"","title":"Class \"GridEntityTNT\""},{"location":"GridEntityTNT/#functions","text":"","title":"Functions"},{"location":"GridEntityTNT/#variables","text":"","title":"Variables"},{"location":"GridEntityTNT/#framecnt","text":"","title":"FrameCnt"},{"location":"Input/","text":"Class \"Input\" \u2693\ufe0e Functions \u2693\ufe0e GetActionValue () \u2693\ufe0e float GetActionValue ( int action, int controllerId ) Returns the current strength in which a button was pressed. This is 0 OR 1 with a keyboard. With a controller, this can be used to get the strength in which you have moved the analog stick in a direction. Example Code This code prints the current \"strength\" in which the analog stick was moved to the left. 1 print ( Input . GetActionValue ( ButtonAction . ACTION_LEFT , 1 )) GetButtonValue () \u2693\ufe0e float GetButtonValue ( int button, int controllerId ) Use \"GetActionValue\" instead of this function. GetMousePosition () \u2693\ufe0e Vector GetMousePosition ( boolean gameCoords) Returns the current mouse position in game coordinates (true) or render coordinates. Example Code This code renders \"Hello World!\" at the current mouse position. 1 2 local mousePos = Isaac . WorldToScreen ( Input . GetMousePosition ( true )) -- transfer game - in screen coordinates Isaac . RenderText ( \"Hello World!\" , mousePos . X , mousePos . Y , 1 , 1 , 1 , 1 ) IsActionPressed () \u2693\ufe0e boolean IsActionPressed ( int action, int controllerId ) Returns, if an action-button is pressed or not. An Action-button is any button that got a default function assigned to it. This function will return true, as long the button is held down. List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. 1 2 3 if Input . IsActionPressed ( ButtonAction . ACTION_BOMB , 0 ) then print ( \"bomb Button pressed\" ) end WRONG PARSING IsActionTriggered () \u2693\ufe0e boolean IsActionTriggered ( int action, int controllerId ) Returns, if an action-button was pressed some time before or not. An Action-button is any button that got a default function assigned to it. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. 1 2 3 if Input . IsActionTriggered ( ButtonAction . ACTION_BOMB , 0 ) then print ( \"bomb Button pressed\" ) end WRONG PARSING IsButtonPressed () \u2693\ufe0e boolean IsButtonPressed ( int button, int controllerId ) Returns, if a button is pressed or not. This function will return true, as long the button is held down. List of all key enums Example Code This code prints \"Enter Button pressed\", when the \"Enter\"-Button was pressed. 1 2 3 if Input . IsButtonPressed ( Keyboard . KEY_ENTER , 0 ) then print ( \"Enter Button pressed.\" ) end WRONG PARSING IsButtonTriggered () \u2693\ufe0e boolean IsButtonTriggered ( int button, int controllerId ) Returns, if a button was pressed some time before or not. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all key enums Example Code This code prints \"Enter Button was pressed\", when the \"Enter\"-Button was pressed. 1 2 3 if Input . IsButtonTriggered ( Keyboard . KEY_ENTER , 0 ) then print ( \"Enter Button was pressed.\" ) end WRONG PARSING IsMouseBtnPressed () \u2693\ufe0e boolean IsMouseBtnPressed ( int button) Returns, if a mousebutton is pressed or not. Left: 0, Right: 1, mousewheel: 2, back button: 3, forward button: 4 Example Code This code prints \"Right Click\", when the \"right\"-mousebutton was pressed. 1 2 3 if Input . IsMouseBtnPressed ( 1 ) then print ( \"Right Click\" ) end","title":"Input"},{"location":"Input/#class-input","text":"","title":"Class \"Input\""},{"location":"Input/#functions","text":"","title":"Functions"},{"location":"Input/#getactionvalue","text":"","title":"GetActionValue ()"},{"location":"Input/#getbuttonvalue","text":"","title":"GetButtonValue ()"},{"location":"Input/#getmouseposition","text":"","title":"GetMousePosition ()"},{"location":"Input/#isactionpressed","text":"","title":"IsActionPressed ()"},{"location":"Input/#isactiontriggered","text":"","title":"IsActionTriggered ()"},{"location":"Input/#isbuttonpressed","text":"","title":"IsButtonPressed ()"},{"location":"Input/#isbuttontriggered","text":"","title":"IsButtonTriggered ()"},{"location":"Input/#ismousebtnpressed","text":"","title":"IsMouseBtnPressed ()"},{"location":"Isaac/","text":"Class \"Isaac\" \u2693\ufe0e Functions \u2693\ufe0e AddCallback () \u2693\ufe0e void AddCallback ( table ref, int callbackId, table callbackFn, int entityId ) AddPillEffectToPool () \u2693\ufe0e int AddPillEffectToPool ( int pillEffect) returns pill color ConsoleOutput () \u2693\ufe0e void ConsoleOutput ( string text) Prints a string into the Debug Console Example Code You can use this example as an alternative. 1 2 3 4 5 6 Isaac . ConsoleOutput ( \"This is a Test.\" ) -- Output : This is a Test . -- Alternatively : print ( \"This is a Test.\" ) -- Output : This is a Test . CountBosses () \u2693\ufe0e int CountBosses ( ) Returns the number of bosses in the current room. CountEnemies () \u2693\ufe0e int CountEnemies ( ) Returns the number of enemies in the current room. CountEntities () \u2693\ufe0e int CountEntities ( Entity Spawner, int Type, int Variant, int Subtype ) Returns the number of entities in the current room that fulfill the specified requirements. Spawner refers to an entity object (can be nil ) Type refers to the found entity's type (Can be EntityType . ENTITY_NULL ) Variant and Subtype refer to the found entitys Variant and Subtype (Can be - 1 ) DebugString () \u2693\ufe0e void DebugString ( string str) Prints a string into the log file. You can find this file here C : \\ Users \\ Jan \\ Documents \\ My Games \\ Binding of Isaac Afterbirth + \\ log . txt Example Code This code prints \"This is a Test.\" in the log.txt file. 1 2 Isaac . DebugString ( \"This is a Test.\" ) -- Output : Lua Debug : This is a Test . ExecuteCommand () \u2693\ufe0e string ExecuteCommand ( string command) This function executes a debug console command. see [Tutorial] Debug Console for informations on how to use commands. WRONG PARSING Explode () \u2693\ufe0e void Explode ( Vector pos, Entity source, float damage ) Spawn an explosion on a specified location. FindByType () \u2693\ufe0e table FindByType ( int Type, int Variant, int Subtype, boolean Cache, boolean IgnoreFriendly ) Returns entities based on Type, Variant, Subtype. If Variant and/or Subtype is -1 then everything is includedUse Cache flag for multiple calls per frame. FindInRadius () \u2693\ufe0e table FindInRadius ( Vector Position, float Radius, int Partitions ) Returns entities in range of Radius from Position filtered by Partitions mask (see EntityPartition enum ) (include all = 0xffffffff) This function does not return the entities sorted by nearest first, but based on the order they were loaded. WRONG PARSING GetCardIdByName () \u2693\ufe0e int GetCardIdByName ( string cardHudName) Returns the CardID based on its hud value. (File: pocketitems.xml) Notes The name of this function is misleading, this function will only work with the hud value of a card and not the name of a card. Example Code This code gets the CardID of XVI - The Tower. 1 2 Isaac . GetCardIdByName ( \"16_TheTower\" ) -- Returns : 17 GetChallenge () \u2693\ufe0e int GetChallenge ( ) Returns the ID of a challenge the player is currently in. Returns 0 if the player is not playing any challenge. GetChallengeIdByName () \u2693\ufe0e int GetChallengeIdByName ( string challengeName) Returns the ChallengeID of a challenge based on its name. (File: challenges.xml) Example Code This code gets the ChallengeID of Aprils fool. 1 2 Isaac . GetChallengeIdByName ( \"Aprils fool\" ) -- Returns : 32 GetCostumeIdByPath () \u2693\ufe0e int GetCostumeIdByPath ( string path) Returns the CostumeID of a costume based on its file path. (File: costumes2.xml) Example Code This code gets the CostumeID of the Poop transformation costume. 1 2 Isaac . GetCostumeIdByPath ( \"gfx/characters/n027_Transformation_Poop.anm2\" ) -- Returns : 27 GetCurseIdByName () \u2693\ufe0e int GetCurseIdByName ( string curseName) Returns the CurseID of a curse based on its name. (File: curses.xml) Example Code This code gets the CurseID of Curse of the Unknown. 1 2 Isaac . GetCurseIdByName ( \"Curse of the Unknown\" ) -- Returns : 4 GetEntityTypeByName () \u2693\ufe0e int GetEntityTypeByName ( string entityName) Returns the EntityType of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the EntityType of Flaming Gaper. 1 2 Isaac . GetEntityTypeByName ( \"Flaming Gaper\" ) -- Returns : 10 GetEntityVariantByName () \u2693\ufe0e int GetEntityVariantByName ( string entityName) Returns the variant of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the variant of Flaming Gaper. 1 2 Isaac . GetEntityVariantByName ( \"Flaming Gaper\" ) -- Returns : 2 GetFrameCount () \u2693\ufe0e int GetFrameCount ( ) Returns the amount of frames the game as a whole is running. The counter increases even when the game is paused or when you are in the main menu! 1 second equals roughtly 60 frames. This function therefore works drastically different than Game () : GetFrameCount () WRONG PARSING GetFreeNearPosition () \u2693\ufe0e Vector GetFreeNearPosition ( Vector pos, float step ) GetItemConfig () \u2693\ufe0e Config GetItemConfig ( ) Returns the ItemConfig::Config object. WRONG PARSING GetItemIdByName () \u2693\ufe0e int GetItemIdByName ( string itemName) Returns the ItemID of a Collectible. (File: items.xml) Example Code This code gets the ItemID of Brimstone. 1 2 Isaac . GetItemIdByName ( \"Brimstone\" ) -- Returns : 118 GetMusicIdByName () \u2693\ufe0e int GetMusicIdByName ( string musicName) Returns the MusicID of a music track. (File: music.xml) Example Code This code gets the MusicID of the Title Screen. 1 2 Isaac . GetMusicIdByName ( \"Title Screen\" ) -- Returns : 61 GetPillEffectByName () \u2693\ufe0e int GetPillEffectByName ( string pillEffect) Returns the PillEffectID based on its name. (File: pocketitems.xml) Example Code This code gets the PillEffectID of I can see forever!. 1 2 Isaac . GetPillEffectByName ( \"I can see forever!\" ) -- Returns : 23 GetPlayer () \u2693\ufe0e EntityPlayer GetPlayer ( int playerId) Returns the EntityPlayer which the user is controlling. 0 = Main player. Higher numbers refer to coop babies. Example Code 1 Isaac . GetPlayer ( 0 ) GetPlayerTypeByName () \u2693\ufe0e int GetPlayerTypeByName ( string playerName) Returns the PlayerType of a character based on its name. (File: players.xml) Example Code This code gets the PlayerType of Azazel. 1 2 Isaac . GetPlayerTypeByName ( \"Azazel\" ) -- Returns : 7 GetRandomPosition () \u2693\ufe0e Vector GetRandomPosition ( ) Returns a random position inside the current room. The Return value is a Vector containing the position in world coordinates. GetRoomEntities () \u2693\ufe0e table GetRoomEntities ( ) Returns a table containing all entities in the room. GetSoundIdByName () \u2693\ufe0e int GetSoundIdByName ( string soundName) Returns the SoundEffectID of a sound based on its name. (File: sounds.xml) Example Code This code gets the SoundEffectID of a sound named \"Custom Sound Effect\" 1 Isaac . GetSoundIdByName ( \"Custom Sound Effect\" ) GetTextWidth () \u2693\ufe0e int GetTextWidth ( string str) Returns the width of the given string in pixels based on the \"terminus8\" font (same font as used in Isaac.RenderText()) GetTime () \u2693\ufe0e int GetTime ( ) Returns the current game time in milliseconds. This includes pauses! GetTrinketIdByName () \u2693\ufe0e int GetTrinketIdByName ( string trinketName) Returns the TrinketType of a trinket based on its name. (File: items.xml) Example Code This code gets the TrinketType of Lucky Toe. 1 2 Isaac . GetTrinketIdByName ( \"Lucky Toe\" ) -- Returns : 42 GridSpawn () \u2693\ufe0e GridEntity GridSpawn ( GridEntity gridEntityType, int Variant, Vector position, boolean forced ) Spawn a GridEntity at the given position (world coordinates). Bugs forced has no effect and will NOT override the grid entity at the given location. Remove a grid entity at the given location if nessesary before spawning something again. WRONG PARSING HasModData () \u2693\ufe0e boolean HasModData ( table ref) Returns \"true\" if your mod has Data stored using the \"SaveModData()\" function. Aka. if there is a \"saveX.dat\" file in your mod folder.There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. LoadModData () \u2693\ufe0e string LoadModData ( table ref) Returns a JSON array/table that was stored in a \"saveX.dat\" file using the \"SaveModData()\" function. If there is no \"saveX.dat\" file in your mod, this function will return an empty string. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. Example Code This code loads data stored in the \"saveX.dat\" file, if it exists. 1 2 3 4 5 6 7 8 9 10 local yourMod = RegisterMod ( \"someMod\" , 1 ) local json = require ( \"json\" ) -- ... function yourMod : OnGameStart ( isSave ) -- Loading Moddata -- if yourMod : HasData () then local myTable = json . decode ( Isaac . LoadModData ( yourMod )) end end yourMod : AddCallback ( ModCallbacks . MC_POST_GAME_STARTED , yourMod . OnGameStart ) RegisterMod () \u2693\ufe0e void RegisterMod ( table ref, string modName, int apiVersion ) Method to define a mod in the game. THIS NEEDS TO BE DEFINED IN EVERY MOD! Example Code 1 local yourMod = RegisterMod ( \"someMod\" , 1 ) RemoveCallback () \u2693\ufe0e void RemoveCallback ( table ref, int callbackId, table callbackFn ) RemoveModData () \u2693\ufe0e void RemoveModData ( table ref) Deletes the stored \"saveX.dat\" file if it exists. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. RenderScaledText () \u2693\ufe0e void RenderScaledText ( string str, float X, float Y, float ScaleX, float ScaleY, float R, float G, float B, float A ) Renders a scaled text on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). ScaleX, ScaleY, R ,G ,B and A need to be between [0,1]. Some scale values can cause the font to display deformed and pixelated. Example Code This code renders the player position on the screen. 1 2 3 local player = Isaac . GetPlayer ( 0 ) local pos = player . Position Isaac . RenderText ( \"X: \" .. pos . X .. \" Y: \" .. pos . Y , 50 , 50 , 0.5 , 0.5 , 1 , 1 , 1 , 1 ) RenderText () \u2693\ufe0e void RenderText ( string str, float X, float Y, float R, float G, float B, float A ) Renders a text with the default size on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). R,G,B and A need to be between [0,1]. Example Code This code renders the player position on the screen. 1 2 3 local player = Isaac . GetPlayer ( 0 ) local pos = player . Position Isaac . RenderText ( \"X: \" .. pos . X .. \" Y: \" .. pos . Y , 50 , 50 , 1 , 1 , 1 , 1 ) SaveModData () \u2693\ufe0e void SaveModData ( table ref, string data ) Stores a JSON array/table in a \"saveX.dat\" file. The stored Data persists thruout resets and game restart, so its perfect to store persistent data. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. Example Code This code saves a table in the \"saveX.dat\" file. 1 2 3 4 5 6 7 8 9 local yourMod = RegisterMod ( \"someMod\" , 1 ) local json = require ( \"json\" ) -- ... -- Saving Moddata -- function yourMod : SaveGame () local table = { 1 , 2 , 3 } yourMod . SaveData ( yourMod , json . encode ( table )) end yourMod : AddCallback ( ModCallbacks . MC_PRE_GAME_EXIT , yourMod . SaveGame ) ScreenToWorld () \u2693\ufe0e Vector ScreenToWorld ( Vector pos) Transfers Screen (aka. Window coordinates) into Worldcoordinates. This can be used to get a specific location in the room in World coordnates The World coordinate system is x[0,inf) y[0,inf). ScreenToWorldDistance () \u2693\ufe0e Vector ScreenToWorldDistance ( Vector pos) Spawn () \u2693\ufe0e Entity Spawn ( int entityType, int entityVariant, int entitySubtype, Vector position, Vector velocity, Entity Spawner ) Spawns the defined entity at the given location. If the position is not free, it spawns it in the nearest free position. There are two spawn functions. Isaac.Spawn() and Game():Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . Example Code This code spawns a random collectible at in center of the current room. 1 Isaac . Spawn ( EntityType . ENTITY_PICKUP , PickupVariant . PICKUP_COLLECTIBLE , 0 , Vector ( 320 , 280 ), Vector ( 0 , 0 ), nil ) WRONG PARSING WorldToRenderPosition () \u2693\ufe0e Vector WorldToRenderPosition ( Vector pos) Transfers world (aka. game coordinates) into Rendercoordinates. This can be used to render things at fixed positions in a room. The Render coordinate system is x[0,inf) y[0,inf). It defines the Position on the rendering-plane in the current room. WorldToScreen () \u2693\ufe0e Vector WorldToScreen ( Vector pos) Transfers world (aka. game coordinates) into Screen (aka. Window) coordinates. This can be used to render things next to an entity. The Screen coordinate system is x[0,inf) y[0,inf). Normally, it goes till ~500x ~300y. The return vector contains integer values or numbers ending with .5 Example Code This code render \"test\" at the position of the player. The text will move with isaac. 1 2 3 local player = Isaac . GetPlayer ( 0 ) local screenpos = Isaac . WorldToScreen ( player . Position ) Isaac . RenderText ( \"test\" , screenpos . X , screenpos . Y , 1 , 1 , 1 , 1 ) WorldToScreenDistance () \u2693\ufe0e Vector WorldToScreenDistance ( Vector pos)","title":"Isaac"},{"location":"Isaac/#class-isaac","text":"","title":"Class \"Isaac\""},{"location":"Isaac/#functions","text":"","title":"Functions"},{"location":"Isaac/#addcallback","text":"","title":"AddCallback ()"},{"location":"Isaac/#addpilleffecttopool","text":"","title":"AddPillEffectToPool ()"},{"location":"Isaac/#consoleoutput","text":"","title":"ConsoleOutput ()"},{"location":"Isaac/#countbosses","text":"","title":"CountBosses ()"},{"location":"Isaac/#countenemies","text":"","title":"CountEnemies ()"},{"location":"Isaac/#countentities","text":"","title":"CountEntities ()"},{"location":"Isaac/#debugstring","text":"","title":"DebugString ()"},{"location":"Isaac/#executecommand","text":"","title":"ExecuteCommand ()"},{"location":"Isaac/#explode","text":"","title":"Explode ()"},{"location":"Isaac/#findbytype","text":"","title":"FindByType ()"},{"location":"Isaac/#findinradius","text":"","title":"FindInRadius ()"},{"location":"Isaac/#getcardidbyname","text":"","title":"GetCardIdByName ()"},{"location":"Isaac/#getchallenge","text":"","title":"GetChallenge ()"},{"location":"Isaac/#getchallengeidbyname","text":"","title":"GetChallengeIdByName ()"},{"location":"Isaac/#getcostumeidbypath","text":"","title":"GetCostumeIdByPath ()"},{"location":"Isaac/#getcurseidbyname","text":"","title":"GetCurseIdByName ()"},{"location":"Isaac/#getentitytypebyname","text":"","title":"GetEntityTypeByName ()"},{"location":"Isaac/#getentityvariantbyname","text":"","title":"GetEntityVariantByName ()"},{"location":"Isaac/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Isaac/#getfreenearposition","text":"","title":"GetFreeNearPosition ()"},{"location":"Isaac/#getitemconfig","text":"","title":"GetItemConfig ()"},{"location":"Isaac/#getitemidbyname","text":"","title":"GetItemIdByName ()"},{"location":"Isaac/#getmusicidbyname","text":"","title":"GetMusicIdByName ()"},{"location":"Isaac/#getpilleffectbyname","text":"","title":"GetPillEffectByName ()"},{"location":"Isaac/#getplayer","text":"","title":"GetPlayer ()"},{"location":"Isaac/#getplayertypebyname","text":"","title":"GetPlayerTypeByName ()"},{"location":"Isaac/#getrandomposition","text":"","title":"GetRandomPosition ()"},{"location":"Isaac/#getroomentities","text":"","title":"GetRoomEntities ()"},{"location":"Isaac/#getsoundidbyname","text":"","title":"GetSoundIdByName ()"},{"location":"Isaac/#gettextwidth","text":"","title":"GetTextWidth ()"},{"location":"Isaac/#gettime","text":"","title":"GetTime ()"},{"location":"Isaac/#gettrinketidbyname","text":"","title":"GetTrinketIdByName ()"},{"location":"Isaac/#gridspawn","text":"","title":"GridSpawn ()"},{"location":"Isaac/#hasmoddata","text":"","title":"HasModData ()"},{"location":"Isaac/#loadmoddata","text":"","title":"LoadModData ()"},{"location":"Isaac/#registermod","text":"","title":"RegisterMod ()"},{"location":"Isaac/#removecallback","text":"","title":"RemoveCallback ()"},{"location":"Isaac/#removemoddata","text":"","title":"RemoveModData ()"},{"location":"Isaac/#renderscaledtext","text":"","title":"RenderScaledText ()"},{"location":"Isaac/#rendertext","text":"","title":"RenderText ()"},{"location":"Isaac/#savemoddata","text":"","title":"SaveModData ()"},{"location":"Isaac/#screentoworld","text":"","title":"ScreenToWorld ()"},{"location":"Isaac/#screentoworlddistance","text":"","title":"ScreenToWorldDistance ()"},{"location":"Isaac/#spawn","text":"","title":"Spawn ()"},{"location":"Isaac/#worldtorenderposition","text":"","title":"WorldToRenderPosition ()"},{"location":"Isaac/#worldtoscreen","text":"","title":"WorldToScreen ()"},{"location":"Isaac/#worldtoscreendistance","text":"","title":"WorldToScreenDistance ()"},{"location":"ItemConfig_Card/","text":"Class \"ItemConfig::Card\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID Description \u2693\ufe0e string Description GreedModeAllowed \u2693\ufe0e boolean GreedModeAllowed HudAnim \u2693\ufe0e string HudAnim ID \u2693\ufe0e int ID Name \u2693\ufe0e string Name","title":"ItemConfig::Card"},{"location":"ItemConfig_Card/#class-itemconfigcard","text":"","title":"Class \"ItemConfig::Card\""},{"location":"ItemConfig_Card/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Card/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Card/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_Card/#description","text":"","title":"Description"},{"location":"ItemConfig_Card/#greedmodeallowed","text":"","title":"GreedModeAllowed"},{"location":"ItemConfig_Card/#hudanim","text":"","title":"HudAnim"},{"location":"ItemConfig_Card/#id","text":"","title":"ID"},{"location":"ItemConfig_Card/#name","text":"","title":"Name"},{"location":"ItemConfig_Config/","text":"Class \"ItemConfig::Config\" \u2693\ufe0e Functions \u2693\ufe0e GetCard () \u2693\ufe0e Card GetCard ( int ID) GetCards () \u2693\ufe0e CardList GetCards ( ) GetCollectible () \u2693\ufe0e Item GetCollectible ( int ID) Returns the Itemobject of a given CollectibleID. Example Code This Code gets the highest possible collectibleid including modded items. It uses the Binary Search algorithm to do it. Using GetCollectible(): ( recommended! ) 1 2 3 4 5 6 7 8 9 10 11 12 13 function GetMaxCollectibleID () local id = CollectibleType . NUM_COLLECTIBLES - 1 local step = 16 while step & gt ; 0 do if Isaac . GetItemConfig () : GetCollectible ( id + step ) ~= nil then id = id + step else step = step // 2 end end return id end Using GetCollectibles(): ( Crashes on Mac OS)** 1 2 3 function GetMaxCollectibleID () return Isaac . GetItemConfig () : GetCollectibles (). Size - 1 end WRONG PARSING GetCollectibles () \u2693\ufe0e ItemList GetCollectibles ( ) Returns the List of all Collectibles. Example Code This Code gets the highest possible collectibleid including modded items. 1 2 3 function GetMaxCollectibleID () return Isaac . GetItemConfig () : GetCollectibles (). Size - 1 end Bugs The objects stored in the returned list cant be accessed correctly and are therefore useless. GetCostumes () \u2693\ufe0e CostumeList GetCostumes ( ) Bugs The Vector/Table returned by this function is always empty! GetNullItem () \u2693\ufe0e Item GetNullItem ( int ID) GetNullItems () \u2693\ufe0e ItemList GetNullItems ( ) GetPillEffect () \u2693\ufe0e PillEffect GetPillEffect ( PillEffect PillEffectID) GetPillEffects () \u2693\ufe0e PillList GetPillEffects ( ) GetTrinket () \u2693\ufe0e Item GetTrinket ( int ID) GetTrinkets () \u2693\ufe0e ItemList GetTrinkets ( ) IsValidCollectible () \u2693\ufe0e static boolean IsValidCollectible ( CollectibleType ID) Function to check if a given item id is a valid collectible id (aka. this item exists). Returns True when it exists and False when it doesnt. Example Code This Code checks, if the item \"Sad Onion\" (ID: 1) exists. 1 ItemConfig . Config . IsValidCollectible ( 1 ) Bugs This function returns false for modded items! Use itemConfig:GetCollectible() instead. ShouldAddCostumeOnPickup () \u2693\ufe0e static boolean ShouldAddCostumeOnPickup ( Item Config)","title":"ItemConfig::Config"},{"location":"ItemConfig_Config/#class-itemconfigconfig","text":"","title":"Class \"ItemConfig::Config\""},{"location":"ItemConfig_Config/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Config/#getcard","text":"","title":"GetCard ()"},{"location":"ItemConfig_Config/#getcards","text":"","title":"GetCards ()"},{"location":"ItemConfig_Config/#getcollectible","text":"","title":"GetCollectible ()"},{"location":"ItemConfig_Config/#getcollectibles","text":"","title":"GetCollectibles ()"},{"location":"ItemConfig_Config/#getcostumes","text":"","title":"GetCostumes ()"},{"location":"ItemConfig_Config/#getnullitem","text":"","title":"GetNullItem ()"},{"location":"ItemConfig_Config/#getnullitems","text":"","title":"GetNullItems ()"},{"location":"ItemConfig_Config/#getpilleffect","text":"","title":"GetPillEffect ()"},{"location":"ItemConfig_Config/#getpilleffects","text":"","title":"GetPillEffects ()"},{"location":"ItemConfig_Config/#gettrinket","text":"","title":"GetTrinket ()"},{"location":"ItemConfig_Config/#gettrinkets","text":"","title":"GetTrinkets ()"},{"location":"ItemConfig_Config/#isvalidcollectible","text":"","title":"IsValidCollectible ()"},{"location":"ItemConfig_Config/#shouldaddcostumeonpickup","text":"","title":"ShouldAddCostumeOnPickup ()"},{"location":"ItemConfig_Costume/","text":"Class \"ItemConfig::Costume\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Anm2Path \u2693\ufe0e string Anm2Path HasOverlay \u2693\ufe0e boolean HasOverlay HasSkinAlt \u2693\ufe0e boolean HasSkinAlt ID \u2693\ufe0e int ID IsFlying \u2693\ufe0e boolean IsFlying OverwriteColor \u2693\ufe0e boolean OverwriteColor Priority \u2693\ufe0e int Priority SkinColor \u2693\ufe0e SkinColor SkinColor","title":"ItemConfig::Costume"},{"location":"ItemConfig_Costume/#class-itemconfigcostume","text":"","title":"Class \"ItemConfig::Costume\""},{"location":"ItemConfig_Costume/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Costume/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Costume/#anm2path","text":"","title":"Anm2Path"},{"location":"ItemConfig_Costume/#hasoverlay","text":"","title":"HasOverlay"},{"location":"ItemConfig_Costume/#hasskinalt","text":"","title":"HasSkinAlt"},{"location":"ItemConfig_Costume/#id","text":"","title":"ID"},{"location":"ItemConfig_Costume/#isflying","text":"","title":"IsFlying"},{"location":"ItemConfig_Costume/#overwritecolor","text":"","title":"OverwriteColor"},{"location":"ItemConfig_Costume/#priority","text":"","title":"Priority"},{"location":"ItemConfig_Costume/#skincolor","text":"","title":"SkinColor"},{"location":"ItemConfig_Item/","text":"Class \"ItemConfig::Item\" \u2693\ufe0e Functions \u2693\ufe0e IsCollectible () \u2693\ufe0e boolean IsCollectible ( ) IsNull () \u2693\ufe0e boolean IsNull ( ) IsTrinket () \u2693\ufe0e boolean IsTrinket ( ) Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID AddBlackHearts \u2693\ufe0e int AddBlackHearts AddBombs \u2693\ufe0e int AddBombs AddCoins \u2693\ufe0e int AddCoins AddHearts \u2693\ufe0e int AddHearts AddKeys \u2693\ufe0e int AddKeys AddMaxHearts \u2693\ufe0e int AddMaxHearts AddSoulHearts \u2693\ufe0e int AddSoulHearts CacheFlags \u2693\ufe0e int CacheFlags Costume \u2693\ufe0e Costume Costume Description \u2693\ufe0e string Description DevilPrice \u2693\ufe0e int DevilPrice Discharged \u2693\ufe0e boolean Discharged GfxFileName \u2693\ufe0e string GfxFileName ID \u2693\ufe0e int ID MaxCharges \u2693\ufe0e int MaxCharges MaxCooldown \u2693\ufe0e int MaxCooldown Name \u2693\ufe0e string Name Special \u2693\ufe0e boolean Special Type \u2693\ufe0e ItemType Type mostly for Lua so it will not make a copy","title":"ItemConfig::Item"},{"location":"ItemConfig_Item/#class-itemconfigitem","text":"","title":"Class \"ItemConfig::Item\""},{"location":"ItemConfig_Item/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Item/#iscollectible","text":"","title":"IsCollectible ()"},{"location":"ItemConfig_Item/#isnull","text":"","title":"IsNull ()"},{"location":"ItemConfig_Item/#istrinket","text":"","title":"IsTrinket ()"},{"location":"ItemConfig_Item/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Item/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_Item/#addblackhearts","text":"","title":"AddBlackHearts"},{"location":"ItemConfig_Item/#addbombs","text":"","title":"AddBombs"},{"location":"ItemConfig_Item/#addcoins","text":"","title":"AddCoins"},{"location":"ItemConfig_Item/#addhearts","text":"","title":"AddHearts"},{"location":"ItemConfig_Item/#addkeys","text":"","title":"AddKeys"},{"location":"ItemConfig_Item/#addmaxhearts","text":"","title":"AddMaxHearts"},{"location":"ItemConfig_Item/#addsoulhearts","text":"","title":"AddSoulHearts"},{"location":"ItemConfig_Item/#cacheflags","text":"","title":"CacheFlags"},{"location":"ItemConfig_Item/#costume","text":"","title":"Costume"},{"location":"ItemConfig_Item/#description","text":"","title":"Description"},{"location":"ItemConfig_Item/#devilprice","text":"","title":"DevilPrice"},{"location":"ItemConfig_Item/#discharged","text":"","title":"Discharged"},{"location":"ItemConfig_Item/#gfxfilename","text":"","title":"GfxFileName"},{"location":"ItemConfig_Item/#id","text":"","title":"ID"},{"location":"ItemConfig_Item/#maxcharges","text":"","title":"MaxCharges"},{"location":"ItemConfig_Item/#maxcooldown","text":"","title":"MaxCooldown"},{"location":"ItemConfig_Item/#name","text":"","title":"Name"},{"location":"ItemConfig_Item/#special","text":"","title":"Special"},{"location":"ItemConfig_Item/#type","text":"","title":"Type"},{"location":"ItemConfig_PillEffect/","text":"Class \"ItemConfig::PillEffect\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID GreedModeAllowed \u2693\ufe0e boolean GreedModeAllowed ID \u2693\ufe0e int ID Name \u2693\ufe0e string Name","title":"ItemConfig::PillEffect"},{"location":"ItemConfig_PillEffect/#class-itemconfigpilleffect","text":"","title":"Class \"ItemConfig::PillEffect\""},{"location":"ItemConfig_PillEffect/#functions","text":"","title":"Functions"},{"location":"ItemConfig_PillEffect/#variables","text":"","title":"Variables"},{"location":"ItemConfig_PillEffect/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_PillEffect/#greedmodeallowed","text":"","title":"GreedModeAllowed"},{"location":"ItemConfig_PillEffect/#id","text":"","title":"ID"},{"location":"ItemConfig_PillEffect/#name","text":"","title":"Name"},{"location":"ItemPool/","text":"Class \"ItemPool\" \u2693\ufe0e Functions \u2693\ufe0e AddBibleUpgrade () \u2693\ufe0e void AddBibleUpgrade ( int Add, ItemPoolType PoolType ) AddRoomBlacklist () \u2693\ufe0e void AddRoomBlacklist ( CollectibleType Item) ForceAddPillEffect () \u2693\ufe0e PillColor ForceAddPillEffect ( PillEffect PillEffect) Forces a pill effect to be in the pool, usually for challenges, returns PillColor for that effect. GetCard () \u2693\ufe0e Card GetCard ( int Seed, boolean Playing, boolean Rune, boolean OnlyRunes ) GetCollectible () \u2693\ufe0e CollectibleType GetCollectible ( ItemPoolType PoolType, boolean Decrease, int Seed ) GetLastPool () \u2693\ufe0e ItemPoolType GetLastPool ( ) GetPill () \u2693\ufe0e PillColor GetPill ( int Seed) GetPillEffect () \u2693\ufe0e PillEffect GetPillEffect ( PillColor PillColor) GetPoolForRoom () \u2693\ufe0e ItemPoolType GetPoolForRoom ( RoomType RoomType, int Seed ) GetTrinket () \u2693\ufe0e TrinketType GetTrinket ( ) IdentifyPill () \u2693\ufe0e void IdentifyPill ( PillColor PillColor) IsPillIdentified () \u2693\ufe0e boolean IsPillIdentified ( PillColor PillColor) RemoveCollectible () \u2693\ufe0e boolean RemoveCollectible ( CollectibleType Collectible) Removes a collectible from the itempool. Bugs This function will always return true, even when the given id does not exist! RemoveTrinket () \u2693\ufe0e boolean RemoveTrinket ( TrinketType Trinket) ResetRoomBlacklist () \u2693\ufe0e void ResetRoomBlacklist ( ) ResetTrinkets () \u2693\ufe0e void ResetTrinkets ( )","title":"ItemPool"},{"location":"ItemPool/#class-itempool","text":"","title":"Class \"ItemPool\""},{"location":"ItemPool/#functions","text":"","title":"Functions"},{"location":"ItemPool/#addbibleupgrade","text":"","title":"AddBibleUpgrade ()"},{"location":"ItemPool/#addroomblacklist","text":"","title":"AddRoomBlacklist ()"},{"location":"ItemPool/#forceaddpilleffect","text":"","title":"ForceAddPillEffect ()"},{"location":"ItemPool/#getcard","text":"","title":"GetCard ()"},{"location":"ItemPool/#getcollectible","text":"","title":"GetCollectible ()"},{"location":"ItemPool/#getlastpool","text":"","title":"GetLastPool ()"},{"location":"ItemPool/#getpill","text":"","title":"GetPill ()"},{"location":"ItemPool/#getpilleffect","text":"","title":"GetPillEffect ()"},{"location":"ItemPool/#getpoolforroom","text":"","title":"GetPoolForRoom ()"},{"location":"ItemPool/#gettrinket","text":"","title":"GetTrinket ()"},{"location":"ItemPool/#identifypill","text":"","title":"IdentifyPill ()"},{"location":"ItemPool/#ispillidentified","text":"","title":"IsPillIdentified ()"},{"location":"ItemPool/#removecollectible","text":"","title":"RemoveCollectible ()"},{"location":"ItemPool/#removetrinket","text":"","title":"RemoveTrinket ()"},{"location":"ItemPool/#resetroomblacklist","text":"","title":"ResetRoomBlacklist ()"},{"location":"ItemPool/#resettrinkets","text":"","title":"ResetTrinkets ()"},{"location":"KColor/","text":"Class \"KColor\" \u2693\ufe0e Functions \u2693\ufe0e KColor () \u2693\ufe0e void KColor ( float red, float green, float blue, float alpha ) Constructor for the \"KColor\" class. Notes: \"KColor\" is only used in the Font class. For most other situations you will need to use the Color() constructor. WRONG PARSING Variables \u2693\ufe0e Alpha \u2693\ufe0e float Alpha Blue \u2693\ufe0e float Blue Green \u2693\ufe0e float Green Red \u2693\ufe0e float Red","title":"KColor"},{"location":"KColor/#class-kcolor","text":"","title":"Class \"KColor\""},{"location":"KColor/#functions","text":"","title":"Functions"},{"location":"KColor/#kcolor","text":"","title":"KColor ()"},{"location":"KColor/#variables","text":"","title":"Variables"},{"location":"KColor/#alpha","text":"","title":"Alpha"},{"location":"KColor/#blue","text":"","title":"Blue"},{"location":"KColor/#green","text":"","title":"Green"},{"location":"KColor/#red","text":"","title":"Red"},{"location":"Level/","text":"Class \"Level\" \u2693\ufe0e Functions \u2693\ufe0e AddAngelRoomChance () \u2693\ufe0e void AddAngelRoomChance ( float Chance) AddCurse () \u2693\ufe0e void AddCurse ( LevelCurse Curse, boolean ShowName ) ApplyBlueMapEffect () \u2693\ufe0e void ApplyBlueMapEffect ( ) ApplyCompassEffect () \u2693\ufe0e void ApplyCompassEffect ( boolean Persistent) ApplyMapEffect () \u2693\ufe0e void ApplyMapEffect ( ) CanOpenChallengeRoom () \u2693\ufe0e boolean CanOpenChallengeRoom ( int RoomIndex) CanSpawnDevilRoom () \u2693\ufe0e boolean CanSpawnDevilRoom ( ) CanStageHaveCurseOfLabyrinth () \u2693\ufe0e boolean CanStageHaveCurseOfLabyrinth ( LevelStage Stage) ChangeRoom () \u2693\ufe0e void ChangeRoom ( int RoomIndex) DisableDevilRoom () \u2693\ufe0e void DisableDevilRoom ( ) ForceHorsemanBoss () \u2693\ufe0e boolean ForceHorsemanBoss ( int Seed) return true on success GetAbsoluteStage () \u2693\ufe0e LevelStage GetAbsoluteStage ( ) Returns the absolute stage, if its greed mode its converted to equivalent one. GetAngelRoomChance () \u2693\ufe0e float GetAngelRoomChance ( ) GetCanSeeEverything () \u2693\ufe0e boolean GetCanSeeEverything ( ) GetCurrentRoom () \u2693\ufe0e Room GetCurrentRoom ( ) GetCurrentRoomDesc () \u2693\ufe0e RoomDescriptor GetCurrentRoomDesc ( ) GetCurrentRoomIndex () \u2693\ufe0e int GetCurrentRoomIndex ( ) Notes This will always return the roomindex on the levelgrid, on which you entered the current room from. (see black entries in graphic below) GetCurseName () \u2693\ufe0e string GetCurseName ( ) GetCurses () \u2693\ufe0e int GetCurses ( ) GetDevilAngelRoomRNG () \u2693\ufe0e RNG GetDevilAngelRoomRNG ( ) GetDungeonPlacementSeed () \u2693\ufe0e int GetDungeonPlacementSeed ( ) GetEnterPosition () \u2693\ufe0e Vector GetEnterPosition ( ) GetHeartPicked () \u2693\ufe0e boolean GetHeartPicked ( ) GetLastBossRoomListIndex () \u2693\ufe0e int GetLastBossRoomListIndex ( ) GetLastRoomDesc () \u2693\ufe0e RoomDescriptor GetLastRoomDesc ( ) GetName () \u2693\ufe0e string GetName ( LevelStage Stage, StageType Type, int Curses, int InfiniteLevel, boolean Dyslexia ) GetNonCompleteRoomIndex () \u2693\ufe0e int GetNonCompleteRoomIndex ( ) GetPreviousRoomIndex () \u2693\ufe0e int GetPreviousRoomIndex ( ) GetRandomRoomIndex () \u2693\ufe0e int GetRandomRoomIndex ( boolean IAmErrorRoom, int Seed ) GetRoomByIdx () \u2693\ufe0e RoomDescriptor GetRoomByIdx ( int RoomIdx) GetRoomCount () \u2693\ufe0e int GetRoomCount ( ) GetRooms () \u2693\ufe0e LuaArrayProxy GetRooms ( ) GetStage () \u2693\ufe0e LevelStage GetStage ( ) GetStageType () \u2693\ufe0e StageType GetStageType ( ) GetStartingRoomIndex () \u2693\ufe0e int GetStartingRoomIndex ( ) GetStateFlag () \u2693\ufe0e boolean GetStateFlag ( StateFlag StateFlag) HasBossChallenge () \u2693\ufe0e boolean HasBossChallenge ( ) InitializeDevilAngelRoom () \u2693\ufe0e void InitializeDevilAngelRoom ( boolean ForceAngel, boolean ForceDevil ) IsAltStage () \u2693\ufe0e boolean IsAltStage ( ) IsDevilRoomDisabled () \u2693\ufe0e boolean IsDevilRoomDisabled ( ) IsNextStageAvailable () \u2693\ufe0e boolean IsNextStageAvailable ( ) QueryRoomTypeIndex () \u2693\ufe0e int QueryRoomTypeIndex ( RoomType RoomType, boolean Visited, RNG rng ) RemoveCompassEffect () \u2693\ufe0e void RemoveCompassEffect ( ) RemoveCurse () \u2693\ufe0e void RemoveCurse ( LevelCurse Curse) RemoveCurses () \u2693\ufe0e void RemoveCurses ( ) SetCanSeeEverything () \u2693\ufe0e void SetCanSeeEverything ( boolean Value) SetHeartPicked () \u2693\ufe0e void SetHeartPicked ( ) SetNextStage () \u2693\ufe0e void SetNextStage ( ) This function teleports you directly to the next stage without playing the leveltransition or updating the floors backdrop. Use other functions to fix those issues. SetRedHeartDamage () \u2693\ufe0e void SetRedHeartDamage ( ) SetStage () \u2693\ufe0e void SetStage ( LevelStage Stage, StageType StageType ) for SetStage/SetNextStage to have effect, call Init afterward SetStateFlag () \u2693\ufe0e void SetStateFlag ( StateFlag StateFlag, boolean Val ) ShowMap () \u2693\ufe0e void ShowMap ( ) Show's all map (world/sun card effect) except the top secret room. ShowName () \u2693\ufe0e void ShowName ( boolean Sticky) UncoverHiddenDoor () \u2693\ufe0e void UncoverHiddenDoor ( int CurrentRoomIdx, DoorSlot Slot ) Uncovers the door on both sides by modifying the saved grid entities for neighboring room. Update () \u2693\ufe0e void Update ( ) UpdateVisibility () \u2693\ufe0e void UpdateVisibility ( ) Notes Whenever you update the visibility of a room on the minimap, it won't update the map automatically, since it is cached. You have to explicitly call UpdateVisibility() afterwards to apply any changes. Example Code This code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- Local variables local game = Game () local level = game : GetLevel () -- Give the player the Compass effect , which will display all of the floor ' s special rooms on the mini - map level : ApplyCompassEffect () -- Remove the icon for the Treasure Room specifically local treasureIndex = level : QueryRoomTypeIndex ( RoomType . ROOM_TREASURE , false , RNG ()) local treasureRoom = level : GetRoomByIdx ( treasureIndex ) treasureRoom . DisplayFlags = 0 -- Since the mini - map is cached , changing display flags won ' t update it unless we explicitly call this function level : UpdateVisibility () DungeonReturnPosition () \u2693\ufe0e Vector DungeonReturnPosition Variables \u2693\ufe0e DungeonReturnRoomIndex \u2693\ufe0e int DungeonReturnRoomIndex EnterDoor \u2693\ufe0e int EnterDoor This value defines on which doorslot you entered the room. Bugs Changing this value has no impact on anything. the EnterDoor value is always determined by the LeaveDoor Value and the game itself. GreedModeWave \u2693\ufe0e int GreedModeWave LeaveDoor \u2693\ufe0e int LeaveDoor This value defines on which doorslot you are positioned after the transition. You will always end up at the oposite side of the door specified. Example: LeaveDoor=1 (Up0) will position you at Doorslot Down0 (Logic: Doorslot+2) Notes if level.LeaveDoor is set to anything other than -1, the function will transition based on the room you are currently in.","title":"Level"},{"location":"Level/#class-level","text":"","title":"Class \"Level\""},{"location":"Level/#functions","text":"","title":"Functions"},{"location":"Level/#addangelroomchance","text":"","title":"AddAngelRoomChance ()"},{"location":"Level/#addcurse","text":"","title":"AddCurse ()"},{"location":"Level/#applybluemapeffect","text":"","title":"ApplyBlueMapEffect ()"},{"location":"Level/#applycompasseffect","text":"","title":"ApplyCompassEffect ()"},{"location":"Level/#applymapeffect","text":"","title":"ApplyMapEffect ()"},{"location":"Level/#canopenchallengeroom","text":"","title":"CanOpenChallengeRoom ()"},{"location":"Level/#canspawndevilroom","text":"","title":"CanSpawnDevilRoom ()"},{"location":"Level/#canstagehavecurseoflabyrinth","text":"","title":"CanStageHaveCurseOfLabyrinth ()"},{"location":"Level/#changeroom","text":"","title":"ChangeRoom ()"},{"location":"Level/#disabledevilroom","text":"","title":"DisableDevilRoom ()"},{"location":"Level/#forcehorsemanboss","text":"","title":"ForceHorsemanBoss ()"},{"location":"Level/#getabsolutestage","text":"","title":"GetAbsoluteStage ()"},{"location":"Level/#getangelroomchance","text":"","title":"GetAngelRoomChance ()"},{"location":"Level/#getcanseeeverything","text":"","title":"GetCanSeeEverything ()"},{"location":"Level/#getcurrentroom","text":"","title":"GetCurrentRoom ()"},{"location":"Level/#getcurrentroomdesc","text":"","title":"GetCurrentRoomDesc ()"},{"location":"Level/#getcurrentroomindex","text":"","title":"GetCurrentRoomIndex ()"},{"location":"Level/#getcursename","text":"","title":"GetCurseName ()"},{"location":"Level/#getcurses","text":"","title":"GetCurses ()"},{"location":"Level/#getdevilangelroomrng","text":"","title":"GetDevilAngelRoomRNG ()"},{"location":"Level/#getdungeonplacementseed","text":"","title":"GetDungeonPlacementSeed ()"},{"location":"Level/#getenterposition","text":"","title":"GetEnterPosition ()"},{"location":"Level/#getheartpicked","text":"","title":"GetHeartPicked ()"},{"location":"Level/#getlastbossroomlistindex","text":"","title":"GetLastBossRoomListIndex ()"},{"location":"Level/#getlastroomdesc","text":"","title":"GetLastRoomDesc ()"},{"location":"Level/#getname","text":"","title":"GetName ()"},{"location":"Level/#getnoncompleteroomindex","text":"","title":"GetNonCompleteRoomIndex ()"},{"location":"Level/#getpreviousroomindex","text":"","title":"GetPreviousRoomIndex ()"},{"location":"Level/#getrandomroomindex","text":"","title":"GetRandomRoomIndex ()"},{"location":"Level/#getroombyidx","text":"","title":"GetRoomByIdx ()"},{"location":"Level/#getroomcount","text":"","title":"GetRoomCount ()"},{"location":"Level/#getrooms","text":"","title":"GetRooms ()"},{"location":"Level/#getstage","text":"","title":"GetStage ()"},{"location":"Level/#getstagetype","text":"","title":"GetStageType ()"},{"location":"Level/#getstartingroomindex","text":"","title":"GetStartingRoomIndex ()"},{"location":"Level/#getstateflag","text":"","title":"GetStateFlag ()"},{"location":"Level/#hasbosschallenge","text":"","title":"HasBossChallenge ()"},{"location":"Level/#initializedevilangelroom","text":"","title":"InitializeDevilAngelRoom ()"},{"location":"Level/#isaltstage","text":"","title":"IsAltStage ()"},{"location":"Level/#isdevilroomdisabled","text":"","title":"IsDevilRoomDisabled ()"},{"location":"Level/#isnextstageavailable","text":"","title":"IsNextStageAvailable ()"},{"location":"Level/#queryroomtypeindex","text":"","title":"QueryRoomTypeIndex ()"},{"location":"Level/#removecompasseffect","text":"","title":"RemoveCompassEffect ()"},{"location":"Level/#removecurse","text":"","title":"RemoveCurse ()"},{"location":"Level/#removecurses","text":"","title":"RemoveCurses ()"},{"location":"Level/#setcanseeeverything","text":"","title":"SetCanSeeEverything ()"},{"location":"Level/#setheartpicked","text":"","title":"SetHeartPicked ()"},{"location":"Level/#setnextstage","text":"","title":"SetNextStage ()"},{"location":"Level/#setredheartdamage","text":"","title":"SetRedHeartDamage ()"},{"location":"Level/#setstage","text":"","title":"SetStage ()"},{"location":"Level/#setstateflag","text":"","title":"SetStateFlag ()"},{"location":"Level/#showmap","text":"","title":"ShowMap ()"},{"location":"Level/#showname","text":"","title":"ShowName ()"},{"location":"Level/#uncoverhiddendoor","text":"","title":"UncoverHiddenDoor ()"},{"location":"Level/#update","text":"","title":"Update ()"},{"location":"Level/#updatevisibility","text":"","title":"UpdateVisibility ()"},{"location":"Level/#dungeonreturnposition","text":"","title":"DungeonReturnPosition ()"},{"location":"Level/#variables","text":"","title":"Variables"},{"location":"Level/#dungeonreturnroomindex","text":"","title":"DungeonReturnRoomIndex"},{"location":"Level/#enterdoor","text":"","title":"EnterDoor"},{"location":"Level/#greedmodewave","text":"","title":"GreedModeWave"},{"location":"Level/#leavedoor","text":"","title":"LeaveDoor"},{"location":"MusicManager/","text":"Class \"MusicManager\" \u2693\ufe0e Functions \u2693\ufe0e Crossfade () \u2693\ufe0e void Crossfade ( MusicManager ID) Disable () \u2693\ufe0e void Disable ( ) DisableLayer () \u2693\ufe0e void DisableLayer ( ) Enable () \u2693\ufe0e void Enable ( ) EnableLayer () \u2693\ufe0e void EnableLayer ( ) Fadein () \u2693\ufe0e void Fadein ( MusicManager ID, float Volume ) Fadeout () \u2693\ufe0e void Fadeout ( ) GetCurrentMusicID () \u2693\ufe0e MusicManager GetCurrentMusicID ( ) GetQueuedMusicID () \u2693\ufe0e MusicManager GetQueuedMusicID ( ) if nothing is queued, return the current music id IsEnabled () \u2693\ufe0e boolean IsEnabled ( ) IsLayerEnabled () \u2693\ufe0e boolean IsLayerEnabled ( ) Pause () \u2693\ufe0e void Pause ( ) PitchSlide () \u2693\ufe0e void PitchSlide ( float TargetPitch) Play () \u2693\ufe0e void Play ( MusicManager ID, float Volume ) Queue () \u2693\ufe0e void Queue ( MusicManager ID) ResetPitch () \u2693\ufe0e void ResetPitch ( ) Resume () \u2693\ufe0e void Resume ( ) UpdateVolume () \u2693\ufe0e void UpdateVolume ( ) This function sets the music volume to the volume defined in the options menu. VolumeSlide () \u2693\ufe0e void VolumeSlide ( float TargetVolume)","title":"MusicManager"},{"location":"MusicManager/#class-musicmanager","text":"","title":"Class \"MusicManager\""},{"location":"MusicManager/#functions","text":"","title":"Functions"},{"location":"MusicManager/#crossfade","text":"","title":"Crossfade ()"},{"location":"MusicManager/#disable","text":"","title":"Disable ()"},{"location":"MusicManager/#disablelayer","text":"","title":"DisableLayer ()"},{"location":"MusicManager/#enable","text":"","title":"Enable ()"},{"location":"MusicManager/#enablelayer","text":"","title":"EnableLayer ()"},{"location":"MusicManager/#fadein","text":"","title":"Fadein ()"},{"location":"MusicManager/#fadeout","text":"","title":"Fadeout ()"},{"location":"MusicManager/#getcurrentmusicid","text":"","title":"GetCurrentMusicID ()"},{"location":"MusicManager/#getqueuedmusicid","text":"","title":"GetQueuedMusicID ()"},{"location":"MusicManager/#isenabled","text":"","title":"IsEnabled ()"},{"location":"MusicManager/#islayerenabled","text":"","title":"IsLayerEnabled ()"},{"location":"MusicManager/#pause","text":"","title":"Pause ()"},{"location":"MusicManager/#pitchslide","text":"","title":"PitchSlide ()"},{"location":"MusicManager/#play","text":"","title":"Play ()"},{"location":"MusicManager/#queue","text":"","title":"Queue ()"},{"location":"MusicManager/#resetpitch","text":"","title":"ResetPitch ()"},{"location":"MusicManager/#resume","text":"","title":"Resume ()"},{"location":"MusicManager/#updatevolume","text":"","title":"UpdateVolume ()"},{"location":"MusicManager/#volumeslide","text":"","title":"VolumeSlide ()"},{"location":"PLACEHOLDER/","text":"","title":"10"},{"location":"PathFinder/","text":"Class \"PathFinder\" \u2693\ufe0e Functions \u2693\ufe0e EvadeTarget () \u2693\ufe0e void EvadeTarget ( Vector TargetPos) FindGridPath () \u2693\ufe0e void FindGridPath ( Vector Pos, float Speed, int PathMarker, boolean UseDirectPath ) GetEvadeMovementCountdown () \u2693\ufe0e int GetEvadeMovementCountdown ( ) GetGridIndex () \u2693\ufe0e int GetGridIndex ( ) HasDirectPath () \u2693\ufe0e boolean HasDirectPath ( ) HasPathToPos () \u2693\ufe0e boolean HasPathToPos ( Vector Pos, boolean IgnorePoop ) Used for safe check if any NPC is behind rocks/pits, doesn't disturb class members. MoveRandomly () \u2693\ufe0e boolean MoveRandomly ( boolean IgnoreStatusEffects) MoveRandomlyAxisAligned () \u2693\ufe0e void MoveRandomlyAxisAligned ( float Speed, boolean IgnoreStatusEffects ) MoveRandomlyBoss () \u2693\ufe0e void MoveRandomlyBoss ( boolean IgnoreStatusEffects) Reset () \u2693\ufe0e void Reset ( ) ResetMovementTarget () \u2693\ufe0e void ResetMovementTarget ( ) SetCanCrushRocks () \u2693\ufe0e void SetCanCrushRocks ( boolean value) UpdateGridIndex () \u2693\ufe0e void UpdateGridIndex ( )","title":"PathFinder"},{"location":"PathFinder/#class-pathfinder","text":"","title":"Class \"PathFinder\""},{"location":"PathFinder/#functions","text":"","title":"Functions"},{"location":"PathFinder/#evadetarget","text":"","title":"EvadeTarget ()"},{"location":"PathFinder/#findgridpath","text":"","title":"FindGridPath ()"},{"location":"PathFinder/#getevademovementcountdown","text":"","title":"GetEvadeMovementCountdown ()"},{"location":"PathFinder/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"PathFinder/#hasdirectpath","text":"","title":"HasDirectPath ()"},{"location":"PathFinder/#haspathtopos","text":"","title":"HasPathToPos ()"},{"location":"PathFinder/#moverandomly","text":"","title":"MoveRandomly ()"},{"location":"PathFinder/#moverandomlyaxisaligned","text":"","title":"MoveRandomlyAxisAligned ()"},{"location":"PathFinder/#moverandomlyboss","text":"","title":"MoveRandomlyBoss ()"},{"location":"PathFinder/#reset","text":"","title":"Reset ()"},{"location":"PathFinder/#resetmovementtarget","text":"","title":"ResetMovementTarget ()"},{"location":"PathFinder/#setcancrushrocks","text":"","title":"SetCanCrushRocks ()"},{"location":"PathFinder/#updategridindex","text":"","title":"UpdateGridIndex ()"},{"location":"PlayerTypes_ActiveItemDesc/","text":"Class \"PlayerTypes::ActiveItemDesc\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e BatteryCharge \u2693\ufe0e int BatteryCharge Charge \u2693\ufe0e int Charge For items like Jars this holds the number of flies/hearts. Item \u2693\ufe0e CollectibleType Item Lock \u2693\ufe0e boolean Lock Helper, avoids double charge on full charge.","title":"PlayerTypes::ActiveItemDesc"},{"location":"PlayerTypes_ActiveItemDesc/#class-playertypesactiveitemdesc","text":"","title":"Class \"PlayerTypes::ActiveItemDesc\""},{"location":"PlayerTypes_ActiveItemDesc/#functions","text":"","title":"Functions"},{"location":"PlayerTypes_ActiveItemDesc/#variables","text":"","title":"Variables"},{"location":"PlayerTypes_ActiveItemDesc/#batterycharge","text":"","title":"BatteryCharge"},{"location":"PlayerTypes_ActiveItemDesc/#charge","text":"","title":"Charge"},{"location":"PlayerTypes_ActiveItemDesc/#item","text":"","title":"Item"},{"location":"PlayerTypes_ActiveItemDesc/#lock","text":"","title":"Lock"},{"location":"PlayerTypes_PosVel/","text":"Class \"PlayerTypes::PosVel\" \u2693\ufe0e Functions \u2693\ufe0e Position () \u2693\ufe0e Vector Position Velocity () \u2693\ufe0e Vector Velocity","title":"PlayerTypes::PosVel"},{"location":"PlayerTypes_PosVel/#class-playertypesposvel","text":"","title":"Class \"PlayerTypes::PosVel\""},{"location":"PlayerTypes_PosVel/#functions","text":"","title":"Functions"},{"location":"PlayerTypes_PosVel/#position","text":"","title":"Position ()"},{"location":"PlayerTypes_PosVel/#velocity","text":"","title":"Velocity ()"},{"location":"ProjectileParams/","text":"Class \"ProjectileParams\" \u2693\ufe0e Functions \u2693\ufe0e ProjectileParams () \u2693\ufe0e void ProjectileParams ( void ) Variables \u2693\ufe0e Acceleration \u2693\ufe0e float Acceleration BulletFlags \u2693\ufe0e int BulletFlags ChangeFlags \u2693\ufe0e int ChangeFlags Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() WRONG PARSING ChangeTimeout \u2693\ufe0e int ChangeTimeout Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() WRONG PARSING ChangeVelocity \u2693\ufe0e float ChangeVelocity Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() WRONG PARSING CircleAngle \u2693\ufe0e float CircleAngle Angle offset used by fire_projectiles PROJECTILES_CIRCLE type emitter. Random by default. CurvingStrength \u2693\ufe0e float CurvingStrength Use very small values for curving like 0.005. DepthOffset \u2693\ufe0e float DepthOffset DotProductLimit \u2693\ufe0e float DotProductLimit Direction bullets are being fired in Dot product of FireDirectionLimit, bullet direction must be >= this value FallingAccelModifier \u2693\ufe0e float FallingAccelModifier FallingSpeedModifier \u2693\ufe0e float FallingSpeedModifier FireDirectionLimit \u2693\ufe0e Vector FireDirectionLimit GridCollision \u2693\ufe0e boolean GridCollision HeightModifier \u2693\ufe0e float HeightModifier HomingStrength \u2693\ufe0e float HomingStrength Multiplier on normal homing strength. Unused if SMART bullet flag is not set. Color \u2693\ufe0e Color Color PositionOffset \u2693\ufe0e Vector PositionOffset Scale \u2693\ufe0e float Scale Spread \u2693\ufe0e float Spread For quad/quint/etc spread shots. TargetPosition \u2693\ufe0e Vector TargetPosition Variant \u2693\ufe0e int Variant VelocityMulti \u2693\ufe0e float VelocityMulti WiggleFrameOffset \u2693\ufe0e int WiggleFrameOffset Used to offset the wiggle wave.","title":"ProjectileParams"},{"location":"ProjectileParams/#class-projectileparams","text":"","title":"Class \"ProjectileParams\""},{"location":"ProjectileParams/#functions","text":"","title":"Functions"},{"location":"ProjectileParams/#projectileparams","text":"","title":"ProjectileParams ()"},{"location":"ProjectileParams/#variables","text":"","title":"Variables"},{"location":"ProjectileParams/#acceleration","text":"","title":"Acceleration"},{"location":"ProjectileParams/#bulletflags","text":"","title":"BulletFlags"},{"location":"ProjectileParams/#changeflags","text":"","title":"ChangeFlags"},{"location":"ProjectileParams/#changetimeout","text":"","title":"ChangeTimeout"},{"location":"ProjectileParams/#changevelocity","text":"","title":"ChangeVelocity"},{"location":"ProjectileParams/#circleangle","text":"","title":"CircleAngle"},{"location":"ProjectileParams/#curvingstrength","text":"","title":"CurvingStrength"},{"location":"ProjectileParams/#depthoffset","text":"","title":"DepthOffset"},{"location":"ProjectileParams/#dotproductlimit","text":"","title":"DotProductLimit"},{"location":"ProjectileParams/#fallingaccelmodifier","text":"","title":"FallingAccelModifier"},{"location":"ProjectileParams/#fallingspeedmodifier","text":"","title":"FallingSpeedModifier"},{"location":"ProjectileParams/#firedirectionlimit","text":"","title":"FireDirectionLimit"},{"location":"ProjectileParams/#gridcollision","text":"","title":"GridCollision"},{"location":"ProjectileParams/#heightmodifier","text":"","title":"HeightModifier"},{"location":"ProjectileParams/#homingstrength","text":"","title":"HomingStrength"},{"location":"ProjectileParams/#color","text":"","title":"Color"},{"location":"ProjectileParams/#positionoffset","text":"","title":"PositionOffset"},{"location":"ProjectileParams/#scale","text":"","title":"Scale"},{"location":"ProjectileParams/#spread","text":"","title":"Spread"},{"location":"ProjectileParams/#targetposition","text":"","title":"TargetPosition"},{"location":"ProjectileParams/#variant","text":"","title":"Variant"},{"location":"ProjectileParams/#velocitymulti","text":"","title":"VelocityMulti"},{"location":"ProjectileParams/#wiggleframeoffset","text":"","title":"WiggleFrameOffset"},{"location":"QueueItemData/","text":"Class \"QueueItemData\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Charge \u2693\ufe0e int Charge Item \u2693\ufe0e Config::Item Item Touched \u2693\ufe0e boolean Touched","title":"QueueItemData"},{"location":"QueueItemData/#class-queueitemdata","text":"","title":"Class \"QueueItemData\""},{"location":"QueueItemData/#functions","text":"","title":"Functions"},{"location":"QueueItemData/#variables","text":"","title":"Variables"},{"location":"QueueItemData/#charge","text":"","title":"Charge"},{"location":"QueueItemData/#item","text":"","title":"Item"},{"location":"QueueItemData/#touched","text":"","title":"Touched"},{"location":"RNG/","text":"Class \"RNG\" \u2693\ufe0e Functions \u2693\ufe0e RNG () \u2693\ufe0e void RNG ( void ) GetSeed () \u2693\ufe0e int GetSeed ( ) Next () \u2693\ufe0e int Next ( ) RandomFloat () \u2693\ufe0e float RandomFloat ( ) RandomInt () \u2693\ufe0e int RandomInt ( int Max) SetSeed () \u2693\ufe0e void SetSeed ( int Seed, int ShiftIdx )","title":"RNG"},{"location":"RNG/#class-rng","text":"","title":"Class \"RNG\""},{"location":"RNG/#functions","text":"","title":"Functions"},{"location":"RNG/#rng","text":"","title":"RNG ()"},{"location":"RNG/#getseed","text":"","title":"GetSeed ()"},{"location":"RNG/#next","text":"","title":"Next ()"},{"location":"RNG/#randomfloat","text":"","title":"RandomFloat ()"},{"location":"RNG/#randomint","text":"","title":"RandomInt ()"},{"location":"RNG/#setseed","text":"","title":"SetSeed ()"},{"location":"Room/","text":"Class \"Room\" \u2693\ufe0e Functions \u2693\ufe0e CheckLine () \u2693\ufe0e boolean CheckLine ( Vector Pos1, Vector Pos2, LinecheckMode Mode, int GridPathThreshold, boolean IgnoreWalls, boolean IgnoreCrushable ) returns true if there is a direct line of sight between Pos1 and Pos2 returns false if the line is obstructed Notes LinecheckModes: 0 : makes the line check collide with anything that impedes ground movement 1 : is a cheaper version of 0, but is not as reliable 2 : is used for explosions, it only collides with walls and indestructible blocks 3 : is a line check that only collides with obstacles that can block projectiles DamageGrid () \u2693\ufe0e boolean DamageGrid ( int Index, int Damage ) Damage Grid Entities currently this concerns GridEntityPoop and GridEntity_Fire returns true if damageable entity was found (and possibly damaged) return false if not used by tears, bombs, some NPCs, etc WRONG PARSING DestroyGrid () \u2693\ufe0e boolean DestroyGrid ( int Index, boolean Immediate ) calls DamageGrid internally to damage Poop/Fire removes rocks and opens secret doors returns true if something was destroyed returns false if not used for explosions mostly EmitBloodFromWalls () \u2693\ufe0e void EmitBloodFromWalls ( int Duration, int Count ) FindFreePickupSpawnPosition () \u2693\ufe0e Vector FindFreePickupSpawnPosition ( Vector Pos, float InitialStep, boolean AvoidActiveEntities ) Starting from Pos, will try to find a free spawn position where a newly spawned pickup item will not collide with already spawned pickup items, or solid grid elements such as rocks, or pits The returned position will be aligned to the grid. If no free position is found, the original position (aligned to the grid) is returned. FindFreeTilePosition () \u2693\ufe0e Vector FindFreeTilePosition ( Vector Pos, float DistanceThreshold ) Finds the nearest free tile based on position Stops immediately if the tile sampled has a squared distance less than DistanceThresholdSQ GetAliveBossesCount () \u2693\ufe0e int GetAliveBossesCount ( ) GetAliveEnemiesCount () \u2693\ufe0e int GetAliveEnemiesCount ( ) GetAwardSeed () \u2693\ufe0e int GetAwardSeed ( ) GetBackdropType () \u2693\ufe0e Backdrop::Backdrop GetBackdropType ( ) Returns the BackdropType (Background) of the current room. Notes BackdropTypes ID Backdrop ID Backdrop 1 Basement 15 Cathedral 2 Cellar 16 Dark Room 3 Burning Basement 17 Chest 4 Caves 18 Mega Satan 5 Catacombs 19 Library 6 Drowned Caves 20 Shop 7 Depths 21 Isaacs Room 8 Necropolis 22 Barren Room 9 Dank Depths 23 Secret Room 10 Womb 24 Dice Room 11 Utero 25 Arcade 12 Scarred Womb 26 Error Room 13 Blue Womb (Hush) 27 Blue Secret 14 Sheol 28 Ultra Greed Shop GetBossID () \u2693\ufe0e BossId GetBossID ( ) This will return the subtype of the current room, since this value is used to determine the boss-portrait to display when entering. GetBottomRightPos () \u2693\ufe0e Vector GetBottomRightPos ( ) returns bottom right position inside of walls GetBrokenWatchState () \u2693\ufe0e int GetBrokenWatchState ( ) GetCenterPos () \u2693\ufe0e Vector GetCenterPos ( ) returns the room center position GetClampedGridIndex () \u2693\ufe0e int GetClampedGridIndex ( Vector Position) converts float position (x,y) to grid index (similar to ingrid) clamps the values if out of bounds GetClampedPosition () \u2693\ufe0e Vector GetClampedPosition ( Vector Pos, float Margin ) returns Pos clamped to room borders inside of walls GetDecorationSeed () \u2693\ufe0e int GetDecorationSeed ( ) GetDeliriumDistance () \u2693\ufe0e int GetDeliriumDistance ( ) GetDevilRoomChance () \u2693\ufe0e float GetDevilRoomChance ( ) GetDoor () \u2693\ufe0e GridEntityDoor GetDoor ( DoorSlot Slot) GetDoorSlotPosition () \u2693\ufe0e Vector GetDoorSlotPosition ( DoorSlot Slot) GetDungeonRockIdx () \u2693\ufe0e int GetDungeonRockIdx ( ) GetEntities () \u2693\ufe0e EntityList GetEntities ( ) GetFrameCount () \u2693\ufe0e int GetFrameCount ( ) GetGridCollision () \u2693\ufe0e GridCollisionClass GetGridCollision ( int GridIndex) Returns the GridCollisionClass of the grid entity at this grid index. WRONG PARSING GetGridCollisionAtPos () \u2693\ufe0e GridCollisionClass GetGridCollisionAtPos ( Vector Pos) Returns the GridCollisionClass of the grid entity at this position in the room. WRONG PARSING GetGridEntity () \u2693\ufe0e GridEntity GetGridEntity ( int Index) Returns the GridEntity at this grid index. WRONG PARSING GetGridEntityFromPos () \u2693\ufe0e GridEntity GetGridEntityFromPos ( Vector Position) Returns the GridEntity at this position in the room. WRONG PARSING GetGridHeight () \u2693\ufe0e int GetGridHeight ( ) GetGridIndex () \u2693\ufe0e int GetGridIndex ( Vector Position) converts float position (x,y) to grid index returns -1 for invalid index GetGridPath () \u2693\ufe0e int GetGridPath ( int Index) GetGridPathFromPos () \u2693\ufe0e int GetGridPathFromPos ( int Index) GetGridPosition () \u2693\ufe0e Vector GetGridPosition ( int GridIndex) converts grid index to float (x,y) position undefined behaviour for invalid index GetGridSize () \u2693\ufe0e int GetGridSize ( ) GetGridWidth () \u2693\ufe0e int GetGridWidth ( ) GetLaserTarget () \u2693\ufe0e Vector GetLaserTarget ( Vector Pos, Vector Dir ) returns the hit position for a laser beam (Technology, Robo-Baby) usually, the first poop, fire, rock, TNT, or wall encountered on a straight line GetLightingAlpha () \u2693\ufe0e float GetLightingAlpha ( ) GetLRoomAreaDesc () \u2693\ufe0e LRoomAreaDesc GetLRoomAreaDesc ( ) GetLRoomTileDesc () \u2693\ufe0e LRoomTileDesc GetLRoomTileDesc ( ) GetNextShockwaveId () \u2693\ufe0e int GetNextShockwaveId ( ) GetRandomPosition () \u2693\ufe0e Vector GetRandomPosition ( float Margin) returns random non tile aligned position GetRandomTileIndex () \u2693\ufe0e int GetRandomTileIndex ( int Seed) GetRedHeartDamage () \u2693\ufe0e boolean GetRedHeartDamage ( ) GetRenderScrollOffset () \u2693\ufe0e Vector GetRenderScrollOffset ( ) The camera scroll offset and screen shake offsets are both represented here. GetRenderSurfaceTopLeft () \u2693\ufe0e Vector GetRenderSurfaceTopLeft ( ) The position the floor and wall textures will be rendered at. GetRoomConfigStage () \u2693\ufe0e RoomConfig::Stage GetRoomConfigStage ( ) returns the original stage the room was designed for (useful for The Void) GetRoomShape () \u2693\ufe0e RoomShape GetRoomShape ( ) GetSecondBossID () \u2693\ufe0e BossId GetSecondBossID ( ) GetSeededCollectible () \u2693\ufe0e CollectibleType GetSeededCollectible ( int Seed) GetShopLevel () \u2693\ufe0e int GetShopLevel ( ) GetSpawnSeed () \u2693\ufe0e int GetSpawnSeed ( ) GetTintedRockIdx () \u2693\ufe0e int GetTintedRockIdx ( ) GetTopLeftPos () \u2693\ufe0e Vector GetTopLeftPos ( ) returns top left position inside of walls GetType () \u2693\ufe0e RoomType GetType ( ) HasSlowDown () \u2693\ufe0e boolean HasSlowDown ( ) HasTriggerPressurePlates () \u2693\ufe0e boolean HasTriggerPressurePlates ( ) HasWater () \u2693\ufe0e boolean HasWater ( ) HasWaterPits () \u2693\ufe0e boolean HasWaterPits ( ) IsAmbushActive () \u2693\ufe0e boolean IsAmbushActive ( ) IsAmbushDone () \u2693\ufe0e boolean IsAmbushDone ( ) IsClear () \u2693\ufe0e boolean IsClear ( ) IsCurrentRoomLastBoss () \u2693\ufe0e boolean IsCurrentRoomLastBoss ( ) IsDoorSlotAllowed () \u2693\ufe0e boolean IsDoorSlotAllowed ( DoorSlot Slot) Returns whether this room design may have a door at a given position, disregarding whether those doors exist. IsFirstEnemyDead () \u2693\ufe0e boolean IsFirstEnemyDead ( ) IsFirstVisit () \u2693\ufe0e boolean IsFirstVisit ( ) Broken Watch Room State - 0 = no watch effect, 1 = speed down, 2 = speed up. WRONG PARSING IsInitialized () \u2693\ufe0e boolean IsInitialized ( ) IsLShapedRoom () \u2693\ufe0e boolean IsLShapedRoom ( ) IsPositionInRoom () \u2693\ufe0e boolean IsPositionInRoom ( Vector Pos, float Margin ) IsSacrificeDone () \u2693\ufe0e boolean IsSacrificeDone ( ) KeepDoorsClosed () \u2693\ufe0e void KeepDoorsClosed ( ) MamaMegaExplossion () \u2693\ufe0e void MamaMegaExplossion ( ) PlayMusic () \u2693\ufe0e void PlayMusic ( ) RemoveDoor () \u2693\ufe0e void RemoveDoor ( DoorSlot Slot) RemoveGridEntity () \u2693\ufe0e void RemoveGridEntity ( int GridIndex, int PathTrail, boolean KeepDecoration ) Render () \u2693\ufe0e void Render ( ) RespawnEnemies () \u2693\ufe0e void RespawnEnemies ( ) for D7 collectible ScreenWrapPosition () \u2693\ufe0e Vector ScreenWrapPosition ( Vector Pos, float Margin ) Returns Pos, screen-wrapped (if it is just outside the room on the right it will be moved to the left side of the room, etc) Notes This only wraps the point once, so if it has crossed multiple wrapping planes it will only wrap on the one it's closest to. For wrapping a position that has crossed two planes (outside a room in the top left for instance) call this function iteratively. SetAmbushDone () \u2693\ufe0e void SetAmbushDone ( boolean Value) SetBrokenWatchState () \u2693\ufe0e void SetBrokenWatchState ( int State) SetCardAgainstHumanity () \u2693\ufe0e void SetCardAgainstHumanity ( ) SetClear () \u2693\ufe0e void SetClear ( boolean Clear) Needed for angel room, so the clear flag can be set to false when the angel spawns void SetClear(bool Clear) {m_Desc->Clear = Clear;} SetFirstEnemyDead () \u2693\ufe0e void SetFirstEnemyDead ( boolean Value) SetFloorColor () \u2693\ufe0e void SetFloorColor ( Color FloorColor) Allows you to apply a color modifier to the floor texture of the current room. Example Code This code changes the floorcolor to red. 1 Game () : GetRoom () : SetFloorColor ( Color ( 1 , 1 , 1 , 1 , 255 , 0 , 0 )) SetGridPath () \u2693\ufe0e boolean SetGridPath ( int Index, int Value ) SetRedHeartDamage () \u2693\ufe0e void SetRedHeartDamage ( ) SetSacrificeDone () \u2693\ufe0e void SetSacrificeDone ( boolean Done) SetShockwaveParam () \u2693\ufe0e void SetShockwaveParam ( int ShockwaveId, ShockwaveParams Params ) SetSlowDown () \u2693\ufe0e void SetSlowDown ( int Duration) SetWallColor () \u2693\ufe0e void SetWallColor ( Color WallColor) Allows you to apply a color modifier to the wall texture of the current room. Example Code This code changes the wallcolor to red. 1 Game () : GetRoom () : SetWallColor ( Color ( 1 , 1 , 1 , 1 , 255 , 0 , 0 )) ShopReshuffle () \u2693\ufe0e void ShopReshuffle ( boolean KeepCollectibleIdx, boolean ReselectSaleItem ) ShopRestockFull () \u2693\ufe0e void ShopRestockFull ( ) ShopRestockPartial () \u2693\ufe0e void ShopRestockPartial ( ) SpawnClearAward () \u2693\ufe0e void SpawnClearAward ( ) SpawnGridEntity () \u2693\ufe0e boolean SpawnGridEntity ( int GridIndex, GridEntityType Type, int Variant, int Seed, int VarData ) TryMakeBridge () \u2693\ufe0e boolean TryMakeBridge ( GridEntity pit) TryPlaceLadder () \u2693\ufe0e void TryPlaceLadder ( Vector PlayerPos, Vector PlayerVelocity, Entity Ladder ) TrySpawnBlueWombDoor () \u2693\ufe0e boolean TrySpawnBlueWombDoor ( boolean FirstTime, boolean IgnoreTime ) TrySpawnBossRushDoor () \u2693\ufe0e boolean TrySpawnBossRushDoor ( boolean IgnoreTime) TrySpawnDevilRoomDoor () \u2693\ufe0e boolean TrySpawnDevilRoomDoor ( boolean Animate) TrySpawnMegaSatanRoomDoor () \u2693\ufe0e boolean TrySpawnMegaSatanRoomDoor ( ) TrySpawnTheVoidDoor () \u2693\ufe0e boolean TrySpawnTheVoidDoor ( ) TurnGold () \u2693\ufe0e void TurnGold ( ) Update () \u2693\ufe0e void Update ( ) Updates the current room. Notes Calling this function is NOT needed to apply changes! This function is pretty useless WorldToScreenPosition () \u2693\ufe0e Vector WorldToScreenPosition ( Vector WorldPos) Converts an entity position to one that can be used to render to the screen.","title":"Room"},{"location":"Room/#class-room","text":"","title":"Class \"Room\""},{"location":"Room/#functions","text":"","title":"Functions"},{"location":"Room/#checkline","text":"","title":"CheckLine ()"},{"location":"Room/#damagegrid","text":"","title":"DamageGrid ()"},{"location":"Room/#destroygrid","text":"","title":"DestroyGrid ()"},{"location":"Room/#emitbloodfromwalls","text":"","title":"EmitBloodFromWalls ()"},{"location":"Room/#findfreepickupspawnposition","text":"","title":"FindFreePickupSpawnPosition ()"},{"location":"Room/#findfreetileposition","text":"","title":"FindFreeTilePosition ()"},{"location":"Room/#getalivebossescount","text":"","title":"GetAliveBossesCount ()"},{"location":"Room/#getaliveenemiescount","text":"","title":"GetAliveEnemiesCount ()"},{"location":"Room/#getawardseed","text":"","title":"GetAwardSeed ()"},{"location":"Room/#getbackdroptype","text":"","title":"GetBackdropType ()"},{"location":"Room/#getbossid","text":"","title":"GetBossID ()"},{"location":"Room/#getbottomrightpos","text":"","title":"GetBottomRightPos ()"},{"location":"Room/#getbrokenwatchstate","text":"","title":"GetBrokenWatchState ()"},{"location":"Room/#getcenterpos","text":"","title":"GetCenterPos ()"},{"location":"Room/#getclampedgridindex","text":"","title":"GetClampedGridIndex ()"},{"location":"Room/#getclampedposition","text":"","title":"GetClampedPosition ()"},{"location":"Room/#getdecorationseed","text":"","title":"GetDecorationSeed ()"},{"location":"Room/#getdeliriumdistance","text":"","title":"GetDeliriumDistance ()"},{"location":"Room/#getdevilroomchance","text":"","title":"GetDevilRoomChance ()"},{"location":"Room/#getdoor","text":"","title":"GetDoor ()"},{"location":"Room/#getdoorslotposition","text":"","title":"GetDoorSlotPosition ()"},{"location":"Room/#getdungeonrockidx","text":"","title":"GetDungeonRockIdx ()"},{"location":"Room/#getentities","text":"","title":"GetEntities ()"},{"location":"Room/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Room/#getgridcollision","text":"","title":"GetGridCollision ()"},{"location":"Room/#getgridcollisionatpos","text":"","title":"GetGridCollisionAtPos ()"},{"location":"Room/#getgridentity","text":"","title":"GetGridEntity ()"},{"location":"Room/#getgridentityfrompos","text":"","title":"GetGridEntityFromPos ()"},{"location":"Room/#getgridheight","text":"","title":"GetGridHeight ()"},{"location":"Room/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"Room/#getgridpath","text":"","title":"GetGridPath ()"},{"location":"Room/#getgridpathfrompos","text":"","title":"GetGridPathFromPos ()"},{"location":"Room/#getgridposition","text":"","title":"GetGridPosition ()"},{"location":"Room/#getgridsize","text":"","title":"GetGridSize ()"},{"location":"Room/#getgridwidth","text":"","title":"GetGridWidth ()"},{"location":"Room/#getlasertarget","text":"","title":"GetLaserTarget ()"},{"location":"Room/#getlightingalpha","text":"","title":"GetLightingAlpha ()"},{"location":"Room/#getlroomareadesc","text":"","title":"GetLRoomAreaDesc ()"},{"location":"Room/#getlroomtiledesc","text":"","title":"GetLRoomTileDesc ()"},{"location":"Room/#getnextshockwaveid","text":"","title":"GetNextShockwaveId ()"},{"location":"Room/#getrandomposition","text":"","title":"GetRandomPosition ()"},{"location":"Room/#getrandomtileindex","text":"","title":"GetRandomTileIndex ()"},{"location":"Room/#getredheartdamage","text":"","title":"GetRedHeartDamage ()"},{"location":"Room/#getrenderscrolloffset","text":"","title":"GetRenderScrollOffset ()"},{"location":"Room/#getrendersurfacetopleft","text":"","title":"GetRenderSurfaceTopLeft ()"},{"location":"Room/#getroomconfigstage","text":"","title":"GetRoomConfigStage ()"},{"location":"Room/#getroomshape","text":"","title":"GetRoomShape ()"},{"location":"Room/#getsecondbossid","text":"","title":"GetSecondBossID ()"},{"location":"Room/#getseededcollectible","text":"","title":"GetSeededCollectible ()"},{"location":"Room/#getshoplevel","text":"","title":"GetShopLevel ()"},{"location":"Room/#getspawnseed","text":"","title":"GetSpawnSeed ()"},{"location":"Room/#gettintedrockidx","text":"","title":"GetTintedRockIdx ()"},{"location":"Room/#gettopleftpos","text":"","title":"GetTopLeftPos ()"},{"location":"Room/#gettype","text":"","title":"GetType ()"},{"location":"Room/#hasslowdown","text":"","title":"HasSlowDown ()"},{"location":"Room/#hastriggerpressureplates","text":"","title":"HasTriggerPressurePlates ()"},{"location":"Room/#haswater","text":"","title":"HasWater ()"},{"location":"Room/#haswaterpits","text":"","title":"HasWaterPits ()"},{"location":"Room/#isambushactive","text":"","title":"IsAmbushActive ()"},{"location":"Room/#isambushdone","text":"","title":"IsAmbushDone ()"},{"location":"Room/#isclear","text":"","title":"IsClear ()"},{"location":"Room/#iscurrentroomlastboss","text":"","title":"IsCurrentRoomLastBoss ()"},{"location":"Room/#isdoorslotallowed","text":"","title":"IsDoorSlotAllowed ()"},{"location":"Room/#isfirstenemydead","text":"","title":"IsFirstEnemyDead ()"},{"location":"Room/#isfirstvisit","text":"","title":"IsFirstVisit ()"},{"location":"Room/#isinitialized","text":"","title":"IsInitialized ()"},{"location":"Room/#islshapedroom","text":"","title":"IsLShapedRoom ()"},{"location":"Room/#ispositioninroom","text":"","title":"IsPositionInRoom ()"},{"location":"Room/#issacrificedone","text":"","title":"IsSacrificeDone ()"},{"location":"Room/#keepdoorsclosed","text":"","title":"KeepDoorsClosed ()"},{"location":"Room/#mamamegaexplossion","text":"","title":"MamaMegaExplossion ()"},{"location":"Room/#playmusic","text":"","title":"PlayMusic ()"},{"location":"Room/#removedoor","text":"","title":"RemoveDoor ()"},{"location":"Room/#removegridentity","text":"","title":"RemoveGridEntity ()"},{"location":"Room/#render","text":"","title":"Render ()"},{"location":"Room/#respawnenemies","text":"","title":"RespawnEnemies ()"},{"location":"Room/#screenwrapposition","text":"","title":"ScreenWrapPosition ()"},{"location":"Room/#setambushdone","text":"","title":"SetAmbushDone ()"},{"location":"Room/#setbrokenwatchstate","text":"","title":"SetBrokenWatchState ()"},{"location":"Room/#setcardagainsthumanity","text":"","title":"SetCardAgainstHumanity ()"},{"location":"Room/#setclear","text":"","title":"SetClear ()"},{"location":"Room/#setfirstenemydead","text":"","title":"SetFirstEnemyDead ()"},{"location":"Room/#setfloorcolor","text":"","title":"SetFloorColor ()"},{"location":"Room/#setgridpath","text":"","title":"SetGridPath ()"},{"location":"Room/#setredheartdamage","text":"","title":"SetRedHeartDamage ()"},{"location":"Room/#setsacrificedone","text":"","title":"SetSacrificeDone ()"},{"location":"Room/#setshockwaveparam","text":"","title":"SetShockwaveParam ()"},{"location":"Room/#setslowdown","text":"","title":"SetSlowDown ()"},{"location":"Room/#setwallcolor","text":"","title":"SetWallColor ()"},{"location":"Room/#shopreshuffle","text":"","title":"ShopReshuffle ()"},{"location":"Room/#shoprestockfull","text":"","title":"ShopRestockFull ()"},{"location":"Room/#shoprestockpartial","text":"","title":"ShopRestockPartial ()"},{"location":"Room/#spawnclearaward","text":"","title":"SpawnClearAward ()"},{"location":"Room/#spawngridentity","text":"","title":"SpawnGridEntity ()"},{"location":"Room/#trymakebridge","text":"","title":"TryMakeBridge ()"},{"location":"Room/#tryplaceladder","text":"","title":"TryPlaceLadder ()"},{"location":"Room/#tryspawnbluewombdoor","text":"","title":"TrySpawnBlueWombDoor ()"},{"location":"Room/#tryspawnbossrushdoor","text":"","title":"TrySpawnBossRushDoor ()"},{"location":"Room/#tryspawndevilroomdoor","text":"","title":"TrySpawnDevilRoomDoor ()"},{"location":"Room/#tryspawnmegasatanroomdoor","text":"","title":"TrySpawnMegaSatanRoomDoor ()"},{"location":"Room/#tryspawnthevoiddoor","text":"","title":"TrySpawnTheVoidDoor ()"},{"location":"Room/#turngold","text":"","title":"TurnGold ()"},{"location":"Room/#update","text":"","title":"Update ()"},{"location":"Room/#worldtoscreenposition","text":"","title":"WorldToScreenPosition ()"},{"location":"RoomConfig_Entry/","text":"Class \"RoomConfig::Entry\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Subtype \u2693\ufe0e u16 Subtype Type \u2693\ufe0e RoomType Type Variant \u2693\ufe0e u16 Variant Weight \u2693\ufe0e float Weight","title":"RoomConfig::Entry"},{"location":"RoomConfig_Entry/#class-roomconfigentry","text":"","title":"Class \"RoomConfig::Entry\""},{"location":"RoomConfig_Entry/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Entry/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Entry/#subtype","text":"","title":"Subtype"},{"location":"RoomConfig_Entry/#type","text":"","title":"Type"},{"location":"RoomConfig_Entry/#variant","text":"","title":"Variant"},{"location":"RoomConfig_Entry/#weight","text":"","title":"Weight"},{"location":"RoomConfig_Room/","text":"Class \"RoomConfig::Room\" \u2693\ufe0e Functions \u2693\ufe0e Difficulty () \u2693\ufe0e Difficulty Difficulty Variables \u2693\ufe0e Doors \u2693\ufe0e IntList Doors Height \u2693\ufe0e int Height InitialWeight \u2693\ufe0e float InitialWeight Name \u2693\ufe0e string Name Shape \u2693\ufe0e RoomShape Shape SpawnCount \u2693\ufe0e int SpawnCount Spawns \u2693\ufe0e SpawnList Spawns StageID \u2693\ufe0e s32 StageID Subtype \u2693\ufe0e int Subtype Type \u2693\ufe0e RoomType Type Variant \u2693\ufe0e int Variant Weight \u2693\ufe0e float Weight Width \u2693\ufe0e int Width","title":"RoomConfig::Room"},{"location":"RoomConfig_Room/#class-roomconfigroom","text":"","title":"Class \"RoomConfig::Room\""},{"location":"RoomConfig_Room/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Room/#difficulty","text":"","title":"Difficulty ()"},{"location":"RoomConfig_Room/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Room/#doors","text":"","title":"Doors"},{"location":"RoomConfig_Room/#height","text":"","title":"Height"},{"location":"RoomConfig_Room/#initialweight","text":"","title":"InitialWeight"},{"location":"RoomConfig_Room/#name","text":"","title":"Name"},{"location":"RoomConfig_Room/#shape","text":"","title":"Shape"},{"location":"RoomConfig_Room/#spawncount","text":"","title":"SpawnCount"},{"location":"RoomConfig_Room/#spawns","text":"","title":"Spawns"},{"location":"RoomConfig_Room/#stageid","text":"","title":"StageID"},{"location":"RoomConfig_Room/#subtype","text":"","title":"Subtype"},{"location":"RoomConfig_Room/#type","text":"","title":"Type"},{"location":"RoomConfig_Room/#variant","text":"","title":"Variant"},{"location":"RoomConfig_Room/#weight","text":"","title":"Weight"},{"location":"RoomConfig_Room/#width","text":"","title":"Width"},{"location":"RoomConfig_Spawn/","text":"Class \"RoomConfig::Spawn\" \u2693\ufe0e Functions \u2693\ufe0e PickEntry () \u2693\ufe0e Entry PickEntry ( float r) r is a value between 0 and 1 Variables \u2693\ufe0e EntryCount \u2693\ufe0e u8 EntryCount SumWeights \u2693\ufe0e float SumWeights X \u2693\ufe0e s16 X Y \u2693\ufe0e s16 Y","title":"RoomConfig::Spawn"},{"location":"RoomConfig_Spawn/#class-roomconfigspawn","text":"","title":"Class \"RoomConfig::Spawn\""},{"location":"RoomConfig_Spawn/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Spawn/#pickentry","text":"","title":"PickEntry ()"},{"location":"RoomConfig_Spawn/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Spawn/#entrycount","text":"","title":"EntryCount"},{"location":"RoomConfig_Spawn/#sumweights","text":"","title":"SumWeights"},{"location":"RoomConfig_Spawn/#x","text":"","title":"X"},{"location":"RoomConfig_Spawn/#y","text":"","title":"Y"},{"location":"RoomDescriptor/","text":"Class \"RoomDescriptor\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AllowedDoors \u2693\ufe0e DoorSet AllowedDoors Contains just on load swapped data (in cases like minibosses, or other such events) AwardSeed \u2693\ufe0e int AwardSeed used to spawn clear awards (normal, miniboss, boss rooms) and initialize shop items (shop, devil rooms) ChallengeDone \u2693\ufe0e boolean ChallengeDone Clear \u2693\ufe0e boolean Clear ClearCount \u2693\ufe0e int ClearCount room is clear, don't spawn enemies when visiting bool Clear; Data \u2693\ufe0e RoomDescriptorData Data DecorationSeed \u2693\ufe0e int DecorationSeed bool AltBossMusic; used for cosmetic stuff like backdrops, room decorations, shopkeeper skins DeliriumDistance \u2693\ufe0e int DeliriumDistance Helper for The Void stage, holds the distance to the Delirium boss in room nr. DisplayFlags \u2693\ufe0e int DisplayFlags Indicates what is visible on the minimap. Display Flags (bitwise): 1 & lt ; & lt ; - 1 -- Invisible 1 & lt ; & lt ; 0 -- Visible 1 & lt ; & lt ; 1 -- Room Shadow 1 & lt ; & lt ; 2 -- Show Icon The flags are hard to interpret, but here are some examples: 000 = invisible, this is how most rooms start 101 = standard room visibility, this includes rooms that are adjacent and you haven't actively visited. This will usually show icons. 011 = secret room, locked rooms, sac rooms pre-entry* 111 = 011 rooms after entry, but also the rooms directly adjacent to them* (applied after entry) If you have spelunker's hat, bit 1 is completely unused. All special rooms will have the normal behavior of either 000 or 101. iirc this is unique to spelunker's hat, mapping items follow the normal rules. From this my best guess is that bits 1 and 2 are special rendering (display hehe) flags that may have more meaning down below. The important bit for using them is minding that they're used differently mostly for special rooms. As far as I've seen, 001 is completely unused. 010, 100, and 110 may be used for compass or blue map, I don't remember. I think they use 100 GridIndex \u2693\ufe0e int GridIndex index in the level grid (always top left) Notes This will always return the top left coordinate of the room on the levelgrid. Therefore, it will return an index not part of the actual room, when checking this value for J-shaped rooms. (See graphic below) HasWater \u2693\ufe0e boolean HasWater ListIndex \u2693\ufe0e int ListIndex index in the room list NoReward \u2693\ufe0e boolean NoReward OverrideData \u2693\ufe0e RoomDescriptorData OverrideData Tim's reminder to himself: The room variant is in Data. Because Room::Init uses a mix of datas, one from level layout and one from replacement data like minibosses, we need to hold the new room data somewhere. PitsCount \u2693\ufe0e int PitsCount PoopCount \u2693\ufe0e int PoopCount bool HasWater; PressurePlatesTriggered \u2693\ufe0e boolean PressurePlatesTriggered SacrificeDone \u2693\ufe0e boolean SacrificeDone SafeGridIndex \u2693\ufe0e int SafeGridIndex index in the level grid (not always top left, but is guaranteed to point to the room. this is important for LTL shapes!) Notes This will always return the top left coordinate of the room on the levelgrid, except for J-shaped rooms, where it returns the top right index. (see graphic below) ShopItemDiscountIdx \u2693\ufe0e int ShopItemDiscountIdx ShopItemIdx \u2693\ufe0e int ShopItemIdx SpawnSeed \u2693\ufe0e int SpawnSeed used to spawn entities at room load and initialize enemy drop seeds SurpriseMiniboss \u2693\ufe0e boolean SurpriseMiniboss VisitedCount \u2693\ufe0e int VisitedCount how often the room has been visited","title":"RoomDescriptor"},{"location":"RoomDescriptor/#class-roomdescriptor","text":"","title":"Class \"RoomDescriptor\""},{"location":"RoomDescriptor/#functions","text":"","title":"Functions"},{"location":"RoomDescriptor/#variables","text":"","title":"Variables"},{"location":"RoomDescriptor/#alloweddoors","text":"","title":"AllowedDoors"},{"location":"RoomDescriptor/#awardseed","text":"","title":"AwardSeed"},{"location":"RoomDescriptor/#challengedone","text":"","title":"ChallengeDone"},{"location":"RoomDescriptor/#clear","text":"","title":"Clear"},{"location":"RoomDescriptor/#clearcount","text":"","title":"ClearCount"},{"location":"RoomDescriptor/#data","text":"","title":"Data"},{"location":"RoomDescriptor/#decorationseed","text":"","title":"DecorationSeed"},{"location":"RoomDescriptor/#deliriumdistance","text":"","title":"DeliriumDistance"},{"location":"RoomDescriptor/#displayflags","text":"","title":"DisplayFlags"},{"location":"RoomDescriptor/#gridindex","text":"","title":"GridIndex"},{"location":"RoomDescriptor/#haswater","text":"","title":"HasWater"},{"location":"RoomDescriptor/#listindex","text":"","title":"ListIndex"},{"location":"RoomDescriptor/#noreward","text":"","title":"NoReward"},{"location":"RoomDescriptor/#overridedata","text":"","title":"OverrideData"},{"location":"RoomDescriptor/#pitscount","text":"","title":"PitsCount"},{"location":"RoomDescriptor/#poopcount","text":"","title":"PoopCount"},{"location":"RoomDescriptor/#pressureplatestriggered","text":"","title":"PressurePlatesTriggered"},{"location":"RoomDescriptor/#sacrificedone","text":"","title":"SacrificeDone"},{"location":"RoomDescriptor/#safegridindex","text":"","title":"SafeGridIndex"},{"location":"RoomDescriptor/#shopitemdiscountidx","text":"","title":"ShopItemDiscountIdx"},{"location":"RoomDescriptor/#shopitemidx","text":"","title":"ShopItemIdx"},{"location":"RoomDescriptor/#spawnseed","text":"","title":"SpawnSeed"},{"location":"RoomDescriptor/#surpriseminiboss","text":"","title":"SurpriseMiniboss"},{"location":"RoomDescriptor/#visitedcount","text":"","title":"VisitedCount"},{"location":"RoomDescriptorData/","text":"Class \"RoomDescriptorData\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e StageID \u2693\ufe0e int StageID Spawns \u2693\ufe0e userdata Spawns Bugs Uses userdata, which is a datatype that cant be read/altered via LUA. Type \u2693\ufe0e int Type Difficulty \u2693\ufe0e int Difficulty Subtype \u2693\ufe0e int Subtype Variant \u2693\ufe0e int Variant Name \u2693\ufe0e string Name Shape \u2693\ufe0e RoomShape Shape SpawnCount \u2693\ufe0e int SpawnCount Height \u2693\ufe0e int Height InitialWeight \u2693\ufe0e int InitialWeight Doors \u2693\ufe0e int Doors Weight \u2693\ufe0e int Weight Width \u2693\ufe0e int Width","title":"RoomDescriptorData"},{"location":"RoomDescriptorData/#class-roomdescriptordata","text":"","title":"Class \"RoomDescriptorData\""},{"location":"RoomDescriptorData/#functions","text":"","title":"Functions"},{"location":"RoomDescriptorData/#variables","text":"","title":"Variables"},{"location":"RoomDescriptorData/#stageid","text":"","title":"StageID"},{"location":"RoomDescriptorData/#spawns","text":"","title":"Spawns"},{"location":"RoomDescriptorData/#type","text":"","title":"Type"},{"location":"RoomDescriptorData/#difficulty","text":"","title":"Difficulty"},{"location":"RoomDescriptorData/#subtype","text":"","title":"Subtype"},{"location":"RoomDescriptorData/#variant","text":"","title":"Variant"},{"location":"RoomDescriptorData/#name","text":"","title":"Name"},{"location":"RoomDescriptorData/#shape","text":"","title":"Shape"},{"location":"RoomDescriptorData/#spawncount","text":"","title":"SpawnCount"},{"location":"RoomDescriptorData/#height","text":"","title":"Height"},{"location":"RoomDescriptorData/#initialweight","text":"","title":"InitialWeight"},{"location":"RoomDescriptorData/#doors","text":"","title":"Doors"},{"location":"RoomDescriptorData/#weight","text":"","title":"Weight"},{"location":"RoomDescriptorData/#width","text":"","title":"Width"},{"location":"SFXManager/","text":"Class \"SFXManager\" \u2693\ufe0e Functions \u2693\ufe0e AdjustPitch () \u2693\ufe0e void AdjustPitch ( SoundEffect ID, float Pitch ) mostly useful for repeating sounds AdjustVolume () \u2693\ufe0e void AdjustVolume ( SoundEffect ID, float Volume ) mostly useful for repeating sounds GetAmbientSoundVolume () \u2693\ufe0e float GetAmbientSoundVolume ( SoundEffect ID) IsPlaying () \u2693\ufe0e boolean IsPlaying ( SoundEffect ID) Play () \u2693\ufe0e void Play ( SoundEffect ID, float Volume, int FrameDelay, boolean Loop, float Pitch ) Preload () \u2693\ufe0e void Preload ( SoundEffect ID) SetAmbientSound () \u2693\ufe0e void SetAmbientSound ( SoundEffect ID, float Volume, float Pitch ) Stop () \u2693\ufe0e void Stop ( SoundEffect ID) StopLoopingSounds () \u2693\ufe0e void StopLoopingSounds ( )","title":"SFXManager"},{"location":"SFXManager/#class-sfxmanager","text":"","title":"Class \"SFXManager\""},{"location":"SFXManager/#functions","text":"","title":"Functions"},{"location":"SFXManager/#adjustpitch","text":"","title":"AdjustPitch ()"},{"location":"SFXManager/#adjustvolume","text":"","title":"AdjustVolume ()"},{"location":"SFXManager/#getambientsoundvolume","text":"","title":"GetAmbientSoundVolume ()"},{"location":"SFXManager/#isplaying","text":"","title":"IsPlaying ()"},{"location":"SFXManager/#play","text":"","title":"Play ()"},{"location":"SFXManager/#preload","text":"","title":"Preload ()"},{"location":"SFXManager/#setambientsound","text":"","title":"SetAmbientSound ()"},{"location":"SFXManager/#stop","text":"","title":"Stop ()"},{"location":"SFXManager/#stoploopingsounds","text":"","title":"StopLoopingSounds ()"},{"location":"Seeds/","text":"Class \"Seeds\" \u2693\ufe0e Functions \u2693\ufe0e AddSeedEffect () \u2693\ufe0e void AddSeedEffect ( SeedEffect Value) CanAddSeedEffect () \u2693\ufe0e boolean CanAddSeedEffect ( SeedEffect Value) ClearSeedEffects () \u2693\ufe0e void ClearSeedEffects ( ) ClearStartSeed () \u2693\ufe0e void ClearStartSeed ( ) CountSeedEffects () \u2693\ufe0e int CountSeedEffects ( ) CountUnlockedSeedEffects () \u2693\ufe0e static int CountUnlockedSeedEffects ( ) ForgetStageSeed () \u2693\ufe0e void ForgetStageSeed ( LevelStage Stage) GetNextSeed () \u2693\ufe0e int GetNextSeed ( ) GetPlayerInitSeed () \u2693\ufe0e int GetPlayerInitSeed ( ) GetSeedEffect () \u2693\ufe0e static SeedEffect GetSeedEffect ( string str) GetStageSeed () \u2693\ufe0e int GetStageSeed ( LevelStage Stage) GetStartSeed () \u2693\ufe0e int GetStartSeed ( ) GetStartSeedString () \u2693\ufe0e string GetStartSeedString ( ) HasSeedEffect () \u2693\ufe0e boolean HasSeedEffect ( SeedEffect Value) InitSeedInfo () \u2693\ufe0e static InitSeedInfo ( ) IsCustomRun () \u2693\ufe0e boolean IsCustomRun ( ) Returns true if the player is in a challenge run or a seeded run. IsInitialized () \u2693\ufe0e boolean IsInitialized ( ) IsSeedComboBanned () \u2693\ufe0e boolean IsSeedComboBanned ( SeedEffect Seed1, SeedEffect Seed2 ) IsSpecialSeed () \u2693\ufe0e static boolean IsSpecialSeed ( string str) IsStringValidSeed () \u2693\ufe0e static boolean IsStringValidSeed ( string str) RemoveBlockingSeedEffects () \u2693\ufe0e void RemoveBlockingSeedEffects ( SeedEffect Value) Removes seeds that are banned in conjunction with the given seed. RemoveSeedEffect () \u2693\ufe0e void RemoveSeedEffect ( SeedEffect Value) Reset () \u2693\ufe0e void Reset ( ) Removes all seed effects, only goes into effect when the run is restarted Restart () \u2693\ufe0e void Restart ( Challenge CurrentChallenge) Re-selects a random start seed but only if the start seed was not custom. Seed2String () \u2693\ufe0e static string Seed2String ( int seed) SetStartSeed () \u2693\ufe0e void SetStartSeed ( string StartSeed) Empty string means we will pick a new random seed. String2Seed () \u2693\ufe0e static int String2Seed ( string str) void RestoreGameState(const GameState& State); void SaveGameState(GameState& State);","title":"Seeds"},{"location":"Seeds/#class-seeds","text":"","title":"Class \"Seeds\""},{"location":"Seeds/#functions","text":"","title":"Functions"},{"location":"Seeds/#addseedeffect","text":"","title":"AddSeedEffect ()"},{"location":"Seeds/#canaddseedeffect","text":"","title":"CanAddSeedEffect ()"},{"location":"Seeds/#clearseedeffects","text":"","title":"ClearSeedEffects ()"},{"location":"Seeds/#clearstartseed","text":"","title":"ClearStartSeed ()"},{"location":"Seeds/#countseedeffects","text":"","title":"CountSeedEffects ()"},{"location":"Seeds/#countunlockedseedeffects","text":"","title":"CountUnlockedSeedEffects ()"},{"location":"Seeds/#forgetstageseed","text":"","title":"ForgetStageSeed ()"},{"location":"Seeds/#getnextseed","text":"","title":"GetNextSeed ()"},{"location":"Seeds/#getplayerinitseed","text":"","title":"GetPlayerInitSeed ()"},{"location":"Seeds/#getseedeffect","text":"","title":"GetSeedEffect ()"},{"location":"Seeds/#getstageseed","text":"","title":"GetStageSeed ()"},{"location":"Seeds/#getstartseed","text":"","title":"GetStartSeed ()"},{"location":"Seeds/#getstartseedstring","text":"","title":"GetStartSeedString ()"},{"location":"Seeds/#hasseedeffect","text":"","title":"HasSeedEffect ()"},{"location":"Seeds/#initseedinfo","text":"","title":"InitSeedInfo ()"},{"location":"Seeds/#iscustomrun","text":"","title":"IsCustomRun ()"},{"location":"Seeds/#isinitialized","text":"","title":"IsInitialized ()"},{"location":"Seeds/#isseedcombobanned","text":"","title":"IsSeedComboBanned ()"},{"location":"Seeds/#isspecialseed","text":"","title":"IsSpecialSeed ()"},{"location":"Seeds/#isstringvalidseed","text":"","title":"IsStringValidSeed ()"},{"location":"Seeds/#removeblockingseedeffects","text":"","title":"RemoveBlockingSeedEffects ()"},{"location":"Seeds/#removeseedeffect","text":"","title":"RemoveSeedEffect ()"},{"location":"Seeds/#reset","text":"","title":"Reset ()"},{"location":"Seeds/#restart","text":"","title":"Restart ()"},{"location":"Seeds/#seed2string","text":"","title":"Seed2String ()"},{"location":"Seeds/#setstartseed","text":"","title":"SetStartSeed ()"},{"location":"Seeds/#string2seed","text":"","title":"String2Seed ()"},{"location":"ShockwaveParams/","text":"Class \"ShockwaveParams\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Age \u2693\ufe0e int Age LifeSpan \u2693\ufe0e int LifeSpan Position \u2693\ufe0e Vector Position Strength \u2693\ufe0e float Strength Time \u2693\ufe0e float Time TimeDT \u2693\ufe0e float TimeDT","title":"ShockwaveParams"},{"location":"ShockwaveParams/#class-shockwaveparams","text":"","title":"Class \"ShockwaveParams\""},{"location":"ShockwaveParams/#functions","text":"","title":"Functions"},{"location":"ShockwaveParams/#variables","text":"","title":"Variables"},{"location":"ShockwaveParams/#age","text":"","title":"Age"},{"location":"ShockwaveParams/#lifespan","text":"","title":"LifeSpan"},{"location":"ShockwaveParams/#position","text":"","title":"Position"},{"location":"ShockwaveParams/#strength","text":"","title":"Strength"},{"location":"ShockwaveParams/#time","text":"","title":"Time"},{"location":"ShockwaveParams/#timedt","text":"","title":"TimeDT"},{"location":"Sprite/","text":"Class \"Sprite\" \u2693\ufe0e Functions \u2693\ufe0e Sprite () \u2693\ufe0e void Sprite ( void ) GetDefaultAnimation () \u2693\ufe0e string GetDefaultAnimation ( ) GetDefaultAnimationName () \u2693\ufe0e string GetDefaultAnimationName ( ) GetFilename () \u2693\ufe0e string GetFilename ( ) GetFrame () \u2693\ufe0e int GetFrame ( ) GetLayerCount () \u2693\ufe0e int GetLayerCount ( ) GetOverlayFrame () \u2693\ufe0e int GetOverlayFrame ( ) GetTexel () \u2693\ufe0e Color GetTexel ( Vector SamplePos, Vector RenderPos, float AlphaThreshold ) IsEventTriggered () \u2693\ufe0e boolean IsEventTriggered ( string EventName) IsFinished () \u2693\ufe0e boolean IsFinished ( string AnimationName) IsLoaded () \u2693\ufe0e boolean IsLoaded ( ) IsOverlayFinished () \u2693\ufe0e boolean IsOverlayFinished ( string AnimationName) IsOverlayPlaying () \u2693\ufe0e boolean IsOverlayPlaying ( string AnimationName) IsPlaying () \u2693\ufe0e boolean IsPlaying ( string AnimationName) Load () \u2693\ufe0e void Load ( string Filename, boolean LoadGraphics ) LoadGraphics () \u2693\ufe0e void LoadGraphics ( ) Play () \u2693\ufe0e void Play ( string AnimationName, boolean Force ) PlayOverlay () \u2693\ufe0e void PlayOverlay ( string AnimationName, boolean Force ) PlayRandom () \u2693\ufe0e void PlayRandom ( int Seed) Reload () \u2693\ufe0e void Reload ( ) RemoveOverlay () \u2693\ufe0e void RemoveOverlay ( ) Render () \u2693\ufe0e void Render ( Vector Pos, Vector TopLeftClamp, Vector BottomRightClamp ) RenderLayer () \u2693\ufe0e void RenderLayer ( int LayerId, Vector Pos ) ReplaceSpritesheet () \u2693\ufe0e void ReplaceSpritesheet ( int LayerId, string PngFilename ) Reset () \u2693\ufe0e void Reset ( ) SetAnimation () \u2693\ufe0e boolean SetAnimation ( string AnimationName) SetFrame () \u2693\ufe0e void SetFrame ( string AnimationName, int FrameNum ) SetLastFrame () \u2693\ufe0e void SetLastFrame ( ) SetLayerFrame () \u2693\ufe0e void SetLayerFrame ( int LayerId, int FrameNum ) SetOverlayAnimation () \u2693\ufe0e boolean SetOverlayAnimation ( string AnimationName) SetOverlayFrame () \u2693\ufe0e void SetOverlayFrame ( string AnimationName, int FrameNum ) SetOverlayRenderPriority () \u2693\ufe0e void SetOverlayRenderPriority ( boolean RenderFirst) Stop () \u2693\ufe0e void Stop ( ) Update () \u2693\ufe0e void Update ( ) WasEventTriggered () \u2693\ufe0e boolean WasEventTriggered ( string EventName) Variables \u2693\ufe0e FlipX \u2693\ufe0e boolean FlipX FlipY \u2693\ufe0e boolean FlipY Color \u2693\ufe0e Color Color Offset \u2693\ufe0e Vector Offset PlaybackSpeed \u2693\ufe0e float PlaybackSpeed Rotation \u2693\ufe0e float Rotation Scale \u2693\ufe0e Vector Scale","title":"Sprite"},{"location":"Sprite/#class-sprite","text":"","title":"Class \"Sprite\""},{"location":"Sprite/#functions","text":"","title":"Functions"},{"location":"Sprite/#sprite","text":"","title":"Sprite ()"},{"location":"Sprite/#getdefaultanimation","text":"","title":"GetDefaultAnimation ()"},{"location":"Sprite/#getdefaultanimationname","text":"","title":"GetDefaultAnimationName ()"},{"location":"Sprite/#getfilename","text":"","title":"GetFilename ()"},{"location":"Sprite/#getframe","text":"","title":"GetFrame ()"},{"location":"Sprite/#getlayercount","text":"","title":"GetLayerCount ()"},{"location":"Sprite/#getoverlayframe","text":"","title":"GetOverlayFrame ()"},{"location":"Sprite/#gettexel","text":"","title":"GetTexel ()"},{"location":"Sprite/#iseventtriggered","text":"","title":"IsEventTriggered ()"},{"location":"Sprite/#isfinished","text":"","title":"IsFinished ()"},{"location":"Sprite/#isloaded","text":"","title":"IsLoaded ()"},{"location":"Sprite/#isoverlayfinished","text":"","title":"IsOverlayFinished ()"},{"location":"Sprite/#isoverlayplaying","text":"","title":"IsOverlayPlaying ()"},{"location":"Sprite/#isplaying","text":"","title":"IsPlaying ()"},{"location":"Sprite/#load","text":"","title":"Load ()"},{"location":"Sprite/#loadgraphics","text":"","title":"LoadGraphics ()"},{"location":"Sprite/#play","text":"","title":"Play ()"},{"location":"Sprite/#playoverlay","text":"","title":"PlayOverlay ()"},{"location":"Sprite/#playrandom","text":"","title":"PlayRandom ()"},{"location":"Sprite/#reload","text":"","title":"Reload ()"},{"location":"Sprite/#removeoverlay","text":"","title":"RemoveOverlay ()"},{"location":"Sprite/#render","text":"","title":"Render ()"},{"location":"Sprite/#renderlayer","text":"","title":"RenderLayer ()"},{"location":"Sprite/#replacespritesheet","text":"","title":"ReplaceSpritesheet ()"},{"location":"Sprite/#reset","text":"","title":"Reset ()"},{"location":"Sprite/#setanimation","text":"","title":"SetAnimation ()"},{"location":"Sprite/#setframe","text":"","title":"SetFrame ()"},{"location":"Sprite/#setlastframe","text":"","title":"SetLastFrame ()"},{"location":"Sprite/#setlayerframe","text":"","title":"SetLayerFrame ()"},{"location":"Sprite/#setoverlayanimation","text":"","title":"SetOverlayAnimation ()"},{"location":"Sprite/#setoverlayframe","text":"","title":"SetOverlayFrame ()"},{"location":"Sprite/#setoverlayrenderpriority","text":"","title":"SetOverlayRenderPriority ()"},{"location":"Sprite/#stop","text":"","title":"Stop ()"},{"location":"Sprite/#update","text":"","title":"Update ()"},{"location":"Sprite/#waseventtriggered","text":"","title":"WasEventTriggered ()"},{"location":"Sprite/#variables","text":"","title":"Variables"},{"location":"Sprite/#flipx","text":"","title":"FlipX"},{"location":"Sprite/#flipy","text":"","title":"FlipY"},{"location":"Sprite/#color","text":"","title":"Color"},{"location":"Sprite/#offset","text":"","title":"Offset"},{"location":"Sprite/#playbackspeed","text":"","title":"PlaybackSpeed"},{"location":"Sprite/#rotation","text":"","title":"Rotation"},{"location":"Sprite/#scale","text":"","title":"Scale"},{"location":"TearParams/","text":"Class \"TearParams\" \u2693\ufe0e Functions \u2693\ufe0e BombVariant () \u2693\ufe0e int BombVariant TearColor () \u2693\ufe0e Color TearColor Variables \u2693\ufe0e TearDamage \u2693\ufe0e float TearDamage TearFlags \u2693\ufe0e int TearFlags TearHeight \u2693\ufe0e float TearHeight TearScale \u2693\ufe0e float TearScale TearVariant \u2693\ufe0e int TearVariant","title":"TearParams"},{"location":"TearParams/#class-tearparams","text":"","title":"Class \"TearParams\""},{"location":"TearParams/#functions","text":"","title":"Functions"},{"location":"TearParams/#bombvariant","text":"","title":"BombVariant ()"},{"location":"TearParams/#tearcolor","text":"","title":"TearColor ()"},{"location":"TearParams/#variables","text":"","title":"Variables"},{"location":"TearParams/#teardamage","text":"","title":"TearDamage"},{"location":"TearParams/#tearflags","text":"","title":"TearFlags"},{"location":"TearParams/#tearheight","text":"","title":"TearHeight"},{"location":"TearParams/#tearscale","text":"","title":"TearScale"},{"location":"TearParams/#tearvariant","text":"","title":"TearVariant"},{"location":"TemporaryEffect/","text":"Class \"TemporaryEffect\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Cooldown \u2693\ufe0e int Cooldown Count \u2693\ufe0e int Count Item \u2693\ufe0e Config::Item Item","title":"TemporaryEffect"},{"location":"TemporaryEffect/#class-temporaryeffect","text":"","title":"Class \"TemporaryEffect\""},{"location":"TemporaryEffect/#functions","text":"","title":"Functions"},{"location":"TemporaryEffect/#variables","text":"","title":"Variables"},{"location":"TemporaryEffect/#cooldown","text":"","title":"Cooldown"},{"location":"TemporaryEffect/#count","text":"","title":"Count"},{"location":"TemporaryEffect/#item","text":"","title":"Item"},{"location":"TemporaryEffects/","text":"Class \"TemporaryEffects\" \u2693\ufe0e Functions \u2693\ufe0e AddCollectibleEffect () \u2693\ufe0e void AddCollectibleEffect ( CollectibleType CollectibleType, boolean AddCostume ) AddNullEffect () \u2693\ufe0e void AddNullEffect ( Config::NullItemID NullId, boolean AddCostume ) AddTrinketEffect () \u2693\ufe0e void AddTrinketEffect ( TrinketType TrinketType, boolean AddCostume ) ClearEffects () \u2693\ufe0e void ClearEffects ( ) GetCollectibleEffect () \u2693\ufe0e TemporaryEffect GetCollectibleEffect ( CollectibleType CollectibleType) GetCollectibleEffectNum () \u2693\ufe0e int GetCollectibleEffectNum ( CollectibleType CollectibleType) GetEffectsList () \u2693\ufe0e EffectList GetEffectsList ( ) GetNullEffect () \u2693\ufe0e TemporaryEffect GetNullEffect ( Config::NullItemID NullId) GetNullEffectNum () \u2693\ufe0e int GetNullEffectNum ( Config::NullItemID NullId) GetTrinketEffect () \u2693\ufe0e TemporaryEffect GetTrinketEffect ( TrinketType TrinketType) GetTrinketEffectNum () \u2693\ufe0e int GetTrinketEffectNum ( TrinketType TrinketType) HasCollectibleEffect () \u2693\ufe0e boolean HasCollectibleEffect ( CollectibleType CollectibleType) HasNullEffect () \u2693\ufe0e boolean HasNullEffect ( Config::NullItemID NullId) HasTrinketEffect () \u2693\ufe0e boolean HasTrinketEffect ( TrinketType TrinketType) RemoveCollectibleEffect () \u2693\ufe0e void RemoveCollectibleEffect ( CollectibleType CollectibleType) RemoveNullEffect () \u2693\ufe0e void RemoveNullEffect ( Config::NullItemID NullId) RemoveTrinketEffect () \u2693\ufe0e void RemoveTrinketEffect ( TrinketType TrinketType)","title":"TemporaryEffects"},{"location":"TemporaryEffects/#class-temporaryeffects","text":"","title":"Class \"TemporaryEffects\""},{"location":"TemporaryEffects/#functions","text":"","title":"Functions"},{"location":"TemporaryEffects/#addcollectibleeffect","text":"","title":"AddCollectibleEffect ()"},{"location":"TemporaryEffects/#addnulleffect","text":"","title":"AddNullEffect ()"},{"location":"TemporaryEffects/#addtrinketeffect","text":"","title":"AddTrinketEffect ()"},{"location":"TemporaryEffects/#cleareffects","text":"","title":"ClearEffects ()"},{"location":"TemporaryEffects/#getcollectibleeffect","text":"","title":"GetCollectibleEffect ()"},{"location":"TemporaryEffects/#getcollectibleeffectnum","text":"","title":"GetCollectibleEffectNum ()"},{"location":"TemporaryEffects/#geteffectslist","text":"","title":"GetEffectsList ()"},{"location":"TemporaryEffects/#getnulleffect","text":"","title":"GetNullEffect ()"},{"location":"TemporaryEffects/#getnulleffectnum","text":"","title":"GetNullEffectNum ()"},{"location":"TemporaryEffects/#gettrinketeffect","text":"","title":"GetTrinketEffect ()"},{"location":"TemporaryEffects/#gettrinketeffectnum","text":"","title":"GetTrinketEffectNum ()"},{"location":"TemporaryEffects/#hascollectibleeffect","text":"","title":"HasCollectibleEffect ()"},{"location":"TemporaryEffects/#hasnulleffect","text":"","title":"HasNullEffect ()"},{"location":"TemporaryEffects/#hastrinketeffect","text":"","title":"HasTrinketEffect ()"},{"location":"TemporaryEffects/#removecollectibleeffect","text":"","title":"RemoveCollectibleEffect ()"},{"location":"TemporaryEffects/#removenulleffect","text":"","title":"RemoveNullEffect ()"},{"location":"TemporaryEffects/#removetrinketeffect","text":"","title":"RemoveTrinketEffect ()"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/","text":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Tutorial - Adding Costumes to items without LUA"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/#class-tutorialaddingcostumestoitemswithoutlua","text":"","title":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\""},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/#functions","text":"","title":"Functions"},{"location":"Tutorial-Rendertext/","text":"Class \"[Tutorial]Rendertext\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Tutorial - Render text"},{"location":"Tutorial-Rendertext/#class-tutorialrendertext","text":"","title":"Class \"[Tutorial]Rendertext\""},{"location":"Tutorial-Rendertext/#functions","text":"","title":"Functions"},{"location":"UsingZeroBraneStudiotodebugyourscripts/","text":"Class \"UsingZeroBraneStudiotodebugyourscripts\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Using ZeroBrane Studio to debug your scripts"},{"location":"UsingZeroBraneStudiotodebugyourscripts/#class-usingzerobranestudiotodebugyourscripts","text":"","title":"Class \"UsingZeroBraneStudiotodebugyourscripts\""},{"location":"UsingZeroBraneStudiotodebugyourscripts/#functions","text":"","title":"Functions"},{"location":"Usingadditional.luaFiles/","text":"Class \"Usingadditional.luaFiles\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Using additional .lua Files"},{"location":"Usingadditional.luaFiles/#class-usingadditionalluafiles","text":"","title":"Class \"Usingadditional.luaFiles\""},{"location":"Usingadditional.luaFiles/#functions","text":"","title":"Functions"},{"location":"Vector/","text":"Class \"Vector\" \u2693\ufe0e Functions \u2693\ufe0e Vector () \u2693\ufe0e void Vector ( float , float ) __add () \u2693\ufe0e Vector __add ( Vector Right) Addition operators __div () \u2693\ufe0e Vector __div ( float Modifier) Division operators __mul () \u2693\ufe0e Vector __mul ( float Modifier) Multiplication operators __sub () \u2693\ufe0e Vector __sub ( Vector Right) Subtraction operators __unm () \u2693\ufe0e Vector __unm ( Vector Right) Subtraction operators Clamp () \u2693\ufe0e void Clamp ( float MinX, float MinY, float MaxX, float MaxY ) Clamps the vector based on left, top, right, bottom boundings. Doesn't keep direction Clamped () \u2693\ufe0e Vector Clamped ( float MinX, float MinY, float MaxX, float MaxY ) Returns a clamped version of the vector. Cross () \u2693\ufe0e float Cross ( Vector second) Cross product this is the 2x2 matrix determinant or the resulting z value for their 3D versions with z=0 Distance () \u2693\ufe0e float Distance ( Vector first, Vector second ) Returns distance between two vectors Example Code 1 local sqtDist = Vector ( 2 , 0 ) : Distance ( Vector ( 4 , 0 ))) -- sqtDist = 2 DistanceSquared () \u2693\ufe0e float DistanceSquared ( Vector first, Vector second ) Returns squared distance between two vectors Example Code 1 local sqtDist = Vector ( 2 , 0 ) : DistanceSquared ( Vector ( 4 , 0 ))) -- sqtDist = 4 Dot () \u2693\ufe0e float Dot ( Vector second) Dot product FromAngle () \u2693\ufe0e static Vector FromAngle ( float AngleDegrees) Build a Vector from an angle, returns a normalized vector. Angle 0 will result in (1, 0). Angle 90 will result in (0, 1). Example Code This code returns a vector that has a 45 degree angle 1 local vec = Vector . FromAngle ( 45 )) -- vec is now Vector ( 0.70711 , 0.70711 ) WRONG PARSING GetAngleDegrees () \u2693\ufe0e float GetAngleDegrees ( ) Returns the angle the vector is facing. The vector (1, 0) will be at 0 degrees. The vector (0, 1) will be at 90 degrees. Example Code This code returns the angle between two positions. 1 2 3 4 local v1 = Vector ( 1 , 0 ) -- has angle 0.0 local v2 = Vector ( 0 , 1 ) -- has angle 90.0 local v3 = v2 - v1 -- subtraction of 2 points is a vector connecting the two points print ( v3 : GetAngleDegrees ()) -- prints 45.0 Length () \u2693\ufe0e float Length ( ) Returns the length of the vector LengthSquared () \u2693\ufe0e float LengthSquared ( ) Returns the length squared of the vector Lerp () \u2693\ufe0e Vector Lerp ( Vector first, Vector second, float t ) Linear interpolation between two vectors. For t = 0 it returns the first Vector, for t = 1 it returns the second. This function does the same as Lerp, but will not alter the input vectors. ```:::cpp function Lerp(vec1, vec2, percent) return vec1 * (1 - percent) + vec2 * percent end 1 2 3 4 5 6 7 </div> ##### :fontawesome-solid-code: Example Code {: .subHeader .example_code } This code will make v1 the vector 50% in between v1 and v2 ```cpp local v1 = Vector(0,0) local v2 = Vector(1,1) v1:Lerp(v2,0.5) -- v1 equals Vector(0.5,0.5) now WRONG PARSING {: .wrongParsing } ___ [ ](#){: .abp .tooltip .badge } ### Normalize () {: aria-label='Functions' } #### void Normalize ( ) {: aria-label='Functions' } Normalizes this vector ___ [ ](#){: .abp .tooltip .badge } ### Normalized () {: aria-label='Functions' } #### [Vector](../Vector) Normalized ( ) {: aria-label='Functions' } Returns a normalized version of this vector ___ [ ](#){: .abp .tooltip .badge } ### Resize () {: aria-label='Functions' } #### void Resize ( float NewLength) {: aria-label='Functions' } Resizes the vector length. ___ [ ](#){: .abp .tooltip .badge } ### Resized () {: aria-label='Functions' } #### [Vector](../Vector) Resized ( float NewLength) {: aria-label='Functions' } Returns a resized version of the vector. ___ [ ](#){: .abp .tooltip .badge } ### Rotated () {: aria-label='Functions' } #### [Vector](../Vector) Rotated ( float AngleDegrees) {: aria-label='Functions' } Returns a rotated version of the vector by AngleDegrees ___ [ ](#){: .abp .tooltip .badge } ## Variables ### X {: aria-label='Variables' } #### float X {: aria-label='Variables' } Components of vector. ___ [ ](#){: .abp .tooltip .badge } ### Y {: aria-label='Variables' } #### float Y {: aria-label='Variables' } ___","title":"Vector"},{"location":"Vector/#class-vector","text":"","title":"Class \"Vector\""},{"location":"Vector/#functions","text":"","title":"Functions"},{"location":"Vector/#vector","text":"","title":"Vector ()"},{"location":"Vector/#__add","text":"","title":"__add ()"},{"location":"Vector/#__div","text":"","title":"__div ()"},{"location":"Vector/#__mul","text":"","title":"__mul ()"},{"location":"Vector/#__sub","text":"","title":"__sub ()"},{"location":"Vector/#__unm","text":"","title":"__unm ()"},{"location":"Vector/#clamp","text":"","title":"Clamp ()"},{"location":"Vector/#clamped","text":"","title":"Clamped ()"},{"location":"Vector/#cross","text":"","title":"Cross ()"},{"location":"Vector/#distance","text":"","title":"Distance ()"},{"location":"Vector/#distancesquared","text":"","title":"DistanceSquared ()"},{"location":"Vector/#dot","text":"","title":"Dot ()"},{"location":"Vector/#fromangle","text":"","title":"FromAngle ()"},{"location":"Vector/#getangledegrees","text":"","title":"GetAngleDegrees ()"},{"location":"Vector/#length","text":"","title":"Length ()"},{"location":"Vector/#lengthsquared","text":"","title":"LengthSquared ()"},{"location":"Vector/#lerp","text":"","title":"Lerp ()"},{"location":"Writingscreenshaders/","text":"Class \"Writingscreenshaders\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Writing screen shaders"},{"location":"Writingscreenshaders/#class-writingscreenshaders","text":"","title":"Class \"Writingscreenshaders\""},{"location":"Writingscreenshaders/#functions","text":"","title":"Functions"},{"location":"XMLFiledocumentation/","text":"Class \"XMLFiledocumentation\" \u2693\ufe0e Functions \u2693\ufe0e","title":"XML File documentation"},{"location":"XMLFiledocumentation/#class-xmlfiledocumentation","text":"","title":"Class \"XMLFiledocumentation\""},{"location":"XMLFiledocumentation/#functions","text":"","title":"Functions"},{"location":"enums/ActionTriggers/","text":"Enum \"ActionTriggers\" \u2693\ufe0e Enumerator comment id ACTIONTRIGGER_NONE 0 ACTIONTRIGGER_BOMBPLACED 1 ACTIONTRIGGER_MOVED 1<<1 ACTIONTRIGGER_SHOOTING 1<<2 ACTIONTRIGGER_CARDPILLUSED 1<<3 ACTIONTRIGGER_ITEMACTIVATED 1<<4 ACTIONTRIGGER_ITEMSDROPPED 1<<5","title":"ActionTriggers"},{"location":"enums/ActionTriggers/#enum-actiontriggers","text":"Enumerator comment id ACTIONTRIGGER_NONE 0 ACTIONTRIGGER_BOMBPLACED 1 ACTIONTRIGGER_MOVED 1<<1 ACTIONTRIGGER_SHOOTING 1<<2 ACTIONTRIGGER_CARDPILLUSED 1<<3 ACTIONTRIGGER_ITEMACTIVATED 1<<4 ACTIONTRIGGER_ITEMSDROPPED 1<<5","title":"Enum \"ActionTriggers\""},{"location":"enums/BabySubType/","text":"Enum \"BabySubType\" \u2693\ufe0e Enumerator comment id BABY_UNASSIGNED -1 BABY_SPIDER 0 BABY_LOVE 1 BABY_BLOAT 2 BABY_WATER 3 BABY_PSY 4 BABY_CURSED 5 BABY_TROLL 6 BABY_YBAB 7 BABY_COCKEYED 8 BABY_HOST 9 BABY_LOST 10 BABY_CUTE 11 BABY_CROW 12 BABY_SHADOW 13 BABY_GLASS 14 BABY_GOLD 15 BABY_CY 16 BABY_BEAN 17 BABY_MAG 18 BABY_WRATH 19 BABY_WRAPPED 20 BABY_BEGOTTEN 21 BABY_DEAD 22 BABY_FIGHTING 23 BABY_0 24 BABY_GLITCH 25 BABY_MAGNET 26 BABY_BLACK 27 BABY_RED 28 BABY_WHITE 29 BABY_BLUE 30 BABY_RAGE 31 BABY_CRY 32 BABY_YELLOW 33 BABY_LONG 34 BABY_GREEN 35 BABY_LIL 36 BABY_BIG 37 BABY_BROWN 38 BABY_NOOSE 39 BABY_HIVE 40 BABY_BUDDY 41 BABY_COLORFUL 42 BABY_WHORE 43 BABY_CRACKED 44 BABY_DRIPPING 45 BABY_BLINDING 46 BABY_SUCKY 47 BABY_DARK 48 BABY_PICKY 49 BABY_REVENGE 50 BABY_BELIAL 51 BABY_SALE 52 BABY_GOAT 53 BABY_SUPER_GREED 54 BABY_MORT 55 BABY_APOLLYON 56 BABY_BONE 57 BABY_BOUND 58 BABY_BASIC 59","title":"BabySubType"},{"location":"enums/BabySubType/#enum-babysubtype","text":"Enumerator comment id BABY_UNASSIGNED -1 BABY_SPIDER 0 BABY_LOVE 1 BABY_BLOAT 2 BABY_WATER 3 BABY_PSY 4 BABY_CURSED 5 BABY_TROLL 6 BABY_YBAB 7 BABY_COCKEYED 8 BABY_HOST 9 BABY_LOST 10 BABY_CUTE 11 BABY_CROW 12 BABY_SHADOW 13 BABY_GLASS 14 BABY_GOLD 15 BABY_CY 16 BABY_BEAN 17 BABY_MAG 18 BABY_WRATH 19 BABY_WRAPPED 20 BABY_BEGOTTEN 21 BABY_DEAD 22 BABY_FIGHTING 23 BABY_0 24 BABY_GLITCH 25 BABY_MAGNET 26 BABY_BLACK 27 BABY_RED 28 BABY_WHITE 29 BABY_BLUE 30 BABY_RAGE 31 BABY_CRY 32 BABY_YELLOW 33 BABY_LONG 34 BABY_GREEN 35 BABY_LIL 36 BABY_BIG 37 BABY_BROWN 38 BABY_NOOSE 39 BABY_HIVE 40 BABY_BUDDY 41 BABY_COLORFUL 42 BABY_WHORE 43 BABY_CRACKED 44 BABY_DRIPPING 45 BABY_BLINDING 46 BABY_SUCKY 47 BABY_DARK 48 BABY_PICKY 49 BABY_REVENGE 50 BABY_BELIAL 51 BABY_SALE 52 BABY_GOAT 53 BABY_SUPER_GREED 54 BABY_MORT 55 BABY_APOLLYON 56 BABY_BONE 57 BABY_BOUND 58 BABY_BASIC 59","title":"Enum \"BabySubType\""},{"location":"enums/BombSubType/","text":"Enum \"BombSubType\" \u2693\ufe0e Enumerator comment id BOMB_NORMAL 1 BOMB_DOUBLEPACK 2 BOMB_TROLL 3 BOMB_GOLDEN 4 BOMB_SUPERTROLL 5","title":"BombSubType"},{"location":"enums/BombSubType/#enum-bombsubtype","text":"Enumerator comment id BOMB_NORMAL 1 BOMB_DOUBLEPACK 2 BOMB_TROLL 3 BOMB_GOLDEN 4 BOMB_SUPERTROLL 5","title":"Enum \"BombSubType\""},{"location":"enums/BombVariant/","text":"Enum \"BombVariant\" \u2693\ufe0e Enumerator comment id BOMB_NORMAL 0 BOMB_BIG 1 BOMB_DECOY 2 BOMB_TROLL 3 BOMB_SUPERTROLL 4 BOMB_POISON 5 BOMB_POISON_BIG 6 BOMB_SAD 7 BOMB_HOT 8 BOMB_BUTT 9 BOMB_MR_MEGA 10 BOMB_BOBBY 11 BOMB_GLITTER 12","title":"BombVariant"},{"location":"enums/BombVariant/#enum-bombvariant","text":"Enumerator comment id BOMB_NORMAL 0 BOMB_BIG 1 BOMB_DECOY 2 BOMB_TROLL 3 BOMB_SUPERTROLL 4 BOMB_POISON 5 BOMB_POISON_BIG 6 BOMB_SAD 7 BOMB_HOT 8 BOMB_BUTT 9 BOMB_MR_MEGA 10 BOMB_BOBBY 11 BOMB_GLITTER 12","title":"Enum \"BombVariant\""},{"location":"enums/ButtonAction/","text":"Enum \"ButtonAction\" \u2693\ufe0e Enumerator comment id ACTION_LEFT 0 ACTION_RIGHT 1 ACTION_UP 2 ACTION_DOWN 3 ACTION_SHOOTLEFT 4 ACTION_SHOOTRIGHT 5 ACTION_SHOOTUP 6 ACTION_SHOOTDOWN 7 ACTION_BOMB 8 ACTION_ITEM 9 ACTION_PILLCARD 10 ACTION_DROP 11 ACTION_PAUSE 12 ACTION_MAP 13 ACTION_MENUCONFIRM 14 ACTION_MENUBACK 15 ACTION_RESTART 16 ACTION_FULLSCREEN 17 ACTION_MUTE 18 ACTION_JOINMULTIPLAYER 19 ACTION_MENULEFT 20 ACTION_MENURIGHT 21 ACTION_MENUUP 22 ACTION_MENUDOWN 23 ACTION_MENULT 24 ACTION_MENURT 25 ACTION_MENUTAB 26 ACTION_CONSOLE USE ONLY FOR HOOKING! To check the input use IsButtonTriggered with desired key 28","title":"ButtonAction"},{"location":"enums/ButtonAction/#enum-buttonaction","text":"Enumerator comment id ACTION_LEFT 0 ACTION_RIGHT 1 ACTION_UP 2 ACTION_DOWN 3 ACTION_SHOOTLEFT 4 ACTION_SHOOTRIGHT 5 ACTION_SHOOTUP 6 ACTION_SHOOTDOWN 7 ACTION_BOMB 8 ACTION_ITEM 9 ACTION_PILLCARD 10 ACTION_DROP 11 ACTION_PAUSE 12 ACTION_MAP 13 ACTION_MENUCONFIRM 14 ACTION_MENUBACK 15 ACTION_RESTART 16 ACTION_FULLSCREEN 17 ACTION_MUTE 18 ACTION_JOINMULTIPLAYER 19 ACTION_MENULEFT 20 ACTION_MENURIGHT 21 ACTION_MENUUP 22 ACTION_MENUDOWN 23 ACTION_MENULT 24 ACTION_MENURT 25 ACTION_MENUTAB 26 ACTION_CONSOLE USE ONLY FOR HOOKING! To check the input use IsButtonTriggered with desired key 28","title":"Enum \"ButtonAction\""},{"location":"enums/CacheFlag/","text":"Enum \"CacheFlag\" \u2693\ufe0e Enumerator Value comment id CACHE_DAMAGE 1 1 CACHE_FIREDELAY 2 2 CACHE_SHOTSPEED 4 4 CACHE_RANGE 8 8 CACHE_SPEED 16 16 CACHE_TEARFLAG 32 32 CACHE_TEARCOLOR 64 64 CACHE_FLYING 128 128 CACHE_WEAPON 256 256 CACHE_FAMILIARS 512 512 CACHE_LUCK 1024 1024 CACHE_ALL 0xFFFFFFFF 0xFFFFFFFF","title":"CacheFlag"},{"location":"enums/CacheFlag/#enum-cacheflag","text":"Enumerator Value comment id CACHE_DAMAGE 1 1 CACHE_FIREDELAY 2 2 CACHE_SHOTSPEED 4 4 CACHE_RANGE 8 8 CACHE_SPEED 16 16 CACHE_TEARFLAG 32 32 CACHE_TEARCOLOR 64 64 CACHE_FLYING 128 128 CACHE_WEAPON 256 256 CACHE_FAMILIARS 512 512 CACHE_LUCK 1024 1024 CACHE_ALL 0xFFFFFFFF 0xFFFFFFFF","title":"Enum \"CacheFlag\""},{"location":"enums/Card/","text":"Enum \"Card\" \u2693\ufe0e Enumerator comment id CARD_RANDOM -1 CARD_NULL 0 CARD_FOOL 1 CARD_MAGICIAN 2 CARD_HIGH_PRIESTESS 3 CARD_EMPRESS 4 CARD_EMPEROR 5 CARD_HIEROPHANT 6 CARD_LOVERS 7 CARD_CHARIOT 8 CARD_JUSTICE 9 CARD_HERMIT 10 CARD_WHEEL_OF_FORTUNE 11 CARD_STRENGTH 12 CARD_HANGED_MAN 13 CARD_DEATH 14 CARD_TEMPERANCE 15 CARD_DEVIL 16 CARD_TOWER 17 CARD_STARS 18 CARD_MOON 19 CARD_SUN 20 CARD_JUDGEMENT 21 CARD_WORLD 22 CARD_CLUBS_2 23 CARD_DIAMONDS_2 24 CARD_SPADES_2 25 CARD_HEARTS_2 26 CARD_ACE_OF_CLUBS 27 CARD_ACE_OF_DIAMONDS 28 CARD_ACE_OF_SPADES 29 CARD_ACE_OF_HEARTS 30 CARD_JOKER 31 RUNE_HAGALAZ 32 RUNE_JERA 33 RUNE_EHWAZ 34 RUNE_DAGAZ 35 RUNE_ANSUZ 36 RUNE_PERTHRO 37 RUNE_BERKANO 38 RUNE_ALGIZ 39 RUNE_BLANK 40 RUNE_BLACK 41 CARD_CHAOS 42 CARD_CREDIT 43 CARD_RULES 44 CARD_HUMANITY 45 CARD_SUICIDE_KING 46 CARD_GET_OUT_OF_JAIL 47 CARD_QUESTIONMARK 48 CARD_DICE_SHARD 49 CARD_EMERGENCY_CONTACT 50 CARD_HOLY 51 CARD_HUGE_GROWTH 52 CARD_ANCIENT_RECALL 53 CARD_ERA_WALK 54 NUM_CARDS 55","title":"Card"},{"location":"enums/Card/#enum-card","text":"Enumerator comment id CARD_RANDOM -1 CARD_NULL 0 CARD_FOOL 1 CARD_MAGICIAN 2 CARD_HIGH_PRIESTESS 3 CARD_EMPRESS 4 CARD_EMPEROR 5 CARD_HIEROPHANT 6 CARD_LOVERS 7 CARD_CHARIOT 8 CARD_JUSTICE 9 CARD_HERMIT 10 CARD_WHEEL_OF_FORTUNE 11 CARD_STRENGTH 12 CARD_HANGED_MAN 13 CARD_DEATH 14 CARD_TEMPERANCE 15 CARD_DEVIL 16 CARD_TOWER 17 CARD_STARS 18 CARD_MOON 19 CARD_SUN 20 CARD_JUDGEMENT 21 CARD_WORLD 22 CARD_CLUBS_2 23 CARD_DIAMONDS_2 24 CARD_SPADES_2 25 CARD_HEARTS_2 26 CARD_ACE_OF_CLUBS 27 CARD_ACE_OF_DIAMONDS 28 CARD_ACE_OF_SPADES 29 CARD_ACE_OF_HEARTS 30 CARD_JOKER 31 RUNE_HAGALAZ 32 RUNE_JERA 33 RUNE_EHWAZ 34 RUNE_DAGAZ 35 RUNE_ANSUZ 36 RUNE_PERTHRO 37 RUNE_BERKANO 38 RUNE_ALGIZ 39 RUNE_BLANK 40 RUNE_BLACK 41 CARD_CHAOS 42 CARD_CREDIT 43 CARD_RULES 44 CARD_HUMANITY 45 CARD_SUICIDE_KING 46 CARD_GET_OUT_OF_JAIL 47 CARD_QUESTIONMARK 48 CARD_DICE_SHARD 49 CARD_EMERGENCY_CONTACT 50 CARD_HOLY 51 CARD_HUGE_GROWTH 52 CARD_ANCIENT_RECALL 53 CARD_ERA_WALK 54 NUM_CARDS 55","title":"Enum \"Card\""},{"location":"enums/Challenge/","text":"Enum \"Challenge\" \u2693\ufe0e Enumerator comment id CHALLENGE_NULL 0 CHALLENGE_PITCH_BLACK 1 CHALLENGE_HIGH_BROW 2 CHALLENGE_HEAD_TRAUMA 3 CHALLENGE_DARKNESS_FALLS 4 CHALLENGE_THE_TANK 5 CHALLENGE_SOLAR_SYSTEM 6 CHALLENGE_SUICIDE_KING 7 CHALLENGE_CAT_GOT_YOUR_TONGUE 8 CHALLENGE_DEMO_MAN 9 CHALLENGE_CURSED 10 CHALLENGE_GLASS_CANNON 11 CHALLENGE_WHEN_LIFE_GIVES_LEMONS 12 CHALLENGE_BEANS 13 CHALLENGE_ITS_IN_THE_CARDS 14 CHALLENGE_SLOW_ROLL 15 CHALLENGE_COMPUTER_SAVY 16 CHALLENGE_WAKA_WAKA 17 CHALLENGE_THE_HOST 18 CHALLENGE_THE_FAMILY_MAN 19 CHALLENGE_PURIST 20 CHALLENGE_XXXXXXXXL 21 CHALLENGE_SPEED 22 CHALLENGE_BLUE_BOMBER 23 CHALLENGE_PAY_TO_PLAY 24 CHALLENGE_HAVE_A_HEART 25 CHALLENGE_I_RULE 26 CHALLENGE_BRAINS 27 CHALLENGE_PRIDE_DAY 28 CHALLENGE_ONANS_STREAK 29 CHALLENGE_GUARDIAN 30 CHALLENGE_BACKASSWARDS 31 CHALLENGE_APRILS_FOOL 32 CHALLENGE_POKEY_MANS 33 CHALLENGE_ULTRA_HARD 34 CHALLENGE_PONG 35 NUM_CHALLENGES 36","title":"Challenge"},{"location":"enums/Challenge/#enum-challenge","text":"Enumerator comment id CHALLENGE_NULL 0 CHALLENGE_PITCH_BLACK 1 CHALLENGE_HIGH_BROW 2 CHALLENGE_HEAD_TRAUMA 3 CHALLENGE_DARKNESS_FALLS 4 CHALLENGE_THE_TANK 5 CHALLENGE_SOLAR_SYSTEM 6 CHALLENGE_SUICIDE_KING 7 CHALLENGE_CAT_GOT_YOUR_TONGUE 8 CHALLENGE_DEMO_MAN 9 CHALLENGE_CURSED 10 CHALLENGE_GLASS_CANNON 11 CHALLENGE_WHEN_LIFE_GIVES_LEMONS 12 CHALLENGE_BEANS 13 CHALLENGE_ITS_IN_THE_CARDS 14 CHALLENGE_SLOW_ROLL 15 CHALLENGE_COMPUTER_SAVY 16 CHALLENGE_WAKA_WAKA 17 CHALLENGE_THE_HOST 18 CHALLENGE_THE_FAMILY_MAN 19 CHALLENGE_PURIST 20 CHALLENGE_XXXXXXXXL 21 CHALLENGE_SPEED 22 CHALLENGE_BLUE_BOMBER 23 CHALLENGE_PAY_TO_PLAY 24 CHALLENGE_HAVE_A_HEART 25 CHALLENGE_I_RULE 26 CHALLENGE_BRAINS 27 CHALLENGE_PRIDE_DAY 28 CHALLENGE_ONANS_STREAK 29 CHALLENGE_GUARDIAN 30 CHALLENGE_BACKASSWARDS 31 CHALLENGE_APRILS_FOOL 32 CHALLENGE_POKEY_MANS 33 CHALLENGE_ULTRA_HARD 34 CHALLENGE_PONG 35 NUM_CHALLENGES 36","title":"Enum \"Challenge\""},{"location":"enums/ChestSubType/","text":"Enum \"ChestSubType\" \u2693\ufe0e Enumerator comment id CHEST_OPENED 0 CHEST_CLOSED 1","title":"ChestSubType"},{"location":"enums/ChestSubType/#enum-chestsubtype","text":"Enumerator comment id CHEST_OPENED 0 CHEST_CLOSED 1","title":"Enum \"ChestSubType\""},{"location":"enums/CoinSubType/","text":"Enum \"CoinSubType\" \u2693\ufe0e Enumerator comment id COIN_PENNY 1 COIN_NICKEL 2 COIN_DIME 3 COIN_DOUBLEPACK 4 COIN_LUCKYPENNY 5 COIN_STICKYNICKEL 6","title":"CoinSubType"},{"location":"enums/CoinSubType/#enum-coinsubtype","text":"Enumerator comment id COIN_PENNY 1 COIN_NICKEL 2 COIN_DIME 3 COIN_DOUBLEPACK 4 COIN_LUCKYPENNY 5 COIN_STICKYNICKEL 6","title":"Enum \"CoinSubType\""},{"location":"enums/CollectibleType/","text":"Enum \"CollectibleType\" \u2693\ufe0e Enumerator comment id COLLECTIBLE_NULL 0 COLLECTIBLE_SAD_ONION 1 COLLECTIBLE_INNER_EYE 2 COLLECTIBLE_SPOON_BENDER 3 COLLECTIBLE_MAXS_HEAD 4 COLLECTIBLE_MY_REFLECTION 5 COLLECTIBLE_NUMBER_ONE 6 COLLECTIBLE_BLOOD_MARTYR 7 COLLECTIBLE_BROTHER_BOBBY 8 COLLECTIBLE_SKATOLE 9 COLLECTIBLE_HALO_OF_FLIES 10 COLLECTIBLE_ONE_UP 11 COLLECTIBLE_MAGIC_MUSHROOM 12 COLLECTIBLE_VIRUS 13 COLLECTIBLE_ROID_RAGE 14 COLLECTIBLE_HEART 15 COLLECTIBLE_RAW_LIVER 16 COLLECTIBLE_SKELETON_KEY 17 COLLECTIBLE_DOLLAR 18 COLLECTIBLE_BOOM 19 COLLECTIBLE_TRANSCENDENCE 20 COLLECTIBLE_COMPASS 21 COLLECTIBLE_LUNCH 22 COLLECTIBLE_DINNER 23 COLLECTIBLE_DESSERT 24 COLLECTIBLE_BREAKFAST 25 COLLECTIBLE_ROTTEN_MEAT 26 COLLECTIBLE_WOODEN_SPOON 27 COLLECTIBLE_BELT 28 COLLECTIBLE_MOMS_UNDERWEAR 29 COLLECTIBLE_MOMS_HEELS 30 COLLECTIBLE_MOMS_LIPSTICK 31 COLLECTIBLE_WIRE_COAT_HANGER 32 COLLECTIBLE_BIBLE 33 COLLECTIBLE_BOOK_OF_BELIAL 34 COLLECTIBLE_NECRONOMICON 35 COLLECTIBLE_POOP 36 COLLECTIBLE_MR_BOOM 37 COLLECTIBLE_TAMMYS_HEAD 38 COLLECTIBLE_MOMS_BRA 39 COLLECTIBLE_KAMIKAZE 40 COLLECTIBLE_MOMS_PAD 41 COLLECTIBLE_BOBS_ROTTEN_HEAD 42 COLLECTIBLE_PILLS_HERE 43 COLLECTIBLE_TELEPORT 44 COLLECTIBLE_YUM_HEART 45 COLLECTIBLE_LUCKY_FOOT 46 COLLECTIBLE_DOCTORS_REMOTE 47 COLLECTIBLE_CUPIDS_ARROW 48 COLLECTIBLE_SHOOP_DA_WHOOP 49 COLLECTIBLE_STEVEN 50 COLLECTIBLE_PENTAGRAM 51 COLLECTIBLE_DR_FETUS 52 COLLECTIBLE_MAGNETO 53 COLLECTIBLE_TREASURE_MAP 54 COLLECTIBLE_MOMS_EYE 55 COLLECTIBLE_LEMON_MISHAP 56 COLLECTIBLE_DISTANT_ADMIRATION 57 COLLECTIBLE_BOOK_OF_SHADOWS 58 COLLECTIBLE_059 59 COLLECTIBLE_LADDER 60 COLLECTIBLE_TAROT_CARD 61 COLLECTIBLE_CHARM_VAMPIRE 62 COLLECTIBLE_BATTERY 63 COLLECTIBLE_STEAM_SALE 64 COLLECTIBLE_ANARCHIST_COOKBOOK 65 COLLECTIBLE_HOURGLASS 66 COLLECTIBLE_SISTER_MAGGY 67 COLLECTIBLE_TECHNOLOGY 68 COLLECTIBLE_CHOCOLATE_MILK 69 COLLECTIBLE_GROWTH_HORMONES 70 COLLECTIBLE_MINI_MUSH 71 COLLECTIBLE_ROSARY 72 COLLECTIBLE_CUBE_OF_MEAT 73 COLLECTIBLE_QUARTER 74 COLLECTIBLE_PHD 75 COLLECTIBLE_XRAY_VISION 76 COLLECTIBLE_MY_LITTLE_UNICORN 77 COLLECTIBLE_BOOK_REVELATIONS 78 COLLECTIBLE_MARK 79 COLLECTIBLE_PACT 80 COLLECTIBLE_DEAD_CAT 81 COLLECTIBLE_LORD_OF_THE_PIT 82 COLLECTIBLE_THE_NAIL 83 COLLECTIBLE_WE_NEED_GO_DEEPER 84 COLLECTIBLE_DECK_OF_CARDS 85 COLLECTIBLE_MONSTROS_TOOTH 86 COLLECTIBLE_LOKIS_HORNS 87 COLLECTIBLE_LITTLE_CHUBBY 88 COLLECTIBLE_SPIDER_BITE 89 COLLECTIBLE_SMALL_ROCK 90 COLLECTIBLE_SPELUNKER_HAT 91 COLLECTIBLE_SUPER_BANDAGE 92 COLLECTIBLE_GAMEKID 93 COLLECTIBLE_SACK_OF_PENNIES 94 COLLECTIBLE_ROBO_BABY 95 COLLECTIBLE_LITTLE_CHAD 96 COLLECTIBLE_BOOK_OF_SIN 97 COLLECTIBLE_RELIC 98 COLLECTIBLE_LITTLE_GISH 99 COLLECTIBLE_LITTLE_STEVEN 100 COLLECTIBLE_HALO 101 COLLECTIBLE_MOMS_BOTTLE_PILLS 102 COLLECTIBLE_COMMON_COLD 103 COLLECTIBLE_PARASITE 104 COLLECTIBLE_D6 105 COLLECTIBLE_MR_MEGA 106 COLLECTIBLE_PINKING_SHEARS 107 COLLECTIBLE_WAFER 108 COLLECTIBLE_MONEY_IS_POWER 109 COLLECTIBLE_MOMS_CONTACTS 110 COLLECTIBLE_BEAN 111 COLLECTIBLE_GUARDIAN_ANGEL 112 COLLECTIBLE_DEMON_BABY 113 COLLECTIBLE_MOMS_KNIFE 114 COLLECTIBLE_OUIJA_BOARD 115 COLLECTIBLE_NINE_VOLT 116 COLLECTIBLE_DEAD_BIRD 117 COLLECTIBLE_BRIMSTONE 118 COLLECTIBLE_BLOOD_BAG 119 COLLECTIBLE_ODD_MUSHROOM_RATE 120 COLLECTIBLE_ODD_MUSHROOM_DAMAGE 121 COLLECTIBLE_WHORE_OF_BABYLON 122 COLLECTIBLE_MONSTER_MANUAL 123 COLLECTIBLE_DEAD_SEA_SCROLLS 124 COLLECTIBLE_BOBBY_BOMB 125 COLLECTIBLE_RAZOR_BLADE 126 COLLECTIBLE_FORGET_ME_NOW 127 COLLECTIBLE_FOREVER_ALONE 128 COLLECTIBLE_BUCKET_LARD 129 COLLECTIBLE_PONY 130 COLLECTIBLE_BOMB_BAG 131 COLLECTIBLE_LUMP_OF_COAL 132 COLLECTIBLE_GUPPYS_PAW 133 COLLECTIBLE_GUPPYS_TAIL 134 COLLECTIBLE_IV_BAG 135 COLLECTIBLE_BEST_FRIEND 136 COLLECTIBLE_REMOTE_DETONATOR 137 COLLECTIBLE_STIGMATA 138 COLLECTIBLE_MOMS_PURSE 139 COLLECTIBLE_BOBS_CURSE 140 COLLECTIBLE_PAGEANT_BOY 141 COLLECTIBLE_SCAPULAR 142 COLLECTIBLE_SPEED_BALL 143 COLLECTIBLE_BUM_FRIEND 144 COLLECTIBLE_GUPPYS_HEAD 145 COLLECTIBLE_PRAYER_CARD 146 COLLECTIBLE_NOTCHED_AXE 147 COLLECTIBLE_INFESTATION 148 COLLECTIBLE_IPECAC 149 COLLECTIBLE_TOUGH_LOVE 150 COLLECTIBLE_MULLIGAN 151 COLLECTIBLE_TECHNOLOGY_2 152 COLLECTIBLE_MUTANT_SPIDER 153 COLLECTIBLE_CHEMICAL_PEEL 154 COLLECTIBLE_PEEPER 155 COLLECTIBLE_HABIT 156 COLLECTIBLE_BLOODY_LUST 157 COLLECTIBLE_CRYSTAL_BALL 158 COLLECTIBLE_SPIRIT_NIGHT 159 COLLECTIBLE_CRACK_THE_SKY 160 COLLECTIBLE_ANKH 161 COLLECTIBLE_CELTIC_CROSS 162 COLLECTIBLE_GHOST_BABY 163 COLLECTIBLE_CANDLE 164 COLLECTIBLE_CAT_NINE_TAILS 165 COLLECTIBLE_D20 166 COLLECTIBLE_HARLEQUIN_BABY 167 COLLECTIBLE_EPIC_FETUS 168 COLLECTIBLE_POLYPHEMUS 169 COLLECTIBLE_DADDY_LONGLEGS 170 COLLECTIBLE_SPIDER_BUTT 171 COLLECTIBLE_SACRIFICIAL_DAGGER 172 COLLECTIBLE_MITRE 173 COLLECTIBLE_RAINBOW_BABY 174 COLLECTIBLE_DADS_KEY 175 COLLECTIBLE_STEM_CELLS 176 COLLECTIBLE_PORTABLE_SLOT 177 COLLECTIBLE_HOLY_WATER 178 COLLECTIBLE_FATE 179 COLLECTIBLE_BLACK_BEAN 180 COLLECTIBLE_WHITE_PONY 181 COLLECTIBLE_SACRED_HEART 182 COLLECTIBLE_TOOTH_PICKS 183 COLLECTIBLE_HOLY_GRAIL 184 COLLECTIBLE_DEAD_DOVE 185 COLLECTIBLE_BLOOD_RIGHTS 186 COLLECTIBLE_GUPPYS_HAIRBALL 187 COLLECTIBLE_ABEL 188 COLLECTIBLE_SMB_SUPER_FAN 189 COLLECTIBLE_PYRO 190 COLLECTIBLE_3_DOLLAR_BILL 191 COLLECTIBLE_TELEPATHY_BOOK 192 COLLECTIBLE_MEAT 193 COLLECTIBLE_MAGIC_8_BALL 194 COLLECTIBLE_MOMS_COIN_PURSE 195 COLLECTIBLE_SQUEEZY 196 COLLECTIBLE_JESUS_JUICE 197 COLLECTIBLE_BOX 198 COLLECTIBLE_MOMS_KEY 199 COLLECTIBLE_MOMS_EYESHADOW 200 COLLECTIBLE_IRON_BAR 201 COLLECTIBLE_MIDAS_TOUCH 202 COLLECTIBLE_HUMBLEING_BUNDLE 203 COLLECTIBLE_FANNY_PACK 204 COLLECTIBLE_SHARP_PLUG 205 COLLECTIBLE_GUILLOTINE 206 COLLECTIBLE_BALL_OF_BANDAGES 207 COLLECTIBLE_CHAMPION_BELT 208 COLLECTIBLE_BUTT_BOMBS 209 COLLECTIBLE_GNAWED_LEAF 210 COLLECTIBLE_SPIDERBABY 211 COLLECTIBLE_GUPPYS_COLLAR 212 COLLECTIBLE_LOST_CONTACT 213 COLLECTIBLE_ANEMIC 214 COLLECTIBLE_GOAT_HEAD 215 COLLECTIBLE_CEREMONIAL_ROBES 216 COLLECTIBLE_MOMS_WIG 217 COLLECTIBLE_PLACENTA 218 COLLECTIBLE_OLD_BANDAGE 219 COLLECTIBLE_SAD_BOMBS 220 COLLECTIBLE_RUBBER_CEMENT 221 COLLECTIBLE_ANTI_GRAVITY 222 COLLECTIBLE_PYROMANIAC 223 COLLECTIBLE_CRICKETS_BODY 224 COLLECTIBLE_GIMPY 225 COLLECTIBLE_BLACK_LOTUS 226 COLLECTIBLE_PIGGY_BANK 227 COLLECTIBLE_MOMS_PERFUME 228 COLLECTIBLE_MONSTROS_LUNG 229 COLLECTIBLE_ABADDON 230 COLLECTIBLE_BALL_OF_TAR 231 COLLECTIBLE_STOP_WATCH 232 COLLECTIBLE_TINY_PLANET 233 COLLECTIBLE_INFESTATION_2 234 COLLECTIBLE_235 235 COLLECTIBLE_E_COLI 236 COLLECTIBLE_DEATHS_TOUCH 237 COLLECTIBLE_KEY_PIECE_1 238 COLLECTIBLE_KEY_PIECE_2 239 COLLECTIBLE_EXPERIMENTAL_TREATMENT 240 COLLECTIBLE_CONTRACT_FROM_BELOW 241 COLLECTIBLE_INFAMY 242 COLLECTIBLE_TRINITY_SHIELD 243 COLLECTIBLE_TECH_5 244 COLLECTIBLE_20_20 245 COLLECTIBLE_BLUE_MAP 246 COLLECTIBLE_BFFS 247 COLLECTIBLE_HIVE_MIND 248 COLLECTIBLE_THERES_OPTIONS 249 COLLECTIBLE_BOGO_BOMBS 250 COLLECTIBLE_STARTER_DECK 251 COLLECTIBLE_LITTLE_BAGGY 252 COLLECTIBLE_MAGIC_SCAB 253 COLLECTIBLE_BLOOD_CLOT 254 COLLECTIBLE_SCREW 255 COLLECTIBLE_HOT_BOMBS 256 COLLECTIBLE_FIRE_MIND 257 COLLECTIBLE_MISSING_NO 258 COLLECTIBLE_DARK_MATTER 259 COLLECTIBLE_BLACK_CANDLE 260 COLLECTIBLE_PROPTOSIS 261 COLLECTIBLE_MISSING_PAGE_2 262 COLLECTIBLE_263 263 COLLECTIBLE_SMART_FLY 264 COLLECTIBLE_DRY_BABY 265 COLLECTIBLE_JUICY_SACK 266 COLLECTIBLE_ROBO_BABY_2 267 COLLECTIBLE_ROTTEN_BABY 268 COLLECTIBLE_HEADLESS_BABY 269 COLLECTIBLE_LEECH 270 COLLECTIBLE_MYSTERY_SACK 271 COLLECTIBLE_BBF 272 COLLECTIBLE_BOBS_BRAIN 273 COLLECTIBLE_BEST_BUD 274 COLLECTIBLE_LIL_BRIMSTONE 275 COLLECTIBLE_ISAACS_HEART 276 COLLECTIBLE_LIL_HAUNT 277 COLLECTIBLE_DARK_BUM 278 COLLECTIBLE_BIG_FAN 279 COLLECTIBLE_SISSY_LONGLEGS 280 COLLECTIBLE_PUNCHING_BAG 281 COLLECTIBLE_HOW_TO_JUMP 282 COLLECTIBLE_D100 283 COLLECTIBLE_D4 284 COLLECTIBLE_D10 285 COLLECTIBLE_BLANK_CARD 286 COLLECTIBLE_BOOK_OF_SECRETS 287 COLLECTIBLE_BOX_OF_SPIDERS 288 COLLECTIBLE_RED_CANDLE 289 COLLECTIBLE_THE_JAR 290 COLLECTIBLE_FLUSH 291 COLLECTIBLE_SATANIC_BIBLE 292 COLLECTIBLE_HEAD_OF_KRAMPUS 293 COLLECTIBLE_BUTTER_BEAN 294 COLLECTIBLE_MAGIC_FINGERS 295 COLLECTIBLE_CONVERTER 296 COLLECTIBLE_BLUE_BOX 297 COLLECTIBLE_UNICORN_STUMP 298 COLLECTIBLE_TAURUS 299 COLLECTIBLE_ARIES 300 COLLECTIBLE_CANCER 301 COLLECTIBLE_LEO 302 COLLECTIBLE_VIRGO 303 COLLECTIBLE_LIBRA 304 COLLECTIBLE_SCORPIO 305 COLLECTIBLE_SAGITTARIUS 306 COLLECTIBLE_CAPRICORN 307 COLLECTIBLE_AQUARIUS 308 COLLECTIBLE_PISCES 309 COLLECTIBLE_EVES_MASCARA 310 COLLECTIBLE_JUDAS_SHADOW 311 COLLECTIBLE_MAGGYS_BOW 312 COLLECTIBLE_HOLY_MANTLE 313 COLLECTIBLE_THUNDER_THIGHS 314 COLLECTIBLE_STRANGE_ATTRACTOR 315 COLLECTIBLE_CURSED_EYE 316 COLLECTIBLE_MYSTERIOUS_LIQUID 317 COLLECTIBLE_GEMINI 318 COLLECTIBLE_CAINS_OTHER_EYE 319 COLLECTIBLE_BLUEBABYS_ONLY_FRIEND 320 COLLECTIBLE_SAMSONS_CHAINS 321 COLLECTIBLE_MONGO_BABY 322 COLLECTIBLE_ISAACS_TEARS 323 COLLECTIBLE_UNDEFINED 324 COLLECTIBLE_SCISSORS 325 COLLECTIBLE_BREATH_OF_LIFE 326 COLLECTIBLE_POLAROID 327 COLLECTIBLE_NEGATIVE 328 COLLECTIBLE_LUDOVICO_TECHNIQUE 329 COLLECTIBLE_SOY_MILK 330 COLLECTIBLE_GODHEAD 331 COLLECTIBLE_LAZARUS_RAGS 332 COLLECTIBLE_MIND 333 COLLECTIBLE_BODY 334 COLLECTIBLE_SOUL 335 COLLECTIBLE_DEAD_ONION 336 COLLECTIBLE_BROKEN_WATCH 337 COLLECTIBLE_BOOMERANG 338 COLLECTIBLE_SAFETY_PIN 339 COLLECTIBLE_CAFFEINE_PILL 340 COLLECTIBLE_TORN_PHOTO 341 COLLECTIBLE_BLUE_CAP 342 COLLECTIBLE_LATCH_KEY 343 COLLECTIBLE_MATCH_BOOK 344 COLLECTIBLE_SYNTHOIL 345 COLLECTIBLE_SNACK 346 COLLECTIBLE_DIPLOPIA 347 COLLECTIBLE_PLACEBO 348 COLLECTIBLE_WOODEN_NICKEL 349 COLLECTIBLE_TOXIC_SHOCK 350 COLLECTIBLE_MEGA_BEAN 351 COLLECTIBLE_GLASS_CANNON 352 COLLECTIBLE_BOMBER_BOY 353 COLLECTIBLE_CRACK_JACKS 354 COLLECTIBLE_MOMS_PEARLS 355 COLLECTIBLE_CAR_BATTERY 356 COLLECTIBLE_BOX_OF_FRIENDS 357 COLLECTIBLE_THE_WIZ 358 COLLECTIBLE_8_INCH_NAILS 359 COLLECTIBLE_INCUBUS 360 COLLECTIBLE_FATES_REWARD 361 COLLECTIBLE_LIL_CHEST 362 COLLECTIBLE_SWORN_PROTECTOR 363 COLLECTIBLE_FRIEND_ZONE 364 COLLECTIBLE_LOST_FLY 365 COLLECTIBLE_SCATTER_BOMBS 366 COLLECTIBLE_STICKY_BOMBS 367 COLLECTIBLE_EPIPHORA 368 COLLECTIBLE_CONTINUUM 369 COLLECTIBLE_MR_DOLLY 370 COLLECTIBLE_CURSE_OF_THE_TOWER 371 COLLECTIBLE_CHARGED_BABY 372 COLLECTIBLE_DEAD_EYE 373 COLLECTIBLE_HOLY_LIGHT 374 COLLECTIBLE_HOST_HAT 375 COLLECTIBLE_RESTOCK 376 COLLECTIBLE_BURSTING_SACK 377 COLLECTIBLE_NUMBER_TWO 378 COLLECTIBLE_PUPULA_DUPLEX 379 COLLECTIBLE_PAY_TO_PLAY 380 COLLECTIBLE_EDENS_BLESSING 381 COLLECTIBLE_FRIEND_BALL 382 COLLECTIBLE_TEAR_DETONATOR 383 COLLECTIBLE_LIL_GURDY 384 COLLECTIBLE_BUMBO 385 COLLECTIBLE_D12 386 COLLECTIBLE_CENSER 387 COLLECTIBLE_KEY_BUM 388 COLLECTIBLE_RUNE_BAG 389 COLLECTIBLE_SERAPHIM 390 COLLECTIBLE_BETRAYAL 391 COLLECTIBLE_ZODIAC 392 COLLECTIBLE_SERPENTS_KISS 393 COLLECTIBLE_MARKED 394 COLLECTIBLE_TECH_X 395 COLLECTIBLE_VENTRICLE_RAZOR 396 COLLECTIBLE_TRACTOR_BEAM 397 COLLECTIBLE_GODS_FLESH 398 COLLECTIBLE_MAW_OF_VOID 399 COLLECTIBLE_SPEAR_OF_DESTINY 400 COLLECTIBLE_EXPLOSIVO 401 COLLECTIBLE_CHAOS 402 COLLECTIBLE_SPIDER_MOD 403 COLLECTIBLE_FARTING_BABY 404 COLLECTIBLE_GB_BUG 405 COLLECTIBLE_D8 406 COLLECTIBLE_PURITY 407 COLLECTIBLE_ATHAME 408 COLLECTIBLE_EMPTY_VESSEL 409 COLLECTIBLE_EVIL_EYE 410 COLLECTIBLE_LUSTY_BLOOD 411 COLLECTIBLE_CAMBION_CONCEPTION 412 COLLECTIBLE_IMMACULATE_CONCEPTION 413 COLLECTIBLE_MORE_OPTIONS 414 COLLECTIBLE_CROWN_OF_LIGHT 415 COLLECTIBLE_DEEP_POCKETS 416 COLLECTIBLE_SUCCUBUS 417 COLLECTIBLE_FRUIT_CAKE 418 COLLECTIBLE_TELEPORT_2 419 COLLECTIBLE_BLACK_POWDER 420 COLLECTIBLE_KIDNEY_BEAN 421 COLLECTIBLE_GLOWING_HOUR_GLASS 422 COLLECTIBLE_CIRCLE_OF_PROTECTION 423 COLLECTIBLE_SACK_HEAD 424 COLLECTIBLE_NIGHT_LIGHT 425 COLLECTIBLE_OBSESSED_FAN 426 COLLECTIBLE_MINE_CRAFTER 427 COLLECTIBLE_PJS 428 COLLECTIBLE_HEAD_OF_THE_KEEPER 429 COLLECTIBLE_PAPA_FLY 430 COLLECTIBLE_MULTIDIMENSIONAL_BABY 431 COLLECTIBLE_GLITTER_BOMBS 432 COLLECTIBLE_MY_SHADOW 433 COLLECTIBLE_JAR_OF_FLIES 434 COLLECTIBLE_LIL_LOKI 435 COLLECTIBLE_MILK 436 COLLECTIBLE_D7 437 COLLECTIBLE_BINKY 438 COLLECTIBLE_MOMS_BOX 439 COLLECTIBLE_KIDNEY_STONE 440 COLLECTIBLE_MEGA_SATANS_BREATH 441 COLLECTIBLE_DARK_PRINCESS_CROWN 442 COLLECTIBLE_APPLE 443 COLLECTIBLE_LEAD_PENCIL 444 COLLECTIBLE_DOG_TOOTH 445 COLLECTIBLE_DEAD_TOOTH 446 COLLECTIBLE_LINGER_BEAN 447 COLLECTIBLE_SHARD_OF_GLASS 448 COLLECTIBLE_METAL_PLATE 449 COLLECTIBLE_EYE_OF_GREED 450 COLLECTIBLE_TAROT_CLOTH 451 COLLECTIBLE_VARICOSE_VEINS 452 COLLECTIBLE_COMPOUND_FRACTURE 453 COLLECTIBLE_POLYDACTYLY 454 COLLECTIBLE_DADS_LOST_COIN 455 COLLECTIBLE_MOLDY_BREAD 456 COLLECTIBLE_CONE_HEAD 457 COLLECTIBLE_BELLY_BUTTON 458 COLLECTIBLE_SINUS_INFECTION 459 COLLECTIBLE_GLAUCOMA 460 COLLECTIBLE_PARASITOID 461 COLLECTIBLE_EYE_OF_BELIAL 462 COLLECTIBLE_SULFURIC_ACID 463 COLLECTIBLE_GLYPH_OF_BALANCE 464 COLLECTIBLE_ANALOG_STICK 465 COLLECTIBLE_CONTAGION 466 COLLECTIBLE_FINGER 467 COLLECTIBLE_SHADE 468 COLLECTIBLE_DEPRESSION 469 COLLECTIBLE_HUSHY 470 COLLECTIBLE_LIL_MONSTRO 471 COLLECTIBLE_KING_BABY 472 COLLECTIBLE_BIG_CHUBBY 473 COLLECTIBLE_TONSIL 474 COLLECTIBLE_PLAN_C 475 COLLECTIBLE_D1 476 COLLECTIBLE_VOID 477 COLLECTIBLE_PAUSE 478 COLLECTIBLE_SMELTER 479 COLLECTIBLE_COMPOST 480 COLLECTIBLE_DATAMINER 481 COLLECTIBLE_CLICKER 482 COLLECTIBLE_MAMA_MEGA 483 COLLECTIBLE_WAIT_WHAT 484 COLLECTIBLE_CROOKED_PENNY 485 COLLECTIBLE_DULL_RAZOR 486 COLLECTIBLE_POTATO_PEELER 487 COLLECTIBLE_METRONOME 488 COLLECTIBLE_DINF 489 COLLECTIBLE_EDENS_SOUL 490 COLLECTIBLE_ACID_BABY 491 COLLECTIBLE_YO_LISTEN 492 COLLECTIBLE_ADDERLINE 493 COLLECTIBLE_JACOBS_LADDER 494 COLLECTIBLE_GHOST_PEPPER 495 COLLECTIBLE_EUTHANASIA 496 COLLECTIBLE_CAMO_UNDIES 497 COLLECTIBLE_DUALITY 498 COLLECTIBLE_EUCHARIST 499 COLLECTIBLE_SACK_OF_SACKS 500 COLLECTIBLE_GREEDS_GULLET 501 COLLECTIBLE_LARGE_ZIT 502 COLLECTIBLE_LITTLE_HORN 503 COLLECTIBLE_BROWN_NUGGET 504 COLLECTIBLE_POKE_GO 505 COLLECTIBLE_BACKSTABBER 506 COLLECTIBLE_SHARP_STRAW 507 COLLECTIBLE_MOMS_RAZOR 508 COLLECTIBLE_BLOODSHOT_EYE 509 COLLECTIBLE_DELIRIOUS 510 COLLECTIBLE_ANGRY_FLY Booster Pack #1 511 COLLECTIBLE_BLACK_HOLE 512 COLLECTIBLE_BOZO 513 COLLECTIBLE_BROKEN_MODEM 514 COLLECTIBLE_MYSTERY_GIFT 515 COLLECTIBLE_SPRINKLER 516 COLLECTIBLE_FAST_BOMBS 517 COLLECTIBLE_BUDDY_IN_A_BOX 518 COLLECTIBLE_LIL_DELIRIUM 519 COLLECTIBLE_JUMPER_CABLES Booster Pack #2 520 COLLECTIBLE_COUPON 521 COLLECTIBLE_TELEKINESIS 522 COLLECTIBLE_MOVING_BOX 523 COLLECTIBLE_TECHNOLOGY_ZERO 524 COLLECTIBLE_LEPROCY 525 COLLECTIBLE_LIL_HARBINGERS Booster Pack #3 526 COLLECTIBLE_MR_ME 527 COLLECTIBLE_ANGELIC_PRISM 528 COLLECTIBLE_POP 529 COLLECTIBLE_DEATH_LIST Booster Pack #4 530 COLLECTIBLE_HAEMOLACRIA 531 COLLECTIBLE_LACHRYPHAGY 532 COLLECTIBLE_TRISAGION 533 COLLECTIBLE_SCHOOLBAG 534 COLLECTIBLE_BLANKET Booster Pack #5 535 COLLECTIBLE_SACRIFICIAL_ALTAR 536 COLLECTIBLE_LIL_SPEWER 537 COLLECTIBLE_MARBLES 538 COLLECTIBLE_MYSTERY_EGG 539 COLLECTIBLE_FLAT_STONE 540 COLLECTIBLE_MARROW 541 COLLECTIBLE_SLIPPED_RIB 542 COLLECTIBLE_HALLOWED_GROUND 543 COLLECTIBLE_POINTY_RIB 544 COLLECTIBLE_BOOK_OF_THE_DEAD 545 COLLECTIBLE_DADS_RING 546 COLLECTIBLE_DIVORCE_PAPERS 547 COLLECTIBLE_JAW_BONE 548 COLLECTIBLE_BRITTLE_BONES 549 COLLECTIBLE_BROKEN_SHOVEL 550 COLLECTIBLE_BROKEN_SHOVEL_2 551 COLLECTIBLE_MOMS_SHOVEL 552 NUM_COLLECTIBLES 553","title":"CollectibleType"},{"location":"enums/CollectibleType/#enum-collectibletype","text":"Enumerator comment id COLLECTIBLE_NULL 0 COLLECTIBLE_SAD_ONION 1 COLLECTIBLE_INNER_EYE 2 COLLECTIBLE_SPOON_BENDER 3 COLLECTIBLE_MAXS_HEAD 4 COLLECTIBLE_MY_REFLECTION 5 COLLECTIBLE_NUMBER_ONE 6 COLLECTIBLE_BLOOD_MARTYR 7 COLLECTIBLE_BROTHER_BOBBY 8 COLLECTIBLE_SKATOLE 9 COLLECTIBLE_HALO_OF_FLIES 10 COLLECTIBLE_ONE_UP 11 COLLECTIBLE_MAGIC_MUSHROOM 12 COLLECTIBLE_VIRUS 13 COLLECTIBLE_ROID_RAGE 14 COLLECTIBLE_HEART 15 COLLECTIBLE_RAW_LIVER 16 COLLECTIBLE_SKELETON_KEY 17 COLLECTIBLE_DOLLAR 18 COLLECTIBLE_BOOM 19 COLLECTIBLE_TRANSCENDENCE 20 COLLECTIBLE_COMPASS 21 COLLECTIBLE_LUNCH 22 COLLECTIBLE_DINNER 23 COLLECTIBLE_DESSERT 24 COLLECTIBLE_BREAKFAST 25 COLLECTIBLE_ROTTEN_MEAT 26 COLLECTIBLE_WOODEN_SPOON 27 COLLECTIBLE_BELT 28 COLLECTIBLE_MOMS_UNDERWEAR 29 COLLECTIBLE_MOMS_HEELS 30 COLLECTIBLE_MOMS_LIPSTICK 31 COLLECTIBLE_WIRE_COAT_HANGER 32 COLLECTIBLE_BIBLE 33 COLLECTIBLE_BOOK_OF_BELIAL 34 COLLECTIBLE_NECRONOMICON 35 COLLECTIBLE_POOP 36 COLLECTIBLE_MR_BOOM 37 COLLECTIBLE_TAMMYS_HEAD 38 COLLECTIBLE_MOMS_BRA 39 COLLECTIBLE_KAMIKAZE 40 COLLECTIBLE_MOMS_PAD 41 COLLECTIBLE_BOBS_ROTTEN_HEAD 42 COLLECTIBLE_PILLS_HERE 43 COLLECTIBLE_TELEPORT 44 COLLECTIBLE_YUM_HEART 45 COLLECTIBLE_LUCKY_FOOT 46 COLLECTIBLE_DOCTORS_REMOTE 47 COLLECTIBLE_CUPIDS_ARROW 48 COLLECTIBLE_SHOOP_DA_WHOOP 49 COLLECTIBLE_STEVEN 50 COLLECTIBLE_PENTAGRAM 51 COLLECTIBLE_DR_FETUS 52 COLLECTIBLE_MAGNETO 53 COLLECTIBLE_TREASURE_MAP 54 COLLECTIBLE_MOMS_EYE 55 COLLECTIBLE_LEMON_MISHAP 56 COLLECTIBLE_DISTANT_ADMIRATION 57 COLLECTIBLE_BOOK_OF_SHADOWS 58 COLLECTIBLE_059 59 COLLECTIBLE_LADDER 60 COLLECTIBLE_TAROT_CARD 61 COLLECTIBLE_CHARM_VAMPIRE 62 COLLECTIBLE_BATTERY 63 COLLECTIBLE_STEAM_SALE 64 COLLECTIBLE_ANARCHIST_COOKBOOK 65 COLLECTIBLE_HOURGLASS 66 COLLECTIBLE_SISTER_MAGGY 67 COLLECTIBLE_TECHNOLOGY 68 COLLECTIBLE_CHOCOLATE_MILK 69 COLLECTIBLE_GROWTH_HORMONES 70 COLLECTIBLE_MINI_MUSH 71 COLLECTIBLE_ROSARY 72 COLLECTIBLE_CUBE_OF_MEAT 73 COLLECTIBLE_QUARTER 74 COLLECTIBLE_PHD 75 COLLECTIBLE_XRAY_VISION 76 COLLECTIBLE_MY_LITTLE_UNICORN 77 COLLECTIBLE_BOOK_REVELATIONS 78 COLLECTIBLE_MARK 79 COLLECTIBLE_PACT 80 COLLECTIBLE_DEAD_CAT 81 COLLECTIBLE_LORD_OF_THE_PIT 82 COLLECTIBLE_THE_NAIL 83 COLLECTIBLE_WE_NEED_GO_DEEPER 84 COLLECTIBLE_DECK_OF_CARDS 85 COLLECTIBLE_MONSTROS_TOOTH 86 COLLECTIBLE_LOKIS_HORNS 87 COLLECTIBLE_LITTLE_CHUBBY 88 COLLECTIBLE_SPIDER_BITE 89 COLLECTIBLE_SMALL_ROCK 90 COLLECTIBLE_SPELUNKER_HAT 91 COLLECTIBLE_SUPER_BANDAGE 92 COLLECTIBLE_GAMEKID 93 COLLECTIBLE_SACK_OF_PENNIES 94 COLLECTIBLE_ROBO_BABY 95 COLLECTIBLE_LITTLE_CHAD 96 COLLECTIBLE_BOOK_OF_SIN 97 COLLECTIBLE_RELIC 98 COLLECTIBLE_LITTLE_GISH 99 COLLECTIBLE_LITTLE_STEVEN 100 COLLECTIBLE_HALO 101 COLLECTIBLE_MOMS_BOTTLE_PILLS 102 COLLECTIBLE_COMMON_COLD 103 COLLECTIBLE_PARASITE 104 COLLECTIBLE_D6 105 COLLECTIBLE_MR_MEGA 106 COLLECTIBLE_PINKING_SHEARS 107 COLLECTIBLE_WAFER 108 COLLECTIBLE_MONEY_IS_POWER 109 COLLECTIBLE_MOMS_CONTACTS 110 COLLECTIBLE_BEAN 111 COLLECTIBLE_GUARDIAN_ANGEL 112 COLLECTIBLE_DEMON_BABY 113 COLLECTIBLE_MOMS_KNIFE 114 COLLECTIBLE_OUIJA_BOARD 115 COLLECTIBLE_NINE_VOLT 116 COLLECTIBLE_DEAD_BIRD 117 COLLECTIBLE_BRIMSTONE 118 COLLECTIBLE_BLOOD_BAG 119 COLLECTIBLE_ODD_MUSHROOM_RATE 120 COLLECTIBLE_ODD_MUSHROOM_DAMAGE 121 COLLECTIBLE_WHORE_OF_BABYLON 122 COLLECTIBLE_MONSTER_MANUAL 123 COLLECTIBLE_DEAD_SEA_SCROLLS 124 COLLECTIBLE_BOBBY_BOMB 125 COLLECTIBLE_RAZOR_BLADE 126 COLLECTIBLE_FORGET_ME_NOW 127 COLLECTIBLE_FOREVER_ALONE 128 COLLECTIBLE_BUCKET_LARD 129 COLLECTIBLE_PONY 130 COLLECTIBLE_BOMB_BAG 131 COLLECTIBLE_LUMP_OF_COAL 132 COLLECTIBLE_GUPPYS_PAW 133 COLLECTIBLE_GUPPYS_TAIL 134 COLLECTIBLE_IV_BAG 135 COLLECTIBLE_BEST_FRIEND 136 COLLECTIBLE_REMOTE_DETONATOR 137 COLLECTIBLE_STIGMATA 138 COLLECTIBLE_MOMS_PURSE 139 COLLECTIBLE_BOBS_CURSE 140 COLLECTIBLE_PAGEANT_BOY 141 COLLECTIBLE_SCAPULAR 142 COLLECTIBLE_SPEED_BALL 143 COLLECTIBLE_BUM_FRIEND 144 COLLECTIBLE_GUPPYS_HEAD 145 COLLECTIBLE_PRAYER_CARD 146 COLLECTIBLE_NOTCHED_AXE 147 COLLECTIBLE_INFESTATION 148 COLLECTIBLE_IPECAC 149 COLLECTIBLE_TOUGH_LOVE 150 COLLECTIBLE_MULLIGAN 151 COLLECTIBLE_TECHNOLOGY_2 152 COLLECTIBLE_MUTANT_SPIDER 153 COLLECTIBLE_CHEMICAL_PEEL 154 COLLECTIBLE_PEEPER 155 COLLECTIBLE_HABIT 156 COLLECTIBLE_BLOODY_LUST 157 COLLECTIBLE_CRYSTAL_BALL 158 COLLECTIBLE_SPIRIT_NIGHT 159 COLLECTIBLE_CRACK_THE_SKY 160 COLLECTIBLE_ANKH 161 COLLECTIBLE_CELTIC_CROSS 162 COLLECTIBLE_GHOST_BABY 163 COLLECTIBLE_CANDLE 164 COLLECTIBLE_CAT_NINE_TAILS 165 COLLECTIBLE_D20 166 COLLECTIBLE_HARLEQUIN_BABY 167 COLLECTIBLE_EPIC_FETUS 168 COLLECTIBLE_POLYPHEMUS 169 COLLECTIBLE_DADDY_LONGLEGS 170 COLLECTIBLE_SPIDER_BUTT 171 COLLECTIBLE_SACRIFICIAL_DAGGER 172 COLLECTIBLE_MITRE 173 COLLECTIBLE_RAINBOW_BABY 174 COLLECTIBLE_DADS_KEY 175 COLLECTIBLE_STEM_CELLS 176 COLLECTIBLE_PORTABLE_SLOT 177 COLLECTIBLE_HOLY_WATER 178 COLLECTIBLE_FATE 179 COLLECTIBLE_BLACK_BEAN 180 COLLECTIBLE_WHITE_PONY 181 COLLECTIBLE_SACRED_HEART 182 COLLECTIBLE_TOOTH_PICKS 183 COLLECTIBLE_HOLY_GRAIL 184 COLLECTIBLE_DEAD_DOVE 185 COLLECTIBLE_BLOOD_RIGHTS 186 COLLECTIBLE_GUPPYS_HAIRBALL 187 COLLECTIBLE_ABEL 188 COLLECTIBLE_SMB_SUPER_FAN 189 COLLECTIBLE_PYRO 190 COLLECTIBLE_3_DOLLAR_BILL 191 COLLECTIBLE_TELEPATHY_BOOK 192 COLLECTIBLE_MEAT 193 COLLECTIBLE_MAGIC_8_BALL 194 COLLECTIBLE_MOMS_COIN_PURSE 195 COLLECTIBLE_SQUEEZY 196 COLLECTIBLE_JESUS_JUICE 197 COLLECTIBLE_BOX 198 COLLECTIBLE_MOMS_KEY 199 COLLECTIBLE_MOMS_EYESHADOW 200 COLLECTIBLE_IRON_BAR 201 COLLECTIBLE_MIDAS_TOUCH 202 COLLECTIBLE_HUMBLEING_BUNDLE 203 COLLECTIBLE_FANNY_PACK 204 COLLECTIBLE_SHARP_PLUG 205 COLLECTIBLE_GUILLOTINE 206 COLLECTIBLE_BALL_OF_BANDAGES 207 COLLECTIBLE_CHAMPION_BELT 208 COLLECTIBLE_BUTT_BOMBS 209 COLLECTIBLE_GNAWED_LEAF 210 COLLECTIBLE_SPIDERBABY 211 COLLECTIBLE_GUPPYS_COLLAR 212 COLLECTIBLE_LOST_CONTACT 213 COLLECTIBLE_ANEMIC 214 COLLECTIBLE_GOAT_HEAD 215 COLLECTIBLE_CEREMONIAL_ROBES 216 COLLECTIBLE_MOMS_WIG 217 COLLECTIBLE_PLACENTA 218 COLLECTIBLE_OLD_BANDAGE 219 COLLECTIBLE_SAD_BOMBS 220 COLLECTIBLE_RUBBER_CEMENT 221 COLLECTIBLE_ANTI_GRAVITY 222 COLLECTIBLE_PYROMANIAC 223 COLLECTIBLE_CRICKETS_BODY 224 COLLECTIBLE_GIMPY 225 COLLECTIBLE_BLACK_LOTUS 226 COLLECTIBLE_PIGGY_BANK 227 COLLECTIBLE_MOMS_PERFUME 228 COLLECTIBLE_MONSTROS_LUNG 229 COLLECTIBLE_ABADDON 230 COLLECTIBLE_BALL_OF_TAR 231 COLLECTIBLE_STOP_WATCH 232 COLLECTIBLE_TINY_PLANET 233 COLLECTIBLE_INFESTATION_2 234 COLLECTIBLE_235 235 COLLECTIBLE_E_COLI 236 COLLECTIBLE_DEATHS_TOUCH 237 COLLECTIBLE_KEY_PIECE_1 238 COLLECTIBLE_KEY_PIECE_2 239 COLLECTIBLE_EXPERIMENTAL_TREATMENT 240 COLLECTIBLE_CONTRACT_FROM_BELOW 241 COLLECTIBLE_INFAMY 242 COLLECTIBLE_TRINITY_SHIELD 243 COLLECTIBLE_TECH_5 244 COLLECTIBLE_20_20 245 COLLECTIBLE_BLUE_MAP 246 COLLECTIBLE_BFFS 247 COLLECTIBLE_HIVE_MIND 248 COLLECTIBLE_THERES_OPTIONS 249 COLLECTIBLE_BOGO_BOMBS 250 COLLECTIBLE_STARTER_DECK 251 COLLECTIBLE_LITTLE_BAGGY 252 COLLECTIBLE_MAGIC_SCAB 253 COLLECTIBLE_BLOOD_CLOT 254 COLLECTIBLE_SCREW 255 COLLECTIBLE_HOT_BOMBS 256 COLLECTIBLE_FIRE_MIND 257 COLLECTIBLE_MISSING_NO 258 COLLECTIBLE_DARK_MATTER 259 COLLECTIBLE_BLACK_CANDLE 260 COLLECTIBLE_PROPTOSIS 261 COLLECTIBLE_MISSING_PAGE_2 262 COLLECTIBLE_263 263 COLLECTIBLE_SMART_FLY 264 COLLECTIBLE_DRY_BABY 265 COLLECTIBLE_JUICY_SACK 266 COLLECTIBLE_ROBO_BABY_2 267 COLLECTIBLE_ROTTEN_BABY 268 COLLECTIBLE_HEADLESS_BABY 269 COLLECTIBLE_LEECH 270 COLLECTIBLE_MYSTERY_SACK 271 COLLECTIBLE_BBF 272 COLLECTIBLE_BOBS_BRAIN 273 COLLECTIBLE_BEST_BUD 274 COLLECTIBLE_LIL_BRIMSTONE 275 COLLECTIBLE_ISAACS_HEART 276 COLLECTIBLE_LIL_HAUNT 277 COLLECTIBLE_DARK_BUM 278 COLLECTIBLE_BIG_FAN 279 COLLECTIBLE_SISSY_LONGLEGS 280 COLLECTIBLE_PUNCHING_BAG 281 COLLECTIBLE_HOW_TO_JUMP 282 COLLECTIBLE_D100 283 COLLECTIBLE_D4 284 COLLECTIBLE_D10 285 COLLECTIBLE_BLANK_CARD 286 COLLECTIBLE_BOOK_OF_SECRETS 287 COLLECTIBLE_BOX_OF_SPIDERS 288 COLLECTIBLE_RED_CANDLE 289 COLLECTIBLE_THE_JAR 290 COLLECTIBLE_FLUSH 291 COLLECTIBLE_SATANIC_BIBLE 292 COLLECTIBLE_HEAD_OF_KRAMPUS 293 COLLECTIBLE_BUTTER_BEAN 294 COLLECTIBLE_MAGIC_FINGERS 295 COLLECTIBLE_CONVERTER 296 COLLECTIBLE_BLUE_BOX 297 COLLECTIBLE_UNICORN_STUMP 298 COLLECTIBLE_TAURUS 299 COLLECTIBLE_ARIES 300 COLLECTIBLE_CANCER 301 COLLECTIBLE_LEO 302 COLLECTIBLE_VIRGO 303 COLLECTIBLE_LIBRA 304 COLLECTIBLE_SCORPIO 305 COLLECTIBLE_SAGITTARIUS 306 COLLECTIBLE_CAPRICORN 307 COLLECTIBLE_AQUARIUS 308 COLLECTIBLE_PISCES 309 COLLECTIBLE_EVES_MASCARA 310 COLLECTIBLE_JUDAS_SHADOW 311 COLLECTIBLE_MAGGYS_BOW 312 COLLECTIBLE_HOLY_MANTLE 313 COLLECTIBLE_THUNDER_THIGHS 314 COLLECTIBLE_STRANGE_ATTRACTOR 315 COLLECTIBLE_CURSED_EYE 316 COLLECTIBLE_MYSTERIOUS_LIQUID 317 COLLECTIBLE_GEMINI 318 COLLECTIBLE_CAINS_OTHER_EYE 319 COLLECTIBLE_BLUEBABYS_ONLY_FRIEND 320 COLLECTIBLE_SAMSONS_CHAINS 321 COLLECTIBLE_MONGO_BABY 322 COLLECTIBLE_ISAACS_TEARS 323 COLLECTIBLE_UNDEFINED 324 COLLECTIBLE_SCISSORS 325 COLLECTIBLE_BREATH_OF_LIFE 326 COLLECTIBLE_POLAROID 327 COLLECTIBLE_NEGATIVE 328 COLLECTIBLE_LUDOVICO_TECHNIQUE 329 COLLECTIBLE_SOY_MILK 330 COLLECTIBLE_GODHEAD 331 COLLECTIBLE_LAZARUS_RAGS 332 COLLECTIBLE_MIND 333 COLLECTIBLE_BODY 334 COLLECTIBLE_SOUL 335 COLLECTIBLE_DEAD_ONION 336 COLLECTIBLE_BROKEN_WATCH 337 COLLECTIBLE_BOOMERANG 338 COLLECTIBLE_SAFETY_PIN 339 COLLECTIBLE_CAFFEINE_PILL 340 COLLECTIBLE_TORN_PHOTO 341 COLLECTIBLE_BLUE_CAP 342 COLLECTIBLE_LATCH_KEY 343 COLLECTIBLE_MATCH_BOOK 344 COLLECTIBLE_SYNTHOIL 345 COLLECTIBLE_SNACK 346 COLLECTIBLE_DIPLOPIA 347 COLLECTIBLE_PLACEBO 348 COLLECTIBLE_WOODEN_NICKEL 349 COLLECTIBLE_TOXIC_SHOCK 350 COLLECTIBLE_MEGA_BEAN 351 COLLECTIBLE_GLASS_CANNON 352 COLLECTIBLE_BOMBER_BOY 353 COLLECTIBLE_CRACK_JACKS 354 COLLECTIBLE_MOMS_PEARLS 355 COLLECTIBLE_CAR_BATTERY 356 COLLECTIBLE_BOX_OF_FRIENDS 357 COLLECTIBLE_THE_WIZ 358 COLLECTIBLE_8_INCH_NAILS 359 COLLECTIBLE_INCUBUS 360 COLLECTIBLE_FATES_REWARD 361 COLLECTIBLE_LIL_CHEST 362 COLLECTIBLE_SWORN_PROTECTOR 363 COLLECTIBLE_FRIEND_ZONE 364 COLLECTIBLE_LOST_FLY 365 COLLECTIBLE_SCATTER_BOMBS 366 COLLECTIBLE_STICKY_BOMBS 367 COLLECTIBLE_EPIPHORA 368 COLLECTIBLE_CONTINUUM 369 COLLECTIBLE_MR_DOLLY 370 COLLECTIBLE_CURSE_OF_THE_TOWER 371 COLLECTIBLE_CHARGED_BABY 372 COLLECTIBLE_DEAD_EYE 373 COLLECTIBLE_HOLY_LIGHT 374 COLLECTIBLE_HOST_HAT 375 COLLECTIBLE_RESTOCK 376 COLLECTIBLE_BURSTING_SACK 377 COLLECTIBLE_NUMBER_TWO 378 COLLECTIBLE_PUPULA_DUPLEX 379 COLLECTIBLE_PAY_TO_PLAY 380 COLLECTIBLE_EDENS_BLESSING 381 COLLECTIBLE_FRIEND_BALL 382 COLLECTIBLE_TEAR_DETONATOR 383 COLLECTIBLE_LIL_GURDY 384 COLLECTIBLE_BUMBO 385 COLLECTIBLE_D12 386 COLLECTIBLE_CENSER 387 COLLECTIBLE_KEY_BUM 388 COLLECTIBLE_RUNE_BAG 389 COLLECTIBLE_SERAPHIM 390 COLLECTIBLE_BETRAYAL 391 COLLECTIBLE_ZODIAC 392 COLLECTIBLE_SERPENTS_KISS 393 COLLECTIBLE_MARKED 394 COLLECTIBLE_TECH_X 395 COLLECTIBLE_VENTRICLE_RAZOR 396 COLLECTIBLE_TRACTOR_BEAM 397 COLLECTIBLE_GODS_FLESH 398 COLLECTIBLE_MAW_OF_VOID 399 COLLECTIBLE_SPEAR_OF_DESTINY 400 COLLECTIBLE_EXPLOSIVO 401 COLLECTIBLE_CHAOS 402 COLLECTIBLE_SPIDER_MOD 403 COLLECTIBLE_FARTING_BABY 404 COLLECTIBLE_GB_BUG 405 COLLECTIBLE_D8 406 COLLECTIBLE_PURITY 407 COLLECTIBLE_ATHAME 408 COLLECTIBLE_EMPTY_VESSEL 409 COLLECTIBLE_EVIL_EYE 410 COLLECTIBLE_LUSTY_BLOOD 411 COLLECTIBLE_CAMBION_CONCEPTION 412 COLLECTIBLE_IMMACULATE_CONCEPTION 413 COLLECTIBLE_MORE_OPTIONS 414 COLLECTIBLE_CROWN_OF_LIGHT 415 COLLECTIBLE_DEEP_POCKETS 416 COLLECTIBLE_SUCCUBUS 417 COLLECTIBLE_FRUIT_CAKE 418 COLLECTIBLE_TELEPORT_2 419 COLLECTIBLE_BLACK_POWDER 420 COLLECTIBLE_KIDNEY_BEAN 421 COLLECTIBLE_GLOWING_HOUR_GLASS 422 COLLECTIBLE_CIRCLE_OF_PROTECTION 423 COLLECTIBLE_SACK_HEAD 424 COLLECTIBLE_NIGHT_LIGHT 425 COLLECTIBLE_OBSESSED_FAN 426 COLLECTIBLE_MINE_CRAFTER 427 COLLECTIBLE_PJS 428 COLLECTIBLE_HEAD_OF_THE_KEEPER 429 COLLECTIBLE_PAPA_FLY 430 COLLECTIBLE_MULTIDIMENSIONAL_BABY 431 COLLECTIBLE_GLITTER_BOMBS 432 COLLECTIBLE_MY_SHADOW 433 COLLECTIBLE_JAR_OF_FLIES 434 COLLECTIBLE_LIL_LOKI 435 COLLECTIBLE_MILK 436 COLLECTIBLE_D7 437 COLLECTIBLE_BINKY 438 COLLECTIBLE_MOMS_BOX 439 COLLECTIBLE_KIDNEY_STONE 440 COLLECTIBLE_MEGA_SATANS_BREATH 441 COLLECTIBLE_DARK_PRINCESS_CROWN 442 COLLECTIBLE_APPLE 443 COLLECTIBLE_LEAD_PENCIL 444 COLLECTIBLE_DOG_TOOTH 445 COLLECTIBLE_DEAD_TOOTH 446 COLLECTIBLE_LINGER_BEAN 447 COLLECTIBLE_SHARD_OF_GLASS 448 COLLECTIBLE_METAL_PLATE 449 COLLECTIBLE_EYE_OF_GREED 450 COLLECTIBLE_TAROT_CLOTH 451 COLLECTIBLE_VARICOSE_VEINS 452 COLLECTIBLE_COMPOUND_FRACTURE 453 COLLECTIBLE_POLYDACTYLY 454 COLLECTIBLE_DADS_LOST_COIN 455 COLLECTIBLE_MOLDY_BREAD 456 COLLECTIBLE_CONE_HEAD 457 COLLECTIBLE_BELLY_BUTTON 458 COLLECTIBLE_SINUS_INFECTION 459 COLLECTIBLE_GLAUCOMA 460 COLLECTIBLE_PARASITOID 461 COLLECTIBLE_EYE_OF_BELIAL 462 COLLECTIBLE_SULFURIC_ACID 463 COLLECTIBLE_GLYPH_OF_BALANCE 464 COLLECTIBLE_ANALOG_STICK 465 COLLECTIBLE_CONTAGION 466 COLLECTIBLE_FINGER 467 COLLECTIBLE_SHADE 468 COLLECTIBLE_DEPRESSION 469 COLLECTIBLE_HUSHY 470 COLLECTIBLE_LIL_MONSTRO 471 COLLECTIBLE_KING_BABY 472 COLLECTIBLE_BIG_CHUBBY 473 COLLECTIBLE_TONSIL 474 COLLECTIBLE_PLAN_C 475 COLLECTIBLE_D1 476 COLLECTIBLE_VOID 477 COLLECTIBLE_PAUSE 478 COLLECTIBLE_SMELTER 479 COLLECTIBLE_COMPOST 480 COLLECTIBLE_DATAMINER 481 COLLECTIBLE_CLICKER 482 COLLECTIBLE_MAMA_MEGA 483 COLLECTIBLE_WAIT_WHAT 484 COLLECTIBLE_CROOKED_PENNY 485 COLLECTIBLE_DULL_RAZOR 486 COLLECTIBLE_POTATO_PEELER 487 COLLECTIBLE_METRONOME 488 COLLECTIBLE_DINF 489 COLLECTIBLE_EDENS_SOUL 490 COLLECTIBLE_ACID_BABY 491 COLLECTIBLE_YO_LISTEN 492 COLLECTIBLE_ADDERLINE 493 COLLECTIBLE_JACOBS_LADDER 494 COLLECTIBLE_GHOST_PEPPER 495 COLLECTIBLE_EUTHANASIA 496 COLLECTIBLE_CAMO_UNDIES 497 COLLECTIBLE_DUALITY 498 COLLECTIBLE_EUCHARIST 499 COLLECTIBLE_SACK_OF_SACKS 500 COLLECTIBLE_GREEDS_GULLET 501 COLLECTIBLE_LARGE_ZIT 502 COLLECTIBLE_LITTLE_HORN 503 COLLECTIBLE_BROWN_NUGGET 504 COLLECTIBLE_POKE_GO 505 COLLECTIBLE_BACKSTABBER 506 COLLECTIBLE_SHARP_STRAW 507 COLLECTIBLE_MOMS_RAZOR 508 COLLECTIBLE_BLOODSHOT_EYE 509 COLLECTIBLE_DELIRIOUS 510 COLLECTIBLE_ANGRY_FLY Booster Pack #1 511 COLLECTIBLE_BLACK_HOLE 512 COLLECTIBLE_BOZO 513 COLLECTIBLE_BROKEN_MODEM 514 COLLECTIBLE_MYSTERY_GIFT 515 COLLECTIBLE_SPRINKLER 516 COLLECTIBLE_FAST_BOMBS 517 COLLECTIBLE_BUDDY_IN_A_BOX 518 COLLECTIBLE_LIL_DELIRIUM 519 COLLECTIBLE_JUMPER_CABLES Booster Pack #2 520 COLLECTIBLE_COUPON 521 COLLECTIBLE_TELEKINESIS 522 COLLECTIBLE_MOVING_BOX 523 COLLECTIBLE_TECHNOLOGY_ZERO 524 COLLECTIBLE_LEPROCY 525 COLLECTIBLE_LIL_HARBINGERS Booster Pack #3 526 COLLECTIBLE_MR_ME 527 COLLECTIBLE_ANGELIC_PRISM 528 COLLECTIBLE_POP 529 COLLECTIBLE_DEATH_LIST Booster Pack #4 530 COLLECTIBLE_HAEMOLACRIA 531 COLLECTIBLE_LACHRYPHAGY 532 COLLECTIBLE_TRISAGION 533 COLLECTIBLE_SCHOOLBAG 534 COLLECTIBLE_BLANKET Booster Pack #5 535 COLLECTIBLE_SACRIFICIAL_ALTAR 536 COLLECTIBLE_LIL_SPEWER 537 COLLECTIBLE_MARBLES 538 COLLECTIBLE_MYSTERY_EGG 539 COLLECTIBLE_FLAT_STONE 540 COLLECTIBLE_MARROW 541 COLLECTIBLE_SLIPPED_RIB 542 COLLECTIBLE_HALLOWED_GROUND 543 COLLECTIBLE_POINTY_RIB 544 COLLECTIBLE_BOOK_OF_THE_DEAD 545 COLLECTIBLE_DADS_RING 546 COLLECTIBLE_DIVORCE_PAPERS 547 COLLECTIBLE_JAW_BONE 548 COLLECTIBLE_BRITTLE_BONES 549 COLLECTIBLE_BROKEN_SHOVEL 550 COLLECTIBLE_BROKEN_SHOVEL_2 551 COLLECTIBLE_MOMS_SHOVEL 552 NUM_COLLECTIBLES 553","title":"Enum \"CollectibleType\""},{"location":"enums/DamageFlag/","text":"Enum \"DamageFlag\" \u2693\ufe0e Enumerator comment id DAMAGE_NOKILL Damage can not kill the receiver 1 DAMAGE_FIRE Source is some sort of fire (ie. fireplace) 1<<1 DAMAGE_EXPLOSION Damage comes from an explosion 1<<2 DAMAGE_LASER Damage comes from laser 1<<3 DAMAGE_ACID Damage comes from acid, e.g. blood acid 1<<4 DAMAGE_RED_HEARTS Damage affects only red hearts if > 1 (ex: razor) 1<<5 DAMAGE_COUNTDOWN Damage from unicorn horn, the nail, game kid that has cooldown 1<<6 DAMAGE_SPIKES Damage from spikes 1<<7 DAMAGE_CLONES Damage is done by clones when they took damage, avoid infinite loops 1<<8 DAMAGE_POOP Damage from red poop 1<<9 DAMAGE_DEVIL 1<<10 DAMAGE_ISSAC_HEART Indicates the damage has been redirected from Isaac's Heart familiar 1<<11 DAMAGE_TNT Damage comes from a TNT barrel 1<<12 DAMAGE_INVINCIBLE Damages even if invincible (currently only for player). Used on IV Bag. 1<<13 DAMAGE_SPAWN_FLY Creates a fly when damage is applied 1<<14 DAMAGE_POISON_BURN Damage comes from POISON/BURN flags 1<<15 DAMAGE_CURSED_DOOR Damage comes from a cursed door 1<<16 DAMAGE_TIMER Damage comes from the passage of time (used for player damage by time limited special seeds) 1<<17 DAMAGE_IV_BAG Damage from using the IV Bag 1<<18 DAMAGE_PITFALL Damage comes from pitfalls (such as ones spawned by Little Horn) 1<<19 DAMAGE_CHEST Damage comes from spiked chest 1<<20 DAMAGE_FAKE Fake damage that should trigger player's damage effects. 1<<21 DAMAGE_BOOGER Damage from booger tear 1<<22","title":"DamageFlag"},{"location":"enums/DamageFlag/#enum-damageflag","text":"Enumerator comment id DAMAGE_NOKILL Damage can not kill the receiver 1 DAMAGE_FIRE Source is some sort of fire (ie. fireplace) 1<<1 DAMAGE_EXPLOSION Damage comes from an explosion 1<<2 DAMAGE_LASER Damage comes from laser 1<<3 DAMAGE_ACID Damage comes from acid, e.g. blood acid 1<<4 DAMAGE_RED_HEARTS Damage affects only red hearts if > 1 (ex: razor) 1<<5 DAMAGE_COUNTDOWN Damage from unicorn horn, the nail, game kid that has cooldown 1<<6 DAMAGE_SPIKES Damage from spikes 1<<7 DAMAGE_CLONES Damage is done by clones when they took damage, avoid infinite loops 1<<8 DAMAGE_POOP Damage from red poop 1<<9 DAMAGE_DEVIL 1<<10 DAMAGE_ISSAC_HEART Indicates the damage has been redirected from Isaac's Heart familiar 1<<11 DAMAGE_TNT Damage comes from a TNT barrel 1<<12 DAMAGE_INVINCIBLE Damages even if invincible (currently only for player). Used on IV Bag. 1<<13 DAMAGE_SPAWN_FLY Creates a fly when damage is applied 1<<14 DAMAGE_POISON_BURN Damage comes from POISON/BURN flags 1<<15 DAMAGE_CURSED_DOOR Damage comes from a cursed door 1<<16 DAMAGE_TIMER Damage comes from the passage of time (used for player damage by time limited special seeds) 1<<17 DAMAGE_IV_BAG Damage from using the IV Bag 1<<18 DAMAGE_PITFALL Damage comes from pitfalls (such as ones spawned by Little Horn) 1<<19 DAMAGE_CHEST Damage comes from spiked chest 1<<20 DAMAGE_FAKE Fake damage that should trigger player's damage effects. 1<<21 DAMAGE_BOOGER Damage from booger tear 1<<22","title":"Enum \"DamageFlag\""},{"location":"enums/Difficulty/","text":"Enum \"Difficulty\" \u2693\ufe0e Enumerator comment id DIFFICULTY_NORMAL 0 DIFFICULTY_HARD 1 DIFFICULTY_GREED 2 DIFFICULTY_GREEDIER 3","title":"Difficulty"},{"location":"enums/Difficulty/#enum-difficulty","text":"Enumerator comment id DIFFICULTY_NORMAL 0 DIFFICULTY_HARD 1 DIFFICULTY_GREED 2 DIFFICULTY_GREEDIER 3","title":"Enum \"Difficulty\""},{"location":"enums/Direction/","text":"Enum \"Direction\" \u2693\ufe0e Enumerator comment id NO_DIRECTION -1 LEFT 0 UP 1 RIGHT 2 DOWN 3","title":"Direction"},{"location":"enums/Direction/#enum-direction","text":"Enumerator comment id NO_DIRECTION -1 LEFT 0 UP 1 RIGHT 2 DOWN 3","title":"Enum \"Direction\""},{"location":"enums/DoorSlot/","text":"Enum \"DoorSlot\" \u2693\ufe0e Enumerator comment id NO_DOOR_SLOT -1 LEFT0 0 UP0 1 RIGHT0 2 DOWN0 3 LEFT1 4 UP1 5 RIGHT1 6 DOWN1 7 NUM_DOOR_SLOTS 8","title":"DoorSlot"},{"location":"enums/DoorSlot/#enum-doorslot","text":"Enumerator comment id NO_DOOR_SLOT -1 LEFT0 0 UP0 1 RIGHT0 2 DOWN0 3 LEFT1 4 UP1 5 RIGHT1 6 DOWN1 7 NUM_DOOR_SLOTS 8","title":"Enum \"DoorSlot\""},{"location":"enums/DoorState/","text":"Enum \"DoorState\" \u2693\ufe0e Enumerator comment id STATE_INIT 0 STATE_CLOSED 1 STATE_OPEN 2 STATE_ONE_CHAIN 3 STATE_HALF_CRACKED 4","title":"DoorState"},{"location":"enums/DoorState/#enum-doorstate","text":"Enumerator comment id STATE_INIT 0 STATE_CLOSED 1 STATE_OPEN 2 STATE_ONE_CHAIN 3 STATE_HALF_CRACKED 4","title":"Enum \"DoorState\""},{"location":"enums/DoorVariant/","text":"Enum \"DoorVariant\" \u2693\ufe0e Enumerator comment id DOOR_UNSPECIFIED 0 DOOR_LOCKED 1 DOOR_LOCKED_DOUBLE 2 DOOR_LOCKED_CRACKED 3 DOOR_LOCKED_BARRED 4 DOOR_LOCKED_KEYFAMILIAR 5 DOOR_LOCKED_GREED 6 DOOR_HIDDEN 7 DOOR_UNLOCKED 8","title":"DoorVariant"},{"location":"enums/DoorVariant/#enum-doorvariant","text":"Enumerator comment id DOOR_UNSPECIFIED 0 DOOR_LOCKED 1 DOOR_LOCKED_DOUBLE 2 DOOR_LOCKED_CRACKED 3 DOOR_LOCKED_BARRED 4 DOOR_LOCKED_KEYFAMILIAR 5 DOOR_LOCKED_GREED 6 DOOR_HIDDEN 7 DOOR_UNLOCKED 8","title":"Enum \"DoorVariant\""},{"location":"enums/EffectVariant/","text":"Enum \"EffectVariant\" \u2693\ufe0e Enumerator comment id EFFECT_NULL 0 BOMB_EXPLOSION 1 BLOOD_EXPLOSION 2 FLY_EXPLOSION 3 ROCK_PARTICLE 4 BLOOD_PARTICLE 5 DEVIL 6 BLOOD_SPLAT 7 LADDER 8 ANGEL 9 BLUE_FLAME 10 BULLET_POOF 11 TEAR_POOF_A 12 TEAR_POOF_B 13 CROSS_POOF 14 POOF01 15 POOF02 16 POOF04 17 BOMB_CRATER 18 CRACK_THE_SKY 19 SCYTHE_BREAK 20 TINY_BUG 21 CREEP_RED 22 CREEP_GREEN 23 CREEP_YELLOW 24 CREEP_WHITE 25 CREEP_BLACK 26 WOOD_PARTICLE 27 MONSTROS_TOOTH 28 MOM_FOOT_STOMP 29 TARGET 30 ROCKET 31 PLAYER_CREEP_LEMON_MISHAP 32 TINY_FLY 33 FART 34 TOOTH_PARTICLE 35 XRAY_WALL 36 PLAYER_CREEP_HOLYWATER 37 SPIDER_EXPLOSION 38 HEAVEN_LIGHT_DOOR 39 STARFLASH 40 WATER_DROPLET 41 BLOOD_GUSH 42 POOP_EXPLOSION 43 PLAYER_CREEP_WHITE 44 PLAYER_CREEP_BLACK 45 PLAYER_CREEP_RED 46 TRINITY_SHIELD 47 BATTERY 48 HEART 49 LASER_IMPACT 50 HOT_BOMB_FIRE 51 RED_CANDLE_FLAME 52 PLAYER_CREEP_GREEN 53 PLAYER_CREEP_HOLYWATER_TRAIL 54 SPIKE 55 CREEP_BROWN Bullet leaves a brown creep 56 PULLING_EFFECT 57 POOP_PARTICLE 58 DUST_CLOUD 59 BOOMERANG come back 60 SHOCKWAVE 61 ROCK_EXPLOSION 62 WORM 63 BEETLE 64 WISP 65 EMBER_PARTICLE 66 SHOCKWAVE_DIRECTIONAL 67 WALL_BUG 68 BUTTERFLY 69 BLOOD_DROP 70 BRIMSTONE_SWIRL 71 CRACKWAVE 72 SHOCKWAVE_RANDOM 73 ISAACS_CARPET 74 BAR_PARTICLE 75 DICE_FLOOR 76 LARGE_BLOOD_EXPLOSION 77 PLAYER_CREEP_LEMON_PARTY 78 TEAR_POOF_SMALL 79 TEAR_POOF_VERYSMALL 80 FRIEND_BALL 81 WOMB_TELEPORT 82 SPEAR_OF_DESTINY 83 EVIL_EYE 84 DIAMOND_PARTICLE 85 NAIL_PARTICLE 86 FALLING_EMBER 87 DARK_BALL_SMOKE_PARTICLE 88 ULTRA_GREED_FOOTPRINT 89 PLAYER_CREEP_PUDDLE_MILK 90 MOMS_HAND 91 PLAYER_CREEP_BLACKPOWDER 92 PENTAGRAM_BLACKPOWDER 93 CREEP_SLIPPERY_BROWN 94 GOLD_PARTICLE 95 HUSH_LASER 96 IMPACT 97 COIN_PARTICLE 98 WATER_SPLASH 99 HUSH_ASHES 100 HUSH_LASER_UP 101 BULLET_POOF_HUSH 102 ULTRA_GREED_BLING 103 FIREWORKS 104 BROWN_CLOUD 105 FART_RING 106 BLACK_HOLE 107 MR_ME 108 DEATH_SKULL 109 ENEMY_BRIMSTONE_SWIRL 110 HAEMO_TRAIL 111 HALLOWED_GROUND 112 BRIMSTONE_BALL 113 FORGOTTEN_CHAIN 114 BROKEN_SHOVEL_SHADOW 115 DIRT_PATCH 116 FORGOTTEN_SOUL 117","title":"EffectVariant"},{"location":"enums/EffectVariant/#enum-effectvariant","text":"Enumerator comment id EFFECT_NULL 0 BOMB_EXPLOSION 1 BLOOD_EXPLOSION 2 FLY_EXPLOSION 3 ROCK_PARTICLE 4 BLOOD_PARTICLE 5 DEVIL 6 BLOOD_SPLAT 7 LADDER 8 ANGEL 9 BLUE_FLAME 10 BULLET_POOF 11 TEAR_POOF_A 12 TEAR_POOF_B 13 CROSS_POOF 14 POOF01 15 POOF02 16 POOF04 17 BOMB_CRATER 18 CRACK_THE_SKY 19 SCYTHE_BREAK 20 TINY_BUG 21 CREEP_RED 22 CREEP_GREEN 23 CREEP_YELLOW 24 CREEP_WHITE 25 CREEP_BLACK 26 WOOD_PARTICLE 27 MONSTROS_TOOTH 28 MOM_FOOT_STOMP 29 TARGET 30 ROCKET 31 PLAYER_CREEP_LEMON_MISHAP 32 TINY_FLY 33 FART 34 TOOTH_PARTICLE 35 XRAY_WALL 36 PLAYER_CREEP_HOLYWATER 37 SPIDER_EXPLOSION 38 HEAVEN_LIGHT_DOOR 39 STARFLASH 40 WATER_DROPLET 41 BLOOD_GUSH 42 POOP_EXPLOSION 43 PLAYER_CREEP_WHITE 44 PLAYER_CREEP_BLACK 45 PLAYER_CREEP_RED 46 TRINITY_SHIELD 47 BATTERY 48 HEART 49 LASER_IMPACT 50 HOT_BOMB_FIRE 51 RED_CANDLE_FLAME 52 PLAYER_CREEP_GREEN 53 PLAYER_CREEP_HOLYWATER_TRAIL 54 SPIKE 55 CREEP_BROWN Bullet leaves a brown creep 56 PULLING_EFFECT 57 POOP_PARTICLE 58 DUST_CLOUD 59 BOOMERANG come back 60 SHOCKWAVE 61 ROCK_EXPLOSION 62 WORM 63 BEETLE 64 WISP 65 EMBER_PARTICLE 66 SHOCKWAVE_DIRECTIONAL 67 WALL_BUG 68 BUTTERFLY 69 BLOOD_DROP 70 BRIMSTONE_SWIRL 71 CRACKWAVE 72 SHOCKWAVE_RANDOM 73 ISAACS_CARPET 74 BAR_PARTICLE 75 DICE_FLOOR 76 LARGE_BLOOD_EXPLOSION 77 PLAYER_CREEP_LEMON_PARTY 78 TEAR_POOF_SMALL 79 TEAR_POOF_VERYSMALL 80 FRIEND_BALL 81 WOMB_TELEPORT 82 SPEAR_OF_DESTINY 83 EVIL_EYE 84 DIAMOND_PARTICLE 85 NAIL_PARTICLE 86 FALLING_EMBER 87 DARK_BALL_SMOKE_PARTICLE 88 ULTRA_GREED_FOOTPRINT 89 PLAYER_CREEP_PUDDLE_MILK 90 MOMS_HAND 91 PLAYER_CREEP_BLACKPOWDER 92 PENTAGRAM_BLACKPOWDER 93 CREEP_SLIPPERY_BROWN 94 GOLD_PARTICLE 95 HUSH_LASER 96 IMPACT 97 COIN_PARTICLE 98 WATER_SPLASH 99 HUSH_ASHES 100 HUSH_LASER_UP 101 BULLET_POOF_HUSH 102 ULTRA_GREED_BLING 103 FIREWORKS 104 BROWN_CLOUD 105 FART_RING 106 BLACK_HOLE 107 MR_ME 108 DEATH_SKULL 109 ENEMY_BRIMSTONE_SWIRL 110 HAEMO_TRAIL 111 HALLOWED_GROUND 112 BRIMSTONE_BALL 113 FORGOTTEN_CHAIN 114 BROKEN_SHOVEL_SHADOW 115 DIRT_PATCH 116 FORGOTTEN_SOUL 117","title":"Enum \"EffectVariant\""},{"location":"enums/EntityCollisionClass/","text":"Enum \"EntityCollisionClass\" \u2693\ufe0e Enumerator comment id ENTCOLL_NONE no collision with other entities 0 ENTCOLL_PLAYERONLY collide with player only 1 ENTCOLL_PLAYEROBJECTS collide with player, tears, familiars, .. 2 ENTCOLL_ENEMIES collide with enemies 3 ENTCOLL_ALL collide with everything 4","title":"EntityCollisionClass"},{"location":"enums/EntityCollisionClass/#enum-entitycollisionclass","text":"Enumerator comment id ENTCOLL_NONE no collision with other entities 0 ENTCOLL_PLAYERONLY collide with player only 1 ENTCOLL_PLAYEROBJECTS collide with player, tears, familiars, .. 2 ENTCOLL_ENEMIES collide with enemies 3 ENTCOLL_ALL collide with everything 4","title":"Enum \"EntityCollisionClass\""},{"location":"enums/EntityFlag/","text":"Enum \"EntityFlag\" \u2693\ufe0e Enumerator comment id FLAG_NO_STATUS_EFFECTS prevent freeze/poison/slow/charm/confusion/fear/burn 1 FLAG_NO_INTERPOLATE do not interpolate position 1<<1 FLAG_APPEAR play appear animation after Init 1<<2 FLAG_RENDER_FLOOR will be rendered to floor texture 1<<3 FLAG_NO_TARGET will not be a target of NPCs or familiars 1<<4 FLAG_FREEZE freezing effect 1<<5 FLAG_POISON poison effect 1<<6 FLAG_SLOW slowing (velocity) 1<<7 FLAG_CHARM Charmed 1<<8 FLAG_CONFUSION Confused 1<<9 FLAG_MIDAS_FREEZE Midas frozen 1<<10 FLAG_FEAR Fleeing in Fear (like Mom's Pad) 1<<11 FLAG_BURN Caused by Fire Mind tears, works like poison except with Red color effect. 1<<12 FLAG_RENDER_WALL will be rendered to wall texture 1<<13 FLAG_INTERPOLATION_UPDATE entity is updating at 60 fps, and this is an odd frame 1<<14 FLAG_APPLY_GRAVITY In sidescrolling room, this indicates that we're in a gravity zone. 1<<15 FLAG_NO_BLOOD_SPLASH 1<<16 FLAG_NO_REMOVE_ON_TEX_RENDER for FLAG_RENDER_FLOOR and FLAG_RENDER_WALL 1<<17 FLAG_NO_DEATH_TRIGGER 1<<18 FLAG_NO_SPIKE_DAMAGE 1<<19 FLAG_BOSSDEATH_TRIGGERED 1<<20 FLAG_DONT_OVERWRITE Used in entityfactory to not remove this entity if there is no space left for new entity 1<<21 FLAG_SPAWN_STICKY_SPIDERS Used by Sticky bombs to generate spiders on death 1<<22 FLAG_SPAWN_BLACK_HP Used by black hp drop tear flag to drop a black hp on enemy death 1<<23 FLAG_SHRINK God's flesh effect 1<<24 FLAG_NO_FLASH_ON_DAMAGE Entity will not flash red when damaged 1<<25 FLAG_NO_KNOCKBACK Bombs and farts have no knockback effects 1<<26 FLAG_SLIPPERY_PHYSICS Standing on a slippery surface 1<<27 FLAG_ADD_JAR_FLY Adds a fly to the jar when killed 1<<28 FLAG_FRIENDLY Charmed and m_CharmCountdown<0 1<<29 FLAG_NO_PHYSICS_KNOCKBACK No knockback from general collisions 1<<30 FLAG_DONT_COUNT_BOSS_HP Do not count boss hp 1<<31 FLAG_NO_SPRITE_UPDATE Do not update sprite animation 1<<32 FLAG_CONTAGIOUS Used for Contagious item (if the enemy is infected) 1<<33 FLAG_BLEED_OUT Used for Mom's Razor 1<<34 FLAG_HIDE_HP_BAR Added for Ultra Greed so his HP can be hidden after he \"dies\" since his entity sticks around 1<<35 FLAG_NO_DAMAGE_BLINK Player was given a short period of invulnerability by something other than damage, don't blink 1<<36 FLAG_PERSISTENT Entity persists between rooms 1<<37","title":"EntityFlag"},{"location":"enums/EntityFlag/#enum-entityflag","text":"Enumerator comment id FLAG_NO_STATUS_EFFECTS prevent freeze/poison/slow/charm/confusion/fear/burn 1 FLAG_NO_INTERPOLATE do not interpolate position 1<<1 FLAG_APPEAR play appear animation after Init 1<<2 FLAG_RENDER_FLOOR will be rendered to floor texture 1<<3 FLAG_NO_TARGET will not be a target of NPCs or familiars 1<<4 FLAG_FREEZE freezing effect 1<<5 FLAG_POISON poison effect 1<<6 FLAG_SLOW slowing (velocity) 1<<7 FLAG_CHARM Charmed 1<<8 FLAG_CONFUSION Confused 1<<9 FLAG_MIDAS_FREEZE Midas frozen 1<<10 FLAG_FEAR Fleeing in Fear (like Mom's Pad) 1<<11 FLAG_BURN Caused by Fire Mind tears, works like poison except with Red color effect. 1<<12 FLAG_RENDER_WALL will be rendered to wall texture 1<<13 FLAG_INTERPOLATION_UPDATE entity is updating at 60 fps, and this is an odd frame 1<<14 FLAG_APPLY_GRAVITY In sidescrolling room, this indicates that we're in a gravity zone. 1<<15 FLAG_NO_BLOOD_SPLASH 1<<16 FLAG_NO_REMOVE_ON_TEX_RENDER for FLAG_RENDER_FLOOR and FLAG_RENDER_WALL 1<<17 FLAG_NO_DEATH_TRIGGER 1<<18 FLAG_NO_SPIKE_DAMAGE 1<<19 FLAG_BOSSDEATH_TRIGGERED 1<<20 FLAG_DONT_OVERWRITE Used in entityfactory to not remove this entity if there is no space left for new entity 1<<21 FLAG_SPAWN_STICKY_SPIDERS Used by Sticky bombs to generate spiders on death 1<<22 FLAG_SPAWN_BLACK_HP Used by black hp drop tear flag to drop a black hp on enemy death 1<<23 FLAG_SHRINK God's flesh effect 1<<24 FLAG_NO_FLASH_ON_DAMAGE Entity will not flash red when damaged 1<<25 FLAG_NO_KNOCKBACK Bombs and farts have no knockback effects 1<<26 FLAG_SLIPPERY_PHYSICS Standing on a slippery surface 1<<27 FLAG_ADD_JAR_FLY Adds a fly to the jar when killed 1<<28 FLAG_FRIENDLY Charmed and m_CharmCountdown<0 1<<29 FLAG_NO_PHYSICS_KNOCKBACK No knockback from general collisions 1<<30 FLAG_DONT_COUNT_BOSS_HP Do not count boss hp 1<<31 FLAG_NO_SPRITE_UPDATE Do not update sprite animation 1<<32 FLAG_CONTAGIOUS Used for Contagious item (if the enemy is infected) 1<<33 FLAG_BLEED_OUT Used for Mom's Razor 1<<34 FLAG_HIDE_HP_BAR Added for Ultra Greed so his HP can be hidden after he \"dies\" since his entity sticks around 1<<35 FLAG_NO_DAMAGE_BLINK Player was given a short period of invulnerability by something other than damage, don't blink 1<<36 FLAG_PERSISTENT Entity persists between rooms 1<<37","title":"Enum \"EntityFlag\""},{"location":"enums/EntityGridCollisionClass/","text":"Enum \"EntityGridCollisionClass\" \u2693\ufe0e Enumerator comment id GRIDCOLL_NONE 0 GRIDCOLL_WALLS_X only collide with vertical walls 1 GRIDCOLL_WALLS_Y only collide with horizontal walls 2 GRIDCOLL_WALLS only collide with walls 3 GRIDCOLL_BULLET detect collision with solids (no pits), don't correct position 4 GRIDCOLL_GROUND collide with all grid entities (rocks, pits, ..), correct position 5 GRIDCOLL_NOPITS collide with all grid entities except pits and correct position 6","title":"EntityGridCollisionClass"},{"location":"enums/EntityGridCollisionClass/#enum-entitygridcollisionclass","text":"Enumerator comment id GRIDCOLL_NONE 0 GRIDCOLL_WALLS_X only collide with vertical walls 1 GRIDCOLL_WALLS_Y only collide with horizontal walls 2 GRIDCOLL_WALLS only collide with walls 3 GRIDCOLL_BULLET detect collision with solids (no pits), don't correct position 4 GRIDCOLL_GROUND collide with all grid entities (rocks, pits, ..), correct position 5 GRIDCOLL_NOPITS collide with all grid entities except pits and correct position 6","title":"Enum \"EntityGridCollisionClass\""},{"location":"enums/EntityPartition/","text":"Enum \"EntityPartition\" \u2693\ufe0e Enumerator comment id FAMILIAR 1 BULLET 1<<1 TEAR 1<<2 ENEMY 1<<3 PICKUP 1<<4 PLAYER 1<<5 EFFECT 1<<6","title":"EntityPartition"},{"location":"enums/EntityPartition/#enum-entitypartition","text":"Enumerator comment id FAMILIAR 1 BULLET 1<<1 TEAR 1<<2 ENEMY 1<<3 PICKUP 1<<4 PLAYER 1<<5 EFFECT 1<<6","title":"Enum \"EntityPartition\""},{"location":"enums/EntityType/","text":"Enum \"EntityType\" \u2693\ufe0e Enumerator comment id ENTITY_NULL 0 ENTITY_PLAYER 1 player 1 ENTITY_TEAR 2 tear projectile 2 ENTITY_FAMILIAR 3 familiar 3 ENTITY_BOMBDROP 4 bomb drop 4 ENTITY_PICKUP 5 pickup item 5 ENTITY_SLOT 6 slot machine 6 ENTITY_LASER 7 laser beam 7 ENTITY_KNIFE 8 mom's knife 8 ENTITY_PROJECTILE 9 blood projectile 9 ENTITY_GAPER 10 enemy: Gaper 10 ENTITY_GUSHER 11 enemy: Gusher 11 ENTITY_HORF 12 enemy: Horf 12 ENTITY_FLY 13 enemy: Fly 13 ENTITY_POOTER 14 enemy: Pooter 14 ENTITY_CLOTTY 15 enemy: Clotty 15 ENTITY_MULLIGAN 16 enemy: Mulligan 16 ENTITY_SHOPKEEPER 17 ENTITY_ATTACKFLY 18 enemy: Attack Fly 18 ENTITY_LARRYJR 19 boss: Larry Jr./Hollow 19 ENTITY_MONSTRO 20 boss: Monstro 20 ENTITY_MAGGOT 21 ENTITY_HIVE 22 ENTITY_CHARGER 23 ENTITY_GLOBIN 24 ENTITY_BOOMFLY 25 ENTITY_MAW 26 ENTITY_HOST 27 ENTITY_CHUB 28 ENTITY_HOPPER 29 enemy: Hopper 29 ENTITY_BOIL 30 enemy: Boil, variants: 1 - Gut, 2 - Sack 30 ENTITY_SPITY 31 ENTITY_BRAIN 32 ENTITY_FIREPLACE 33 ENTITY_LEAPER 34 ENTITY_MRMAW 35 ENTITY_GURDY 36 ENTITY_BABY 38 ENTITY_VIS 39 ENTITY_GUTS 40 ENTITY_KNIGHT 41 ENTITY_STONEHEAD 42 ENTITY_MONSTRO2 43 ENTITY_POKY 44 ENTITY_MOM 45 ENTITY_SLOTH 46 miniboss: Sloth 46 ENTITY_LUST 47 miniboss: Lust 47 ENTITY_WRATH 48 miniboss: Wrath 48 ENTITY_GLUTTONY 49 miniboss: Gluttony 49 ENTITY_GREED 50 miniboss: Greed 50 ENTITY_ENVY 51 miniboss: Envy 51 ENTITY_PRIDE 52 miniboss: Pride 52 ENTITY_DOPLE 53 ENTITY_FLAMINGHOPPER 54 enemy: Flaming Hopper 54 ENTITY_LEECH 55 ENTITY_LUMP 56 ENTITY_MEMBRAIN 57 enemy: Membrain and Mama Guts 57 ENTITY_PARA_BITE 58 ENTITY_FRED 59 ENTITY_EYE 60 ENTITY_SUCKER 61 enemy: Sucker 61 ENTITY_PIN 62 boss: Pin 62 ENTITY_FAMINE 63 ENTITY_PESTILENCE 64 ENTITY_WAR variant 1: Conquest 65 ENTITY_DEATH 66 ENTITY_DUKE 67 boss: Duke of Flies/Husk 67 ENTITY_PEEP 68 ENTITY_LOKI 69 ENTITY_FISTULA_BIG 71 ENTITY_FISTULA_MEDIUM 72 ENTITY_FISTULA_SMALL 73 ENTITY_BLASTOCYST_BIG 74 boss: Blastocyst 74 ENTITY_BLASTOCYST_MEDIUM 75 ENTITY_BLASTOCYST_SMALL 76 ENTITY_EMBRYO 77 ENTITY_MOMS_HEART 78 ENTITY_GEMINI 79 boss: Gemini 79 ENTITY_MOTER 80 enemy: Moter 80 ENTITY_FALLEN variant 1: Krampus 81 ENTITY_HEADLESS_HORSEMAN Headless Horseman 82 ENTITY_HORSEMAN_HEAD Head for Headless Horseman 83 ENTITY_SATAN 84 ENTITY_SPIDER 85 enemy: Spider 85 ENTITY_KEEPER 86 ENTITY_GURGLE 87 ENTITY_WALKINGBOIL ai for WalkingBoil, WalkingGut and WalkingSack 88 ENTITY_BUTTLICKER 89 ENTITY_HANGER 90 enemy: Hanger 90 ENTITY_SWARMER 91 ENTITY_HEART 92 ENTITY_MASK 93 ENTITY_BIGSPIDER 94 ENTITY_ETERNALFLY 96 enemy: Eternal Fly 96 ENTITY_MASK_OF_INFAMY 97 ENTITY_HEART_OF_INFAMY 98 ENTITY_GURDY_JR 99 enemy: Gurdy Jr. 99 ENTITY_WIDOW 100 ENTITY_DADDYLONGLEGS 101 ENTITY_ISAAC 102 ENTITY_STONE_EYE Rebirth enemies 201 ENTITY_CONSTANT_STONE_SHOOTER 202 ENTITY_BRIMSTONE_HEAD 203 ENTITY_MOBILE_HOST 204 ENTITY_NEST 205 ENTITY_BABY_LONG_LEGS 206 ENTITY_CRAZY_LONG_LEGS 207 ENTITY_FATTY 208 ENTITY_FAT_SACK 209 ENTITY_BLUBBER 210 ENTITY_HALF_SACK 211 ENTITY_DEATHS_HEAD 212 ENTITY_MOMS_HAND 213 ENTITY_FLY_L2 214 ENTITY_SPIDER_L2 215 ENTITY_SWINGER 216 ENTITY_DIP 217 ENTITY_WALL_HUGGER 218 ENTITY_WIZOOB 219 ENTITY_SQUIRT 220 ENTITY_COD_WORM 221 ENTITY_RING_OF_FLIES 222 ENTITY_DINGA 223 ENTITY_OOB 224 ENTITY_BLACK_MAW 225 ENTITY_SKINNY 226 ENTITY_BONY 227 ENTITY_HOMUNCULUS 228 ENTITY_TUMOR 229 ENTITY_CAMILLO_JR 230 ENTITY_NERVE_ENDING 231 ENTITY_SKINBALL 232 ENTITY_MOM_HEAD 233 ENTITY_ONE_TOOTH 234 ENTITY_GAPING_MAW 235 ENTITY_BROKEN_GAPING_MAW 236 ENTITY_GURGLING 237 ENTITY_SPLASHER 238 ENTITY_GRUB 239 ENTITY_WALL_CREEP 240 ENTITY_RAGE_CREEP 241 ENTITY_BLIND_CREEP 242 ENTITY_CONJOINED_SPITTY 243 ENTITY_ROUND_WORM 244 ENTITY_POOP 245 ENTITY_RAGLING 246 ENTITY_FLESH_MOBILE_HOST 247 ENTITY_PSY_HORF 248 ENTITY_FULL_FLY 249 ENTITY_TICKING_SPIDER 250 ENTITY_BEGOTTEN 251 ENTITY_NULLS 252 ENTITY_PSY_TUMOR 253 ENTITY_FLOATING_KNIGHT 254 ENTITY_NIGHT_CRAWLER 255 ENTITY_DART_FLY Afterbirth 256 ENTITY_CONJOINED_FATTY 257 ENTITY_FAT_BAT 258 ENTITY_IMP 259 ENTITY_THE_HAUNT Rebirth bosses 260 ENTITY_DINGLE 261 ENTITY_MEGA_MAW 262 ENTITY_GATE 263 ENTITY_MEGA_FATTY 264 ENTITY_CAGE 265 ENTITY_MAMA_GURDY 266 ENTITY_DARK_ONE 267 ENTITY_ADVERSARY 268 ENTITY_POLYCEPHALUS 269 ENTITY_MR_FRED 270 ENTITY_URIEL 271 ENTITY_GABRIEL 272 ENTITY_THE_LAMB 273 ENTITY_MEGA_SATAN 274 ENTITY_MEGA_SATAN_2 275 ENTITY_ROUNDY Afterbirth #2 276 ENTITY_BLACK_BONY 277 ENTITY_BLACK_GLOBIN 278 ENTITY_BLACK_GLOBIN_HEAD 279 ENTITY_BLACK_GLOBIN_BODY 280 ENTITY_SWARM 281 ENTITY_MEGA_CLOTTY 282 ENTITY_BONE_KNIGHT 283 ENTITY_CYCLOPIA 284 ENTITY_RED_GHOST 285 ENTITY_FLESH_DEATHS_HEAD 286 ENTITY_MOMS_DEAD_HAND 287 ENTITY_DUKIE 288 ENTITY_ULCER 289 ENTITY_MEATBALL 290 ENTITY_PITFALL 291 ENTITY_MOVABLE_TNT 292 ENTITY_ULTRA_COIN 293 ENTITY_ULTRA_DOOR 294 ENTITY_CORN_MINE 295 ENTITY_HUSH_FLY 296 ENTITY_HUSH_GAPER 297 ENTITY_HUSH_BOIL 298 ENTITY_GREED_GAPER 299 ENTITY_MUSHROOM 300 ENTITY_POISON_MIND 301 ENTITY_STONEY 302 ENTITY_BLISTER 303 ENTITY_THE_THING 304 ENTITY_MINISTRO 305 ENTITY_PORTAL 306 ENTITY_TARBOY Booster enemies 307 ENTITY_FISTULOID 308 ENTITY_GUSH 309 ENTITY_LEPER 310 ENTITY_STAIN Afterbirth bosses 401 ENTITY_BROWNIE 402 ENTITY_FORSAKEN 403 ENTITY_LITTLE_HORN 404 ENTITY_RAG_MAN 405 ENTITY_ULTRA_GREED 406 ENTITY_HUSH 407 ENTITY_HUSH_SKINLESS 408 ENTITY_RAG_MEGA 409 ENTITY_SISTERS_VIS 410 ENTITY_BIG_HORN 411 ENTITY_DELIRIUM 412 ENTITY_MATRIARCH 413 ENTITY_EFFECT 1000 special effects 1000 ENTITY_TEXT 9001","title":"EntityType"},{"location":"enums/EntityType/#enum-entitytype","text":"Enumerator comment id ENTITY_NULL 0 ENTITY_PLAYER 1 player 1 ENTITY_TEAR 2 tear projectile 2 ENTITY_FAMILIAR 3 familiar 3 ENTITY_BOMBDROP 4 bomb drop 4 ENTITY_PICKUP 5 pickup item 5 ENTITY_SLOT 6 slot machine 6 ENTITY_LASER 7 laser beam 7 ENTITY_KNIFE 8 mom's knife 8 ENTITY_PROJECTILE 9 blood projectile 9 ENTITY_GAPER 10 enemy: Gaper 10 ENTITY_GUSHER 11 enemy: Gusher 11 ENTITY_HORF 12 enemy: Horf 12 ENTITY_FLY 13 enemy: Fly 13 ENTITY_POOTER 14 enemy: Pooter 14 ENTITY_CLOTTY 15 enemy: Clotty 15 ENTITY_MULLIGAN 16 enemy: Mulligan 16 ENTITY_SHOPKEEPER 17 ENTITY_ATTACKFLY 18 enemy: Attack Fly 18 ENTITY_LARRYJR 19 boss: Larry Jr./Hollow 19 ENTITY_MONSTRO 20 boss: Monstro 20 ENTITY_MAGGOT 21 ENTITY_HIVE 22 ENTITY_CHARGER 23 ENTITY_GLOBIN 24 ENTITY_BOOMFLY 25 ENTITY_MAW 26 ENTITY_HOST 27 ENTITY_CHUB 28 ENTITY_HOPPER 29 enemy: Hopper 29 ENTITY_BOIL 30 enemy: Boil, variants: 1 - Gut, 2 - Sack 30 ENTITY_SPITY 31 ENTITY_BRAIN 32 ENTITY_FIREPLACE 33 ENTITY_LEAPER 34 ENTITY_MRMAW 35 ENTITY_GURDY 36 ENTITY_BABY 38 ENTITY_VIS 39 ENTITY_GUTS 40 ENTITY_KNIGHT 41 ENTITY_STONEHEAD 42 ENTITY_MONSTRO2 43 ENTITY_POKY 44 ENTITY_MOM 45 ENTITY_SLOTH 46 miniboss: Sloth 46 ENTITY_LUST 47 miniboss: Lust 47 ENTITY_WRATH 48 miniboss: Wrath 48 ENTITY_GLUTTONY 49 miniboss: Gluttony 49 ENTITY_GREED 50 miniboss: Greed 50 ENTITY_ENVY 51 miniboss: Envy 51 ENTITY_PRIDE 52 miniboss: Pride 52 ENTITY_DOPLE 53 ENTITY_FLAMINGHOPPER 54 enemy: Flaming Hopper 54 ENTITY_LEECH 55 ENTITY_LUMP 56 ENTITY_MEMBRAIN 57 enemy: Membrain and Mama Guts 57 ENTITY_PARA_BITE 58 ENTITY_FRED 59 ENTITY_EYE 60 ENTITY_SUCKER 61 enemy: Sucker 61 ENTITY_PIN 62 boss: Pin 62 ENTITY_FAMINE 63 ENTITY_PESTILENCE 64 ENTITY_WAR variant 1: Conquest 65 ENTITY_DEATH 66 ENTITY_DUKE 67 boss: Duke of Flies/Husk 67 ENTITY_PEEP 68 ENTITY_LOKI 69 ENTITY_FISTULA_BIG 71 ENTITY_FISTULA_MEDIUM 72 ENTITY_FISTULA_SMALL 73 ENTITY_BLASTOCYST_BIG 74 boss: Blastocyst 74 ENTITY_BLASTOCYST_MEDIUM 75 ENTITY_BLASTOCYST_SMALL 76 ENTITY_EMBRYO 77 ENTITY_MOMS_HEART 78 ENTITY_GEMINI 79 boss: Gemini 79 ENTITY_MOTER 80 enemy: Moter 80 ENTITY_FALLEN variant 1: Krampus 81 ENTITY_HEADLESS_HORSEMAN Headless Horseman 82 ENTITY_HORSEMAN_HEAD Head for Headless Horseman 83 ENTITY_SATAN 84 ENTITY_SPIDER 85 enemy: Spider 85 ENTITY_KEEPER 86 ENTITY_GURGLE 87 ENTITY_WALKINGBOIL ai for WalkingBoil, WalkingGut and WalkingSack 88 ENTITY_BUTTLICKER 89 ENTITY_HANGER 90 enemy: Hanger 90 ENTITY_SWARMER 91 ENTITY_HEART 92 ENTITY_MASK 93 ENTITY_BIGSPIDER 94 ENTITY_ETERNALFLY 96 enemy: Eternal Fly 96 ENTITY_MASK_OF_INFAMY 97 ENTITY_HEART_OF_INFAMY 98 ENTITY_GURDY_JR 99 enemy: Gurdy Jr. 99 ENTITY_WIDOW 100 ENTITY_DADDYLONGLEGS 101 ENTITY_ISAAC 102 ENTITY_STONE_EYE Rebirth enemies 201 ENTITY_CONSTANT_STONE_SHOOTER 202 ENTITY_BRIMSTONE_HEAD 203 ENTITY_MOBILE_HOST 204 ENTITY_NEST 205 ENTITY_BABY_LONG_LEGS 206 ENTITY_CRAZY_LONG_LEGS 207 ENTITY_FATTY 208 ENTITY_FAT_SACK 209 ENTITY_BLUBBER 210 ENTITY_HALF_SACK 211 ENTITY_DEATHS_HEAD 212 ENTITY_MOMS_HAND 213 ENTITY_FLY_L2 214 ENTITY_SPIDER_L2 215 ENTITY_SWINGER 216 ENTITY_DIP 217 ENTITY_WALL_HUGGER 218 ENTITY_WIZOOB 219 ENTITY_SQUIRT 220 ENTITY_COD_WORM 221 ENTITY_RING_OF_FLIES 222 ENTITY_DINGA 223 ENTITY_OOB 224 ENTITY_BLACK_MAW 225 ENTITY_SKINNY 226 ENTITY_BONY 227 ENTITY_HOMUNCULUS 228 ENTITY_TUMOR 229 ENTITY_CAMILLO_JR 230 ENTITY_NERVE_ENDING 231 ENTITY_SKINBALL 232 ENTITY_MOM_HEAD 233 ENTITY_ONE_TOOTH 234 ENTITY_GAPING_MAW 235 ENTITY_BROKEN_GAPING_MAW 236 ENTITY_GURGLING 237 ENTITY_SPLASHER 238 ENTITY_GRUB 239 ENTITY_WALL_CREEP 240 ENTITY_RAGE_CREEP 241 ENTITY_BLIND_CREEP 242 ENTITY_CONJOINED_SPITTY 243 ENTITY_ROUND_WORM 244 ENTITY_POOP 245 ENTITY_RAGLING 246 ENTITY_FLESH_MOBILE_HOST 247 ENTITY_PSY_HORF 248 ENTITY_FULL_FLY 249 ENTITY_TICKING_SPIDER 250 ENTITY_BEGOTTEN 251 ENTITY_NULLS 252 ENTITY_PSY_TUMOR 253 ENTITY_FLOATING_KNIGHT 254 ENTITY_NIGHT_CRAWLER 255 ENTITY_DART_FLY Afterbirth 256 ENTITY_CONJOINED_FATTY 257 ENTITY_FAT_BAT 258 ENTITY_IMP 259 ENTITY_THE_HAUNT Rebirth bosses 260 ENTITY_DINGLE 261 ENTITY_MEGA_MAW 262 ENTITY_GATE 263 ENTITY_MEGA_FATTY 264 ENTITY_CAGE 265 ENTITY_MAMA_GURDY 266 ENTITY_DARK_ONE 267 ENTITY_ADVERSARY 268 ENTITY_POLYCEPHALUS 269 ENTITY_MR_FRED 270 ENTITY_URIEL 271 ENTITY_GABRIEL 272 ENTITY_THE_LAMB 273 ENTITY_MEGA_SATAN 274 ENTITY_MEGA_SATAN_2 275 ENTITY_ROUNDY Afterbirth #2 276 ENTITY_BLACK_BONY 277 ENTITY_BLACK_GLOBIN 278 ENTITY_BLACK_GLOBIN_HEAD 279 ENTITY_BLACK_GLOBIN_BODY 280 ENTITY_SWARM 281 ENTITY_MEGA_CLOTTY 282 ENTITY_BONE_KNIGHT 283 ENTITY_CYCLOPIA 284 ENTITY_RED_GHOST 285 ENTITY_FLESH_DEATHS_HEAD 286 ENTITY_MOMS_DEAD_HAND 287 ENTITY_DUKIE 288 ENTITY_ULCER 289 ENTITY_MEATBALL 290 ENTITY_PITFALL 291 ENTITY_MOVABLE_TNT 292 ENTITY_ULTRA_COIN 293 ENTITY_ULTRA_DOOR 294 ENTITY_CORN_MINE 295 ENTITY_HUSH_FLY 296 ENTITY_HUSH_GAPER 297 ENTITY_HUSH_BOIL 298 ENTITY_GREED_GAPER 299 ENTITY_MUSHROOM 300 ENTITY_POISON_MIND 301 ENTITY_STONEY 302 ENTITY_BLISTER 303 ENTITY_THE_THING 304 ENTITY_MINISTRO 305 ENTITY_PORTAL 306 ENTITY_TARBOY Booster enemies 307 ENTITY_FISTULOID 308 ENTITY_GUSH 309 ENTITY_LEPER 310 ENTITY_STAIN Afterbirth bosses 401 ENTITY_BROWNIE 402 ENTITY_FORSAKEN 403 ENTITY_LITTLE_HORN 404 ENTITY_RAG_MAN 405 ENTITY_ULTRA_GREED 406 ENTITY_HUSH 407 ENTITY_HUSH_SKINLESS 408 ENTITY_RAG_MEGA 409 ENTITY_SISTERS_VIS 410 ENTITY_BIG_HORN 411 ENTITY_DELIRIUM 412 ENTITY_MATRIARCH 413 ENTITY_EFFECT 1000 special effects 1000 ENTITY_TEXT 9001","title":"Enum \"EntityType\""},{"location":"enums/FamiliarVariant/","text":"Enum \"FamiliarVariant\" \u2693\ufe0e Enumerator comment id FAMILIAR_NULL 0 BROTHER_BOBBY 1 DEMON_BABY 2 LITTLE_CHUBBY 3 LITTLE_GISH 4 LITTLE_STEVEN 5 ROBO_BABY 6 SISTER_MAGGY 7 ABEL 8 GHOST_BABY 9 HARLEQUIN_BABY 10 RAINBOW_BABY 11 ISAACS_HEAD 12 BLUE_BABY_SOUL 13 DEAD_BIRD 14 EVES_BIRD_FOOT 15 DADDY_LONGLEGS 16 PEEPER 17 BOMB_BAG 20 SACK_OF_PENNIES 21 LITTLE_CHAD 22 RELIC 23 BUM_FRIEND 24 HOLY_WATER 25 KEY_PIECE_1 26 KEY_PIECE_2 27 KEY_FULL 28 FOREVER_ALONE 30 DISTANT_ADMIRATION 31 GUARDIAN_ANGEL 32 FLY_ORBITAL 33 SACRIFICIAL_DAGGER 35 DEAD_CAT 40 ONE_UP 41 GUPPYS_HAIRBALL 42 BLUE_FLY 43 CUBE_OF_MEAT_1 44 CUBE_OF_MEAT_2 45 CUBE_OF_MEAT_3 46 CUBE_OF_MEAT_4 47 ISAACS_BODY 48 SMART_FLY 50 DRY_BABY 51 JUICY_SACK 52 ROBO_BABY_2 53 ROTTEN_BABY 54 HEADLESS_BABY 55 LEECH 56 MYSTERY_SACK 57 BBF 58 BOBS_BRAIN 59 BEST_BUD 60 LIL_BRIMSTONE 61 ISAACS_HEART 62 LIL_HAUNT 63 DARK_BUM 64 BIG_FAN 65 SISSY_LONGLEGS 66 PUNCHING_BAG 67 GUILLOTINE 68 BALL_OF_BANDAGES_1 69 BALL_OF_BANDAGES_2 70 BALL_OF_BANDAGES_3 71 BALL_OF_BANDAGES_4 72 BLUE_SPIDER 73 MONGO_BABY 74 SAMSONS_CHAINS 75 CAINS_OTHER_EYE 76 BLUEBABYS_ONLY_FRIEND 77 SCISSORS 78 GEMINI 79 INCUBUS 80 FATES_REWARD 81 LIL_CHEST 82 SWORN_PROTECTOR 83 FRIEND_ZONE 84 LOST_FLY 85 CHARGED_BABY 86 LIL_GURDY 87 BUMBO 88 CENSER 89 KEY_BUM 90 RUNE_BAG 91 SERAPHIM 92 GB_BUG 93 SPIDER_MOD 94 FARTING_BABY 95 SUCCUBUS 96 LIL_LOKI 97 OBSESSED_FAN 98 PAPA_FLY 99 MILK 100 MULTIDIMENSIONAL_BABY 101 SUPER_BUM 102 TONSIL 103 BIG_CHUBBY 104 DEPRESSION 105 SHADE 106 HUSHY 107 LIL_MONSTRO 108 KING_BABY 109 FINGER 110 YO_LISTEN 111 ACID_BABY 112 SPIDER_BABY 113 SACK_OF_SACKS 114 BROWN_NUGGET_POOTER 115 BLOODSHOT_EYE 116 MOMS_RAZOR 117 ANGRY_FLY Booster Pack #1 118 BUDDY_IN_A_BOX 119 SPRINKLER 120 LEPROCY Booster Pack #2 121 LIL_HARBINGERS Booster Pack #3 122 ANGELIC_PRISM 123 MYSTERY_EGG Booster Pack #5 124 LIL_SPEWER 125 SLIPPED_RIB 126 POINTY_RIB 127 BONE_ORBITAL 128 HALLOWED_GROUND 129 JAW_BONE 130","title":"FamiliarVariant"},{"location":"enums/FamiliarVariant/#enum-familiarvariant","text":"Enumerator comment id FAMILIAR_NULL 0 BROTHER_BOBBY 1 DEMON_BABY 2 LITTLE_CHUBBY 3 LITTLE_GISH 4 LITTLE_STEVEN 5 ROBO_BABY 6 SISTER_MAGGY 7 ABEL 8 GHOST_BABY 9 HARLEQUIN_BABY 10 RAINBOW_BABY 11 ISAACS_HEAD 12 BLUE_BABY_SOUL 13 DEAD_BIRD 14 EVES_BIRD_FOOT 15 DADDY_LONGLEGS 16 PEEPER 17 BOMB_BAG 20 SACK_OF_PENNIES 21 LITTLE_CHAD 22 RELIC 23 BUM_FRIEND 24 HOLY_WATER 25 KEY_PIECE_1 26 KEY_PIECE_2 27 KEY_FULL 28 FOREVER_ALONE 30 DISTANT_ADMIRATION 31 GUARDIAN_ANGEL 32 FLY_ORBITAL 33 SACRIFICIAL_DAGGER 35 DEAD_CAT 40 ONE_UP 41 GUPPYS_HAIRBALL 42 BLUE_FLY 43 CUBE_OF_MEAT_1 44 CUBE_OF_MEAT_2 45 CUBE_OF_MEAT_3 46 CUBE_OF_MEAT_4 47 ISAACS_BODY 48 SMART_FLY 50 DRY_BABY 51 JUICY_SACK 52 ROBO_BABY_2 53 ROTTEN_BABY 54 HEADLESS_BABY 55 LEECH 56 MYSTERY_SACK 57 BBF 58 BOBS_BRAIN 59 BEST_BUD 60 LIL_BRIMSTONE 61 ISAACS_HEART 62 LIL_HAUNT 63 DARK_BUM 64 BIG_FAN 65 SISSY_LONGLEGS 66 PUNCHING_BAG 67 GUILLOTINE 68 BALL_OF_BANDAGES_1 69 BALL_OF_BANDAGES_2 70 BALL_OF_BANDAGES_3 71 BALL_OF_BANDAGES_4 72 BLUE_SPIDER 73 MONGO_BABY 74 SAMSONS_CHAINS 75 CAINS_OTHER_EYE 76 BLUEBABYS_ONLY_FRIEND 77 SCISSORS 78 GEMINI 79 INCUBUS 80 FATES_REWARD 81 LIL_CHEST 82 SWORN_PROTECTOR 83 FRIEND_ZONE 84 LOST_FLY 85 CHARGED_BABY 86 LIL_GURDY 87 BUMBO 88 CENSER 89 KEY_BUM 90 RUNE_BAG 91 SERAPHIM 92 GB_BUG 93 SPIDER_MOD 94 FARTING_BABY 95 SUCCUBUS 96 LIL_LOKI 97 OBSESSED_FAN 98 PAPA_FLY 99 MILK 100 MULTIDIMENSIONAL_BABY 101 SUPER_BUM 102 TONSIL 103 BIG_CHUBBY 104 DEPRESSION 105 SHADE 106 HUSHY 107 LIL_MONSTRO 108 KING_BABY 109 FINGER 110 YO_LISTEN 111 ACID_BABY 112 SPIDER_BABY 113 SACK_OF_SACKS 114 BROWN_NUGGET_POOTER 115 BLOODSHOT_EYE 116 MOMS_RAZOR 117 ANGRY_FLY Booster Pack #1 118 BUDDY_IN_A_BOX 119 SPRINKLER 120 LEPROCY Booster Pack #2 121 LIL_HARBINGERS Booster Pack #3 122 ANGELIC_PRISM 123 MYSTERY_EGG Booster Pack #5 124 LIL_SPEWER 125 SLIPPED_RIB 126 POINTY_RIB 127 BONE_ORBITAL 128 HALLOWED_GROUND 129 JAW_BONE 130","title":"Enum \"FamiliarVariant\""},{"location":"enums/GameStateFlag/","text":"Enum \"GameStateFlag\" \u2693\ufe0e Enumerator comment id STATE_FAMINE_SPAWNED 0 STATE_PESTILENCE_SPAWNED 1 STATE_WAR_SPAWNED 2 STATE_DEATH_SPAWNED 3 STATE_BOSSPOOL_SWITCHED 4 STATE_DEVILROOM_SPAWNED 5 STATE_DEVILROOM_VISITED 6 STATE_BOOK_REVELATIONS_USED 7 STATE_BOOK_PICKED_UP 8 STATE_WRATH_SPAWNED 9 STATE_GLUTTONY_SPAWNED 10 STATE_LUST_SPAWNED 11 STATE_SLOTH_SPAWNED 12 STATE_ENVY_SPAWNED 13 STATE_PRIDE_SPAWNED 14 STATE_GREED_SPAWNED 15 STATE_SUPERGREED_SPAWNED 16 STATE_DONATION_SLOT_BROKEN 17 STATE_DONATION_SLOT_JAMMED 18 STATE_HEAVEN_PATH 19 STATE_REBIRTH_BOSS_SWITCHED 20 STATE_HAUNT_SELECTED 21 STATE_ADVERSARY_SELECTED 22 STATE_MR_FRED_SELECTED 23 STATE_MAMA_GURDY_SELECTED 24 STATE_URIEL_SPAWNED 25 STATE_GABRIEL_SPAWNED 26 STATE_FALLEN_SPAWNED 27 STATE_HEADLESS_HORSEMAN_SPAWNED 28 STATE_KRAMPUS_SPAWNED 29 STATE_DONATION_SLOT_BLOWN 30 STATE_SHOPKEEPER_KILLED 31 STATE_ULTRAPRIDE_SPAWNED 32 STATE_BOSSRUSH_DONE 33 STATE_GREED_SLOT_JAMMED 34 STATE_AFTERBIRTH_BOSS_SWITCHED 35 STATE_BROWNIE_SELECTED 36 STATE_SUPERBUM_APPEARED 37 STATE_BOSSRUSH_DOOR_SPAWNED 38 STATE_BLUEWOMB_DOOR_SPAWNED 39 STATE_BLUEWOMB_DONE 40 STATE_HEART_BOMB_COIN_PICKED 41 STATE_ABPLUS_BOSS_SWITCHED 42 STATE_SISTERS_VIS_SELECTED 43 NUM_STATE_FLAGS 44","title":"GameStateFlag"},{"location":"enums/GameStateFlag/#enum-gamestateflag","text":"Enumerator comment id STATE_FAMINE_SPAWNED 0 STATE_PESTILENCE_SPAWNED 1 STATE_WAR_SPAWNED 2 STATE_DEATH_SPAWNED 3 STATE_BOSSPOOL_SWITCHED 4 STATE_DEVILROOM_SPAWNED 5 STATE_DEVILROOM_VISITED 6 STATE_BOOK_REVELATIONS_USED 7 STATE_BOOK_PICKED_UP 8 STATE_WRATH_SPAWNED 9 STATE_GLUTTONY_SPAWNED 10 STATE_LUST_SPAWNED 11 STATE_SLOTH_SPAWNED 12 STATE_ENVY_SPAWNED 13 STATE_PRIDE_SPAWNED 14 STATE_GREED_SPAWNED 15 STATE_SUPERGREED_SPAWNED 16 STATE_DONATION_SLOT_BROKEN 17 STATE_DONATION_SLOT_JAMMED 18 STATE_HEAVEN_PATH 19 STATE_REBIRTH_BOSS_SWITCHED 20 STATE_HAUNT_SELECTED 21 STATE_ADVERSARY_SELECTED 22 STATE_MR_FRED_SELECTED 23 STATE_MAMA_GURDY_SELECTED 24 STATE_URIEL_SPAWNED 25 STATE_GABRIEL_SPAWNED 26 STATE_FALLEN_SPAWNED 27 STATE_HEADLESS_HORSEMAN_SPAWNED 28 STATE_KRAMPUS_SPAWNED 29 STATE_DONATION_SLOT_BLOWN 30 STATE_SHOPKEEPER_KILLED 31 STATE_ULTRAPRIDE_SPAWNED 32 STATE_BOSSRUSH_DONE 33 STATE_GREED_SLOT_JAMMED 34 STATE_AFTERBIRTH_BOSS_SWITCHED 35 STATE_BROWNIE_SELECTED 36 STATE_SUPERBUM_APPEARED 37 STATE_BOSSRUSH_DOOR_SPAWNED 38 STATE_BLUEWOMB_DOOR_SPAWNED 39 STATE_BLUEWOMB_DONE 40 STATE_HEART_BOMB_COIN_PICKED 41 STATE_ABPLUS_BOSS_SWITCHED 42 STATE_SISTERS_VIS_SELECTED 43 NUM_STATE_FLAGS 44","title":"Enum \"GameStateFlag\""},{"location":"enums/GridCollisionClass/","text":"Enum \"GridCollisionClass\" \u2693\ufe0e Enumerator comment id COLLISION_NONE 0 COLLISION_PIT 1 COLLISION_OBJECT 2 COLLISION_SOLID 3 COLLISION_WALL 4 COLLISION_WALL_EXCEPT_PLAYER 5","title":"GridCollisionClass"},{"location":"enums/GridCollisionClass/#enum-gridcollisionclass","text":"Enumerator comment id COLLISION_NONE 0 COLLISION_PIT 1 COLLISION_OBJECT 2 COLLISION_SOLID 3 COLLISION_WALL 4 COLLISION_WALL_EXCEPT_PLAYER 5","title":"Enum \"GridCollisionClass\""},{"location":"enums/GridEntityType/","text":"Enum \"GridEntityType\" \u2693\ufe0e Enumerator comment id GRID_NULL 0 GRID_DECORATION 1 GRID_ROCK 2 GRID_ROCKB 3 GRID_ROCKT 4 GRID_ROCK_BOMB 5 GRID_ROCK_ALT 6 GRID_PIT 7 GRID_SPIKES 8 GRID_SPIKES_ONOFF 9 GRID_SPIDERWEB 10 GRID_LOCK 11 GRID_TNT 12 GRID_FIREPLACE not used! 13 GRID_POOP 14 GRID_WALL 15 GRID_DOOR 16 GRID_TRAPDOOR 17 GRID_STAIRS 18 GRID_GRAVITY 19 GRID_PRESSURE_PLATE 20 GRID_STATUE 21 GRID_ROCK_SS 22","title":"GridEntityType"},{"location":"enums/GridEntityType/#enum-gridentitytype","text":"Enumerator comment id GRID_NULL 0 GRID_DECORATION 1 GRID_ROCK 2 GRID_ROCKB 3 GRID_ROCKT 4 GRID_ROCK_BOMB 5 GRID_ROCK_ALT 6 GRID_PIT 7 GRID_SPIKES 8 GRID_SPIKES_ONOFF 9 GRID_SPIDERWEB 10 GRID_LOCK 11 GRID_TNT 12 GRID_FIREPLACE not used! 13 GRID_POOP 14 GRID_WALL 15 GRID_DOOR 16 GRID_TRAPDOOR 17 GRID_STAIRS 18 GRID_GRAVITY 19 GRID_PRESSURE_PLATE 20 GRID_STATUE 21 GRID_ROCK_SS 22","title":"Enum \"GridEntityType\""},{"location":"enums/GridRooms/","text":"Enum \"GridRooms\" \u2693\ufe0e Enumerator comment id MAX_GRID_ROOMS 128 ROOM_DEVIL_IDX -1 ROOM_ERROR_IDX -2 ROOM_DEBUG_IDX -3 ROOM_DUNGEON_IDX -4 ROOM_BOSSRUSH_IDX -5 ROOM_BLACK_MARKET_IDX -6 ROOM_MEGA_SATAN_IDX -7 ROOM_BLUE_WOOM_IDX -8 ROOM_THE_VOID_IDX -9 NUM_OFF_GRID_ROOMS 9 MAX_ROOMS 137","title":"GridRooms"},{"location":"enums/GridRooms/#enum-gridrooms","text":"Enumerator comment id MAX_GRID_ROOMS 128 ROOM_DEVIL_IDX -1 ROOM_ERROR_IDX -2 ROOM_DEBUG_IDX -3 ROOM_DUNGEON_IDX -4 ROOM_BOSSRUSH_IDX -5 ROOM_BLACK_MARKET_IDX -6 ROOM_MEGA_SATAN_IDX -7 ROOM_BLUE_WOOM_IDX -8 ROOM_THE_VOID_IDX -9 NUM_OFF_GRID_ROOMS 9 MAX_ROOMS 137","title":"Enum \"GridRooms\""},{"location":"enums/HeartSubType/","text":"Enum \"HeartSubType\" \u2693\ufe0e Enumerator comment id HEART_FULL 1 HEART_HALF 2 HEART_SOUL 3 HEART_ETERNAL 4 HEART_DOUBLEPACK 5 HEART_BLACK 6 HEART_GOLDEN 7 HEART_HALF_SOUL 8 HEART_SCARED 9 HEART_BLENDED 10 HEART_BONE 11","title":"HeartSubType"},{"location":"enums/HeartSubType/#enum-heartsubtype","text":"Enumerator comment id HEART_FULL 1 HEART_HALF 2 HEART_SOUL 3 HEART_ETERNAL 4 HEART_DOUBLEPACK 5 HEART_BLACK 6 HEART_GOLDEN 7 HEART_HALF_SOUL 8 HEART_SCARED 9 HEART_BLENDED 10 HEART_BONE 11","title":"Enum \"HeartSubType\""},{"location":"enums/InputHook/","text":"Enum \"InputHook\" \u2693\ufe0e Enumerator comment id IS_ACTION_PRESSED 0 IS_ACTION_TRIGGERED 1 GET_ACTION_VALUE 2","title":"InputHook"},{"location":"enums/InputHook/#enum-inputhook","text":"Enumerator comment id IS_ACTION_PRESSED 0 IS_ACTION_TRIGGERED 1 GET_ACTION_VALUE 2","title":"Enum \"InputHook\""},{"location":"enums/ItemPoolType/","text":"Enum \"ItemPoolType\" \u2693\ufe0e Enumerator comment id POOL_NULL -1 POOL_TREASURE 0 POOL_SHOP 1 POOL_BOSS 2 POOL_DEVIL 3 POOL_ANGEL 4 POOL_SECRET 5 POOL_LIBRARY 6 POOL_CHALLENGE 7 POOL_GOLDEN_CHEST 8 POOL_RED_CHEST 9 POOL_BEGGAR 10 POOL_DEMON_BEGGAR 11 POOL_CURSE 12 POOL_KEY_MASTER 13 POOL_BOSSRUSH 14 POOL_DUNGEON 15 POOL_GREED_TREASURE 16 POOL_GREED_BOSS 17 POOL_GREED_SHOP 18 POOL_GREED_DEVIL 19 POOL_GREED_ANGEL 20 POOL_GREED_CURSE 21 POOL_GREED_SECRET 22 POOL_GREED_LIBRARY 23 POOL_GREED_GOLDEN_CHEST 24 POOL_BOMB_BUM 25 NUM_ITEMPOOLS 26","title":"ItemPoolType"},{"location":"enums/ItemPoolType/#enum-itempooltype","text":"Enumerator comment id POOL_NULL -1 POOL_TREASURE 0 POOL_SHOP 1 POOL_BOSS 2 POOL_DEVIL 3 POOL_ANGEL 4 POOL_SECRET 5 POOL_LIBRARY 6 POOL_CHALLENGE 7 POOL_GOLDEN_CHEST 8 POOL_RED_CHEST 9 POOL_BEGGAR 10 POOL_DEMON_BEGGAR 11 POOL_CURSE 12 POOL_KEY_MASTER 13 POOL_BOSSRUSH 14 POOL_DUNGEON 15 POOL_GREED_TREASURE 16 POOL_GREED_BOSS 17 POOL_GREED_SHOP 18 POOL_GREED_DEVIL 19 POOL_GREED_ANGEL 20 POOL_GREED_CURSE 21 POOL_GREED_SECRET 22 POOL_GREED_LIBRARY 23 POOL_GREED_GOLDEN_CHEST 24 POOL_BOMB_BUM 25 NUM_ITEMPOOLS 26","title":"Enum \"ItemPoolType\""},{"location":"enums/ItemType/","text":"Enum \"ItemType\" \u2693\ufe0e Enumerator comment id ITEM_NULL 0 ITEM_PASSIVE 1 ITEM_TRINKET 2 ITEM_ACTIVE 3 ITEM_FAMILIAR 4","title":"ItemType"},{"location":"enums/ItemType/#enum-itemtype","text":"Enumerator comment id ITEM_NULL 0 ITEM_PASSIVE 1 ITEM_TRINKET 2 ITEM_ACTIVE 3 ITEM_FAMILIAR 4","title":"Enum \"ItemType\""},{"location":"enums/KeySubType/","text":"Enum \"KeySubType\" \u2693\ufe0e Enumerator comment id KEY_NORMAL 1 KEY_GOLDEN 2 KEY_DOUBLEPACK 3 KEY_CHARGED 4","title":"KeySubType"},{"location":"enums/KeySubType/#enum-keysubtype","text":"Enumerator comment id KEY_NORMAL 1 KEY_GOLDEN 2 KEY_DOUBLEPACK 3 KEY_CHARGED 4","title":"Enum \"KeySubType\""},{"location":"enums/Keyboard/","text":"Enum \"Keyboard\" \u2693\ufe0e Enumerator comment id KEY_SPACE 32 KEY_APOSTROPHE 39 KEY_COMMA 44 KEY_MINUS 45 KEY_PERIOD 46 KEY_SLASH 47 KEY_0 48 KEY_1 49 KEY_2 50 KEY_3 51 KEY_4 52 KEY_5 53 KEY_6 54 KEY_7 55 KEY_8 56 KEY_9 57 KEY_SEMICOLON 59 KEY_EQUAL 61 KEY_A 65 KEY_B 66 KEY_C 67 KEY_D 68 KEY_E 69 KEY_F 70 KEY_G 71 KEY_H 72 KEY_I 73 KEY_J 74 KEY_K 75 KEY_L 76 KEY_M 77 KEY_N 78 KEY_O 79 KEY_P 80 KEY_Q 81 KEY_R 82 KEY_S 83 KEY_T 84 KEY_U 85 KEY_V 86 KEY_W 87 KEY_X 88 KEY_Y 89 KEY_Z 90 KEY_LEFT_BRACKET 91 KEY_BACKSLASH 92 KEY_RIGHT_BRACKET 93 KEY_GRAVE_ACCENT 96 KEY_WORLD_1 161 KEY_WORLD_2 162 KEY_ESCAPE 256 KEY_ENTER 257 KEY_TAB 258 KEY_BACKSPACE 259 KEY_INSERT 260 KEY_DELETE 261 KEY_RIGHT 262 KEY_LEFT 263 KEY_DOWN 264 KEY_UP 265 KEY_PAGE_UP 266 KEY_PAGE_DOWN 267 KEY_HOME 268 KEY_END 269 KEY_CAPS_LOCK 280 KEY_SCROLL_LOCK 281 KEY_NUM_LOCK 282 KEY_PRINT_SCREEN 283 KEY_PAUSE 284 KEY_F1 290 KEY_F2 291 KEY_F3 292 KEY_F4 293 KEY_F5 294 KEY_F6 295 KEY_F7 296 KEY_F8 297 KEY_F9 298 KEY_F10 299 KEY_F11 300 KEY_F12 301 KEY_F13 302 KEY_F14 303 KEY_F15 304 KEY_F16 305 KEY_F17 306 KEY_F18 307 KEY_F19 308 KEY_F20 309 KEY_F21 310 KEY_F22 311 KEY_F23 312 KEY_F24 313 KEY_F25 314 KEY_KP_0 320 KEY_KP_1 321 KEY_KP_2 322 KEY_KP_3 323 KEY_KP_4 324 KEY_KP_5 325 KEY_KP_6 326 KEY_KP_7 327 KEY_KP_8 328 KEY_KP_9 329 KEY_KP_DECIMAL 330 KEY_KP_DIVIDE 331 KEY_KP_MULTIPLY 332 KEY_KP_SUBTRACT 333 KEY_KP_ADD 334 KEY_KP_ENTER 335 KEY_KP_EQUAL 336 KEY_LEFT_SHIFT 340 KEY_LEFT_CONTROL 341 KEY_LEFT_ALT 342 KEY_LEFT_SUPER 343 KEY_RIGHT_SHIFT 344 KEY_RIGHT_CONTROL 345 KEY_RIGHT_ALT 346 KEY_RIGHT_SUPER 347 KEY_MENU 348","title":"Keyboard"},{"location":"enums/Keyboard/#enum-keyboard","text":"Enumerator comment id KEY_SPACE 32 KEY_APOSTROPHE 39 KEY_COMMA 44 KEY_MINUS 45 KEY_PERIOD 46 KEY_SLASH 47 KEY_0 48 KEY_1 49 KEY_2 50 KEY_3 51 KEY_4 52 KEY_5 53 KEY_6 54 KEY_7 55 KEY_8 56 KEY_9 57 KEY_SEMICOLON 59 KEY_EQUAL 61 KEY_A 65 KEY_B 66 KEY_C 67 KEY_D 68 KEY_E 69 KEY_F 70 KEY_G 71 KEY_H 72 KEY_I 73 KEY_J 74 KEY_K 75 KEY_L 76 KEY_M 77 KEY_N 78 KEY_O 79 KEY_P 80 KEY_Q 81 KEY_R 82 KEY_S 83 KEY_T 84 KEY_U 85 KEY_V 86 KEY_W 87 KEY_X 88 KEY_Y 89 KEY_Z 90 KEY_LEFT_BRACKET 91 KEY_BACKSLASH 92 KEY_RIGHT_BRACKET 93 KEY_GRAVE_ACCENT 96 KEY_WORLD_1 161 KEY_WORLD_2 162 KEY_ESCAPE 256 KEY_ENTER 257 KEY_TAB 258 KEY_BACKSPACE 259 KEY_INSERT 260 KEY_DELETE 261 KEY_RIGHT 262 KEY_LEFT 263 KEY_DOWN 264 KEY_UP 265 KEY_PAGE_UP 266 KEY_PAGE_DOWN 267 KEY_HOME 268 KEY_END 269 KEY_CAPS_LOCK 280 KEY_SCROLL_LOCK 281 KEY_NUM_LOCK 282 KEY_PRINT_SCREEN 283 KEY_PAUSE 284 KEY_F1 290 KEY_F2 291 KEY_F3 292 KEY_F4 293 KEY_F5 294 KEY_F6 295 KEY_F7 296 KEY_F8 297 KEY_F9 298 KEY_F10 299 KEY_F11 300 KEY_F12 301 KEY_F13 302 KEY_F14 303 KEY_F15 304 KEY_F16 305 KEY_F17 306 KEY_F18 307 KEY_F19 308 KEY_F20 309 KEY_F21 310 KEY_F22 311 KEY_F23 312 KEY_F24 313 KEY_F25 314 KEY_KP_0 320 KEY_KP_1 321 KEY_KP_2 322 KEY_KP_3 323 KEY_KP_4 324 KEY_KP_5 325 KEY_KP_6 326 KEY_KP_7 327 KEY_KP_8 328 KEY_KP_9 329 KEY_KP_DECIMAL 330 KEY_KP_DIVIDE 331 KEY_KP_MULTIPLY 332 KEY_KP_SUBTRACT 333 KEY_KP_ADD 334 KEY_KP_ENTER 335 KEY_KP_EQUAL 336 KEY_LEFT_SHIFT 340 KEY_LEFT_CONTROL 341 KEY_LEFT_ALT 342 KEY_LEFT_SUPER 343 KEY_RIGHT_SHIFT 344 KEY_RIGHT_CONTROL 345 KEY_RIGHT_ALT 346 KEY_RIGHT_SUPER 347 KEY_MENU 348","title":"Enum \"Keyboard\""},{"location":"enums/LaserOffset/","text":"Enum \"LaserOffset\" \u2693\ufe0e Enumerator comment id LASER_TECH1_OFFSET 0 LASER_TECH2_OFFSET 1 LASER_TECH5_OFFSET 2 LASER_SHOOP_OFFSET 3 LASER_BRIMSTONE_OFFSET 4 LASER_MOMS_EYE_OFFSET 5 LASER_TRACTOR_BEAM_OFFSET 6","title":"LaserOffset"},{"location":"enums/LaserOffset/#enum-laseroffset","text":"Enumerator comment id LASER_TECH1_OFFSET 0 LASER_TECH2_OFFSET 1 LASER_TECH5_OFFSET 2 LASER_SHOOP_OFFSET 3 LASER_BRIMSTONE_OFFSET 4 LASER_MOMS_EYE_OFFSET 5 LASER_TRACTOR_BEAM_OFFSET 6","title":"Enum \"LaserOffset\""},{"location":"enums/LevelCurse/","text":"Enum \"LevelCurse\" \u2693\ufe0e Enumerator comment id CURSE_NONE 0 CURSE_OF_DARKNESS 1 CURSE_OF_LABYRINTH 1<<1 CURSE_OF_THE_LOST 1<<2 CURSE_OF_THE_UNKNOWN 1<<3 CURSE_OF_THE_CURSED 1<<4 CURSE_OF_MAZE 1<<5 CURSE_OF_BLIND 1<<6 NUM_CURSES 8","title":"LevelCurse"},{"location":"enums/LevelCurse/#enum-levelcurse","text":"Enumerator comment id CURSE_NONE 0 CURSE_OF_DARKNESS 1 CURSE_OF_LABYRINTH 1<<1 CURSE_OF_THE_LOST 1<<2 CURSE_OF_THE_UNKNOWN 1<<3 CURSE_OF_THE_CURSED 1<<4 CURSE_OF_MAZE 1<<5 CURSE_OF_BLIND 1<<6 NUM_CURSES 8","title":"Enum \"LevelCurse\""},{"location":"enums/LevelStage/","text":"Enum \"LevelStage\" \u2693\ufe0e Enumerator internal id possible stages comment id STAGE_NULL 0 Special Rooms (Game crashes on entering this stage) 0 STAGE1_1 1 Basement 1, Cellar 1, Burning Basement 1 1 STAGE1_2 2 Basement 2, Cellar 2, Burning Basement 2 2 STAGE2_1 3 Caves 1, Catacombs 1, Flooded Caves 1 3 STAGE2_2 4 Caves 2, Catacombs 2, Flooded Caves 2 4 STAGE3_1 5 Depths 1, Necropolis 1, Dank Depths 1 5 STAGE3_2 6 Depths 2, Necropolis 2, Dank Depths 2 6 STAGE4_1 7 Womb 1, Utero 1, Scarred Womb 1 7 STAGE4_2 8 Womb 2, Utero 2, Scarred Womb 2 8 STAGE4_3 9 ??? (Blue Womb) 9 STAGE5 10 Sheol, Cathedral 10 STAGE6 11 Dark Room, Chest 11 STAGE7 12 The Void 12 NUM_STAGES 13 (No actual Level, but can be visited ingame. it is a stage full of greed mode rooms, but every wave is its own room.) 13 STAGE1_GREED 1 Basement (Greed) 1 STAGE2_GREED 2 Caves (Greed) 2 STAGE3_GREED 3 Depths (Greed) 3 STAGE4_GREED 4 Womb (Greed) 4 STAGE5_GREED 5 Sheol (Greed) 5 STAGE6_GREED 6 The Shop (Greed) 6 STAGE7_GREED 7 Ultra Greed 7","title":"LevelStage"},{"location":"enums/LevelStage/#enum-levelstage","text":"Enumerator internal id possible stages comment id STAGE_NULL 0 Special Rooms (Game crashes on entering this stage) 0 STAGE1_1 1 Basement 1, Cellar 1, Burning Basement 1 1 STAGE1_2 2 Basement 2, Cellar 2, Burning Basement 2 2 STAGE2_1 3 Caves 1, Catacombs 1, Flooded Caves 1 3 STAGE2_2 4 Caves 2, Catacombs 2, Flooded Caves 2 4 STAGE3_1 5 Depths 1, Necropolis 1, Dank Depths 1 5 STAGE3_2 6 Depths 2, Necropolis 2, Dank Depths 2 6 STAGE4_1 7 Womb 1, Utero 1, Scarred Womb 1 7 STAGE4_2 8 Womb 2, Utero 2, Scarred Womb 2 8 STAGE4_3 9 ??? (Blue Womb) 9 STAGE5 10 Sheol, Cathedral 10 STAGE6 11 Dark Room, Chest 11 STAGE7 12 The Void 12 NUM_STAGES 13 (No actual Level, but can be visited ingame. it is a stage full of greed mode rooms, but every wave is its own room.) 13 STAGE1_GREED 1 Basement (Greed) 1 STAGE2_GREED 2 Caves (Greed) 2 STAGE3_GREED 3 Depths (Greed) 3 STAGE4_GREED 4 Womb (Greed) 4 STAGE5_GREED 5 Sheol (Greed) 5 STAGE6_GREED 6 The Shop (Greed) 6 STAGE7_GREED 7 Ultra Greed 7","title":"Enum \"LevelStage\""},{"location":"enums/LevelStateFlag/","text":"Enum \"LevelStateFlag\" \u2693\ufe0e Enumerator comment id STATE_BUM_KILLED 0 STATE_EVIL_BUM_KILLED 1 STATE_REDHEART_DAMAGED 2 STATE_BUM_LEFT 3 STATE_EVIL_BUM_LEFT 4 STATE_DAMAGED 5 STATE_SHOPKEEPER_KILLED_LVL 6 STATE_COMPASS_EFFECT 7 STATE_MAP_EFFECT 8 STATE_BLUE_MAP_EFFECT 9 STATE_FULL_MAP_EFFECT 10 STATE_GREED_LOST_PENALTY 11 STATE_GREED_MONSTRO_SPAWNED 12 STATE_ITEM_DUNGEON_FOUND 13 STATE_MAMA_MEGA_USED 14 NUM_STATE_FLAGS 15","title":"LevelStateFlag"},{"location":"enums/LevelStateFlag/#enum-levelstateflag","text":"Enumerator comment id STATE_BUM_KILLED 0 STATE_EVIL_BUM_KILLED 1 STATE_REDHEART_DAMAGED 2 STATE_BUM_LEFT 3 STATE_EVIL_BUM_LEFT 4 STATE_DAMAGED 5 STATE_SHOPKEEPER_KILLED_LVL 6 STATE_COMPASS_EFFECT 7 STATE_MAP_EFFECT 8 STATE_BLUE_MAP_EFFECT 9 STATE_FULL_MAP_EFFECT 10 STATE_GREED_LOST_PENALTY 11 STATE_GREED_MONSTRO_SPAWNED 12 STATE_ITEM_DUNGEON_FOUND 13 STATE_MAMA_MEGA_USED 14 NUM_STATE_FLAGS 15","title":"Enum \"LevelStateFlag\""},{"location":"enums/LocustSubtypes/","text":"Enum \"LocustSubtypes\" \u2693\ufe0e Enumerator comment id LOCUST_OF_WRATH 1 LOCUST_OF_PESTILENCE 2 LOCUST_OF_FAMINE 3 LOCUST_OF_DEATH 4 LOCUST_OF_CONQUEST 5","title":"LocustSubtypes"},{"location":"enums/LocustSubtypes/#enum-locustsubtypes","text":"Enumerator comment id LOCUST_OF_WRATH 1 LOCUST_OF_PESTILENCE 2 LOCUST_OF_FAMINE 3 LOCUST_OF_DEATH 4 LOCUST_OF_CONQUEST 5","title":"Enum \"LocustSubtypes\""},{"location":"enums/ModCallbacks/","text":"Enum \"ModCallbacks\" \u2693\ufe0e Enumerator comment id MC_NPC_UPDATEFunction Args: (EntityNPC)Optional callback Args: EntityType Called after an NPC is updated. Returning any value will have no effect on later callback executions. This callback will NOT fire when the NPC is playing the \"Appear\" animation. For example, when a Gaper spawns, it will fire on frame 1, then on frame 31 and onwards. This code will print \"Hello World!\" for every NPC Update. If the NPC is of the type \"ENTITY_GAPER\", it will also print \"Gaper found\". function mod:myFunction(entity) -- 'entity' contains a reference to the NPC print(\"Hello World!\") end mod:AddCallback(ModCallbacks.MC_NPC_UPDATE, mod.myFunction) function mod:myFunction2(entity) -- 'entity' contains a reference to the NPC print(\"Gaper found!\") end mod:AddCallback(ModCallbacks.MC_NPC_UPDATE, mod.myFunction2, EntityType.ENTITY_GAPER) 0 MC_POST_UPDATEFunction Args: - Called after every game update. Returning any value will have no effect on later callback executions. This callback is called every few frames the game is active. It will not be called, when its paused (for example on screentransitions or on the pause menu). 1 MC_POST_RENDERFunction Args: - Called after every game render. Returning any value will have no effect on later callback executions. It is highly recommended to only use this function when you want to render something. Its not recommended to use this function for things which are not frequently used or need constant recalculation. 2 MC_USE_ITEM Function Args: (CollectibleType, RNG)Optional callback Args: CollectibleType Called when a custom active item is used, after discharging it. The item RNG allows for the item's random events to be seeded. Return true to show the \"use item\" animation, otherwise false.Returning any value will have no effect on later callback executions. 3 MC_POST_PEFFECT_UPDATE Function Args: (EntityPlayer)Optional callback Args: PlayerType Called for each player, each frame, after the player evaluates the effects of items that must be constantly evaluated.Returning any value will have no effect on later callback executions. 4 MC_USE_CARD Function Args: (Card)Optional callback Args: Card Called when a card/rune is used.Returning any value will have no effect on later callback executions. 5 MC_FAMILIAR_UPDATE Function Args: (EntityFamiliar)Optional callback Args: FamiliarVariant Called every frame for each familiar. Returning any value will have no effect on later callback executions. 6 MC_FAMILIAR_INIT Function Args: (EntityFamiliar)Optional callback Args: FamiliarVariant Called just after a familiar is initialized. Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityFamiliar. For example, the Position is always equal to Vector(0,0). 7 MC_EVALUATE_CACHE Function Args: (EntityPlayer, CacheFlag)Optional callback Args: CacheFlag Called one or more times when a player's stats must be re-evaluated, such as after picking up an item, using certain pills or manually calling EvaluateItems() on an EntityPlayer. Returning any value will have no effect on later callback executions.Hint: Use this to let custom items change the player's stats, familiars, flying, weapons, etc. Items tell the game which stats they affect using cache values in items.xml. Then the callback should respond to the CacheFlag by setting the corresponding player stat. Other items' stat modifiers, multipliers, etc are applied before this callback is called. 8 MC_POST_PLAYER_INIT Function Args: (EntityPlayer)Optional callback Args: PlayerVariant* Called after a Player Entity is initialized. The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityPlayer. For example, the Position is always equal to Vector(0,0). 9 MC_USE_PILL Function Args: (PillEffect)Optional callback Args: PillEffect Called when a pill is used.Returning any value will have no effect on later callback executions. 10 MC_ENTITY_TAKE_DMG Function Args: (TookDamage [Entity], DamageAmount [float], DamageFlags [int], DamageSource [EntityRef], DamageCountdownFrames [int])Optional callback Args: EntityType Called before new damage is applied. If the entity has a DAMAGE_COUNTDOWN flag, it will ignore any other DAMAGE_COUNTDOWN hits for the duration specified. Return true or nil if the entity or player should sustain the damage, otherwise false to ignore it. If the entity is an EntityPlayer, the DamageAmount is the integer number of half-hearts of damage that the player will take. Otherwise, DamageAmount is a number of hit points. Returning any value besides nil will prevent later callbacks from being executed. 11 MC_POST_CURSE_EVAL Function Args: (Curses) Curses is a bitmask containing current curses. Called after the current Level applied it's curses. Returns the new curse bitmask. Use Isaac.GetCurseIdByName() to get the curseID.If a number is returned, it will be the \"Curses\" arg for later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash.The last callback to return a valid return value wins out and overwrites previous callbacks' return values 12 MC_INPUT_ACTION Function Args: (Entity, InputHook, ButtonAction)Optional callback Args: InputHook It is called when game/game entities wants to read an action input. Entity can be nil if the input is not read from an entity class. The InputHook value can be used to determine if this callback was called through Input.IsActionTriggered(), Input.IsActionPressed(), or Input.GetActionValue() Return nil if you don't want to overwrite the input or value. The return value can be bool if it's a IS_ACTION_XXX hook or float if it's an GET_ACTION_VALUE hook. Float values should be in range of 0.0 and 1.0 Returning any value will have no effect on later callback executions. 13 MC_LEVEL_GENERATOR This callback doesn't work right now and will never be called by the game! 14 MC_POST_GAME_STARTED Function Args: (IsContinued [bool]) This function gets called when you start a game. The boolean value is true when you continue a run, false when you start a new one. This callback will be called after MC_POST_NEW_ROOM and after MC_POST_NEW_LEVEL. Returning any value will have no effect on later callback executions. local function onStart(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, onStart) 15 MC_POST_GAME_END Function Args: (IsGameOver [bool]) This function gets called when the game over screen appears, or when the an ending starts playing. The boolean value is true when you died and got a game over, false when you won and got an ending. Returning any value will have no effect on later callback executions. local function onEnd(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_POST_GAME_END, onEnd) 16 MC_PRE_GAME_EXIT Function Args: (ShouldSave [bool]) This function gets called when you quit a run. The boolean value is true when the game would normally create a continuable save, false when it wouldn't. Called twice when the game plays an ending. Returning any value will have no effect on later callback executions. local function onExit(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, onExit) 17 MC_POST_NEW_LEVEL Function Args: - This triggers after transitioning a level or stage. Its always called after MC_POST_NEW_ROOM. Returning any value will have no effect on later callback executions. 18 MC_POST_NEW_ROOM Function Args: - This triggers after entering a room. Returning any value will have no effect on later callback executions. 19 MC_GET_CARDFunction Args: (RNG, Card, IncludePlayingCards [bool], IncludeRunes [bool], OnlyRunes [bool]) This callback is used for handling Card Pools. Because not all cards have the same chance to spawn, use RNG for a seeded random selection.You can use the boolean values as a filter for the selection. The return value determines, what Card will be spawned. Return nil to not replace the spawned card. Returned values will not update the \"Card\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 20 MC_GET_SHADER_PARAMS Function Args: (ShaderName [string]) Returns a table containing a key -> value pair for custom shader parameters. 21 MC_EXECUTE_CMDFunction Args: (CMD [string], Parameters [string]) Returns a string separated by (newline) per output line CMD is the first word of the Console input. The parameters are the rest of the Input.This function is NOT called for default game commands like Spawn or Debug. Returning a string will print it to the console. Returning any value will have no effect on later callback executions. function mod.oncmd(_, command, args) print(command) print(args) end mod:AddCallback(ModCallbacks.MC_EXECUTE_CMD, mod.oncmd) -- executing command \"Test apple 1 Pear test\" prints -- Test -- apple 1 Pear test 22 MC_PRE_USE_ITEMFunction Args: (CollectibleType, RNG)Optional callback Args: CollectibleType Called before an item is used. Return true to prevent the default code of an item to be triggered. This will still discharge the item. Returning any value besides nil will also prevent later callbacks from being executed. 23 MC_PRE_ENTITY_SPAWNFunction Args: (EntityType, Variant [int], SubType [int], Position [Vector], Velocity [Vector], Spawner [Entity], Seed [int]) Called right before an entity is spawned. Optional: Return a table with new values { Type, Variant, Subtype, Seed } to override these values of the spawned entity.Returning a value that is not a table or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 24 MC_POST_FAMILIAR_RENDERFunction Args: (EntityFamiliar, RenderOffset [Vector])Optional callback Args: FamiliarVariant Returning any value will have no effect on later callback executions. 25 MC_PRE_FAMILIAR_COLLISIONFunction Args: (EntityFamiliar, Collider [Entity], Low [bool])Optional callback Args: FamiliarVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining a FamiliarVariant unless its absolutely nessesary! 26 MC_POST_NPC_INITFunction Args: (EntityNPC)Optional callback Args: EntityType Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityNPC. For example, the Position is always equal to Vector(0,0). 27 MC_POST_NPC_RENDERFunction Args: (EntityNPC, RenderOffset [Vector])Optional callback Args: EntityType Returning any value will have no effect on later callback executions. 28 MC_POST_NPC_DEATHFunction Args: (EntityNPC)Optional callback Args: EntityType Gets called after the Death animation is played.Returning any value will have no effect on later callback executions. 29 MC_PRE_NPC_COLLISIONFunction Args: (EntityNPC, Collider [Entity], Low [bool])Optional callback Args: EntityType The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an EntityType unless its absolutely nessesary! 30 MC_POST_PLAYER_UPDATEFunction Args: (EntityPlayer)Optional callback Args: PlayerVariant* The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. 31 MC_POST_PLAYER_RENDERFunction Args: (EntityPlayer, RenderOffset [Vector])Optional callback Args: PlayerVariant* The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. 32 MC_PRE_PLAYER_COLLISIONFunction Args: (EntityPlayer, Collider [Entity], Low [bool])Optional callback Args: PlayerVariant* The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-Baby This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 33 MC_POST_PICKUP_INITFunction Args: (EntityPickup)Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityPickup. For example, the Position is always equal to Vector(0,0). 34 MC_POST_PICKUP_UPDATEFunction Args: (EntityPickup)Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. This callback will be called on the 1st frame that the entity exists. It will only be called on the 0th frame, when you enter a room that already contains a spawned pickup. 35 MC_POST_PICKUP_RENDERFunction Args: (EntityPickup, RenderOffset [Vector])Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. 36 MC_POST_PICKUP_SELECTIONFunction Args: (EntityPickup, Variant [int], Subtype [int]) Called after a Pickup was choosen from a list of random pickups to be spawned.Return nil to continue with default game code. Return a table { Variant, Subtype } to override the specified values. This does also affect later executed callbacks.Returning a value that is not a table or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values EntityPickup does contain the Type/variant of the pickup to spawn, but is otherwise an empty class with empty / zeroed values. This Callback is also called when entering a room that contains pickups that are already selected. It is also called when the player drops a card. Those facts make this callback useless to use for handling pickup pools. 37 MC_PRE_PICKUP_COLLISIONFunction Args: (EntityPickup, Collider [Entity], Low [bool])Optional callback Args: PickupVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an PickupVariant unless its absolutely nessesary! 38 MC_POST_TEAR_INITFunction Args: (EntityTear)Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityTear. For example, the Position is always equal to Vector(0,0). 39 MC_POST_TEAR_UPDATEFunction Args: (EntityTear)Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. 40 MC_POST_TEAR_RENDERFunction Args: (EntityTear, RenderOffset [Vector])Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. 41 MC_PRE_TEAR_COLLISIONFunction Args: (EntityTear, Collider [Entity], Low [bool])Optional callback Args: TearVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an PickupVariant unless its absolutely nessesary! 42 MC_POST_PROJECTILE_INITFunction Args: (EntityProjectile)Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityProjectile. For example, the Position is always equal to Vector(0,0). 43 MC_POST_PROJECTILE_UPDATEFunction Args: (EntityProjectile)Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. 44 MC_POST_PROJECTILE_RENDERFunction Args: (EntityProjectile, RenderOffset [Vector])Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. 45 MC_PRE_PROJECTILE_COLLISIONFunction Args: (EntityProjectile, Collider [Entity], Low [bool])Optional callback Args: ProjectileVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an ProjectileVariant unless its absolutely nessesary! 46 MC_POST_LASER_INITFunction Args: (EntityLaser)Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityLaser. For example, the Position is always equal to Vector(0,0). 47 MC_POST_LASER_UPDATEFunction Args: (EntityLaser)Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. 48 MC_POST_LASER_RENDERFunction Args: (EntityLaser, RenderOffset [Vector])Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. 49 MC_POST_KNIFE_INITFunction Args: (EntityKnife)Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! This Callback provides incomplete data in the EntityKnife. For example, the Position is always equal to Vector(0,0). 50 MC_POST_KNIFE_UPDATEFunction Args: (EntityKnife)Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! 51 MC_POST_KNIFE_RENDERFunction Args: (EntityKnife, RenderOffset [Vector])Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! 52 MC_PRE_KNIFE_COLLISIONFunction Args: (EntityKnife, Collider [Entity], Low [bool])Optional callback Args: KnifeSubType * The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). The optional parameter is a SubType and NOT a Variant! This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an KnifeSubType unless its absolutely nessesary! 53 MC_POST_EFFECT_INITFunction Args: (EntityEffect)Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityEffect. For example, the Position is always equal to Vector(0,0). 54 MC_POST_EFFECT_UPDATEFunction Args: (EntityEffect)Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. 55 MC_POST_EFFECT_RENDERFunction Args: (EntityEffect, RenderOffset [Vector])Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. 56 MC_POST_BOMB_INITFunction Args: (EntityBomb)Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityBomb. For example, the Position is always equal to Vector(0,0). 57 MC_POST_BOMB_UPDATEFunction Args: (EntityBomb)Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. 58 MC_POST_BOMB_RENDERFunction Args: (EntityBomb, Offset [Vector])Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. 59 MC_PRE_BOMB_COLLISIONFunction Args: (EntityBomb, Collider [Entity], Low [bool])Optional callback Args: BombVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 60 MC_POST_FIRE_TEARFunction Args: (EntityTear) Called when the player fires a tear.It is not called for other weapons or tears fired with Incubus.Returning any value will have no effect on later callback executions. 61 MC_PRE_GET_COLLECTIBLEFunction Args:(ItemPoolType, Decrease [bool], Seed [int]) This callback is called when the game needs to get a new random item from an item pool. You can return an integer from this callback in order to change the returned collectible type. It is not called for \"scripted\" drops (like Mr. Boom from Wrath) and manually spawned items.Returned values will not alter args of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 62 MC_POST_GET_COLLECTIBLEFunction Args:(SelectedCollectible [CollectibleType], ItemPoolType, Decrease [bool], Seed [int]) This function is called right after MC_PRE_GET_COLLECTIBLE and determines the Collectible that will be spawned from the given ItemPoolType. You can return an integer from this callback in order to change the returned collectible type.Returned values will not update the \"SelectedCollectible\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 63 MC_GET_PILL_COLORFunction Args:(Seed [int]) This function is called, when the game is spawning a pill and needs to determine its PillColor. Return a PillColor to specify a Pillcolor that needs to be choosen. Return nothing to let it be handled by the game.Returned values will not alter the args of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 64 MC_GET_PILL_EFFECTFunction Args: (SelectedPillEffect [PillEffect], PillColor) Called every frames when the game get the PillEffect of a pill. The effect of the pill can be choosed by returning the chosen PillEffect. The effect is applied to every pill of the same PillColor, not to a single pill.Returned values will not update the \"SelectedPillEffect\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values This code turn \"Bad Trip\" pills into \"Balls of Steel\" pills. function mod:getPillEffect(pillEffect, pillColor) if pillEffect == PillEffect.PILLEFFECT_BAD_TRIP then return PillEffect.PILLEFFECT_BALLS_OF_STEEL end end mod:AddCallback(ModCallbacks.MC_GET_PILL_EFFECT, mod.getPillEffect) 65 MC_GET_TRINKETFunction Args: (SelectedTrinket [TrinketType], RNG) Called when a TrinketType of a Trinket needs to be determined. A TrinketType can be returned to change the SelectedTrinket.Returned values will not update the \"SelectedTrinket\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 66 MC_POST_ENTITY_REMOVEFunction Args: (Entity)Optional callback Args: EntityType Called whenever an Entity gets removed by the game. This includes deaths, kills, removals and even unloading an entity on room transition or ending a run.Returning any value will have no effect on later callback executions. 67 MC_POST_ENTITY_KILLFunction Args: (Entity)Optional callback Args: EntityType Called right before a death animation is triggered for an Entity.Returning any value will have no effect on later callback executions. 68 MC_PRE_NPC_UPDATEFunction Args: (EntityNPC)Optional callback Args: EntityType Return true if the internal AI of an NPC should be ignored, false or nil/nothing otherwise. This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 69 MC_PRE_SPAWN_CLEAN_AWARDFunction Args: (RNG, SpawnPosition [Vector]) This function is triggered in every room that can be cleared, including boss and angel rooms, and even when it normally would not spawn a reward.This Callback also handles special spawns like the spawning of Trapdoors after a boss is killed, therefore returning true here will also cancel those events.Return true if the spawn routine should be ignored, false or nil/nothing otherwise. This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 70 MC_PRE_ROOM_ENTITY_SPAWNFunction Args: (EntityType, Variant [int], SubType [int], GridIndex [int], Seed [int]) This is called when entering a new room, before spawning entities which are part of its layout. Grid entities will also trigger this callback and their type will the same as the type used by the gridspawn command. Because of this, effects are assigned the type 999 instead of 1000 in this callback. Optional: Return a table with new values { Type, Variant, Subtype }. Returning such a table will override any replacements that might naturally occur i.e. enemy variants.Returning any value will have no effect on later callback executions. 71","title":"ModCallbacks"},{"location":"enums/ModCallbacks/#enum-modcallbacks","text":"Enumerator comment id MC_NPC_UPDATEFunction Args: (EntityNPC)Optional callback Args: EntityType Called after an NPC is updated. Returning any value will have no effect on later callback executions. This callback will NOT fire when the NPC is playing the \"Appear\" animation. For example, when a Gaper spawns, it will fire on frame 1, then on frame 31 and onwards. This code will print \"Hello World!\" for every NPC Update. If the NPC is of the type \"ENTITY_GAPER\", it will also print \"Gaper found\". function mod:myFunction(entity) -- 'entity' contains a reference to the NPC print(\"Hello World!\") end mod:AddCallback(ModCallbacks.MC_NPC_UPDATE, mod.myFunction) function mod:myFunction2(entity) -- 'entity' contains a reference to the NPC print(\"Gaper found!\") end mod:AddCallback(ModCallbacks.MC_NPC_UPDATE, mod.myFunction2, EntityType.ENTITY_GAPER) 0 MC_POST_UPDATEFunction Args: - Called after every game update. Returning any value will have no effect on later callback executions. This callback is called every few frames the game is active. It will not be called, when its paused (for example on screentransitions or on the pause menu). 1 MC_POST_RENDERFunction Args: - Called after every game render. Returning any value will have no effect on later callback executions. It is highly recommended to only use this function when you want to render something. Its not recommended to use this function for things which are not frequently used or need constant recalculation. 2 MC_USE_ITEM Function Args: (CollectibleType, RNG)Optional callback Args: CollectibleType Called when a custom active item is used, after discharging it. The item RNG allows for the item's random events to be seeded. Return true to show the \"use item\" animation, otherwise false.Returning any value will have no effect on later callback executions. 3 MC_POST_PEFFECT_UPDATE Function Args: (EntityPlayer)Optional callback Args: PlayerType Called for each player, each frame, after the player evaluates the effects of items that must be constantly evaluated.Returning any value will have no effect on later callback executions. 4 MC_USE_CARD Function Args: (Card)Optional callback Args: Card Called when a card/rune is used.Returning any value will have no effect on later callback executions. 5 MC_FAMILIAR_UPDATE Function Args: (EntityFamiliar)Optional callback Args: FamiliarVariant Called every frame for each familiar. Returning any value will have no effect on later callback executions. 6 MC_FAMILIAR_INIT Function Args: (EntityFamiliar)Optional callback Args: FamiliarVariant Called just after a familiar is initialized. Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityFamiliar. For example, the Position is always equal to Vector(0,0). 7 MC_EVALUATE_CACHE Function Args: (EntityPlayer, CacheFlag)Optional callback Args: CacheFlag Called one or more times when a player's stats must be re-evaluated, such as after picking up an item, using certain pills or manually calling EvaluateItems() on an EntityPlayer. Returning any value will have no effect on later callback executions.Hint: Use this to let custom items change the player's stats, familiars, flying, weapons, etc. Items tell the game which stats they affect using cache values in items.xml. Then the callback should respond to the CacheFlag by setting the corresponding player stat. Other items' stat modifiers, multipliers, etc are applied before this callback is called. 8 MC_POST_PLAYER_INIT Function Args: (EntityPlayer)Optional callback Args: PlayerVariant* Called after a Player Entity is initialized. The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityPlayer. For example, the Position is always equal to Vector(0,0). 9 MC_USE_PILL Function Args: (PillEffect)Optional callback Args: PillEffect Called when a pill is used.Returning any value will have no effect on later callback executions. 10 MC_ENTITY_TAKE_DMG Function Args: (TookDamage [Entity], DamageAmount [float], DamageFlags [int], DamageSource [EntityRef], DamageCountdownFrames [int])Optional callback Args: EntityType Called before new damage is applied. If the entity has a DAMAGE_COUNTDOWN flag, it will ignore any other DAMAGE_COUNTDOWN hits for the duration specified. Return true or nil if the entity or player should sustain the damage, otherwise false to ignore it. If the entity is an EntityPlayer, the DamageAmount is the integer number of half-hearts of damage that the player will take. Otherwise, DamageAmount is a number of hit points. Returning any value besides nil will prevent later callbacks from being executed. 11 MC_POST_CURSE_EVAL Function Args: (Curses) Curses is a bitmask containing current curses. Called after the current Level applied it's curses. Returns the new curse bitmask. Use Isaac.GetCurseIdByName() to get the curseID.If a number is returned, it will be the \"Curses\" arg for later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash.The last callback to return a valid return value wins out and overwrites previous callbacks' return values 12 MC_INPUT_ACTION Function Args: (Entity, InputHook, ButtonAction)Optional callback Args: InputHook It is called when game/game entities wants to read an action input. Entity can be nil if the input is not read from an entity class. The InputHook value can be used to determine if this callback was called through Input.IsActionTriggered(), Input.IsActionPressed(), or Input.GetActionValue() Return nil if you don't want to overwrite the input or value. The return value can be bool if it's a IS_ACTION_XXX hook or float if it's an GET_ACTION_VALUE hook. Float values should be in range of 0.0 and 1.0 Returning any value will have no effect on later callback executions. 13 MC_LEVEL_GENERATOR This callback doesn't work right now and will never be called by the game! 14 MC_POST_GAME_STARTED Function Args: (IsContinued [bool]) This function gets called when you start a game. The boolean value is true when you continue a run, false when you start a new one. This callback will be called after MC_POST_NEW_ROOM and after MC_POST_NEW_LEVEL. Returning any value will have no effect on later callback executions. local function onStart(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, onStart) 15 MC_POST_GAME_END Function Args: (IsGameOver [bool]) This function gets called when the game over screen appears, or when the an ending starts playing. The boolean value is true when you died and got a game over, false when you won and got an ending. Returning any value will have no effect on later callback executions. local function onEnd(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_POST_GAME_END, onEnd) 16 MC_PRE_GAME_EXIT Function Args: (ShouldSave [bool]) This function gets called when you quit a run. The boolean value is true when the game would normally create a continuable save, false when it wouldn't. Called twice when the game plays an ending. Returning any value will have no effect on later callback executions. local function onExit(_,bool) print(bool) end mod:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, onExit) 17 MC_POST_NEW_LEVEL Function Args: - This triggers after transitioning a level or stage. Its always called after MC_POST_NEW_ROOM. Returning any value will have no effect on later callback executions. 18 MC_POST_NEW_ROOM Function Args: - This triggers after entering a room. Returning any value will have no effect on later callback executions. 19 MC_GET_CARDFunction Args: (RNG, Card, IncludePlayingCards [bool], IncludeRunes [bool], OnlyRunes [bool]) This callback is used for handling Card Pools. Because not all cards have the same chance to spawn, use RNG for a seeded random selection.You can use the boolean values as a filter for the selection. The return value determines, what Card will be spawned. Return nil to not replace the spawned card. Returned values will not update the \"Card\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 20 MC_GET_SHADER_PARAMS Function Args: (ShaderName [string]) Returns a table containing a key -> value pair for custom shader parameters. 21 MC_EXECUTE_CMDFunction Args: (CMD [string], Parameters [string]) Returns a string separated by (newline) per output line CMD is the first word of the Console input. The parameters are the rest of the Input.This function is NOT called for default game commands like Spawn or Debug. Returning a string will print it to the console. Returning any value will have no effect on later callback executions. function mod.oncmd(_, command, args) print(command) print(args) end mod:AddCallback(ModCallbacks.MC_EXECUTE_CMD, mod.oncmd) -- executing command \"Test apple 1 Pear test\" prints -- Test -- apple 1 Pear test 22 MC_PRE_USE_ITEMFunction Args: (CollectibleType, RNG)Optional callback Args: CollectibleType Called before an item is used. Return true to prevent the default code of an item to be triggered. This will still discharge the item. Returning any value besides nil will also prevent later callbacks from being executed. 23 MC_PRE_ENTITY_SPAWNFunction Args: (EntityType, Variant [int], SubType [int], Position [Vector], Velocity [Vector], Spawner [Entity], Seed [int]) Called right before an entity is spawned. Optional: Return a table with new values { Type, Variant, Subtype, Seed } to override these values of the spawned entity.Returning a value that is not a table or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 24 MC_POST_FAMILIAR_RENDERFunction Args: (EntityFamiliar, RenderOffset [Vector])Optional callback Args: FamiliarVariant Returning any value will have no effect on later callback executions. 25 MC_PRE_FAMILIAR_COLLISIONFunction Args: (EntityFamiliar, Collider [Entity], Low [bool])Optional callback Args: FamiliarVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining a FamiliarVariant unless its absolutely nessesary! 26 MC_POST_NPC_INITFunction Args: (EntityNPC)Optional callback Args: EntityType Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityNPC. For example, the Position is always equal to Vector(0,0). 27 MC_POST_NPC_RENDERFunction Args: (EntityNPC, RenderOffset [Vector])Optional callback Args: EntityType Returning any value will have no effect on later callback executions. 28 MC_POST_NPC_DEATHFunction Args: (EntityNPC)Optional callback Args: EntityType Gets called after the Death animation is played.Returning any value will have no effect on later callback executions. 29 MC_PRE_NPC_COLLISIONFunction Args: (EntityNPC, Collider [Entity], Low [bool])Optional callback Args: EntityType The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an EntityType unless its absolutely nessesary! 30 MC_POST_PLAYER_UPDATEFunction Args: (EntityPlayer)Optional callback Args: PlayerVariant* The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. 31 MC_POST_PLAYER_RENDERFunction Args: (EntityPlayer, RenderOffset [Vector])Optional callback Args: PlayerVariant* The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-BabyReturning any value will have no effect on later callback executions. 32 MC_PRE_PLAYER_COLLISIONFunction Args: (EntityPlayer, Collider [Entity], Low [bool])Optional callback Args: PlayerVariant* The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). The optional parameter can be used to specify a Player Variant. 0 = Player, 1 = Co-Op-Baby This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 33 MC_POST_PICKUP_INITFunction Args: (EntityPickup)Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityPickup. For example, the Position is always equal to Vector(0,0). 34 MC_POST_PICKUP_UPDATEFunction Args: (EntityPickup)Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. This callback will be called on the 1st frame that the entity exists. It will only be called on the 0th frame, when you enter a room that already contains a spawned pickup. 35 MC_POST_PICKUP_RENDERFunction Args: (EntityPickup, RenderOffset [Vector])Optional callback Args: PickupVariant Returning any value will have no effect on later callback executions. 36 MC_POST_PICKUP_SELECTIONFunction Args: (EntityPickup, Variant [int], Subtype [int]) Called after a Pickup was choosen from a list of random pickups to be spawned.Return nil to continue with default game code. Return a table { Variant, Subtype } to override the specified values. This does also affect later executed callbacks.Returning a value that is not a table or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values EntityPickup does contain the Type/variant of the pickup to spawn, but is otherwise an empty class with empty / zeroed values. This Callback is also called when entering a room that contains pickups that are already selected. It is also called when the player drops a card. Those facts make this callback useless to use for handling pickup pools. 37 MC_PRE_PICKUP_COLLISIONFunction Args: (EntityPickup, Collider [Entity], Low [bool])Optional callback Args: PickupVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an PickupVariant unless its absolutely nessesary! 38 MC_POST_TEAR_INITFunction Args: (EntityTear)Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityTear. For example, the Position is always equal to Vector(0,0). 39 MC_POST_TEAR_UPDATEFunction Args: (EntityTear)Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. 40 MC_POST_TEAR_RENDERFunction Args: (EntityTear, RenderOffset [Vector])Optional callback Args: TearVariant Returning any value will have no effect on later callback executions. 41 MC_PRE_TEAR_COLLISIONFunction Args: (EntityTear, Collider [Entity], Low [bool])Optional callback Args: TearVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an PickupVariant unless its absolutely nessesary! 42 MC_POST_PROJECTILE_INITFunction Args: (EntityProjectile)Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityProjectile. For example, the Position is always equal to Vector(0,0). 43 MC_POST_PROJECTILE_UPDATEFunction Args: (EntityProjectile)Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. 44 MC_POST_PROJECTILE_RENDERFunction Args: (EntityProjectile, RenderOffset [Vector])Optional callback Args: ProjectileVariant Returning any value will have no effect on later callback executions. 45 MC_PRE_PROJECTILE_COLLISIONFunction Args: (EntityProjectile, Collider [Entity], Low [bool])Optional callback Args: ProjectileVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an ProjectileVariant unless its absolutely nessesary! 46 MC_POST_LASER_INITFunction Args: (EntityLaser)Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityLaser. For example, the Position is always equal to Vector(0,0). 47 MC_POST_LASER_UPDATEFunction Args: (EntityLaser)Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. 48 MC_POST_LASER_RENDERFunction Args: (EntityLaser, RenderOffset [Vector])Optional callback Args: LaserVariant Returning any value will have no effect on later callback executions. 49 MC_POST_KNIFE_INITFunction Args: (EntityKnife)Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! This Callback provides incomplete data in the EntityKnife. For example, the Position is always equal to Vector(0,0). 50 MC_POST_KNIFE_UPDATEFunction Args: (EntityKnife)Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! 51 MC_POST_KNIFE_RENDERFunction Args: (EntityKnife, RenderOffset [Vector])Optional callback Args: KnifeSubType * Returning any value will have no effect on later callback executions. The optional parameter is a SubType and NOT a Variant! 52 MC_PRE_KNIFE_COLLISIONFunction Args: (EntityKnife, Collider [Entity], Low [bool])Optional callback Args: KnifeSubType * The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). The optional parameter is a SubType and NOT a Variant! This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback without defining an KnifeSubType unless its absolutely nessesary! 53 MC_POST_EFFECT_INITFunction Args: (EntityEffect)Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityEffect. For example, the Position is always equal to Vector(0,0). 54 MC_POST_EFFECT_UPDATEFunction Args: (EntityEffect)Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. 55 MC_POST_EFFECT_RENDERFunction Args: (EntityEffect, RenderOffset [Vector])Optional callback Args: EffectVariant Returning any value will have no effect on later callback executions. 56 MC_POST_BOMB_INITFunction Args: (EntityBomb)Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. This Callback provides incomplete data in the EntityBomb. For example, the Position is always equal to Vector(0,0). 57 MC_POST_BOMB_UPDATEFunction Args: (EntityBomb)Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. 58 MC_POST_BOMB_RENDERFunction Args: (EntityBomb, Offset [Vector])Optional callback Args: BombVariant Returning any value will have no effect on later callback executions. 59 MC_PRE_BOMB_COLLISIONFunction Args: (EntityBomb, Collider [Entity], Low [bool])Optional callback Args: BombVariant The Low value is true, when the entity collided with the collider first. Its false if the collider collides first.Return true to ignore collision, false to collide but not execute internal code and nil to continue with internal code (example: taking damage on contact). This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 60 MC_POST_FIRE_TEARFunction Args: (EntityTear) Called when the player fires a tear.It is not called for other weapons or tears fired with Incubus.Returning any value will have no effect on later callback executions. 61 MC_PRE_GET_COLLECTIBLEFunction Args:(ItemPoolType, Decrease [bool], Seed [int]) This callback is called when the game needs to get a new random item from an item pool. You can return an integer from this callback in order to change the returned collectible type. It is not called for \"scripted\" drops (like Mr. Boom from Wrath) and manually spawned items.Returned values will not alter args of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 62 MC_POST_GET_COLLECTIBLEFunction Args:(SelectedCollectible [CollectibleType], ItemPoolType, Decrease [bool], Seed [int]) This function is called right after MC_PRE_GET_COLLECTIBLE and determines the Collectible that will be spawned from the given ItemPoolType. You can return an integer from this callback in order to change the returned collectible type.Returned values will not update the \"SelectedCollectible\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 63 MC_GET_PILL_COLORFunction Args:(Seed [int]) This function is called, when the game is spawning a pill and needs to determine its PillColor. Return a PillColor to specify a Pillcolor that needs to be choosen. Return nothing to let it be handled by the game.Returned values will not alter the args of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 64 MC_GET_PILL_EFFECTFunction Args: (SelectedPillEffect [PillEffect], PillColor) Called every frames when the game get the PillEffect of a pill. The effect of the pill can be choosed by returning the chosen PillEffect. The effect is applied to every pill of the same PillColor, not to a single pill.Returned values will not update the \"SelectedPillEffect\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values This code turn \"Bad Trip\" pills into \"Balls of Steel\" pills. function mod:getPillEffect(pillEffect, pillColor) if pillEffect == PillEffect.PILLEFFECT_BAD_TRIP then return PillEffect.PILLEFFECT_BALLS_OF_STEEL end end mod:AddCallback(ModCallbacks.MC_GET_PILL_EFFECT, mod.getPillEffect) 65 MC_GET_TRINKETFunction Args: (SelectedTrinket [TrinketType], RNG) Called when a TrinketType of a Trinket needs to be determined. A TrinketType can be returned to change the SelectedTrinket.Returned values will not update the \"SelectedTrinket\" arg of later executed callbacks.Returning a value that is not an integer or nil will cause the game to crash. The last callback to return a valid return value wins out and overwrites previous callbacks' return values 66 MC_POST_ENTITY_REMOVEFunction Args: (Entity)Optional callback Args: EntityType Called whenever an Entity gets removed by the game. This includes deaths, kills, removals and even unloading an entity on room transition or ending a run.Returning any value will have no effect on later callback executions. 67 MC_POST_ENTITY_KILLFunction Args: (Entity)Optional callback Args: EntityType Called right before a death animation is triggered for an Entity.Returning any value will have no effect on later callback executions. 68 MC_PRE_NPC_UPDATEFunction Args: (EntityNPC)Optional callback Args: EntityType Return true if the internal AI of an NPC should be ignored, false or nil/nothing otherwise. This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 69 MC_PRE_SPAWN_CLEAN_AWARDFunction Args: (RNG, SpawnPosition [Vector]) This function is triggered in every room that can be cleared, including boss and angel rooms, and even when it normally would not spawn a reward.This Callback also handles special spawns like the spawning of Trapdoors after a boss is killed, therefore returning true here will also cancel those events.Return true if the spawn routine should be ignored, false or nil/nothing otherwise. This Callback can only be used ONCE across all mods! It is highly recommended to not use this Callback unless its absolutely nessesary! 70 MC_PRE_ROOM_ENTITY_SPAWNFunction Args: (EntityType, Variant [int], SubType [int], GridIndex [int], Seed [int]) This is called when entering a new room, before spawning entities which are part of its layout. Grid entities will also trigger this callback and their type will the same as the type used by the gridspawn command. Because of this, effects are assigned the type 999 instead of 1000 in this callback. Optional: Return a table with new values { Type, Variant, Subtype }. Returning such a table will override any replacements that might naturally occur i.e. enemy variants.Returning any value will have no effect on later callback executions. 71","title":"Enum \"ModCallbacks\""},{"location":"enums/Mouse/","text":"Enum \"Mouse\" \u2693\ufe0e Enumerator comment id MOUSE_BUTTON_1 0 MOUSE_BUTTON_2 1 MOUSE_BUTTON_3 2 MOUSE_BUTTON_4 3 MOUSE_BUTTON_5 4 MOUSE_BUTTON_6 5 MOUSE_BUTTON_7 6 MOUSE_BUTTON_8 7 MOUSE_BUTTON_LAST 7 MOUSE_BUTTON_LEFT 0 MOUSE_BUTTON_RIGHT 1 MOUSE_BUTTON_MIDDLE 2","title":"Mouse"},{"location":"enums/Mouse/#enum-mouse","text":"Enumerator comment id MOUSE_BUTTON_1 0 MOUSE_BUTTON_2 1 MOUSE_BUTTON_3 2 MOUSE_BUTTON_4 3 MOUSE_BUTTON_5 4 MOUSE_BUTTON_6 5 MOUSE_BUTTON_7 6 MOUSE_BUTTON_8 7 MOUSE_BUTTON_LAST 7 MOUSE_BUTTON_LEFT 0 MOUSE_BUTTON_RIGHT 1 MOUSE_BUTTON_MIDDLE 2","title":"Enum \"Mouse\""},{"location":"enums/Music/","text":"Enum \"Music\" \u2693\ufe0e Enumerator comment id MUSIC_NULL 0 MUSIC_BASEMENT 1 MUSIC_CAVES 2 MUSIC_DEPTHS 3 MUSIC_CELLAR 4 MUSIC_CATACOMBS 5 MUSIC_NECROPOLIS 6 MUSIC_WOMB_UTERO 7 MUSIC_GAME_OVER 8 MUSIC_BOSS 9 MUSIC_CATHEDRAL 10 MUSIC_SHEOL 11 MUSIC_DARK_ROOM 12 MUSIC_CHEST 13 MUSIC_BURNING_BASEMENT 14 MUSIC_FLOODED_CAVES 15 MUSIC_DANK_DEPTHS 16 MUSIC_SCARRED_WOMB 17 MUSIC_BLUE_WOMB 18 MUSIC_MOM_BOSS 20 MUSIC_MOMS_HEART_BOSS 21 MUSIC_ISAAC_BOSS 22 MUSIC_SATAN_BOSS 23 MUSIC_DARKROOM_BOSS 24 MUSIC_BLUEBABY_BOSS 25 MUSIC_BOSS2 26 MUSIC_HUSH_BOSS 27 MUSIC_ULTRAGREED_BOSS 28 MUSIC_LIBRARY_ROOM 30 MUSIC_SECRET_ROOM 31 MUSIC_DEVIL_ROOM 33 MUSIC_ANGEL_ROOM 34 MUSIC_SHOP_ROOM 35 MUSIC_ARCADE_ROOM 36 MUSIC_BOSS_OVER 37 MUSIC_CHALLENGE_FIGHT 38 MUSIC_CREDITS 60 MUSIC_TITLE 61 MUSIC_TITLE_AFTERBIRTH 62 MUSIC_JINGLE_BOSS 81 MUSIC_JINGLE_BOSS_OVER 83 MUSIC_JINGLE_HOLYROOM_FIND 84 MUSIC_JINGLE_SECRETROOM_FIND 85 MUSIC_JINGLE_TREASUREROOM_ENTRY_0 87 MUSIC_JINGLE_TREASUREROOM_ENTRY_1 88 MUSIC_JINGLE_TREASUREROOM_ENTRY_2 89 MUSIC_JINGLE_TREASUREROOM_ENTRY_3 90 MUSIC_JINGLE_CHALLENGE_ENTRY 91 MUSIC_JINGLE_CHALLENGE_OUTRO 92 MUSIC_JINGLE_GAME_OVER 93 MUSIC_JINGLE_DEVILROOM_FIND 94 MUSIC_JINGLE_GAME_START 95 MUSIC_JINGLE_NIGHTMARE 96 MUSIC_JINGLE_BOSS_OVER2 97 MUSIC_JINGLE_HUSH_OVER 98 MUSIC_INTRO_VOICEOVER 100 MUSIC_EPILOGUE_VOICEOVER 101 MUSIC_VOID 102 MUSIC_VOID_BOSS 103 NUM_MUSIC 104","title":"Music"},{"location":"enums/Music/#enum-music","text":"Enumerator comment id MUSIC_NULL 0 MUSIC_BASEMENT 1 MUSIC_CAVES 2 MUSIC_DEPTHS 3 MUSIC_CELLAR 4 MUSIC_CATACOMBS 5 MUSIC_NECROPOLIS 6 MUSIC_WOMB_UTERO 7 MUSIC_GAME_OVER 8 MUSIC_BOSS 9 MUSIC_CATHEDRAL 10 MUSIC_SHEOL 11 MUSIC_DARK_ROOM 12 MUSIC_CHEST 13 MUSIC_BURNING_BASEMENT 14 MUSIC_FLOODED_CAVES 15 MUSIC_DANK_DEPTHS 16 MUSIC_SCARRED_WOMB 17 MUSIC_BLUE_WOMB 18 MUSIC_MOM_BOSS 20 MUSIC_MOMS_HEART_BOSS 21 MUSIC_ISAAC_BOSS 22 MUSIC_SATAN_BOSS 23 MUSIC_DARKROOM_BOSS 24 MUSIC_BLUEBABY_BOSS 25 MUSIC_BOSS2 26 MUSIC_HUSH_BOSS 27 MUSIC_ULTRAGREED_BOSS 28 MUSIC_LIBRARY_ROOM 30 MUSIC_SECRET_ROOM 31 MUSIC_DEVIL_ROOM 33 MUSIC_ANGEL_ROOM 34 MUSIC_SHOP_ROOM 35 MUSIC_ARCADE_ROOM 36 MUSIC_BOSS_OVER 37 MUSIC_CHALLENGE_FIGHT 38 MUSIC_CREDITS 60 MUSIC_TITLE 61 MUSIC_TITLE_AFTERBIRTH 62 MUSIC_JINGLE_BOSS 81 MUSIC_JINGLE_BOSS_OVER 83 MUSIC_JINGLE_HOLYROOM_FIND 84 MUSIC_JINGLE_SECRETROOM_FIND 85 MUSIC_JINGLE_TREASUREROOM_ENTRY_0 87 MUSIC_JINGLE_TREASUREROOM_ENTRY_1 88 MUSIC_JINGLE_TREASUREROOM_ENTRY_2 89 MUSIC_JINGLE_TREASUREROOM_ENTRY_3 90 MUSIC_JINGLE_CHALLENGE_ENTRY 91 MUSIC_JINGLE_CHALLENGE_OUTRO 92 MUSIC_JINGLE_GAME_OVER 93 MUSIC_JINGLE_DEVILROOM_FIND 94 MUSIC_JINGLE_GAME_START 95 MUSIC_JINGLE_NIGHTMARE 96 MUSIC_JINGLE_BOSS_OVER2 97 MUSIC_JINGLE_HUSH_OVER 98 MUSIC_INTRO_VOICEOVER 100 MUSIC_EPILOGUE_VOICEOVER 101 MUSIC_VOID 102 MUSIC_VOID_BOSS 103 NUM_MUSIC 104","title":"Enum \"Music\""},{"location":"enums/NpcState/","text":"Enum \"NpcState\" \u2693\ufe0e Enumerator comment id STATE_INIT 0 STATE_APPEAR 1 STATE_APPEAR_CUSTOM 2 STATE_IDLE 3 STATE_MOVE 4 STATE_SUICIDE 5 STATE_JUMP 6 STATE_STOMP 7 STATE_ATTACK 8 STATE_ATTACK2 9 STATE_ATTACK3 10 STATE_ATTACK4 11 STATE_SUMMON 12 STATE_SUMMON2 13 STATE_SUMMON3 14 STATE_SPECIAL 15 STATE_UNIQUE_DEATH 16 STATE_DEATH 17","title":"NpcState"},{"location":"enums/NpcState/#enum-npcstate","text":"Enumerator comment id STATE_INIT 0 STATE_APPEAR 1 STATE_APPEAR_CUSTOM 2 STATE_IDLE 3 STATE_MOVE 4 STATE_SUICIDE 5 STATE_JUMP 6 STATE_STOMP 7 STATE_ATTACK 8 STATE_ATTACK2 9 STATE_ATTACK3 10 STATE_ATTACK4 11 STATE_SUMMON 12 STATE_SUMMON2 13 STATE_SUMMON3 14 STATE_SPECIAL 15 STATE_UNIQUE_DEATH 16 STATE_DEATH 17","title":"Enum \"NpcState\""},{"location":"enums/NullItemID/","text":"Enum \"NullItemID\" \u2693\ufe0e Enumerator comment id ID_NULL -1 ID_EXPLOSIVE_DIARRHEA 0 ID_PUBERTY 1 ID_I_FOUND_PILLS 2 ID_LORD_OF_THE_FLIES 3 ID_STATUE 4 ID_GUPPY 5 ID_WIZARD 6 ID_MAGDALENE 7 ID_CAIN 8 ID_JUDAS 9 ID_EVE 10 ID_AZAZEL 11 ID_EDEN 12 ID_SAMSON 13 ID_BLINDFOLD 14 ID_BLANKFACE 15 ID_CHRISTMAS 16 ID_PURITY_GLOW 17 ID_EMPTY_VESSEL 18 ID_MAW_MARK 19 ID_MUSHROOM 20 ID_ANGEL 21 ID_BOB 22 ID_DRUGS 23 ID_MOM 24 ID_BABY 25 ID_EVIL_ANGEL 26 ID_POOP 27 ID_RELAX 28 ID_OVERDOSE 29 ID_BOOMERANG 30 ID_MEGABLAST 31 ID_LAZARUS 32 ID_LAZARUS2 33 ID_LILITH 34 ID_IWATA 35 ID_APOLLYON 36 ID_BOOKWORM 37 ID_ADULTHOOD 38 ID_SPIDERBABY 39 NUM_NULLITEMS 40","title":"NullItemID"},{"location":"enums/NullItemID/#enum-nullitemid","text":"Enumerator comment id ID_NULL -1 ID_EXPLOSIVE_DIARRHEA 0 ID_PUBERTY 1 ID_I_FOUND_PILLS 2 ID_LORD_OF_THE_FLIES 3 ID_STATUE 4 ID_GUPPY 5 ID_WIZARD 6 ID_MAGDALENE 7 ID_CAIN 8 ID_JUDAS 9 ID_EVE 10 ID_AZAZEL 11 ID_EDEN 12 ID_SAMSON 13 ID_BLINDFOLD 14 ID_BLANKFACE 15 ID_CHRISTMAS 16 ID_PURITY_GLOW 17 ID_EMPTY_VESSEL 18 ID_MAW_MARK 19 ID_MUSHROOM 20 ID_ANGEL 21 ID_BOB 22 ID_DRUGS 23 ID_MOM 24 ID_BABY 25 ID_EVIL_ANGEL 26 ID_POOP 27 ID_RELAX 28 ID_OVERDOSE 29 ID_BOOMERANG 30 ID_MEGABLAST 31 ID_LAZARUS 32 ID_LAZARUS2 33 ID_LILITH 34 ID_IWATA 35 ID_APOLLYON 36 ID_BOOKWORM 37 ID_ADULTHOOD 38 ID_SPIDERBABY 39 NUM_NULLITEMS 40","title":"Enum \"NullItemID\""},{"location":"enums/PickupPrice/","text":"Enum \"PickupPrice\" \u2693\ufe0e Enumerator Value comment id PRICE_ONE_HEART -1 -1 PRICE_TWO_HEARTS -2 -2 PRICE_THREE_SOULHEARTS -3 -3 PRICE_FREE -1000 -1000","title":"PickupPrice"},{"location":"enums/PickupPrice/#enum-pickupprice","text":"Enumerator Value comment id PRICE_ONE_HEART -1 -1 PRICE_TWO_HEARTS -2 -2 PRICE_THREE_SOULHEARTS -3 -3 PRICE_FREE -1000 -1000","title":"Enum \"PickupPrice\""},{"location":"enums/PickupVariant/","text":"Enum \"PickupVariant\" \u2693\ufe0e Enumerator comment id PICKUP_NULL 0 PICKUP_HEART 10 PICKUP_COIN 20 PICKUP_KEY 30 PICKUP_BOMB 40 PICKUP_CHEST 50 PICKUP_BOMBCHEST 51 PICKUP_SPIKEDCHEST 52 PICKUP_ETERNALCHEST 53 PICKUP_MIMICCHEST 54 PICKUP_LOCKEDCHEST 60 PICKUP_GRAB_BAG 69 PICKUP_PILL 70 PICKUP_LIL_BATTERY 90 PICKUP_COLLECTIBLE 100 PICKUP_SHOPITEM 150 PICKUP_TAROTCARD 300 PICKUP_BIGCHEST 340 PICKUP_TRINKET 350 PICKUP_REDCHEST 360 PICKUP_TROPHY 370 PICKUP_BED 380","title":"PickupVariant"},{"location":"enums/PickupVariant/#enum-pickupvariant","text":"Enumerator comment id PICKUP_NULL 0 PICKUP_HEART 10 PICKUP_COIN 20 PICKUP_KEY 30 PICKUP_BOMB 40 PICKUP_CHEST 50 PICKUP_BOMBCHEST 51 PICKUP_SPIKEDCHEST 52 PICKUP_ETERNALCHEST 53 PICKUP_MIMICCHEST 54 PICKUP_LOCKEDCHEST 60 PICKUP_GRAB_BAG 69 PICKUP_PILL 70 PICKUP_LIL_BATTERY 90 PICKUP_COLLECTIBLE 100 PICKUP_SHOPITEM 150 PICKUP_TAROTCARD 300 PICKUP_BIGCHEST 340 PICKUP_TRINKET 350 PICKUP_REDCHEST 360 PICKUP_TROPHY 370 PICKUP_BED 380","title":"Enum \"PickupVariant\""},{"location":"enums/PillColor/","text":"Enum \"PillColor\" \u2693\ufe0e Enumerator comment id PILL_NULL 0 PILL_BLUE_BLUE 1 PILL_WHITE_BLUE 2 PILL_ORANGE_ORANGE 3 PILL_WHITE_WHITE 4 PILL_REDDOTS_RED 5 PILL_PINK_RED 6 PILL_BLUE_CADETBLUE 7 PILL_YELLOW_ORANGE 8 PILL_ORANGEDOTS_WHITE 9 PILL_WHITE_AZURE 10 PILL_BLACK_YELLOW 11 PILL_WHITE_BLACK 12 PILL_WHITE_YELLOW 13 NUM_PILLS 14","title":"PillColor"},{"location":"enums/PillColor/#enum-pillcolor","text":"Enumerator comment id PILL_NULL 0 PILL_BLUE_BLUE 1 PILL_WHITE_BLUE 2 PILL_ORANGE_ORANGE 3 PILL_WHITE_WHITE 4 PILL_REDDOTS_RED 5 PILL_PINK_RED 6 PILL_BLUE_CADETBLUE 7 PILL_YELLOW_ORANGE 8 PILL_ORANGEDOTS_WHITE 9 PILL_WHITE_AZURE 10 PILL_BLACK_YELLOW 11 PILL_WHITE_BLACK 12 PILL_WHITE_YELLOW 13 NUM_PILLS 14","title":"Enum \"PillColor\""},{"location":"enums/PillEffect/","text":"Enum \"PillEffect\" \u2693\ufe0e Enumerator comment id PILLEFFECT_NULL -1 PILLEFFECT_BAD_GAS 0 PILLEFFECT_BAD_TRIP 1 PILLEFFECT_BALLS_OF_STEEL 2 PILLEFFECT_BOMBS_ARE_KEYS 3 PILLEFFECT_EXPLOSIVE_DIARRHEA 4 PILLEFFECT_FULL_HEALTH 5 PILLEFFECT_HEALTH_DOWN 6 PILLEFFECT_HEALTH_UP 7 PILLEFFECT_I_FOUND_PILLS 8 PILLEFFECT_PUBERTY 9 PILLEFFECT_PRETTY_FLY 10 PILLEFFECT_RANGE_DOWN 11 PILLEFFECT_RANGE_UP 12 PILLEFFECT_SPEED_DOWN 13 PILLEFFECT_SPEED_UP 14 PILLEFFECT_TEARS_DOWN 15 PILLEFFECT_TEARS_UP 16 PILLEFFECT_LUCK_DOWN 17 PILLEFFECT_LUCK_UP 18 PILLEFFECT_TELEPILLS 19 PILLEFFECT_48HOUR_ENERGY 20 PILLEFFECT_HEMATEMESIS 21 PILLEFFECT_PARALYSIS 22 PILLEFFECT_SEE_FOREVER 23 PILLEFFECT_PHEROMONES 24 PILLEFFECT_AMNESIA 25 PILLEFFECT_LEMON_PARTY 26 PILLEFFECT_WIZARD 27 PILLEFFECT_PERCS 28 PILLEFFECT_ADDICTED 29 PILLEFFECT_RELAX 30 PILLEFFECT_QUESTIONMARK 31 PILLEFFECT_LARGER 32 PILLEFFECT_SMALLER 33 PILLEFFECT_INFESTED_EXCLAMATION 34 PILLEFFECT_INFESTED_QUESTION 35 PILLEFFECT_POWER 36 PILLEFFECT_RETRO_VISION 37 PILLEFFECT_FRIENDS_TILL_THE_END 38 PILLEFFECT_X_LAX 39 PILLEFFECT_SOMETHINGS_WRONG 40 PILLEFFECT_IM_DROWSY 41 PILLEFFECT_IM_EXCITED 42 PILLEFFECT_GULP 43 PILLEFFECT_HORF 44 PILLEFFECT_SUNSHINE 45 PILLEFFECT_VURP 46 NUM_PILL_EFFECTS 47","title":"PillEffect"},{"location":"enums/PillEffect/#enum-pilleffect","text":"Enumerator comment id PILLEFFECT_NULL -1 PILLEFFECT_BAD_GAS 0 PILLEFFECT_BAD_TRIP 1 PILLEFFECT_BALLS_OF_STEEL 2 PILLEFFECT_BOMBS_ARE_KEYS 3 PILLEFFECT_EXPLOSIVE_DIARRHEA 4 PILLEFFECT_FULL_HEALTH 5 PILLEFFECT_HEALTH_DOWN 6 PILLEFFECT_HEALTH_UP 7 PILLEFFECT_I_FOUND_PILLS 8 PILLEFFECT_PUBERTY 9 PILLEFFECT_PRETTY_FLY 10 PILLEFFECT_RANGE_DOWN 11 PILLEFFECT_RANGE_UP 12 PILLEFFECT_SPEED_DOWN 13 PILLEFFECT_SPEED_UP 14 PILLEFFECT_TEARS_DOWN 15 PILLEFFECT_TEARS_UP 16 PILLEFFECT_LUCK_DOWN 17 PILLEFFECT_LUCK_UP 18 PILLEFFECT_TELEPILLS 19 PILLEFFECT_48HOUR_ENERGY 20 PILLEFFECT_HEMATEMESIS 21 PILLEFFECT_PARALYSIS 22 PILLEFFECT_SEE_FOREVER 23 PILLEFFECT_PHEROMONES 24 PILLEFFECT_AMNESIA 25 PILLEFFECT_LEMON_PARTY 26 PILLEFFECT_WIZARD 27 PILLEFFECT_PERCS 28 PILLEFFECT_ADDICTED 29 PILLEFFECT_RELAX 30 PILLEFFECT_QUESTIONMARK 31 PILLEFFECT_LARGER 32 PILLEFFECT_SMALLER 33 PILLEFFECT_INFESTED_EXCLAMATION 34 PILLEFFECT_INFESTED_QUESTION 35 PILLEFFECT_POWER 36 PILLEFFECT_RETRO_VISION 37 PILLEFFECT_FRIENDS_TILL_THE_END 38 PILLEFFECT_X_LAX 39 PILLEFFECT_SOMETHINGS_WRONG 40 PILLEFFECT_IM_DROWSY 41 PILLEFFECT_IM_EXCITED 42 PILLEFFECT_GULP 43 PILLEFFECT_HORF 44 PILLEFFECT_SUNSHINE 45 PILLEFFECT_VURP 46 NUM_PILL_EFFECTS 47","title":"Enum \"PillEffect\""},{"location":"enums/PlayerForm/","text":"Enum \"PlayerForm\" \u2693\ufe0e Enumerator comment id PLAYERFORM_GUPPY 0 PLAYERFORM_LORD_OF_THE_FLIES 1 PLAYERFORM_MUSHROOM 2 PLAYERFORM_ANGEL 3 PLAYERFORM_BOB 4 PLAYERFORM_DRUGS 5 PLAYERFORM_MOM 6 PLAYERFORM_BABY 7 PLAYERFORM_EVIL_ANGEL 8 PLAYERFORM_POOP 9 PLAYERFORM_BOOK_WORM 10 PLAYERFORM_ADULTHOOD 11 PLAYERFORM_SPIDERBABY 12 NUM_PLAYER_FORMS 13","title":"PlayerForm"},{"location":"enums/PlayerForm/#enum-playerform","text":"Enumerator comment id PLAYERFORM_GUPPY 0 PLAYERFORM_LORD_OF_THE_FLIES 1 PLAYERFORM_MUSHROOM 2 PLAYERFORM_ANGEL 3 PLAYERFORM_BOB 4 PLAYERFORM_DRUGS 5 PLAYERFORM_MOM 6 PLAYERFORM_BABY 7 PLAYERFORM_EVIL_ANGEL 8 PLAYERFORM_POOP 9 PLAYERFORM_BOOK_WORM 10 PLAYERFORM_ADULTHOOD 11 PLAYERFORM_SPIDERBABY 12 NUM_PLAYER_FORMS 13","title":"Enum \"PlayerForm\""},{"location":"enums/PlayerItemState/","text":"Enum \"PlayerItemState\" \u2693\ufe0e Enumerator comment id ITEMSTATE_NORMAL 0 ITEMSTATE_CANDLE 1 ITEMSTATE_SHOOP_DA_WHOOP 2 ITEMSTATE_BOBS_ROTTEN_HEAD 3 ITEMSTATE_DOCTORS_REMOTE 4 ITEMSTATE_PONY 5 ITEMSTATE_NOTCHEDAXE 6 ITEMSTATE_BOOMERANG 7 ITEMSTATE_CANNON 8 ITEMSTATE_FRIENDBALL 9","title":"PlayerItemState"},{"location":"enums/PlayerItemState/#enum-playeritemstate","text":"Enumerator comment id ITEMSTATE_NORMAL 0 ITEMSTATE_CANDLE 1 ITEMSTATE_SHOOP_DA_WHOOP 2 ITEMSTATE_BOBS_ROTTEN_HEAD 3 ITEMSTATE_DOCTORS_REMOTE 4 ITEMSTATE_PONY 5 ITEMSTATE_NOTCHEDAXE 6 ITEMSTATE_BOOMERANG 7 ITEMSTATE_CANNON 8 ITEMSTATE_FRIENDBALL 9","title":"Enum \"PlayerItemState\""},{"location":"enums/PlayerSpriteLayer/","text":"Enum \"PlayerSpriteLayer\" \u2693\ufe0e Enumerator comment id SPRITE_GLOW 0 SPRITE_BODY 1 SPRITE_BODY0 2 SPRITE_BODY1 3 SPRITE_HEAD 4 SPRITE_HEAD0 5 SPRITE_HEAD1 6 SPRITE_HEAD2 7 SPRITE_HEAD3 8 SPRITE_HEAD4 9 SPRITE_HEAD5 10 SPRITE_TOP0 11 SPRITE_EXTRA 12 NUM_SPRITE_LAYERS 13","title":"PlayerSpriteLayer"},{"location":"enums/PlayerSpriteLayer/#enum-playerspritelayer","text":"Enumerator comment id SPRITE_GLOW 0 SPRITE_BODY 1 SPRITE_BODY0 2 SPRITE_BODY1 3 SPRITE_HEAD 4 SPRITE_HEAD0 5 SPRITE_HEAD1 6 SPRITE_HEAD2 7 SPRITE_HEAD3 8 SPRITE_HEAD4 9 SPRITE_HEAD5 10 SPRITE_TOP0 11 SPRITE_EXTRA 12 NUM_SPRITE_LAYERS 13","title":"Enum \"PlayerSpriteLayer\""},{"location":"enums/PlayerType/","text":"Enum \"PlayerType\" \u2693\ufe0e Enumerator comment id PLAYER_ISAAC 0 PLAYER_MAGDALENA 1 PLAYER_CAIN 2 PLAYER_JUDAS 3 PLAYER_XXX 4 PLAYER_EVE 5 PLAYER_SAMSON 6 PLAYER_AZAZEL 7 PLAYER_LAZARUS 8 PLAYER_EDEN 9 PLAYER_THELOST 10 PLAYER_LAZARUS2 11 PLAYER_BLACKJUDAS 12 PLAYER_LILITH 13 PLAYER_KEEPER 14 PLAYER_APOLLYON 15 PLAYER_THEFORGOTTEN 16 PLAYER_THESOUL 17 NUM_PLAYER_TYPES 18","title":"PlayerType"},{"location":"enums/PlayerType/#enum-playertype","text":"Enumerator comment id PLAYER_ISAAC 0 PLAYER_MAGDALENA 1 PLAYER_CAIN 2 PLAYER_JUDAS 3 PLAYER_XXX 4 PLAYER_EVE 5 PLAYER_SAMSON 6 PLAYER_AZAZEL 7 PLAYER_LAZARUS 8 PLAYER_EDEN 9 PLAYER_THELOST 10 PLAYER_LAZARUS2 11 PLAYER_BLACKJUDAS 12 PLAYER_LILITH 13 PLAYER_KEEPER 14 PLAYER_APOLLYON 15 PLAYER_THEFORGOTTEN 16 PLAYER_THESOUL 17 NUM_PLAYER_TYPES 18","title":"Enum \"PlayerType\""},{"location":"enums/ProjectileFlags/","text":"Enum \"ProjectileFlags\" \u2693\ufe0e Enumerator comment id SMART follow player 1 EXPLODE explode on impact 1<<1 ACID_GREEN acid splat on impact 1<<2 GOO goo splat on impact 1<<3 GHOST slide through solid entities 1<<4 WIGGLE 1<<5 BOOMERANG come back 1<<6 HIT_ENEMIES can hit enemies 1<<7 ACID_RED blood acid 1<<8 GREED Greed projectiles have same effect as Greed enemy's bullets. 1<<9 RED_CREEP Bullet leaves a red creep 1<<10 ORBIT_CW Bullet orbits a point clockwise and passes through walls similar to Tiny Planet 1<<11 ORBIT_CCW Bullet orbits a point counter-clockwise and passes through walls similar to Tiny Planet 1<<12 NO_WALL_COLLIDE 1<<13 CREEP_BROWN Bullet leaves a brown creep 1<<14 FIRE Projectile was cast by a fireplace 1<<15 BURST Bursts into more bullets 1<<16 ANY_HEIGHT_ENTITY_HIT Bullets that can hit at any height 1<<17 CURVE_LEFT Bullets curve slightly on a circular path 1<<18 CURVE_RIGHT Bullets curve slightly on a circular path 1<<19 TURN_HORIZONTAL Bullets turn and go horizontally and increase in speed when they pass the const static uint64_t player on either side 1<<20 SINE_VELOCITY Bullet velocity varies over time as a function of a wave 1<<21 MEGA_WIGGLE Like wiggle worm but the wiggling increases in amplitude over time 1<<22 SAWTOOTH_WIGGLE Bullets travel on a sawtooth shaped path 1<<23 SLOWED 1<<24 TRIANGLE 1<<25 MOVE_TO_PARENT 1<<26 ACCELERATE 1<<27 DECELERATE 1<<28 BURST3 1<<29 CONTINUUM Bullets reappear from the opposite side as they leave the screen 1<<30 CANT_HIT_PLAYER 1<<31 CHANGE_FLAGS_AFTER_TIMEOUT \"Change\" flags will change the bullet's behavior after a timeout. change m_ProjectileFlags to m_TimeoutProjectileFlags. 1<<32 CHANGE_VELOCITY_AFTER_TIMEOUT 1<<33","title":"ProjectileFlags"},{"location":"enums/ProjectileFlags/#enum-projectileflags","text":"Enumerator comment id SMART follow player 1 EXPLODE explode on impact 1<<1 ACID_GREEN acid splat on impact 1<<2 GOO goo splat on impact 1<<3 GHOST slide through solid entities 1<<4 WIGGLE 1<<5 BOOMERANG come back 1<<6 HIT_ENEMIES can hit enemies 1<<7 ACID_RED blood acid 1<<8 GREED Greed projectiles have same effect as Greed enemy's bullets. 1<<9 RED_CREEP Bullet leaves a red creep 1<<10 ORBIT_CW Bullet orbits a point clockwise and passes through walls similar to Tiny Planet 1<<11 ORBIT_CCW Bullet orbits a point counter-clockwise and passes through walls similar to Tiny Planet 1<<12 NO_WALL_COLLIDE 1<<13 CREEP_BROWN Bullet leaves a brown creep 1<<14 FIRE Projectile was cast by a fireplace 1<<15 BURST Bursts into more bullets 1<<16 ANY_HEIGHT_ENTITY_HIT Bullets that can hit at any height 1<<17 CURVE_LEFT Bullets curve slightly on a circular path 1<<18 CURVE_RIGHT Bullets curve slightly on a circular path 1<<19 TURN_HORIZONTAL Bullets turn and go horizontally and increase in speed when they pass the const static uint64_t player on either side 1<<20 SINE_VELOCITY Bullet velocity varies over time as a function of a wave 1<<21 MEGA_WIGGLE Like wiggle worm but the wiggling increases in amplitude over time 1<<22 SAWTOOTH_WIGGLE Bullets travel on a sawtooth shaped path 1<<23 SLOWED 1<<24 TRIANGLE 1<<25 MOVE_TO_PARENT 1<<26 ACCELERATE 1<<27 DECELERATE 1<<28 BURST3 1<<29 CONTINUUM Bullets reappear from the opposite side as they leave the screen 1<<30 CANT_HIT_PLAYER 1<<31 CHANGE_FLAGS_AFTER_TIMEOUT \"Change\" flags will change the bullet's behavior after a timeout. change m_ProjectileFlags to m_TimeoutProjectileFlags. 1<<32 CHANGE_VELOCITY_AFTER_TIMEOUT 1<<33","title":"Enum \"ProjectileFlags\""},{"location":"enums/ProjectileVariant/","text":"Enum \"ProjectileVariant\" \u2693\ufe0e Enumerator comment id PROJECTILE_NORMAL 0 PROJECTILE_BONE 1 PROJECTILE_FIRE 2 PROJECTILE_PUKE 3 PROJECTILE_TEAR 4 PROJECTILE_CORN 5 PROJECTILE_HUSH 6 PROJECTILE_COIN 7","title":"ProjectileVariant"},{"location":"enums/ProjectileVariant/#enum-projectilevariant","text":"Enumerator comment id PROJECTILE_NORMAL 0 PROJECTILE_BONE 1 PROJECTILE_FIRE 2 PROJECTILE_PUKE 3 PROJECTILE_TEAR 4 PROJECTILE_CORN 5 PROJECTILE_HUSH 6 PROJECTILE_COIN 7","title":"Enum \"ProjectileVariant\""},{"location":"enums/RoomShape/","text":"Enum \"RoomShape\" \u2693\ufe0e Enumerator Preview Possible Gridindicies comment id ROOMSHAPE_1x1 0-134 1 ROOMSHAPE_IH 0-134 2 ROOMSHAPE_IV 0-134 3 ROOMSHAPE_1x2 0-239 4 ROOMSHAPE_IIV 0-239 5 ROOMSHAPE_2x1 0-251 6 ROOMSHAPE_IIH 0-251 7 ROOMSHAPE_2x2 0-447 8 ROOMSHAPE_LTL 0-447 9 ROOMSHAPE_LTR 0-447 10 ROOMSHAPE_LBL 0-447 11 ROOMSHAPE_LBR 0-447 12 NUM_ROOMSHAPES 13","title":"RoomShape"},{"location":"enums/RoomShape/#enum-roomshape","text":"Enumerator Preview Possible Gridindicies comment id ROOMSHAPE_1x1 0-134 1 ROOMSHAPE_IH 0-134 2 ROOMSHAPE_IV 0-134 3 ROOMSHAPE_1x2 0-239 4 ROOMSHAPE_IIV 0-239 5 ROOMSHAPE_2x1 0-251 6 ROOMSHAPE_IIH 0-251 7 ROOMSHAPE_2x2 0-447 8 ROOMSHAPE_LTL 0-447 9 ROOMSHAPE_LTR 0-447 10 ROOMSHAPE_LBL 0-447 11 ROOMSHAPE_LBR 0-447 12 NUM_ROOMSHAPES 13","title":"Enum \"RoomShape\""},{"location":"enums/RoomType/","text":"Enum \"RoomType\" \u2693\ufe0e Enumerator comment id ROOM_NULL 0 ROOM_DEFAULT 1 ROOM_SHOP 2 ROOM_ERROR 3 ROOM_TREASURE 4 ROOM_BOSS 5 ROOM_MINIBOSS 6 ROOM_SECRET 7 ROOM_SUPERSECRET 8 ROOM_ARCADE 9 ROOM_CURSE 10 ROOM_CHALLENGE Normal Challenge: Boss Challenge: 11 ROOM_LIBRARY 12 ROOM_SACRIFICE 13 ROOM_DEVIL 14 ROOM_ANGEL 15 ROOM_DUNGEON 16 ROOM_BOSSRUSH 17 ROOM_ISAACS 18 ROOM_BARREN 19 ROOM_CHEST 20 ROOM_DICE 21 ROOM_BLACK_MARKET 22 ROOM_GREED_EXIT 23 NUM_ROOMTYPES 24","title":"RoomType"},{"location":"enums/RoomType/#enum-roomtype","text":"Enumerator comment id ROOM_NULL 0 ROOM_DEFAULT 1 ROOM_SHOP 2 ROOM_ERROR 3 ROOM_TREASURE 4 ROOM_BOSS 5 ROOM_MINIBOSS 6 ROOM_SECRET 7 ROOM_SUPERSECRET 8 ROOM_ARCADE 9 ROOM_CURSE 10 ROOM_CHALLENGE Normal Challenge: Boss Challenge: 11 ROOM_LIBRARY 12 ROOM_SACRIFICE 13 ROOM_DEVIL 14 ROOM_ANGEL 15 ROOM_DUNGEON 16 ROOM_BOSSRUSH 17 ROOM_ISAACS 18 ROOM_BARREN 19 ROOM_CHEST 20 ROOM_DICE 21 ROOM_BLACK_MARKET 22 ROOM_GREED_EXIT 23 NUM_ROOMTYPES 24","title":"Enum \"RoomType\""},{"location":"enums/SeedEffect/","text":"Enum \"SeedEffect\" \u2693\ufe0e Enumerator comment id SEED_NORMAL 0 SEED_MOVEMENT_PITCH 1 SEED_HEALTH_PITCH 2 SEED_CAMO_ISAAC 3 SEED_CAMO_ENEMIES 4 SEED_CAMO_PICKUPS 5 SEED_CAMO_EVERYTHING 6 SEED_FART_SOUNDS 7 SEED_OLD_TV 8 SEED_DYSLEXIA 9 SEED_NO_HUD 10 SEED_PICKUPS_SLIDE 11 SEED_CONTROLS_REVERSED 12 SEED_ALL_CHAMPIONS 13 SEED_INVISIBLE_ISAAC 14 SEED_INVISIBLE_ENEMIES 15 SEED_INFINITE_BASEMENT 16 SEED_ALWAYS_CHARMED 17 SEED_ALWAYS_CONFUSED 18 SEED_ALWAYS_AFRAID 19 SEED_ALWAYS_ALTERNATING_FEAR 20 SEED_ALWAYS_CHARMED_AND_AFRAID 21 SEED_EXTRA_BLOOD 23 SEED_POOP_TRAIL 24 SEED_PACIFIST 25 SEED_DAMAGE_WHEN_STOPPED 26 SEED_DAMAGE_ON_INTERVAL 27 SEED_DAMAGE_ON_TIME_LIMIT 28 SEED_PILLS_NEVER_IDENTIFY 29 SEED_MYSTERY_TAROT_CARDS 30 SEED_ENEMIES_RESPAWN 32 SEED_ITEMS_COST_MONEY 33 SEED_BIG_HEAD 35 SEED_SMALL_HEAD 36 SEED_BLACK_ISAAC 37 SEED_GLOWING_TEARS 38 SEED_SLOW_MUSIC 41 SEED_ULTRA_SLOW_MUSIC 42 SEED_FAST_MUSIC 43 SEED_ULTRA_FAST_MUSIC 44 SEED_NO_FACE 46 SEED_ISAAC_TAKES_HIGH_DAMAGE 47 SEED_ISAAC_TAKES_MASSIVE_DAMAGE 48 SEED_ICE_PHYSICS 52 SEED_KAPPA 53 SEED_CHRISTMAS 54 SEED_KIDS_MODE 55 SEED_PERMANENT_CURSE_DARKNESS 56 SEED_PERMANENT_CURSE_LABYRINTH 57 SEED_PERMANENT_CURSE_LOST 58 SEED_PERMANENT_CURSE_UNKNOWN 59 SEED_PERMANENT_CURSE_MAZE 60 SEED_PERMANENT_CURSE_BLIND 61 SEED_PERMANENT_CURSE_CURSED 62 SEED_PREVENT_CURSE_DARKNESS 63 SEED_PREVENT_CURSE_LABYRINTH 64 SEED_PREVENT_CURSE_LOST 65 SEED_PREVENT_CURSE_UNKNOWN 66 SEED_PREVENT_CURSE_MAZE 67 SEED_PREVENT_CURSE_BLIND 68 SEED_PREVENT_ALL_CURSES 70 SEED_NO_BOSS_ROOM_EXITS 71 SEED_PICKUPS_TIMEOUT 72 SEED_INVINCIBLE 73 SEED_SHOOT_IN_MOVEMENT_DIRECTION 74 SEED_SHOOT_OPPOSITE_MOVEMENT_DIRECTION 75 SEED_AXIS_ALIGNED_CONTROLS 76 NUM_SEEDS 77","title":"SeedEffect"},{"location":"enums/SeedEffect/#enum-seedeffect","text":"Enumerator comment id SEED_NORMAL 0 SEED_MOVEMENT_PITCH 1 SEED_HEALTH_PITCH 2 SEED_CAMO_ISAAC 3 SEED_CAMO_ENEMIES 4 SEED_CAMO_PICKUPS 5 SEED_CAMO_EVERYTHING 6 SEED_FART_SOUNDS 7 SEED_OLD_TV 8 SEED_DYSLEXIA 9 SEED_NO_HUD 10 SEED_PICKUPS_SLIDE 11 SEED_CONTROLS_REVERSED 12 SEED_ALL_CHAMPIONS 13 SEED_INVISIBLE_ISAAC 14 SEED_INVISIBLE_ENEMIES 15 SEED_INFINITE_BASEMENT 16 SEED_ALWAYS_CHARMED 17 SEED_ALWAYS_CONFUSED 18 SEED_ALWAYS_AFRAID 19 SEED_ALWAYS_ALTERNATING_FEAR 20 SEED_ALWAYS_CHARMED_AND_AFRAID 21 SEED_EXTRA_BLOOD 23 SEED_POOP_TRAIL 24 SEED_PACIFIST 25 SEED_DAMAGE_WHEN_STOPPED 26 SEED_DAMAGE_ON_INTERVAL 27 SEED_DAMAGE_ON_TIME_LIMIT 28 SEED_PILLS_NEVER_IDENTIFY 29 SEED_MYSTERY_TAROT_CARDS 30 SEED_ENEMIES_RESPAWN 32 SEED_ITEMS_COST_MONEY 33 SEED_BIG_HEAD 35 SEED_SMALL_HEAD 36 SEED_BLACK_ISAAC 37 SEED_GLOWING_TEARS 38 SEED_SLOW_MUSIC 41 SEED_ULTRA_SLOW_MUSIC 42 SEED_FAST_MUSIC 43 SEED_ULTRA_FAST_MUSIC 44 SEED_NO_FACE 46 SEED_ISAAC_TAKES_HIGH_DAMAGE 47 SEED_ISAAC_TAKES_MASSIVE_DAMAGE 48 SEED_ICE_PHYSICS 52 SEED_KAPPA 53 SEED_CHRISTMAS 54 SEED_KIDS_MODE 55 SEED_PERMANENT_CURSE_DARKNESS 56 SEED_PERMANENT_CURSE_LABYRINTH 57 SEED_PERMANENT_CURSE_LOST 58 SEED_PERMANENT_CURSE_UNKNOWN 59 SEED_PERMANENT_CURSE_MAZE 60 SEED_PERMANENT_CURSE_BLIND 61 SEED_PERMANENT_CURSE_CURSED 62 SEED_PREVENT_CURSE_DARKNESS 63 SEED_PREVENT_CURSE_LABYRINTH 64 SEED_PREVENT_CURSE_LOST 65 SEED_PREVENT_CURSE_UNKNOWN 66 SEED_PREVENT_CURSE_MAZE 67 SEED_PREVENT_CURSE_BLIND 68 SEED_PREVENT_ALL_CURSES 70 SEED_NO_BOSS_ROOM_EXITS 71 SEED_PICKUPS_TIMEOUT 72 SEED_INVINCIBLE 73 SEED_SHOOT_IN_MOVEMENT_DIRECTION 74 SEED_SHOOT_OPPOSITE_MOVEMENT_DIRECTION 75 SEED_AXIS_ALIGNED_CONTROLS 76 NUM_SEEDS 77","title":"Enum \"SeedEffect\""},{"location":"enums/SortingLayer/","text":"Enum \"SortingLayer\" \u2693\ufe0e Enumerator comment id SORTING_BACKGROUND Background level, behind grid entities (creep, pitfalls) 0 SORTING_DOOR Used by door Xray animation 1 SORTING_NORMAL Uses Y position to determine Z sorting 2","title":"SortingLayer"},{"location":"enums/SortingLayer/#enum-sortinglayer","text":"Enumerator comment id SORTING_BACKGROUND Background level, behind grid entities (creep, pitfalls) 0 SORTING_DOOR Used by door Xray animation 1 SORTING_NORMAL Uses Y position to determine Z sorting 2","title":"Enum \"SortingLayer\""},{"location":"enums/SoundEffect/","text":"Enum \"SoundEffect\" \u2693\ufe0e Enumerator comment id SOUND_NULL 0 SOUND_1UP 1 SOUND_BIRD_FLAP 2 SOUND_BLOBBY_WIGGLE 3 SOUND_INSECT_SWARM_LOOP 4 SOUND_BLOOD_LASER 5 SOUND_BLOOD_LASER_LARGE 7 SOUND_BOOK_PAGE_TURN_12 8 SOUND_BOSS_BUG_HISS 9 SOUND_BOSS_GURGLE_ROAR 11 SOUND_BOSS_LITE_GURGLE 12 SOUND_BOSS_LITE_HISS 13 SOUND_BOSS_LITE_ROAR 14 SOUND_BOSS_LITE_SLOPPY_ROAR 15 SOUND_BOSS_SPIT_BLOB_BARF 16 SOUND_CHEST_DROP 21 SOUND_CHEST_OPEN 22 SOUND_CHOIR_UNLOCK 23 SOUND_COIN_SLOT 24 SOUND_CUTE_GRUNT 25 SOUND_DEATH_BURST_LARGE 28 SOUND_DEATH_BURST_SMALL 30 SOUND_DEATH_CARD 33 SOUND_DEVIL_CARD 34 SOUND_DOOR_HEAVY_CLOSE 35 SOUND_DOOR_HEAVY_OPEN 36 SOUND_FART 37 SOUND_FETUS_JUMP 38 SOUND_FETUS_LAND 40 SOUND_FIREDEATH_HISS 43 SOUND_FLOATY_BABY_ROAR 44 SOUND_FORESTBOSS_STOMPS 48 SOUND_GASCAN_POUR 51 SOUND_HELLBOSS_GROUNDPOUND 52 SOUND_HOLY 54 SOUND_ISAAC_HURT_GRUNT 55 SOUND_CHILD_HAPPY_ROAR_SHORT 56 SOUND_CHILD_ANGRY_ROAR 57 SOUND_KEYPICKUP_GAUNTLET 58 SOUND_KEY_DROP0 59 SOUND_BABY_HURT 60 SOUND_MAGGOT_BURST_OUT 64 SOUND_MAGGOT_ENTER_GROUND 66 SOUND_MEAT_FEET_SLOW0 68 SOUND_MEAT_IMPACTS 69 SOUND_MEAT_JUMPS 72 SOUND_MEATY_DEATHS 77 SOUND_MOM_VOX_DEATH 82 SOUND_MOM_VOX_EVILLAUGH 84 SOUND_MOM_VOX_FILTERED_DEATH_1 85 SOUND_MOM_VOX_FILTERED_EVILLAUGH 86 SOUND_MOM_VOX_FILTERED_HURT 87 SOUND_MOM_VOX_FILTERED_ISAAC 90 SOUND_MOM_VOX_GRUNT 93 SOUND_MOM_VOX_HURT 97 SOUND_MOM_VOX_ISAAC 101 SOUND_MONSTER_GRUNT_0 104 SOUND_MONSTER_GRUNT_1 106 SOUND_MONSTER_GRUNT_2 108 SOUND_MONSTER_GRUNT_4 112 SOUND_MONSTER_GRUNT_5 114 SOUND_MONSTER_ROAR_0 115 SOUND_MONSTER_ROAR_1 116 SOUND_MONSTER_ROAR_2 117 SOUND_MONSTER_ROAR_3 118 SOUND_MONSTER_YELL_A 119 SOUND_MONSTER_YELL_B 122 SOUND_POWERUP1 128 SOUND_POWERUP2 129 SOUND_POWERUP3 130 SOUND_POWERUP_SPEWER 132 SOUND_REDLIGHTNING_ZAP 133 SOUND_ROCK_CRUMBLE 137 SOUND_POT_BREAK 138 SOUND_MUSHROOM_POOF 139 SOUND_ROCKET_BLAST_DEATH 141 SOUND_SMB_LARGE_CHEWS_4 142 SOUND_SCARED_WHIMPER 143 SOUND_SHAKEY_KID_ROAR 146 SOUND_SINK_DRAIN_GURGLE 149 SOUND_TEARIMPACTS 150 SOUND_TEARS_FIRE 153 SOUND_UNLOCK00 156 SOUND_VAMP_GULP 157 SOUND_WHEEZY_COUGH 158 SOUND_SPIDER_COUGH 159 SOUND_ZOMBIE_WALKER_KID 165 SOUND_ANIMAL_SQUISH 166 SOUND_ANGRY_GURGLE 167 SOUND_BAND_AID_PICK_UP 169 SOUND_BATTERYCHARGE 170 SOUND_BEEP 171 SOUND_BLOODBANK_SPAWN 175 SOUND_BLOODSHOOT 178 SOUND_BOIL_HATCH 181 SOUND_BOSS1_EXPLOSIONS 182 SOUND_BOSS2_BUBBLES 185 SOUND_BOSS2INTRO_ERRORBUZZ 187 SOUND_CASTLEPORTCULLIS 190 SOUND_CHARACTER_SELECT_LEFT 194 SOUND_CHARACTER_SELECT_RIGHT 195 SOUND_DERP 197 SOUND_DIMEDROP 198 SOUND_DIMEPICKUP 199 SOUND_FETUS_FEET 201 SOUND_GOLDENKEY 204 SOUND_GOOATTACH0 205 SOUND_GOODEATH 207 SOUND_HAND_LASERS 211 SOUND_HEARTIN 212 SOUND_HEARTOUT 213 SOUND_HELL_PORTAL1 214 SOUND_HELL_PORTAL2 215 SOUND_ISAACDIES 217 SOUND_ITEMRECHARGE 218 SOUND_KISS_LIPS1 219 SOUND_LEECH 221 SOUND_MAGGOTCHARGE 224 SOUND_MEATHEADSHOOT 226 SOUND_METAL_BLOCKBREAK 229 SOUND_NICKELDROP 231 SOUND_NICKELPICKUP 232 SOUND_PENNYDROP 233 SOUND_PENNYPICKUP 234 SOUND_PLOP 237 SOUND_SATAN_APPEAR 238 SOUND_SATAN_BLAST 239 SOUND_SATAN_CHARGE_UP 240 SOUND_SATAN_GROW 241 SOUND_SATAN_HURT 242 SOUND_SATAN_RISE_UP 243 SOUND_SATAN_SPIT 245 SOUND_SATAN_STOMP 246 SOUND_SCAMPER 249 SOUND_SHELLGAME 252 SOUND_SLOTSPAWN 255 SOUND_SPLATTER 258 SOUND_STEAM_HALFSEC 261 SOUND_STONESHOOT 262 SOUND_WEIRD_WORM_SPIT 263 SOUND_SUMMONSOUND 265 SOUND_SUPERHOLY 266 SOUND_THUMBS_DOWN 267 SOUND_THUMBSUP 268 SOUND_FIRE_BURN 269 SOUND_HAPPY_RAINBOW 270 SOUND_BOO_MAD 300 SOUND_FART_GURG 301 SOUND_FAT_GRUNT 302 SOUND_FAT_WIGGLE 303 SOUND_FIRE_RUSH 304 SOUND_GHOST_ROAR 305 SOUND_GHOST_SHOOT 306 SOUND_GRROOWL 307 SOUND_GURG_BARF 308 SOUND_INHALE 309 SOUND_LOW_INHALE 310 SOUND_MEGA_PUKE 311 SOUND_MOUTH_FULL 312 SOUND_MULTI_SCREAM 313 SOUND_SKIN_PULL 314 SOUND_WHISTLE 315 SOUND_DEVILROOM_DEAL 316 SOUND_SPIDER_SPIT_ROAR 317 SOUND_WORM_SPIT 318 SOUND_LITTLE_SPIT 319 SOUND_SATAN_ROOM_APPEAR 320 SOUND_HEARTBEAT 321 SOUND_HEARTBEAT_FASTER 322 SOUND_HEARTBEAT_FASTEST 323 SOUND_48_HR_ENERGY 324 SOUND_ALGIZ 325 SOUND_AMNESIA 326 SOUND_ANZUS 327 SOUND_BAD_GAS 328 SOUND_BAD_TRIP 329 SOUND_BALLS_OF_STEEL 330 SOUND_BERKANO 331 SOUND_BOMBS_ARE_KEY 332 SOUND_CARD_VS_HUMAN 333 SOUND_CHAOS_CARD 334 SOUND_CREDIT_CARD 335 SOUND_DAGAZ 336 SOUND_DEATH 337 SOUND_EHWAZ 338 SOUND_EXPLOSIVE_DIAH 339 SOUND_FULL_HP 340 SOUND_HAGALAZ 341 SOUND_HP_DOWN 342 SOUND_HP_UP 343 SOUND_HEMATEMISIS 344 SOUND_I_FOUND_PILLS 345 SOUND_JERA 346 SOUND_JOKER 347 SOUND_JUDGEMENT 348 SOUND_JUSTICE 349 SOUND_LEMON_PARTY 350 SOUND_LUCK_DOWN 351 SOUND_LUCK_UP 352 SOUND_PARALYSIS 353 SOUND_PERTHRO 354 SOUND_PHEROMONES 355 SOUND_PRETTY_FLY 356 SOUND_PUBERTY 357 SOUND_RUA_WIZ 358 SOUND_RANGE_DOWN 359 SOUND_RANGE_UP 360 SOUND_RULES_CARD 361 SOUND_SEE_4EVER 362 SOUND_SPEED_DOWN 363 SOUND_SPEED_UP 364 SOUND_STRENGTH 365 SOUND_SUICIDE_KING 366 SOUND_TEARS_DOWN 367 SOUND_TEARS_UP 368 SOUND_TELEPILLS 369 SOUND_TEMPERANCE 370 SOUND_THE_CHARIOT 371 SOUND_THE_DEVIL 372 SOUND_THE_EMPEROR 373 SOUND_EMPRESS 374 SOUND_FOOL 375 SOUND_HANGED_MAN 376 SOUND_HERMIT 377 SOUND_HIEROPHANT 378 SOUND_HIGHT_PRIESTESS 379 SOUND_THE_LOVERS 380 SOUND_MAGICIAN 381 SOUND_MOON 382 SOUND_STARS 383 SOUND_SUN 384 SOUND_TOWER 385 SOUND_WORLD 386 SOUND_TWO_CLUBS 387 SOUND_TWO_DIAMONDS 388 SOUND_TWO_HEARTS 389 SOUND_TWO_SPADES 390 SOUND_WHEEL_OF_FORTUNE 391 SOUND_RAGMAN_1 392 SOUND_RAGMAN_2 393 SOUND_RAGMAN_3 394 SOUND_RAGMAN_4 395 SOUND_FLUSH 396 SOUND_WATER_DROP 397 SOUND_WET_FEET 398 SOUND_ADDICTED 399 SOUND_DICE_SHARD 400 SOUND_EMERGENCY 401 SOUND_INFESTED_EXCL 402 SOUND_INFESTED_QUEST 403 SOUND_JAIL_CARD 404 SOUND_LARGER 405 SOUND_PERCS 406 SOUND_POWER_PILL 407 SOUND_QUESTION_MARK 408 SOUND_RELAX 409 SOUND_RETRO 410 SOUND_SMALL 411 SOUND_QQQ 412 SOUND_DANGLE_WHISTLE 413 SOUND_LITTLE_HORN_COUGH 414 SOUND_LITTLE_HORN_GRUNT_1 415 SOUND_LITTLE_HORN_GRUNT_2 416 SOUND_THE_FORSAKEN_LAUGH 417 SOUND_THE_FORSAKEN_SCREAM 418 SOUND_THE_STAIN_BURST 419 SOUND_BROWNIE_LAUGH 420 SOUND_HUSH_ROAR 421 SOUND_HUSH_GROWL 422 SOUND_HUSH_LOW_ROAR 423 SOUND_FRAIL_CHARGE 424 SOUND_HUSH_CHARGE 425 SOUND_MAW_OF_VOID 426 SOUND_ULTRA_GREED_COIN_DESTROY 427 SOUND_ULTRA_GREED_COINS_FALLING 428 SOUND_ULTRA_GREED_DEATH_SCREAM 429 SOUND_ULTRA_GREED_TURN_GOLD_1 430 SOUND_ULTRA_GREED_TURN_GOLD_2 431 SOUND_ULTRA_GREED_ROAR_1 432 SOUND_ULTRA_GREED_ROAR_2 433 SOUND_ULTRA_GREED_SPIT 434 SOUND_ULTRA_GREED_PULL_SLOT 435 SOUND_ULTRA_GREED_SLOT_SPIN_LOOP 436 SOUND_ULTRA_GREED_SLOT_STOP 437 SOUND_ULTRA_GREED_SLOT_WIN_LOOP_END 438 SOUND_ULTRA_GREED_SLOT_WIN_LOOP 439 SOUND_ULTRA_GREED_SPINNING 440 SOUND_DOG_BARK 441 SOUND_DOG_HOWELL 442 SOUND_X_LAX 443 SOUND_WRONG 444 SOUND_VURP 445 SOUND_SUNSHINE 446 SOUND_SPADES 447 SOUND_HORF 448 SOUND_HOLY_CARD 449 SOUND_HEARTS 450 SOUND_GULP 451 SOUND_FRIENDS 452 SOUND_EXCITED 453 SOUND_DROWSY 454 SOUND_DIAMONDS 455 SOUND_CLUBS 456 SOUND_BLACK_RUNE 457 SOUND_PING_PONG 458 SOUND_SPEWER 459 SOUND_MOM_FOOTSTEPS 460 SOUND_BONE_HEART 461 SOUND_BONE_SNAP 462 SOUND_SHOVEL_DROP 463 SOUND_SHOVEL_DIG 464 SOUND_GOLD_HEART 465 SOUND_GOLD_HEART_DROP 466 SOUND_BONE_DROP 467 SOUND_UNHOLY 468 SOUND_BUTTON_PRESS 469 SOUND_GOLDENBOMB 470 NUM_SOUND_EFFECTS 471","title":"SoundEffect"},{"location":"enums/SoundEffect/#enum-soundeffect","text":"Enumerator comment id SOUND_NULL 0 SOUND_1UP 1 SOUND_BIRD_FLAP 2 SOUND_BLOBBY_WIGGLE 3 SOUND_INSECT_SWARM_LOOP 4 SOUND_BLOOD_LASER 5 SOUND_BLOOD_LASER_LARGE 7 SOUND_BOOK_PAGE_TURN_12 8 SOUND_BOSS_BUG_HISS 9 SOUND_BOSS_GURGLE_ROAR 11 SOUND_BOSS_LITE_GURGLE 12 SOUND_BOSS_LITE_HISS 13 SOUND_BOSS_LITE_ROAR 14 SOUND_BOSS_LITE_SLOPPY_ROAR 15 SOUND_BOSS_SPIT_BLOB_BARF 16 SOUND_CHEST_DROP 21 SOUND_CHEST_OPEN 22 SOUND_CHOIR_UNLOCK 23 SOUND_COIN_SLOT 24 SOUND_CUTE_GRUNT 25 SOUND_DEATH_BURST_LARGE 28 SOUND_DEATH_BURST_SMALL 30 SOUND_DEATH_CARD 33 SOUND_DEVIL_CARD 34 SOUND_DOOR_HEAVY_CLOSE 35 SOUND_DOOR_HEAVY_OPEN 36 SOUND_FART 37 SOUND_FETUS_JUMP 38 SOUND_FETUS_LAND 40 SOUND_FIREDEATH_HISS 43 SOUND_FLOATY_BABY_ROAR 44 SOUND_FORESTBOSS_STOMPS 48 SOUND_GASCAN_POUR 51 SOUND_HELLBOSS_GROUNDPOUND 52 SOUND_HOLY 54 SOUND_ISAAC_HURT_GRUNT 55 SOUND_CHILD_HAPPY_ROAR_SHORT 56 SOUND_CHILD_ANGRY_ROAR 57 SOUND_KEYPICKUP_GAUNTLET 58 SOUND_KEY_DROP0 59 SOUND_BABY_HURT 60 SOUND_MAGGOT_BURST_OUT 64 SOUND_MAGGOT_ENTER_GROUND 66 SOUND_MEAT_FEET_SLOW0 68 SOUND_MEAT_IMPACTS 69 SOUND_MEAT_JUMPS 72 SOUND_MEATY_DEATHS 77 SOUND_MOM_VOX_DEATH 82 SOUND_MOM_VOX_EVILLAUGH 84 SOUND_MOM_VOX_FILTERED_DEATH_1 85 SOUND_MOM_VOX_FILTERED_EVILLAUGH 86 SOUND_MOM_VOX_FILTERED_HURT 87 SOUND_MOM_VOX_FILTERED_ISAAC 90 SOUND_MOM_VOX_GRUNT 93 SOUND_MOM_VOX_HURT 97 SOUND_MOM_VOX_ISAAC 101 SOUND_MONSTER_GRUNT_0 104 SOUND_MONSTER_GRUNT_1 106 SOUND_MONSTER_GRUNT_2 108 SOUND_MONSTER_GRUNT_4 112 SOUND_MONSTER_GRUNT_5 114 SOUND_MONSTER_ROAR_0 115 SOUND_MONSTER_ROAR_1 116 SOUND_MONSTER_ROAR_2 117 SOUND_MONSTER_ROAR_3 118 SOUND_MONSTER_YELL_A 119 SOUND_MONSTER_YELL_B 122 SOUND_POWERUP1 128 SOUND_POWERUP2 129 SOUND_POWERUP3 130 SOUND_POWERUP_SPEWER 132 SOUND_REDLIGHTNING_ZAP 133 SOUND_ROCK_CRUMBLE 137 SOUND_POT_BREAK 138 SOUND_MUSHROOM_POOF 139 SOUND_ROCKET_BLAST_DEATH 141 SOUND_SMB_LARGE_CHEWS_4 142 SOUND_SCARED_WHIMPER 143 SOUND_SHAKEY_KID_ROAR 146 SOUND_SINK_DRAIN_GURGLE 149 SOUND_TEARIMPACTS 150 SOUND_TEARS_FIRE 153 SOUND_UNLOCK00 156 SOUND_VAMP_GULP 157 SOUND_WHEEZY_COUGH 158 SOUND_SPIDER_COUGH 159 SOUND_ZOMBIE_WALKER_KID 165 SOUND_ANIMAL_SQUISH 166 SOUND_ANGRY_GURGLE 167 SOUND_BAND_AID_PICK_UP 169 SOUND_BATTERYCHARGE 170 SOUND_BEEP 171 SOUND_BLOODBANK_SPAWN 175 SOUND_BLOODSHOOT 178 SOUND_BOIL_HATCH 181 SOUND_BOSS1_EXPLOSIONS 182 SOUND_BOSS2_BUBBLES 185 SOUND_BOSS2INTRO_ERRORBUZZ 187 SOUND_CASTLEPORTCULLIS 190 SOUND_CHARACTER_SELECT_LEFT 194 SOUND_CHARACTER_SELECT_RIGHT 195 SOUND_DERP 197 SOUND_DIMEDROP 198 SOUND_DIMEPICKUP 199 SOUND_FETUS_FEET 201 SOUND_GOLDENKEY 204 SOUND_GOOATTACH0 205 SOUND_GOODEATH 207 SOUND_HAND_LASERS 211 SOUND_HEARTIN 212 SOUND_HEARTOUT 213 SOUND_HELL_PORTAL1 214 SOUND_HELL_PORTAL2 215 SOUND_ISAACDIES 217 SOUND_ITEMRECHARGE 218 SOUND_KISS_LIPS1 219 SOUND_LEECH 221 SOUND_MAGGOTCHARGE 224 SOUND_MEATHEADSHOOT 226 SOUND_METAL_BLOCKBREAK 229 SOUND_NICKELDROP 231 SOUND_NICKELPICKUP 232 SOUND_PENNYDROP 233 SOUND_PENNYPICKUP 234 SOUND_PLOP 237 SOUND_SATAN_APPEAR 238 SOUND_SATAN_BLAST 239 SOUND_SATAN_CHARGE_UP 240 SOUND_SATAN_GROW 241 SOUND_SATAN_HURT 242 SOUND_SATAN_RISE_UP 243 SOUND_SATAN_SPIT 245 SOUND_SATAN_STOMP 246 SOUND_SCAMPER 249 SOUND_SHELLGAME 252 SOUND_SLOTSPAWN 255 SOUND_SPLATTER 258 SOUND_STEAM_HALFSEC 261 SOUND_STONESHOOT 262 SOUND_WEIRD_WORM_SPIT 263 SOUND_SUMMONSOUND 265 SOUND_SUPERHOLY 266 SOUND_THUMBS_DOWN 267 SOUND_THUMBSUP 268 SOUND_FIRE_BURN 269 SOUND_HAPPY_RAINBOW 270 SOUND_BOO_MAD 300 SOUND_FART_GURG 301 SOUND_FAT_GRUNT 302 SOUND_FAT_WIGGLE 303 SOUND_FIRE_RUSH 304 SOUND_GHOST_ROAR 305 SOUND_GHOST_SHOOT 306 SOUND_GRROOWL 307 SOUND_GURG_BARF 308 SOUND_INHALE 309 SOUND_LOW_INHALE 310 SOUND_MEGA_PUKE 311 SOUND_MOUTH_FULL 312 SOUND_MULTI_SCREAM 313 SOUND_SKIN_PULL 314 SOUND_WHISTLE 315 SOUND_DEVILROOM_DEAL 316 SOUND_SPIDER_SPIT_ROAR 317 SOUND_WORM_SPIT 318 SOUND_LITTLE_SPIT 319 SOUND_SATAN_ROOM_APPEAR 320 SOUND_HEARTBEAT 321 SOUND_HEARTBEAT_FASTER 322 SOUND_HEARTBEAT_FASTEST 323 SOUND_48_HR_ENERGY 324 SOUND_ALGIZ 325 SOUND_AMNESIA 326 SOUND_ANZUS 327 SOUND_BAD_GAS 328 SOUND_BAD_TRIP 329 SOUND_BALLS_OF_STEEL 330 SOUND_BERKANO 331 SOUND_BOMBS_ARE_KEY 332 SOUND_CARD_VS_HUMAN 333 SOUND_CHAOS_CARD 334 SOUND_CREDIT_CARD 335 SOUND_DAGAZ 336 SOUND_DEATH 337 SOUND_EHWAZ 338 SOUND_EXPLOSIVE_DIAH 339 SOUND_FULL_HP 340 SOUND_HAGALAZ 341 SOUND_HP_DOWN 342 SOUND_HP_UP 343 SOUND_HEMATEMISIS 344 SOUND_I_FOUND_PILLS 345 SOUND_JERA 346 SOUND_JOKER 347 SOUND_JUDGEMENT 348 SOUND_JUSTICE 349 SOUND_LEMON_PARTY 350 SOUND_LUCK_DOWN 351 SOUND_LUCK_UP 352 SOUND_PARALYSIS 353 SOUND_PERTHRO 354 SOUND_PHEROMONES 355 SOUND_PRETTY_FLY 356 SOUND_PUBERTY 357 SOUND_RUA_WIZ 358 SOUND_RANGE_DOWN 359 SOUND_RANGE_UP 360 SOUND_RULES_CARD 361 SOUND_SEE_4EVER 362 SOUND_SPEED_DOWN 363 SOUND_SPEED_UP 364 SOUND_STRENGTH 365 SOUND_SUICIDE_KING 366 SOUND_TEARS_DOWN 367 SOUND_TEARS_UP 368 SOUND_TELEPILLS 369 SOUND_TEMPERANCE 370 SOUND_THE_CHARIOT 371 SOUND_THE_DEVIL 372 SOUND_THE_EMPEROR 373 SOUND_EMPRESS 374 SOUND_FOOL 375 SOUND_HANGED_MAN 376 SOUND_HERMIT 377 SOUND_HIEROPHANT 378 SOUND_HIGHT_PRIESTESS 379 SOUND_THE_LOVERS 380 SOUND_MAGICIAN 381 SOUND_MOON 382 SOUND_STARS 383 SOUND_SUN 384 SOUND_TOWER 385 SOUND_WORLD 386 SOUND_TWO_CLUBS 387 SOUND_TWO_DIAMONDS 388 SOUND_TWO_HEARTS 389 SOUND_TWO_SPADES 390 SOUND_WHEEL_OF_FORTUNE 391 SOUND_RAGMAN_1 392 SOUND_RAGMAN_2 393 SOUND_RAGMAN_3 394 SOUND_RAGMAN_4 395 SOUND_FLUSH 396 SOUND_WATER_DROP 397 SOUND_WET_FEET 398 SOUND_ADDICTED 399 SOUND_DICE_SHARD 400 SOUND_EMERGENCY 401 SOUND_INFESTED_EXCL 402 SOUND_INFESTED_QUEST 403 SOUND_JAIL_CARD 404 SOUND_LARGER 405 SOUND_PERCS 406 SOUND_POWER_PILL 407 SOUND_QUESTION_MARK 408 SOUND_RELAX 409 SOUND_RETRO 410 SOUND_SMALL 411 SOUND_QQQ 412 SOUND_DANGLE_WHISTLE 413 SOUND_LITTLE_HORN_COUGH 414 SOUND_LITTLE_HORN_GRUNT_1 415 SOUND_LITTLE_HORN_GRUNT_2 416 SOUND_THE_FORSAKEN_LAUGH 417 SOUND_THE_FORSAKEN_SCREAM 418 SOUND_THE_STAIN_BURST 419 SOUND_BROWNIE_LAUGH 420 SOUND_HUSH_ROAR 421 SOUND_HUSH_GROWL 422 SOUND_HUSH_LOW_ROAR 423 SOUND_FRAIL_CHARGE 424 SOUND_HUSH_CHARGE 425 SOUND_MAW_OF_VOID 426 SOUND_ULTRA_GREED_COIN_DESTROY 427 SOUND_ULTRA_GREED_COINS_FALLING 428 SOUND_ULTRA_GREED_DEATH_SCREAM 429 SOUND_ULTRA_GREED_TURN_GOLD_1 430 SOUND_ULTRA_GREED_TURN_GOLD_2 431 SOUND_ULTRA_GREED_ROAR_1 432 SOUND_ULTRA_GREED_ROAR_2 433 SOUND_ULTRA_GREED_SPIT 434 SOUND_ULTRA_GREED_PULL_SLOT 435 SOUND_ULTRA_GREED_SLOT_SPIN_LOOP 436 SOUND_ULTRA_GREED_SLOT_STOP 437 SOUND_ULTRA_GREED_SLOT_WIN_LOOP_END 438 SOUND_ULTRA_GREED_SLOT_WIN_LOOP 439 SOUND_ULTRA_GREED_SPINNING 440 SOUND_DOG_BARK 441 SOUND_DOG_HOWELL 442 SOUND_X_LAX 443 SOUND_WRONG 444 SOUND_VURP 445 SOUND_SUNSHINE 446 SOUND_SPADES 447 SOUND_HORF 448 SOUND_HOLY_CARD 449 SOUND_HEARTS 450 SOUND_GULP 451 SOUND_FRIENDS 452 SOUND_EXCITED 453 SOUND_DROWSY 454 SOUND_DIAMONDS 455 SOUND_CLUBS 456 SOUND_BLACK_RUNE 457 SOUND_PING_PONG 458 SOUND_SPEWER 459 SOUND_MOM_FOOTSTEPS 460 SOUND_BONE_HEART 461 SOUND_BONE_SNAP 462 SOUND_SHOVEL_DROP 463 SOUND_SHOVEL_DIG 464 SOUND_GOLD_HEART 465 SOUND_GOLD_HEART_DROP 466 SOUND_BONE_DROP 467 SOUND_UNHOLY 468 SOUND_BUTTON_PRESS 469 SOUND_GOLDENBOMB 470 NUM_SOUND_EFFECTS 471","title":"Enum \"SoundEffect\""},{"location":"enums/StageType/","text":"Enum \"StageType\" \u2693\ufe0e Enumerator comment id STAGETYPE_ORIGINAL 0 STAGETYPE_WOTL 1 STAGETYPE_AFTERBIRTH 2 STAGETYPE_GREEDMODE 3","title":"StageType"},{"location":"enums/StageType/#enum-stagetype","text":"Enumerator comment id STAGETYPE_ORIGINAL 0 STAGETYPE_WOTL 1 STAGETYPE_AFTERBIRTH 2 STAGETYPE_GREEDMODE 3","title":"Enum \"StageType\""},{"location":"enums/TearFlags/","text":"Enum \"TearFlags\" \u2693\ufe0e Enumerator comment id TEAR_NORMAL Normal Tear 0 TEAR_SPECTRAL Ouija board type tear (goes thru obstacles) 1 TEAR_PIERCING Cupid's arrow type tear (goes thru enemy) 1<<1 TEAR_HOMING Spoon bender type tear (homes to enemy) 1<<2 TEAR_SLOW Spider bite type tear (slows on contact) 1<<3 TEAR_POISON Common cold type tear (poisons on contact) 1<<4 TEAR_FREEZE Mom's contact type tear (freezes on contact) 1<<5 TEAR_SPLIT Parasite type tear (splits on collision) 1<<6 TEAR_GROW Lump of coal type tear (grows by range) 1<<7 TEAR_BOMBERANG My reflection type tear (returns back) 1<<8 TEAR_PERSISTENT Polyphemus type tear (Damages the entity and if the damage is more then enemy hp it continues with less damage) 1<<9 TEAR_WIGGLE Wiggle worm type tear (wiggles) 1<<10 TEAR_MIGAN Migan type tear (creates fly on hit) 1<<11 TEAR_EXPLOSIVE IPECAC type tear (explodes on hit) 1<<12 TEAR_CHARM Mom's Eyeshadow tear 1<<13 TEAR_CONFUSION Iron Bar tear 1<<14 TEAR_HP_DROP These tears cause enemy to drop hearts if killed (33% chance) 1<<15 TEAR_ORBIT Used for Little Planet (orbit arounds the player) 1<<16 TEAR_WAIT Anti gravity type tear (floats in place for some time before finally moving) (unset after first update) 1<<17 TEAR_QUADSPLIT Splits into 4 smaller tears if it hits the ground 1<<18 TEAR_BOUNCE Bounce off of enemies, walls, rocks (Higher priority than PERSISTENT & PIERCING) 1<<19 TEAR_FEAR Mom's Perfume type tear of fear (fear on contact) 1<<20 TEAR_SHRINK Proptosis tears start large and shrink 1<<21 TEAR_BURN Fire Mind tears cause Burn effect on enemies 1<<22 TEAR_ATTRACTOR Attracts enemies and pickups 1<<23 TEAR_KNOCKBACK Tear impact pushes enemies back further 1<<24 TEAR_PULSE Makes the tear pulse 1<<25 TEAR_SPIRAL Makes the tear path spiral 1<<26 TEAR_FLAT Makes the tear oval in the direction of travel 1<<27 TEAR_SAD_BOMB Used by Bombs (Sad Bomb) 1<<28 TEAR_BUTT_BOMB Used by Bombs (Butt Bomb) 1<<29 TEAR_GLITTER_BOMB Used by Bombs (Glitter Bomb) 1<<30 TEAR_SQUARE Used for Hook Worm 1<<31 TEAR_GLOW Used for GodHead (they will have a glow around them) 1<<32 TEAR_GISH Used for Gish player tears (to color enemy black on slowing) 1<<33 TEAR_SCATTER_BOMB Used for Scatter bombs 1<<34 TEAR_STICKY Used for Sticky bombs and Explosivo tears 1<<35 TEAR_CONTINUUM Tears loop around the screen 1<<36 TEAR_LIGHT_FROM_HEAVEN Create damaging light beam on hit 1<<37 TEAR_COIN_DROP Used by Bumbo, spawns a coin when tear hits 1<<38 TEAR_BLACK_HP_DROP Enemy drops a black hp when dies 1<<39 TEAR_TRACTOR_BEAM Tear with this flag will follow parent player's beam 1<<40 TEAR_GODS_FLESH God's flesh flag to minimize enemies 1<<41 TEAR_GREED_COIN Greed coin tears that has a chance to generate a coin when hit 1<<42 TEAR_MYSTERIOUS_LIQUID_CREEP 1<<43 TEAR_BIG_SPIRAL Ouroboros Worm, big radius oscilating tears 1<<44 TEAR_PERMANENT_CONFUSION Glaucoma tears, permanently confuses enemies 1<<45 TEAR_BOOGER Booger tears, stick and do damage over time 1<<46 TEAR_EGG Egg tears, leave creep and spawns spiders or flies 1<<47 TEAR_ACID Sulfuric Acid tears, can break grid entities 1<<48 TEAR_BONE Bone tears, splits in 2 1<<49 TEAR_BELIAL Belial tears, piecing tears gets double damage + homing 1<<50 TEAR_MIDAS Midas touch tears 1<<51 TEAR_NEEDLE Needle tears 1<<52 TEAR_JACOBS Jacobs ladder tears 1<<53 TEAR_HORN Little Horn tears 1<<54 TEAR_LASER Technology Zero 1<<55 TEAR_POP Pop! 1<<56 TEAR_ABSORB Lachryphagy 1<<57 TEAR_LASERSHOT Trisagion, generates a laser on top of the tear 1<<58 TEAR_HYDROBOUNCE Flat Stone 1<<59 TEAR_LUDOVICO Used as a weapon for Ludovico Technique 1<<60","title":"TearFlags"},{"location":"enums/TearFlags/#enum-tearflags","text":"Enumerator comment id TEAR_NORMAL Normal Tear 0 TEAR_SPECTRAL Ouija board type tear (goes thru obstacles) 1 TEAR_PIERCING Cupid's arrow type tear (goes thru enemy) 1<<1 TEAR_HOMING Spoon bender type tear (homes to enemy) 1<<2 TEAR_SLOW Spider bite type tear (slows on contact) 1<<3 TEAR_POISON Common cold type tear (poisons on contact) 1<<4 TEAR_FREEZE Mom's contact type tear (freezes on contact) 1<<5 TEAR_SPLIT Parasite type tear (splits on collision) 1<<6 TEAR_GROW Lump of coal type tear (grows by range) 1<<7 TEAR_BOMBERANG My reflection type tear (returns back) 1<<8 TEAR_PERSISTENT Polyphemus type tear (Damages the entity and if the damage is more then enemy hp it continues with less damage) 1<<9 TEAR_WIGGLE Wiggle worm type tear (wiggles) 1<<10 TEAR_MIGAN Migan type tear (creates fly on hit) 1<<11 TEAR_EXPLOSIVE IPECAC type tear (explodes on hit) 1<<12 TEAR_CHARM Mom's Eyeshadow tear 1<<13 TEAR_CONFUSION Iron Bar tear 1<<14 TEAR_HP_DROP These tears cause enemy to drop hearts if killed (33% chance) 1<<15 TEAR_ORBIT Used for Little Planet (orbit arounds the player) 1<<16 TEAR_WAIT Anti gravity type tear (floats in place for some time before finally moving) (unset after first update) 1<<17 TEAR_QUADSPLIT Splits into 4 smaller tears if it hits the ground 1<<18 TEAR_BOUNCE Bounce off of enemies, walls, rocks (Higher priority than PERSISTENT & PIERCING) 1<<19 TEAR_FEAR Mom's Perfume type tear of fear (fear on contact) 1<<20 TEAR_SHRINK Proptosis tears start large and shrink 1<<21 TEAR_BURN Fire Mind tears cause Burn effect on enemies 1<<22 TEAR_ATTRACTOR Attracts enemies and pickups 1<<23 TEAR_KNOCKBACK Tear impact pushes enemies back further 1<<24 TEAR_PULSE Makes the tear pulse 1<<25 TEAR_SPIRAL Makes the tear path spiral 1<<26 TEAR_FLAT Makes the tear oval in the direction of travel 1<<27 TEAR_SAD_BOMB Used by Bombs (Sad Bomb) 1<<28 TEAR_BUTT_BOMB Used by Bombs (Butt Bomb) 1<<29 TEAR_GLITTER_BOMB Used by Bombs (Glitter Bomb) 1<<30 TEAR_SQUARE Used for Hook Worm 1<<31 TEAR_GLOW Used for GodHead (they will have a glow around them) 1<<32 TEAR_GISH Used for Gish player tears (to color enemy black on slowing) 1<<33 TEAR_SCATTER_BOMB Used for Scatter bombs 1<<34 TEAR_STICKY Used for Sticky bombs and Explosivo tears 1<<35 TEAR_CONTINUUM Tears loop around the screen 1<<36 TEAR_LIGHT_FROM_HEAVEN Create damaging light beam on hit 1<<37 TEAR_COIN_DROP Used by Bumbo, spawns a coin when tear hits 1<<38 TEAR_BLACK_HP_DROP Enemy drops a black hp when dies 1<<39 TEAR_TRACTOR_BEAM Tear with this flag will follow parent player's beam 1<<40 TEAR_GODS_FLESH God's flesh flag to minimize enemies 1<<41 TEAR_GREED_COIN Greed coin tears that has a chance to generate a coin when hit 1<<42 TEAR_MYSTERIOUS_LIQUID_CREEP 1<<43 TEAR_BIG_SPIRAL Ouroboros Worm, big radius oscilating tears 1<<44 TEAR_PERMANENT_CONFUSION Glaucoma tears, permanently confuses enemies 1<<45 TEAR_BOOGER Booger tears, stick and do damage over time 1<<46 TEAR_EGG Egg tears, leave creep and spawns spiders or flies 1<<47 TEAR_ACID Sulfuric Acid tears, can break grid entities 1<<48 TEAR_BONE Bone tears, splits in 2 1<<49 TEAR_BELIAL Belial tears, piecing tears gets double damage + homing 1<<50 TEAR_MIDAS Midas touch tears 1<<51 TEAR_NEEDLE Needle tears 1<<52 TEAR_JACOBS Jacobs ladder tears 1<<53 TEAR_HORN Little Horn tears 1<<54 TEAR_LASER Technology Zero 1<<55 TEAR_POP Pop! 1<<56 TEAR_ABSORB Lachryphagy 1<<57 TEAR_LASERSHOT Trisagion, generates a laser on top of the tear 1<<58 TEAR_HYDROBOUNCE Flat Stone 1<<59 TEAR_LUDOVICO Used as a weapon for Ludovico Technique 1<<60","title":"Enum \"TearFlags\""},{"location":"enums/TearVariant/","text":"Enum \"TearVariant\" \u2693\ufe0e Enumerator comment id BLUE 0 BLOOD 1 TOOTH 2 METALLIC 3 BOBS_HEAD 4 FIRE_MIND 5 DARK_MATTER 6 MYSTERIOUS 7 SCHYTHE 8 CHAOS_CARD 9 LOST_CONTACT 10 CUPID_BLUE 11 CUPID_BLOOD 12 NAIL 13 PUPULA 14 PUPULA_BLOOD 15 GODS_FLESH 16 GODS_FLESH_BLOOD 17 DIAMOND 18 EXPLOSIVO 19 COIN 20 MULTIDIMENSIONAL 21 STONE 22 NAIL_BLOOD 23 GLAUCOMA 24 GLAUCOMA_BLOOD 25 BOOGER 26 EGG 27 RAZOR 28 BONE 29 BLACK_TOOTH 30 NEEDLE 31 BELIAL 32 EYE 33 EYE_BLOOD 34 BALLOON 35 HUNGRY 36 BALLOON_BRIMSTONE 37 BALLOON_BOMB 38","title":"TearVariant"},{"location":"enums/TearVariant/#enum-tearvariant","text":"Enumerator comment id BLUE 0 BLOOD 1 TOOTH 2 METALLIC 3 BOBS_HEAD 4 FIRE_MIND 5 DARK_MATTER 6 MYSTERIOUS 7 SCHYTHE 8 CHAOS_CARD 9 LOST_CONTACT 10 CUPID_BLUE 11 CUPID_BLOOD 12 NAIL 13 PUPULA 14 PUPULA_BLOOD 15 GODS_FLESH 16 GODS_FLESH_BLOOD 17 DIAMOND 18 EXPLOSIVO 19 COIN 20 MULTIDIMENSIONAL 21 STONE 22 NAIL_BLOOD 23 GLAUCOMA 24 GLAUCOMA_BLOOD 25 BOOGER 26 EGG 27 RAZOR 28 BONE 29 BLACK_TOOTH 30 NEEDLE 31 BELIAL 32 EYE 33 EYE_BLOOD 34 BALLOON 35 HUNGRY 36 BALLOON_BRIMSTONE 37 BALLOON_BOMB 38","title":"Enum \"TearVariant\""},{"location":"enums/TrinketType/","text":"Enum \"TrinketType\" \u2693\ufe0e Enumerator comment id TRINKET_NULL 0 TRINKET_SWALLOWED_PENNY 1 TRINKET_PETRIFIED_POOP 2 TRINKET_AAA_BATTERY 3 TRINKET_BROKEN_REMOTE 4 TRINKET_PURPLE_HEART 5 TRINKET_BROKEN_MAGNET 6 TRINKET_ROSARY_BEAD 7 TRINKET_CARTRIDGE 8 TRINKET_PULSE_WORM 9 TRINKET_WIGGLE_WORM 10 TRINKET_RING_WORM 11 TRINKET_FLAT_WORM 12 TRINKET_STORE_CREDIT 13 TRINKET_CALLUS 14 TRINKET_LUCKY_ROCK 15 TRINKET_MOMS_TOENAIL 16 TRINKET_BLACK_LIPSTICK 17 TRINKET_BIBLE_TRACT 18 TRINKET_PAPER_CLIP 19 TRINKET_MONKEY_PAW 20 TRINKET_MYSTERIOUS_PAPER 21 TRINKET_DAEMONS_TAIL 22 TRINKET_MISSING_POSTER 23 TRINKET_BUTT_PENNY 24 TRINKET_MYSTERIOUS_CANDY 25 TRINKET_HOOK_WORM 26 TRINKET_WHIP_WORM 27 TRINKET_BROKEN_ANKH 28 TRINKET_FISH_HEAD 29 TRINKET_PINKY_EYE 30 TRINKET_PUSH_PIN 31 TRINKET_LIBERTY_CAP 32 TRINKET_UMBILICAL_CORD 33 TRINKET_CHILDS_HEART 34 TRINKET_CURVED_HORN 35 TRINKET_RUSTED_KEY 36 TRINKET_GOAT_HOOF 37 TRINKET_MOMS_PEARL 38 TRINKET_CANCER 39 TRINKET_RED_PATCH 40 TRINKET_MATCH_STICK 41 TRINKET_LUCKY_TOE 42 TRINKET_CURSED_SKULL 43 TRINKET_SAFETY_CAP 44 TRINKET_ACE_SPADES 45 TRINKET_ISAACS_FORK 46 TRINKET_POLAROID_OBSOLETE 47 TRINKET_MISSING_PAGE 48 TRINKET_BLOODY_PENNY 49 TRINKET_BURNT_PENNY 50 TRINKET_FLAT_PENNY 51 TRINKET_COUNTERFEIT_PENNY 52 TRINKET_TICK 53 TRINKET_ISAACS_HEAD 54 TRINKET_MAGGYS_FAITH 55 TRINKET_JUDAS_TONGUE 56 TRINKET_SOUL 57 TRINKET_SAMSONS_LOCK 58 TRINKET_CAINS_EYE 59 TRINKET_EVES_BIRD_FOOT 60 TRINKET_LEFT_HAND 61 TRINKET_SHINY_ROCK 62 TRINKET_SAFETY_SCISSORS 63 TRINKET_RAINBOW_WORM 64 TRINKET_TAPE_WORM 65 TRINKET_LAZY_WORM 66 TRINKET_CRACKED_DICE 67 TRINKET_SUPER_MAGNET 68 TRINKET_FADED_POLAROID 69 TRINKET_LOUSE 70 TRINKET_BOBS_BLADDER 71 TRINKET_WATCH_BATTERY 72 TRINKET_BLASTING_CAP 73 TRINKET_STUD_FINDER 74 TRINKET_ERROR 75 TRINKET_POKER_CHIP 76 TRINKET_BLISTER 77 TRINKET_SECOND_HAND 78 TRINKET_ENDLESS_NAMELESS 79 TRINKET_BLACK_FEATHER 80 TRINKET_BLIND_RAGE 81 TRINKET_GOLDEN_HORSE_SHOE 82 TRINKET_STORE_KEY 83 TRINKET_RIB_OF_GREED 84 TRINKET_KARMA 85 TRINKET_LIL_LARVA 86 TRINKET_MOMS_LOCKET 87 TRINKET_NO 88 TRINKET_CHILD_LEASH 89 TRINKET_BROWN_CAP 90 TRINKET_MECONIUM 91 TRINKET_CRACKED_CROWN 92 TRINKET_USED_DIAPER 93 TRINKET_FISH_TAIL 94 TRINKET_BLACK_TOOTH 95 TRINKET_OUROBOROS_WORM 96 TRINKET_TONSIL 97 TRINKET_NOSE_GOBLIN 98 TRINKET_SUPER_BALL 99 TRINKET_VIBRANT_BULB 100 TRINKET_DIM_BULB 101 TRINKET_FRAGMENTED_CARD 102 TRINKET_EQUALITY 103 TRINKET_WISH_BONE 104 TRINKET_BAG_LUNCH 105 TRINKET_LOST_CORK 106 TRINKET_CROW_HEART 107 TRINKET_WALNUT 108 TRINKET_DUCT_TAPE 109 TRINKET_SILVER_DOLLAR 110 TRINKET_BLOODY_CROWN 111 TRINKET_PAY_TO_WIN 112 TRINKET_LOCUST_OF_WRATH 113 TRINKET_LOCUST_OF_PESTILENCE 114 TRINKET_LOCUST_OF_FAMINE 115 TRINKET_LOCUST_OF_DEATH 116 TRINKET_LOCUST_OF_CONQUEST 117 TRINKET_BAT_WING 118 TRINKET_STEM_CELL 119 TRINKET_HAIRPIN Booster pack #1 120 TRINKET_WOODEN_CROSS 121 TRINKET_BUTTER 122 TRINKET_FILIGREE_FEATHERS Booster pack #2 123 TRINKET_DOOR_STOP Booster pack #3 124 TRINKET_EXTENSION_CORD Booster pack #4 125 TRINKET_ROTTEN_PENNY Booster pack #5 126 TRINKET_BABY_BENDER 127 TRINKET_FINGER_BONE 128 NUM_TRINKETS 129","title":"TrinketType"},{"location":"enums/TrinketType/#enum-trinkettype","text":"Enumerator comment id TRINKET_NULL 0 TRINKET_SWALLOWED_PENNY 1 TRINKET_PETRIFIED_POOP 2 TRINKET_AAA_BATTERY 3 TRINKET_BROKEN_REMOTE 4 TRINKET_PURPLE_HEART 5 TRINKET_BROKEN_MAGNET 6 TRINKET_ROSARY_BEAD 7 TRINKET_CARTRIDGE 8 TRINKET_PULSE_WORM 9 TRINKET_WIGGLE_WORM 10 TRINKET_RING_WORM 11 TRINKET_FLAT_WORM 12 TRINKET_STORE_CREDIT 13 TRINKET_CALLUS 14 TRINKET_LUCKY_ROCK 15 TRINKET_MOMS_TOENAIL 16 TRINKET_BLACK_LIPSTICK 17 TRINKET_BIBLE_TRACT 18 TRINKET_PAPER_CLIP 19 TRINKET_MONKEY_PAW 20 TRINKET_MYSTERIOUS_PAPER 21 TRINKET_DAEMONS_TAIL 22 TRINKET_MISSING_POSTER 23 TRINKET_BUTT_PENNY 24 TRINKET_MYSTERIOUS_CANDY 25 TRINKET_HOOK_WORM 26 TRINKET_WHIP_WORM 27 TRINKET_BROKEN_ANKH 28 TRINKET_FISH_HEAD 29 TRINKET_PINKY_EYE 30 TRINKET_PUSH_PIN 31 TRINKET_LIBERTY_CAP 32 TRINKET_UMBILICAL_CORD 33 TRINKET_CHILDS_HEART 34 TRINKET_CURVED_HORN 35 TRINKET_RUSTED_KEY 36 TRINKET_GOAT_HOOF 37 TRINKET_MOMS_PEARL 38 TRINKET_CANCER 39 TRINKET_RED_PATCH 40 TRINKET_MATCH_STICK 41 TRINKET_LUCKY_TOE 42 TRINKET_CURSED_SKULL 43 TRINKET_SAFETY_CAP 44 TRINKET_ACE_SPADES 45 TRINKET_ISAACS_FORK 46 TRINKET_POLAROID_OBSOLETE 47 TRINKET_MISSING_PAGE 48 TRINKET_BLOODY_PENNY 49 TRINKET_BURNT_PENNY 50 TRINKET_FLAT_PENNY 51 TRINKET_COUNTERFEIT_PENNY 52 TRINKET_TICK 53 TRINKET_ISAACS_HEAD 54 TRINKET_MAGGYS_FAITH 55 TRINKET_JUDAS_TONGUE 56 TRINKET_SOUL 57 TRINKET_SAMSONS_LOCK 58 TRINKET_CAINS_EYE 59 TRINKET_EVES_BIRD_FOOT 60 TRINKET_LEFT_HAND 61 TRINKET_SHINY_ROCK 62 TRINKET_SAFETY_SCISSORS 63 TRINKET_RAINBOW_WORM 64 TRINKET_TAPE_WORM 65 TRINKET_LAZY_WORM 66 TRINKET_CRACKED_DICE 67 TRINKET_SUPER_MAGNET 68 TRINKET_FADED_POLAROID 69 TRINKET_LOUSE 70 TRINKET_BOBS_BLADDER 71 TRINKET_WATCH_BATTERY 72 TRINKET_BLASTING_CAP 73 TRINKET_STUD_FINDER 74 TRINKET_ERROR 75 TRINKET_POKER_CHIP 76 TRINKET_BLISTER 77 TRINKET_SECOND_HAND 78 TRINKET_ENDLESS_NAMELESS 79 TRINKET_BLACK_FEATHER 80 TRINKET_BLIND_RAGE 81 TRINKET_GOLDEN_HORSE_SHOE 82 TRINKET_STORE_KEY 83 TRINKET_RIB_OF_GREED 84 TRINKET_KARMA 85 TRINKET_LIL_LARVA 86 TRINKET_MOMS_LOCKET 87 TRINKET_NO 88 TRINKET_CHILD_LEASH 89 TRINKET_BROWN_CAP 90 TRINKET_MECONIUM 91 TRINKET_CRACKED_CROWN 92 TRINKET_USED_DIAPER 93 TRINKET_FISH_TAIL 94 TRINKET_BLACK_TOOTH 95 TRINKET_OUROBOROS_WORM 96 TRINKET_TONSIL 97 TRINKET_NOSE_GOBLIN 98 TRINKET_SUPER_BALL 99 TRINKET_VIBRANT_BULB 100 TRINKET_DIM_BULB 101 TRINKET_FRAGMENTED_CARD 102 TRINKET_EQUALITY 103 TRINKET_WISH_BONE 104 TRINKET_BAG_LUNCH 105 TRINKET_LOST_CORK 106 TRINKET_CROW_HEART 107 TRINKET_WALNUT 108 TRINKET_DUCT_TAPE 109 TRINKET_SILVER_DOLLAR 110 TRINKET_BLOODY_CROWN 111 TRINKET_PAY_TO_WIN 112 TRINKET_LOCUST_OF_WRATH 113 TRINKET_LOCUST_OF_PESTILENCE 114 TRINKET_LOCUST_OF_FAMINE 115 TRINKET_LOCUST_OF_DEATH 116 TRINKET_LOCUST_OF_CONQUEST 117 TRINKET_BAT_WING 118 TRINKET_STEM_CELL 119 TRINKET_HAIRPIN Booster pack #1 120 TRINKET_WOODEN_CROSS 121 TRINKET_BUTTER 122 TRINKET_FILIGREE_FEATHERS Booster pack #2 123 TRINKET_DOOR_STOP Booster pack #3 124 TRINKET_EXTENSION_CORD Booster pack #4 125 TRINKET_ROTTEN_PENNY Booster pack #5 126 TRINKET_BABY_BENDER 127 TRINKET_FINGER_BONE 128 NUM_TRINKETS 129","title":"Enum \"TrinketType\""},{"location":"enums/WeaponType/","text":"Enum \"WeaponType\" \u2693\ufe0e Enumerator comment id WEAPON_TEARS 1 WEAPON_BRIMSTONE 2 WEAPON_LASER 3 WEAPON_KNIFE 4 WEAPON_BOMBS 5 WEAPON_ROCKETS 6 WEAPON_MONSTROS_LUNGS 7 WEAPON_LUDOVICO_TECHNIQUE 8 WEAPON_TECH_X 9 WEAPON_BONE 10 NUM_WEAPON_TYPES 11","title":"WeaponType"},{"location":"enums/WeaponType/#enum-weapontype","text":"Enumerator comment id WEAPON_TEARS 1 WEAPON_BRIMSTONE 2 WEAPON_LASER 3 WEAPON_KNIFE 4 WEAPON_BOMBS 5 WEAPON_ROCKETS 6 WEAPON_MONSTROS_LUNGS 7 WEAPON_LUDOVICO_TECHNIQUE 8 WEAPON_TECH_X 9 WEAPON_BONE 10 NUM_WEAPON_TYPES 11","title":"Enum \"WeaponType\""}]}