{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Home \u2693\ufe0e Lua API Documentation for The Binding of Isaac - Afterbirth+ \u2693\ufe0e This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2 THIS PROJECT IS STILL IN EARLY DEVELOPEMENT! If you want to have a specific part of the Documentation explained, consider messaging me. Discord : Wofsauge#6503 Reddit : /u/Wofsauge","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#lua-api-documentation-for-the-binding-of-isaac-afterbirth","text":"This Documentation is a community curated project. It provides additional informations and code examples for the functions provided by the \"Binding of Isaac: Afterbirth+\" LUA modding API. If you want to support this project, consider visiting us in Github: https://github.com/wofsauge/IsaacDocs You can also come to the official Binding of Isaac Discord server: https://discord.gg/qKdHue2","title":"Lua API Documentation for The Binding of Isaac - Afterbirth+"},{"location":"Color/","text":"Class \"Color\" \u2693\ufe0e Functions \u2693\ufe0e Color () \u2693\ufe0e void Color ( float R, float G, float B, float A, int RO, int GO, int BO ) Constructor for the \"Color\" class. Notes: You need to use the KColor() constructor when using the Font class. Colors are made of three separate components, tint, colorize and offset. Tint acts like a color multiplicator. Offset is a color which is added after the tint is applied. Colorize is complicated. See the SetColorize () function for a detailed description. R, G, B and A accept numbers between 0 and 1. RO, GO and BO accept numbers between -255 and 255. __mul () \u2693\ufe0e Color __mul ( Color right) Multiplication of two colors. Lerp () \u2693\ufe0e static Color Lerp ( Color m1, Color m2, float t ) Linear Interpolation between two colors. t is the \"progress\" of the interpolation. Setting t = 0.5 means that the color in the middle of m1 and m2 will be returned. Reset () \u2693\ufe0e void Reset ( ) SetColorize () \u2693\ufe0e void SetColorize ( float Red, float Green, float Blue, float Amount ) The colorize function can be used to change the color of sprites. Its the best for that purpose, since it doesnt affect existing coloranimations like the flashing of creep. The values can be between 0 and 1 for normal coloration. if you use higher numbers the color gets more vibrant. Notes The alpha component determines how much colorization must be applied. The function takes the original color, converts it to grayscale, multiplies it by the RGB components and then blends it back with the original color. The alpha value determines the blending factor. Colorization is applied after the tint and before the offset function. Example Code SetColorize ( 1 , 1 , 1 , 1 ) will turn the sprite into grayscale. SetColorize ( 1 , 0 , 0 , 1 ) will turn it red but not as a red tint but as shades of red. SetColorize ( 1 , 1 , 1 , 2 ) will invert the sprite without touching its luminosity. This code changes the color of red Creep to be purple 1 2 3 4 5 6 7 Test : AddCallback ( ModCallbacks . MC_POST_EFFECT_INIT , function ( _ , self ) if self . Variant == EffectVariant . CREEP_RED then local color = Color ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ) color : SetColorize ( 4 , 0 , 4 , 1 ) self : GetSprite (). Color = color end end ) SetOffset () \u2693\ufe0e void SetOffset ( float RedOffset, float GreenOffset, float BlueOffset ) Offset is a color that gets added to the sprite after the Tint was applied. SetTint () \u2693\ufe0e void SetTint ( float RedTint, float GreenTint, float BlueTint, float AlphaTint ) Tint acts like a color multiplicator. Variables \u2693\ufe0e A \u2693\ufe0e float A B \u2693\ufe0e float B BO \u2693\ufe0e float BO G \u2693\ufe0e float G GO \u2693\ufe0e float GO R \u2693\ufe0e float R RO \u2693\ufe0e float RO","title":"Color"},{"location":"Color/#class-color","text":"","title":"Class \"Color\""},{"location":"Color/#functions","text":"","title":"Functions"},{"location":"Color/#color","text":"","title":"Color ()"},{"location":"Color/#__mul","text":"","title":"__mul ()"},{"location":"Color/#lerp","text":"","title":"Lerp ()"},{"location":"Color/#reset","text":"","title":"Reset ()"},{"location":"Color/#setcolorize","text":"","title":"SetColorize ()"},{"location":"Color/#setoffset","text":"","title":"SetOffset ()"},{"location":"Color/#settint","text":"","title":"SetTint ()"},{"location":"Color/#variables","text":"","title":"Variables"},{"location":"Color/#a","text":"","title":"A"},{"location":"Color/#b","text":"","title":"B"},{"location":"Color/#bo","text":"","title":"BO"},{"location":"Color/#g","text":"","title":"G"},{"location":"Color/#go","text":"","title":"GO"},{"location":"Color/#r","text":"","title":"R"},{"location":"Color/#ro","text":"","title":"RO"},{"location":"CppContainer_ArrayProxy/","text":"Class \"CppContainer::ArrayProxy\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx ) Variables \u2693\ufe0e RoomList \u2693\ufe0e class RoomList Size","title":"CppContainer::ArrayProxy"},{"location":"CppContainer_ArrayProxy/#class-cppcontainerarrayproxy","text":"","title":"Class \"CppContainer::ArrayProxy\""},{"location":"CppContainer_ArrayProxy/#functions","text":"","title":"Functions"},{"location":"CppContainer_ArrayProxy/#get","text":"","title":"Get ()"},{"location":"CppContainer_ArrayProxy/#variables","text":"","title":"Variables"},{"location":"CppContainer_ArrayProxy/#roomlist","text":"","title":"RoomList"},{"location":"CppContainer_ArrayProxy_RoomList/","text":"Class \"CppContainer::ArrayProxy::RoomList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::ArrayProxy::RoomList"},{"location":"CppContainer_ArrayProxy_RoomList/#class-cppcontainerarrayproxyroomlist","text":"","title":"Class \"CppContainer::ArrayProxy::RoomList\""},{"location":"CppContainer_ArrayProxy_RoomList/#functions","text":"","title":"Functions"},{"location":"CppContainer_ArrayProxy_RoomList/#get","text":"","title":"Get ()"},{"location":"CppContainer_ArrayProxy_RoomList/#variables","text":"","title":"Variables"},{"location":"CppContainer_ArrayProxy_RoomList/#int","text":"","title":"int"},{"location":"CppContainer_EntityList/","text":"Class \"CppContainer::EntityList\" \u2693\ufe0e Functions \u2693\ufe0e __len () \u2693\ufe0e int __len () Get () \u2693\ufe0e Entity Get ( int idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::EntityList"},{"location":"CppContainer_EntityList/#class-cppcontainerentitylist","text":"","title":"Class \"CppContainer::EntityList\""},{"location":"CppContainer_EntityList/#functions","text":"","title":"Functions"},{"location":"CppContainer_EntityList/#__len","text":"","title":"__len ()"},{"location":"CppContainer_EntityList/#get","text":"","title":"Get ()"},{"location":"CppContainer_EntityList/#variables","text":"","title":"Variables"},{"location":"CppContainer_EntityList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_CardConfigList/","text":"Class \"CppContainer::Vector::CardConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Card Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::CardConfigList"},{"location":"CppContainer_Vector_CardConfigList/#class-cppcontainervectorcardconfiglist","text":"","title":"Class \"CppContainer::Vector::CardConfigList\""},{"location":"CppContainer_Vector_CardConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_CardConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_CardConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_CardConfigList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_CostumeConfigList/","text":"Class \"CppContainer::Vector::CostumeConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Costume Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::CostumeConfigList"},{"location":"CppContainer_Vector_CostumeConfigList/#class-cppcontainervectorcostumeconfiglist","text":"","title":"Class \"CppContainer::Vector::CostumeConfigList\""},{"location":"CppContainer_Vector_CostumeConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_CostumeConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_CostumeConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_CostumeConfigList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_EffectList/","text":"Class \"CppContainer::Vector::EffectList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e TemporaryEffect Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::EffectList"},{"location":"CppContainer_Vector_EffectList/#class-cppcontainervectoreffectlist","text":"","title":"Class \"CppContainer::Vector::EffectList\""},{"location":"CppContainer_Vector_EffectList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_EffectList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_EffectList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_EffectList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_ItemConfigList/","text":"Class \"CppContainer::Vector::ItemConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Item Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::ItemConfigList"},{"location":"CppContainer_Vector_ItemConfigList/#class-cppcontainervectoritemconfiglist","text":"","title":"Class \"CppContainer::Vector::ItemConfigList\""},{"location":"CppContainer_Vector_ItemConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_ItemConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_ItemConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_ItemConfigList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_PillConfigList/","text":"Class \"CppContainer::Vector::PillConfigList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e PillEffect Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::PillConfigList"},{"location":"CppContainer_Vector_PillConfigList/#class-cppcontainervectorpillconfiglist","text":"","title":"Class \"CppContainer::Vector::PillConfigList\""},{"location":"CppContainer_Vector_PillConfigList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_PillConfigList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_PillConfigList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_PillConfigList/#int","text":"","title":"int"},{"location":"CppContainer_Vector_VectorList/","text":"Class \"CppContainer::Vector::VectorList\" \u2693\ufe0e Functions \u2693\ufe0e Get () \u2693\ufe0e Vector Get ( int Idx ) Variables \u2693\ufe0e int \u2693\ufe0e int Size","title":"CppContainer::Vector::VectorList"},{"location":"CppContainer_Vector_VectorList/#class-cppcontainervectorvectorlist","text":"","title":"Class \"CppContainer::Vector::VectorList\""},{"location":"CppContainer_Vector_VectorList/#functions","text":"","title":"Functions"},{"location":"CppContainer_Vector_VectorList/#get","text":"","title":"Get ()"},{"location":"CppContainer_Vector_VectorList/#variables","text":"","title":"Variables"},{"location":"CppContainer_Vector_VectorList/#int","text":"","title":"int"},{"location":"DebugConsole/","text":"Class \"DebugConsole\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Debug Console"},{"location":"DebugConsole/#class-debugconsole","text":"","title":"Class \"DebugConsole\""},{"location":"DebugConsole/#functions","text":"","title":"Functions"},{"location":"Entity/","text":"Class \"Entity\" \u2693\ufe0e Functions \u2693\ufe0e AddBurn () \u2693\ufe0e void AddBurn ( EntityRef Source , int Duration , float Damage ) Adds a burn-effect to an enemy. Duration is in Number of Frames. Damage is the Damage taken per frame. Example Code This code damages every entity in the room for 1 second with the damagesource set to the player. The total damage dealt is 30. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddBurn ( player , 30 , 1 ) end AddCharmed () \u2693\ufe0e void AddCharmed ( int Duration ) Adds a charmed-effect to an enemy. Duration is in Number of Frames. Charmed enemies are friendly towards isaac and attack other enemies. AddCharmed ( - 1 ) makes the effect permanent and the enemy will follow you even to different rooms. Example Code This code charms every entity in the room for 1 second. 1 2 3 for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddCharmed ( 30 ) end AddConfusion () \u2693\ufe0e void AddConfusion ( EntityRef Source , int Duration , bool IgnoreBosses ) Adds a confusion effect to an entity. Example Code This code confuses every entity in the room for 1 second while ignoring bosses. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddConfusion ( player , 30 , true ) end AddEntityFlags () \u2693\ufe0e void AddEntityFlags ( int Flags ) Add EntityFlags to the entity. Flags are used to add specific effects like poisoning or freeze. You can add multiple flags at the same time by bitwise-concatenating them. Example Code This code adds slowing and confusion to the enetity. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddEntityFlags ( EntityFlag . FLAG_SLOW | EntityFlag . FLAG_CONFUSION ) end AddFear () \u2693\ufe0e void AddFear ( EntityRef Source , int Duration ) Adds a fear-effect to an entity. Example Code Examplecode: This code frightens every entity in the room for 1 second. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddFear ( player , 30 ) end AddFreeze () \u2693\ufe0e void AddFreeze ( EntityRef Source , int Duration ) Freezes an entity, making it unable to move and attack. Example Code Examplecode: This code freezes every entity in the room for half a second. 1 2 3 4 local player = Isaac . GetPlayer ( 0 ) for i , entity in ipairs ( Isaac . GetRoomEntities ()) do entity : AddFreeze ( player , 30 ) end AddHealth () \u2693\ufe0e void AddHealth ( float HitPoints ) Heals an entity. AddMidasFreeze () \u2693\ufe0e void AddMidasFreeze ( EntityRef Source , int Duration ) Turns the entity into a gold statue (can't move, can't attack, drops coins when killed) AddPoison () \u2693\ufe0e void AddPoison ( EntityRef Source , int Duration , float Damage ) Adds a poison effect to the entity. AddShrink () \u2693\ufe0e void AddShrink ( EntityRef Source , int Duration ) Adds a shrink effect to the entity. AddSlowing () \u2693\ufe0e void AddSlowing ( EntityRef Source , int Duration , float SlowValue , Color SlowColor ) Makes the friction higher. AddVelocity () \u2693\ufe0e void AddVelocity ( Vector Velocity ) Adds velocity to the entity. This can be used to move him in a certain direktion (for example as a result of collision) BloodExplode () \u2693\ufe0e void BloodExplode () Explodes with gibs and blood. CanShutDoors () \u2693\ufe0e bool CanShutDoors () enemies keep the doors shut. ClearEntityFlags () \u2693\ufe0e void ClearEntityFlags ( int Flags ) Removes all EntityFlags from the entity. CollidesWithGrid () \u2693\ufe0e bool CollidesWithGrid () Returns true, if the entity is able to collide with the grid. Die () \u2693\ufe0e void Die () Kills the entity and trigger its death animation. Exists () \u2693\ufe0e bool Exists () Returns true, if this entity still exists. GetBossID () \u2693\ufe0e BossId GetBossID () If the entity is a boss, it returns its specific boss id. If it isnt a boss it will return 0. Color () \u2693\ufe0e Color GetColor () Returns the Color object assosiated to this entity. GetData () \u2693\ufe0e table GetData () Returns a table that contains all data assosiated with the entity. This can be used to add custom data as well. Notes Data associated with an entity does only persists in between rooms, when the entity is a player, familiar or the entity has the \"EntityFlag.FLAG_PERSISTENT\" Flag active. Data does not persists in between exiting the game to a menu, or when restarting/finishing a run. Example Code This code adds custom data to an entity or prints it in the console if it exists. 1 2 3 4 5 if type ( entity : GetData ()[ \"MyValue\" ]) == type ( nil ) then -- checks , if the Data does exist already entity : GetData ()[ \"MyValue\" ] = \"Cool\" -- assign a value to the data else print ( entity : GetData ()[ \"MyValue\" ]) -- this will print \"Cool\" in the console end GetDropRNG () \u2693\ufe0e RNG GetDropRNG () Returns the assigned RNG object for the entity. This RNG is used to determine the items that are dropped on the entities death. GetEntityFlags () \u2693\ufe0e int GetEntityFlags () Get the EntityFlags of the entity. This will be a number which acts like a bitmask. Example Code This code prints something in the console, if the entity has a specific EntityFlag . 1 2 3 if entity : GetEntityFlags () & amp ; EntityFlag . FLAG_CONFUSION == EntityFlag . FLAG_CONFUSION then print ( \"This entity is confused!\" ) end GetLastChild () \u2693\ufe0e Entity GetLastChild () Returns the last entity spawned by this entity. GetLastParent () \u2693\ufe0e Entity GetLastParent () Returns the last parent of this entity. GetSprite () \u2693\ufe0e Sprite GetSprite () Return the sprite object of the entity. HasCommonParentWithEntity () \u2693\ufe0e bool HasCommonParentWithEntity ( Entity Other ) HasEntityFlags () \u2693\ufe0e bool HasEntityFlags ( int Flags ) Returns true, if the entity has all named EntityFlags set. Example Code This code prints something in the console, if the entity has a specific EntityFlag . 1 2 3 if entity : HasEntityFlags ( EntityFlag . FLAG_CONFUSION ) then print ( \"This entity is confused!\" ) end HasFullHealth () \u2693\ufe0e bool HasFullHealth () HasMortalDamage () \u2693\ufe0e bool HasMortalDamage () Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. HasMortalDamage() returns true if the buffered damage is enough to kill the entity. HasMortalDamage() will be updated additionally after TakeDamage() is called. IsActiveEnemy () \u2693\ufe0e bool IsActiveEnemy ( bool includeDead ) return true for non background NPCs (ex: every enemy except fire and shopkeepers) IsBoss () \u2693\ufe0e bool IsBoss () bosses display health bar IsDead () \u2693\ufe0e bool IsDead () IsEnemy () \u2693\ufe0e bool IsEnemy () return true for NPCs that are not controlled by the player IsFlying () \u2693\ufe0e bool IsFlying () IsFrame () \u2693\ufe0e bool IsFrame ( int Frame , int Offset ) true every X frames IsInvincible () \u2693\ufe0e bool IsInvincible () IsVisible () \u2693\ufe0e bool IsVisible () IsVulnerableEnemy () \u2693\ufe0e bool IsVulnerableEnemy () return true for enemies that can be damaged Kill () \u2693\ufe0e void Kill () Kills the entity and makes a blood splat or gibs. MultiplyFriction () \u2693\ufe0e void MultiplyFriction ( float Value ) PostRender () \u2693\ufe0e void PostRender () Remove () \u2693\ufe0e void Remove () Remove the entity from the game instantly, without doing any additional effects/animations. RemoveStatusEffects () \u2693\ufe0e void RemoveStatusEffects () Removes all Status Effects from the entity. Render () \u2693\ufe0e void Render ( Vector Offset ) Render the current sprite of the Entity at the current entity position + offset. RenderShadowLayer () \u2693\ufe0e bool RenderShadowLayer ( Vector Offset ) Render the shadow / shadow layer again. SetColor () \u2693\ufe0e void SetColor ( Color Color , int Duration , int Priority , bool Fadeout , bool Share ) Set the colormask for the entity. This can be used to tint the sprites in different colors. Example Code This code changes the color of the sprite to a fully white sprite for 15 frames. 1 entity : SetColor ( Color ( 1 , 1 , 1 , 1 , 255 , 255 , 255 ), 15 , 1 , false , false ) SetSize () \u2693\ufe0e void SetSize ( float Size , Vector SizeMulti , int NumGridCollisionPoints ) Set the size ofthe entity. SetSpriteFrame () \u2693\ufe0e void SetSpriteFrame ( str AnimationName , int FrameNum ) SetSpriteOverlayFrame () \u2693\ufe0e void SetSpriteOverlayFrame ( str AnimationName , int FrameNum ) TakeDamage () \u2693\ufe0e bool TakeDamage ( float Damage , int Flags , EntityRef Source , int DamageCountdown ) Notes The game adds taken damage to a damage buffer, which gets applied in the next frame. Therefore, TakeDamage() will not decremented the entities HP immediately upon calling the function. Rather, it is only updated on the frame afterwards. ToBomb () \u2693\ufe0e EntityBomb ToBomb () ToEffect () \u2693\ufe0e EntityEffect ToEffect () ToFamiliar () \u2693\ufe0e EntityFamiliar ToFamiliar () ToKnife () \u2693\ufe0e EntityKnife ToKnife () ToLaser () \u2693\ufe0e EntityLaser ToLaser () ToNPC () \u2693\ufe0e EntityNPC ToNPC () ToPickup () \u2693\ufe0e EntityPickup ToPickup () ToPlayer () \u2693\ufe0e EntityPlayer ToPlayer () ToProjectile () \u2693\ufe0e EntityProjectile ToProjectile () ToTear () \u2693\ufe0e EntityTear ToTear () Update () \u2693\ufe0e void Update () Variables \u2693\ufe0e Child \u2693\ufe0e Entity Child CollisionDamage \u2693\ufe0e float CollisionDamage DepthOffset \u2693\ufe0e float DepthOffset Get/Set the depth-offset of the entity. This value is added to the Y Position of the entity, which is then used to determine the rendering order of each entity. Default value is 0 for all entities. Example Code This code explains how this variable works. 1 2 3 4 5 6 7 entity1 . Position . Y -- =& gt ; 50 entity2 . Position . Y -- =& gt ; 45 -- Entity1 is rendered in front of Entity2 entity1 . DepthOffset = - 10 -- new Entity1 renderYPosition =& gt ; 40 -- Entity2 is rendered in front of Entity1 int \u2693\ufe0e int DropSeed Get/set the Seed of the Drop RNG. EntityCollisionClass \u2693\ufe0e EntityCollisionClass EntityCollisionClass FlipX \u2693\ufe0e bool FlipX int \u2693\ufe0e int FrameCount Friction \u2693\ufe0e float Friction loaded from entity config GridCollisionClass \u2693\ufe0e GridCollisionClass GridCollisionClass HitPoints \u2693\ufe0e float HitPoints Notes The HitPoints value is not decremented immediately upon taking damage like you would expect. Rather, it is only updated on the frame after the entity takes damage. int \u2693\ufe0e int Index int \u2693\ufe0e int InitSeed Mass \u2693\ufe0e float Mass MaxHitPoints \u2693\ufe0e float MaxHitPoints Parent \u2693\ufe0e Entity Parent Position \u2693\ufe0e Vector Position Vector \u2693\ufe0e Vector PositionOffset RenderZOffset \u2693\ufe0e int RenderZOffset Bugs This variable doesnt seem to do anything useful. Use DepthOffset instead. SizeMulti \u2693\ufe0e Vector SizeMulti SpawnerEntity \u2693\ufe0e Entity SpawnerEntity SpawnerType \u2693\ufe0e EntityType SpawnerType SpawnerVariant \u2693\ufe0e int SpawnerVariant int \u2693\ufe0e int SpawnGridIndex Color \u2693\ufe0e Color SplatColor Vector \u2693\ufe0e Vector SpriteOffset SpriteRotation \u2693\ufe0e float SpriteRotation Vector \u2693\ufe0e Vector SpriteScale SubType \u2693\ufe0e int SubType Target \u2693\ufe0e Entity Target Vector \u2693\ufe0e Vector TargetPosition EntityType \u2693\ufe0e EntityType Type Variant \u2693\ufe0e int Variant Velocity \u2693\ufe0e Vector Velocity Visible \u2693\ufe0e bool Visible Size \u2693\ufe0e float Size Returns the size of the hitbox on an entity.","title":"Entity"},{"location":"Entity/#class-entity","text":"","title":"Class \"Entity\""},{"location":"Entity/#functions","text":"","title":"Functions"},{"location":"Entity/#addburn","text":"","title":"AddBurn ()"},{"location":"Entity/#addcharmed","text":"","title":"AddCharmed ()"},{"location":"Entity/#addconfusion","text":"","title":"AddConfusion ()"},{"location":"Entity/#addentityflags","text":"","title":"AddEntityFlags ()"},{"location":"Entity/#addfear","text":"","title":"AddFear ()"},{"location":"Entity/#addfreeze","text":"","title":"AddFreeze ()"},{"location":"Entity/#addhealth","text":"","title":"AddHealth ()"},{"location":"Entity/#addmidasfreeze","text":"","title":"AddMidasFreeze ()"},{"location":"Entity/#addpoison","text":"","title":"AddPoison ()"},{"location":"Entity/#addshrink","text":"","title":"AddShrink ()"},{"location":"Entity/#addslowing","text":"","title":"AddSlowing ()"},{"location":"Entity/#addvelocity","text":"","title":"AddVelocity ()"},{"location":"Entity/#bloodexplode","text":"","title":"BloodExplode ()"},{"location":"Entity/#canshutdoors","text":"","title":"CanShutDoors ()"},{"location":"Entity/#clearentityflags","text":"","title":"ClearEntityFlags ()"},{"location":"Entity/#collideswithgrid","text":"","title":"CollidesWithGrid ()"},{"location":"Entity/#die","text":"","title":"Die ()"},{"location":"Entity/#exists","text":"","title":"Exists ()"},{"location":"Entity/#getbossid","text":"","title":"GetBossID ()"},{"location":"Entity/#color","text":"","title":"Color ()"},{"location":"Entity/#getdata","text":"","title":"GetData ()"},{"location":"Entity/#getdroprng","text":"","title":"GetDropRNG ()"},{"location":"Entity/#getentityflags","text":"","title":"GetEntityFlags ()"},{"location":"Entity/#getlastchild","text":"","title":"GetLastChild ()"},{"location":"Entity/#getlastparent","text":"","title":"GetLastParent ()"},{"location":"Entity/#getsprite","text":"","title":"GetSprite ()"},{"location":"Entity/#hascommonparentwithentity","text":"","title":"HasCommonParentWithEntity ()"},{"location":"Entity/#hasentityflags","text":"","title":"HasEntityFlags ()"},{"location":"Entity/#hasfullhealth","text":"","title":"HasFullHealth ()"},{"location":"Entity/#hasmortaldamage","text":"","title":"HasMortalDamage ()"},{"location":"Entity/#isactiveenemy","text":"","title":"IsActiveEnemy ()"},{"location":"Entity/#isboss","text":"","title":"IsBoss ()"},{"location":"Entity/#isdead","text":"","title":"IsDead ()"},{"location":"Entity/#isenemy","text":"","title":"IsEnemy ()"},{"location":"Entity/#isflying","text":"","title":"IsFlying ()"},{"location":"Entity/#isframe","text":"","title":"IsFrame ()"},{"location":"Entity/#isinvincible","text":"","title":"IsInvincible ()"},{"location":"Entity/#isvisible","text":"","title":"IsVisible ()"},{"location":"Entity/#isvulnerableenemy","text":"","title":"IsVulnerableEnemy ()"},{"location":"Entity/#kill","text":"","title":"Kill ()"},{"location":"Entity/#multiplyfriction","text":"","title":"MultiplyFriction ()"},{"location":"Entity/#postrender","text":"","title":"PostRender ()"},{"location":"Entity/#remove","text":"","title":"Remove ()"},{"location":"Entity/#removestatuseffects","text":"","title":"RemoveStatusEffects ()"},{"location":"Entity/#render","text":"","title":"Render ()"},{"location":"Entity/#rendershadowlayer","text":"","title":"RenderShadowLayer ()"},{"location":"Entity/#setcolor","text":"","title":"SetColor ()"},{"location":"Entity/#setsize","text":"","title":"SetSize ()"},{"location":"Entity/#setspriteframe","text":"","title":"SetSpriteFrame ()"},{"location":"Entity/#setspriteoverlayframe","text":"","title":"SetSpriteOverlayFrame ()"},{"location":"Entity/#takedamage","text":"","title":"TakeDamage ()"},{"location":"Entity/#tobomb","text":"","title":"ToBomb ()"},{"location":"Entity/#toeffect","text":"","title":"ToEffect ()"},{"location":"Entity/#tofamiliar","text":"","title":"ToFamiliar ()"},{"location":"Entity/#toknife","text":"","title":"ToKnife ()"},{"location":"Entity/#tolaser","text":"","title":"ToLaser ()"},{"location":"Entity/#tonpc","text":"","title":"ToNPC ()"},{"location":"Entity/#topickup","text":"","title":"ToPickup ()"},{"location":"Entity/#toplayer","text":"","title":"ToPlayer ()"},{"location":"Entity/#toprojectile","text":"","title":"ToProjectile ()"},{"location":"Entity/#totear","text":"","title":"ToTear ()"},{"location":"Entity/#update","text":"","title":"Update ()"},{"location":"Entity/#variables","text":"","title":"Variables"},{"location":"Entity/#child","text":"","title":"Child"},{"location":"Entity/#collisiondamage","text":"","title":"CollisionDamage"},{"location":"Entity/#depthoffset","text":"","title":"DepthOffset"},{"location":"Entity/#int","text":"","title":"int"},{"location":"Entity/#entitycollisionclass","text":"","title":"EntityCollisionClass"},{"location":"Entity/#flipx","text":"","title":"FlipX"},{"location":"Entity/#int_1","text":"","title":"int"},{"location":"Entity/#friction","text":"","title":"Friction"},{"location":"Entity/#gridcollisionclass","text":"","title":"GridCollisionClass"},{"location":"Entity/#hitpoints","text":"","title":"HitPoints"},{"location":"Entity/#int_2","text":"","title":"int"},{"location":"Entity/#int_3","text":"","title":"int"},{"location":"Entity/#mass","text":"","title":"Mass"},{"location":"Entity/#maxhitpoints","text":"","title":"MaxHitPoints"},{"location":"Entity/#parent","text":"","title":"Parent"},{"location":"Entity/#position","text":"","title":"Position"},{"location":"Entity/#vector","text":"","title":"Vector"},{"location":"Entity/#renderzoffset","text":"","title":"RenderZOffset"},{"location":"Entity/#sizemulti","text":"","title":"SizeMulti"},{"location":"Entity/#spawnerentity","text":"","title":"SpawnerEntity"},{"location":"Entity/#spawnertype","text":"","title":"SpawnerType"},{"location":"Entity/#spawnervariant","text":"","title":"SpawnerVariant"},{"location":"Entity/#int_4","text":"","title":"int"},{"location":"Entity/#color_1","text":"","title":"Color"},{"location":"Entity/#vector_1","text":"","title":"Vector"},{"location":"Entity/#spriterotation","text":"","title":"SpriteRotation"},{"location":"Entity/#vector_2","text":"","title":"Vector"},{"location":"Entity/#subtype","text":"","title":"SubType"},{"location":"Entity/#target","text":"","title":"Target"},{"location":"Entity/#vector_3","text":"","title":"Vector"},{"location":"Entity/#entitytype","text":"","title":"EntityType"},{"location":"Entity/#variant","text":"","title":"Variant"},{"location":"Entity/#velocity","text":"","title":"Velocity"},{"location":"Entity/#visible","text":"","title":"Visible"},{"location":"Entity/#size","text":"","title":"Size"},{"location":"EntityBomb/","text":"Class \"EntityBomb\" \u2693\ufe0e Functions \u2693\ufe0e SetExplosionCountdown () \u2693\ufe0e void SetExplosionCountdown ( int Countdown ) Variables \u2693\ufe0e ExplosionDamage \u2693\ufe0e float ExplosionDamage Flags \u2693\ufe0e int Flags Uses TearFlags to alter the behavior of the bomb. IsFetus \u2693\ufe0e bool IsFetus RadiusMultiplier \u2693\ufe0e float RadiusMultiplier","title":"EntityBomb"},{"location":"EntityBomb/#class-entitybomb","text":"","title":"Class \"EntityBomb\""},{"location":"EntityBomb/#functions","text":"","title":"Functions"},{"location":"EntityBomb/#setexplosioncountdown","text":"","title":"SetExplosionCountdown ()"},{"location":"EntityBomb/#variables","text":"","title":"Variables"},{"location":"EntityBomb/#explosiondamage","text":"","title":"ExplosionDamage"},{"location":"EntityBomb/#flags","text":"","title":"Flags"},{"location":"EntityBomb/#isfetus","text":"","title":"IsFetus"},{"location":"EntityBomb/#radiusmultiplier","text":"","title":"RadiusMultiplier"},{"location":"EntityEffect/","text":"Class \"EntityEffect\" \u2693\ufe0e Functions \u2693\ufe0e FollowParent () \u2693\ufe0e void FollowParent ( Entity Parent ) IsPlayerCreep () \u2693\ufe0e static bool IsPlayerCreep ( int Variant ) SetDamageSource () \u2693\ufe0e void SetDamageSource ( EntityType DamageSource ) SetRadii () \u2693\ufe0e void SetRadii ( float min , float max ) For shockwaves. SetTimeout () \u2693\ufe0e void SetTimeout ( int Timeout ) Variables \u2693\ufe0e DamageSource \u2693\ufe0e int DamageSource FallingAcceleration \u2693\ufe0e float FallingAcceleration FallingSpeed \u2693\ufe0e float FallingSpeed IsFollowing \u2693\ufe0e bool IsFollowing LifeSpan \u2693\ufe0e int LifeSpan m_Height \u2693\ufe0e float m_Height for particles .dy MaxRadius \u2693\ufe0e float MaxRadius MinRadius \u2693\ufe0e float MinRadius For shockwaves. ParentOffset \u2693\ufe0e Vector ParentOffset probably obsolete soon, in favor of m_SpriteOffset Rotation \u2693\ufe0e float Rotation Scale \u2693\ufe0e float Scale State \u2693\ufe0e int State state var, may be used ad lib initialized to 0 in Init() Timeout \u2693\ufe0e int Timeout","title":"EntityEffect"},{"location":"EntityEffect/#class-entityeffect","text":"","title":"Class \"EntityEffect\""},{"location":"EntityEffect/#functions","text":"","title":"Functions"},{"location":"EntityEffect/#followparent","text":"","title":"FollowParent ()"},{"location":"EntityEffect/#isplayercreep","text":"","title":"IsPlayerCreep ()"},{"location":"EntityEffect/#setdamagesource","text":"","title":"SetDamageSource ()"},{"location":"EntityEffect/#setradii","text":"","title":"SetRadii ()"},{"location":"EntityEffect/#settimeout","text":"","title":"SetTimeout ()"},{"location":"EntityEffect/#variables","text":"","title":"Variables"},{"location":"EntityEffect/#damagesource","text":"","title":"DamageSource"},{"location":"EntityEffect/#fallingacceleration","text":"","title":"FallingAcceleration"},{"location":"EntityEffect/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityEffect/#isfollowing","text":"","title":"IsFollowing"},{"location":"EntityEffect/#lifespan","text":"","title":"LifeSpan"},{"location":"EntityEffect/#m_height","text":"","title":"m_Height"},{"location":"EntityEffect/#maxradius","text":"","title":"MaxRadius"},{"location":"EntityEffect/#minradius","text":"","title":"MinRadius"},{"location":"EntityEffect/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityEffect/#rotation","text":"","title":"Rotation"},{"location":"EntityEffect/#scale","text":"","title":"Scale"},{"location":"EntityEffect/#state","text":"","title":"State"},{"location":"EntityEffect/#timeout","text":"","title":"Timeout"},{"location":"EntityFamiliar/","text":"Class \"EntityFamiliar\" \u2693\ufe0e Functions \u2693\ufe0e AddCoins () \u2693\ufe0e void AddCoins ( int Value ) AddHearts () \u2693\ufe0e void AddHearts ( int Hearts ) AddKeys () \u2693\ufe0e void AddKeys ( int Keys ) AddToDelayed () \u2693\ufe0e void AddToDelayed () Adds to delayed. This doesn't remove other flags! AddToFollowers () \u2693\ufe0e void AddToFollowers () Adds to followers. This doesn't remove other flags! AddToOrbit () \u2693\ufe0e void AddToOrbit ( int Layer ) Adds to orbitals. This doesn't remove other flags! FireProjectile () \u2693\ufe0e EntityTear FireProjectile ( Vector Dir ) Shoots a projectile from the center of the familiar in the direction you defined. If used on a familiar that shoots multiple projectiles (example: harlequin baby), this function will only return the left most projectile based on the direction. If used on familiars with special tears (example: Lil Brimstone,...), this will just shoot a regular tear. This function will not play the shoot animation of the familiar. FollowParent () \u2693\ufe0e void FollowParent () FollowPosition () \u2693\ufe0e void FollowPosition ( Vector Pos ) GetOrbitDistance () \u2693\ufe0e static Vector GetOrbitDistance ( int Layer ) Variables \u2693\ufe0e State \u2693\ufe0e int State MoveDelayed \u2693\ufe0e void MoveDelayed ( int NumFrames ) MoveDiagonally \u2693\ufe0e void MoveDiagonally ( float Speed ) PickEnemyTarget \u2693\ufe0e void PickEnemyTarget ( float MaxDistance , int FrameInterval ) PlayChargeAnim \u2693\ufe0e void PlayChargeAnim ( Direction Dir ) PlayFloatAnim \u2693\ufe0e void PlayFloatAnim ( Direction Dir ) PlayShootAnim \u2693\ufe0e void PlayShootAnim ( Direction Dir ) RecalculateOrbitOffset \u2693\ufe0e int RecalculateOrbitOffset ( int Layer , bool Add ) Returns the number of familiars in that layer. RemoveFromDelayed \u2693\ufe0e void RemoveFromDelayed () RemoveFromFollowers \u2693\ufe0e void RemoveFromFollowers () RemoveFromOrbit \u2693\ufe0e void RemoveFromOrbit () Shoot \u2693\ufe0e void Shoot () Coins \u2693\ufe0e int Coins FireCooldown \u2693\ufe0e int FireCooldown HeadFrameDelay \u2693\ufe0e int HeadFrameDelay Hearts \u2693\ufe0e int Hearts Keys \u2693\ufe0e int Keys LastDirection \u2693\ufe0e Direction LastDirection MoveDirection \u2693\ufe0e Direction MoveDirection OrbitAngleOffset \u2693\ufe0e float OrbitAngleOffset Can be used to override the angular position of the familiar on its orbit based on the initial starting position of the orbit. OrbitDistance \u2693\ufe0e Vector OrbitDistance Defines the orbit of the familiar, if its an orbital. The Vector is interpreted as the dimensions of the circle/oval orbit. Example: Vector ( 110 , 90 ) is the orbital of \"Forever alone\". Player \u2693\ufe0e EntityPlayer Player RoomClearCount \u2693\ufe0e int RoomClearCount ShootDirection \u2693\ufe0e Direction ShootDirection State \u2693\ufe0e int State","title":"EntityFamiliar"},{"location":"EntityFamiliar/#class-entityfamiliar","text":"","title":"Class \"EntityFamiliar\""},{"location":"EntityFamiliar/#functions","text":"","title":"Functions"},{"location":"EntityFamiliar/#addcoins","text":"","title":"AddCoins ()"},{"location":"EntityFamiliar/#addhearts","text":"","title":"AddHearts ()"},{"location":"EntityFamiliar/#addkeys","text":"","title":"AddKeys ()"},{"location":"EntityFamiliar/#addtodelayed","text":"","title":"AddToDelayed ()"},{"location":"EntityFamiliar/#addtofollowers","text":"","title":"AddToFollowers ()"},{"location":"EntityFamiliar/#addtoorbit","text":"","title":"AddToOrbit ()"},{"location":"EntityFamiliar/#fireprojectile","text":"","title":"FireProjectile ()"},{"location":"EntityFamiliar/#followparent","text":"","title":"FollowParent ()"},{"location":"EntityFamiliar/#followposition","text":"","title":"FollowPosition ()"},{"location":"EntityFamiliar/#getorbitdistance","text":"","title":"GetOrbitDistance ()"},{"location":"EntityFamiliar/#variables","text":"","title":"Variables"},{"location":"EntityFamiliar/#state","text":"","title":"State"},{"location":"EntityFamiliar/#movedelayed","text":"","title":"MoveDelayed"},{"location":"EntityFamiliar/#movediagonally","text":"","title":"MoveDiagonally"},{"location":"EntityFamiliar/#pickenemytarget","text":"","title":"PickEnemyTarget"},{"location":"EntityFamiliar/#playchargeanim","text":"","title":"PlayChargeAnim"},{"location":"EntityFamiliar/#playfloatanim","text":"","title":"PlayFloatAnim"},{"location":"EntityFamiliar/#playshootanim","text":"","title":"PlayShootAnim"},{"location":"EntityFamiliar/#recalculateorbitoffset","text":"","title":"RecalculateOrbitOffset"},{"location":"EntityFamiliar/#removefromdelayed","text":"","title":"RemoveFromDelayed"},{"location":"EntityFamiliar/#removefromfollowers","text":"","title":"RemoveFromFollowers"},{"location":"EntityFamiliar/#removefromorbit","text":"","title":"RemoveFromOrbit"},{"location":"EntityFamiliar/#shoot","text":"","title":"Shoot"},{"location":"EntityFamiliar/#coins","text":"","title":"Coins"},{"location":"EntityFamiliar/#firecooldown","text":"","title":"FireCooldown"},{"location":"EntityFamiliar/#headframedelay","text":"","title":"HeadFrameDelay"},{"location":"EntityFamiliar/#hearts","text":"","title":"Hearts"},{"location":"EntityFamiliar/#keys","text":"","title":"Keys"},{"location":"EntityFamiliar/#lastdirection","text":"","title":"LastDirection"},{"location":"EntityFamiliar/#movedirection","text":"","title":"MoveDirection"},{"location":"EntityFamiliar/#orbitangleoffset","text":"","title":"OrbitAngleOffset"},{"location":"EntityFamiliar/#orbitdistance","text":"","title":"OrbitDistance"},{"location":"EntityFamiliar/#player","text":"","title":"Player"},{"location":"EntityFamiliar/#roomclearcount","text":"","title":"RoomClearCount"},{"location":"EntityFamiliar/#shootdirection","text":"","title":"ShootDirection"},{"location":"EntityFamiliar/#state_1","text":"","title":"State"},{"location":"EntityKnife/","text":"Class \"EntityKnife\" \u2693\ufe0e Functions \u2693\ufe0e GetKnifeDistance () \u2693\ufe0e float GetKnifeDistance () GetKnifeVelocity () \u2693\ufe0e float GetKnifeVelocity () GetRenderZ () \u2693\ufe0e int GetRenderZ () IsFlying () \u2693\ufe0e bool IsFlying () Reset () \u2693\ufe0e void Reset () Used for master knifes, to get back to player. SetPathFollowSpeed () \u2693\ufe0e void SetPathFollowSpeed ( float Speed ) Shoot () \u2693\ufe0e void Shoot ( float Charge , float Range ) Variables \u2693\ufe0e Charge \u2693\ufe0e float Charge IsFlying \u2693\ufe0e bool IsFlying MaxDistance \u2693\ufe0e float MaxDistance PathFollowSpeed \u2693\ufe0e float PathFollowSpeed Unit speed of path moving knifes. PathOffset \u2693\ufe0e float PathOffset Rotation \u2693\ufe0e float Rotation RotationOffset \u2693\ufe0e float RotationOffset Scale \u2693\ufe0e float Scale TearFlags \u2693\ufe0e int TearFlags","title":"EntityKnife"},{"location":"EntityKnife/#class-entityknife","text":"","title":"Class \"EntityKnife\""},{"location":"EntityKnife/#functions","text":"","title":"Functions"},{"location":"EntityKnife/#getknifedistance","text":"","title":"GetKnifeDistance ()"},{"location":"EntityKnife/#getknifevelocity","text":"","title":"GetKnifeVelocity ()"},{"location":"EntityKnife/#getrenderz","text":"","title":"GetRenderZ ()"},{"location":"EntityKnife/#isflying","text":"","title":"IsFlying ()"},{"location":"EntityKnife/#reset","text":"","title":"Reset ()"},{"location":"EntityKnife/#setpathfollowspeed","text":"","title":"SetPathFollowSpeed ()"},{"location":"EntityKnife/#shoot","text":"","title":"Shoot ()"},{"location":"EntityKnife/#variables","text":"","title":"Variables"},{"location":"EntityKnife/#charge","text":"","title":"Charge"},{"location":"EntityKnife/#isflying_1","text":"","title":"IsFlying"},{"location":"EntityKnife/#maxdistance","text":"","title":"MaxDistance"},{"location":"EntityKnife/#pathfollowspeed","text":"","title":"PathFollowSpeed"},{"location":"EntityKnife/#pathoffset","text":"","title":"PathOffset"},{"location":"EntityKnife/#rotation","text":"","title":"Rotation"},{"location":"EntityKnife/#rotationoffset","text":"","title":"RotationOffset"},{"location":"EntityKnife/#scale","text":"","title":"Scale"},{"location":"EntityKnife/#tearflags","text":"","title":"TearFlags"},{"location":"EntityLaser/","text":"Class \"EntityLaser\" \u2693\ufe0e Functions \u2693\ufe0e CalculateEndPoint () \u2693\ufe0e static Vector CalculateEndPoint ( Vector Start , Vector Dir , Vector PositionOffset , Entity Parent , float Margin ) Vector () \u2693\ufe0e Vector GetEndPoint () HomingLaser::SampleList () \u2693\ufe0e HomingLaser :: SampleList GetNonOptimizedSamples () GetRenderZ () \u2693\ufe0e int GetRenderZ () HomingLaser::SampleList () \u2693\ufe0e HomingLaser :: SampleList GetSamples () IsCircleLaser () \u2693\ufe0e bool IsCircleLaser () IsSampleLaser () \u2693\ufe0e bool IsSampleLaser () SetActiveRotation () \u2693\ufe0e void SetActiveRotation ( int Delay , float AngleDegrees , float RotationSpd , bool TimeoutComplete ) SetBlackHpDropChance () \u2693\ufe0e void SetBlackHpDropChance ( float Chance ) SetHomingType () \u2693\ufe0e void SetHomingType ( LaserHomingType Type ) SetMaxDistance () \u2693\ufe0e void SetMaxDistance ( float Distance ) SetMultidimensionalTouched () \u2693\ufe0e void SetMultidimensionalTouched ( bool Value ) SetOneHit () \u2693\ufe0e void SetOneHit ( bool Value ) SetTimeout () \u2693\ufe0e void SetTimeout ( int Value ) ShootAngle () \u2693\ufe0e static EntityLaser ShootAngle ( int Variant , Vector SourcePos , float AngleDegrees , int Timeout , Vector PosOffset , Entity Source ) static helper to simplify spawning lasers Variables \u2693\ufe0e Angle \u2693\ufe0e float Angle AngleDegrees \u2693\ufe0e float AngleDegrees BlackHpDropChance \u2693\ufe0e float BlackHpDropChance For maw of void. BounceLaser \u2693\ufe0e Entity BounceLaser CurveStrength \u2693\ufe0e float CurveStrength My Reflection. DisableFollowParent \u2693\ufe0e bool DisableFollowParent Set on children of other lasers, for instance Rubber Cement reflections. Disables m_ParentOffset. EndPoint \u2693\ufe0e Vector EndPoint Will hold the endpoint so it will not need to be recalculated when accessed from extern. FirstUpdate \u2693\ufe0e bool FirstUpdate GridHit \u2693\ufe0e bool GridHit true if laser can be clipped by grid entities and it was clipped at that frame. HomingLaser \u2693\ufe0e HomingLaser HomingLaser HomingType \u2693\ufe0e LaserHomingType HomingType IsActiveRotating \u2693\ufe0e bool IsActiveRotating LaserLength \u2693\ufe0e float LaserLength LastAngleDegrees \u2693\ufe0e float LastAngleDegrees MaxDistance \u2693\ufe0e float MaxDistance Used to trim brimstone for Azazel (0 - off) OneHit \u2693\ufe0e bool OneHit Laser hits only once. ParentOffset \u2693\ufe0e Vector ParentOffset Radius \u2693\ufe0e float Radius RotationDegrees \u2693\ufe0e float RotationDegrees RotationDelay \u2693\ufe0e int RotationDelay RotationSpd \u2693\ufe0e float RotationSpd SampleLaser \u2693\ufe0e bool SampleLaser Shrink \u2693\ufe0e bool Shrink StartAngleDegrees \u2693\ufe0e float StartAngleDegrees Some lasers have a bit of random variation in rotation so they need to remember their starting point. TearFlags \u2693\ufe0e int TearFlags float m_DepthOffset; float GetDepthOffset(void) const { return m_DepthOffset; } void SetDepthOffset(float Value) { m_DepthOffset = Value; } Timeout \u2693\ufe0e int Timeout","title":"EntityLaser"},{"location":"EntityLaser/#class-entitylaser","text":"","title":"Class \"EntityLaser\""},{"location":"EntityLaser/#functions","text":"","title":"Functions"},{"location":"EntityLaser/#calculateendpoint","text":"","title":"CalculateEndPoint ()"},{"location":"EntityLaser/#vector","text":"","title":"Vector ()"},{"location":"EntityLaser/#hominglasersamplelist","text":"","title":"HomingLaser::SampleList ()"},{"location":"EntityLaser/#getrenderz","text":"","title":"GetRenderZ ()"},{"location":"EntityLaser/#hominglasersamplelist_1","text":"","title":"HomingLaser::SampleList ()"},{"location":"EntityLaser/#iscirclelaser","text":"","title":"IsCircleLaser ()"},{"location":"EntityLaser/#issamplelaser","text":"","title":"IsSampleLaser ()"},{"location":"EntityLaser/#setactiverotation","text":"","title":"SetActiveRotation ()"},{"location":"EntityLaser/#setblackhpdropchance","text":"","title":"SetBlackHpDropChance ()"},{"location":"EntityLaser/#sethomingtype","text":"","title":"SetHomingType ()"},{"location":"EntityLaser/#setmaxdistance","text":"","title":"SetMaxDistance ()"},{"location":"EntityLaser/#setmultidimensionaltouched","text":"","title":"SetMultidimensionalTouched ()"},{"location":"EntityLaser/#setonehit","text":"","title":"SetOneHit ()"},{"location":"EntityLaser/#settimeout","text":"","title":"SetTimeout ()"},{"location":"EntityLaser/#shootangle","text":"","title":"ShootAngle ()"},{"location":"EntityLaser/#variables","text":"","title":"Variables"},{"location":"EntityLaser/#angle","text":"","title":"Angle"},{"location":"EntityLaser/#angledegrees","text":"","title":"AngleDegrees"},{"location":"EntityLaser/#blackhpdropchance","text":"","title":"BlackHpDropChance"},{"location":"EntityLaser/#bouncelaser","text":"","title":"BounceLaser"},{"location":"EntityLaser/#curvestrength","text":"","title":"CurveStrength"},{"location":"EntityLaser/#disablefollowparent","text":"","title":"DisableFollowParent"},{"location":"EntityLaser/#endpoint","text":"","title":"EndPoint"},{"location":"EntityLaser/#firstupdate","text":"","title":"FirstUpdate"},{"location":"EntityLaser/#gridhit","text":"","title":"GridHit"},{"location":"EntityLaser/#hominglaser","text":"","title":"HomingLaser"},{"location":"EntityLaser/#homingtype","text":"","title":"HomingType"},{"location":"EntityLaser/#isactiverotating","text":"","title":"IsActiveRotating"},{"location":"EntityLaser/#laserlength","text":"","title":"LaserLength"},{"location":"EntityLaser/#lastangledegrees","text":"","title":"LastAngleDegrees"},{"location":"EntityLaser/#maxdistance","text":"","title":"MaxDistance"},{"location":"EntityLaser/#onehit","text":"","title":"OneHit"},{"location":"EntityLaser/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityLaser/#radius","text":"","title":"Radius"},{"location":"EntityLaser/#rotationdegrees","text":"","title":"RotationDegrees"},{"location":"EntityLaser/#rotationdelay","text":"","title":"RotationDelay"},{"location":"EntityLaser/#rotationspd","text":"","title":"RotationSpd"},{"location":"EntityLaser/#samplelaser","text":"","title":"SampleLaser"},{"location":"EntityLaser/#shrink","text":"","title":"Shrink"},{"location":"EntityLaser/#startangledegrees","text":"","title":"StartAngleDegrees"},{"location":"EntityLaser/#tearflags","text":"","title":"TearFlags"},{"location":"EntityLaser/#timeout","text":"","title":"Timeout"},{"location":"EntityNPC/","text":"Class \"EntityNPC\" \u2693\ufe0e Functions \u2693\ufe0e AnimWalkFrame () \u2693\ufe0e void AnimWalkFrame ( str HorizontalAnim , str VerticalAnim , float SpeedThreshold ) CalcTargetPosition () \u2693\ufe0e Vector CalcTargetPosition ( float DistanceLimit ) CanBeDamagedFromVelocity () \u2693\ufe0e bool CanBeDamagedFromVelocity ( Vector Velocity ) CanReroll () \u2693\ufe0e bool CanReroll () FireBossProjectiles () \u2693\ufe0e EntityProjectile FireBossProjectiles ( int NumProjectiles , Vector TargetPos , float TrajectoryModifier , ProjectileParams Params ) fire a number of projectiles, optionally targeting the player direction is randomized, or slightly randomized when targeting the player FallingAccelModifier can be used to make projectiles fall faster to the ground returns a pointer to the projectile spawned last (useful e.g. when NumProjectiles=1) FireProjectiles () \u2693\ufe0e void FireProjectiles ( Vector Pos , Vector Velocity , ProjectilesMode Mode , ProjectileParams Params ) GetAliveEnemyCount () \u2693\ufe0e int GetAliveEnemyCount () Used to redirect close door enemies to any enemies for friendly npcs. GetBossColorIdx () \u2693\ufe0e int GetBossColorIdx () Notes This will return the boss color idx reduced by 1. To get the actual color as set in bosscolors.xml, add +1 to the result. GetChampionColorIdx () \u2693\ufe0e int GetChampionColorIdx () Notes A list of Champion colors can be found here : ChampionColorIdx GetPlayerTarget () \u2693\ufe0e Entity GetPlayerTarget () if there are no modifiers (best friend) this will return the player IsBoss () \u2693\ufe0e bool IsBoss () IsChampion () \u2693\ufe0e bool IsChampion () KillUnique () \u2693\ufe0e void KillUnique () For entities with unique death animation, like Flush! vs poop enemies. MakeChampion () \u2693\ufe0e void MakeChampion ( int Seed ) Forces a non champion to become a champion, resets hp to max hp. Notes Hard to use because there are millions of possible seeds to input here.Use Morph() to change the champion Color instead! MakeSplat () \u2693\ufe0e EntityEffect MakeSplat ( float Size ) Morph () \u2693\ufe0e bool Morph ( EntityType , int Variant , int SubType , int ChampionColorIdx ) Morph the current entity into another one. ChampionColorIdx can be used to turn the entity into a champion. Use - 1 to turn it into a regular entity. A list of Champion colors can be found here : ChampionColorIdx Example Code This code turns an entity into a gaper. 1 entity : ToNPC () : Morph ( EntityType . ENTITY_GAPER , 0 , 0 , - 1 ) PlaySound () \u2693\ufe0e void PlaySound ( SoundEffect ID , float Volume , int FrameDelay , bool Loop , float Pitch ) QueryNPCsGroup () \u2693\ufe0e EntityList QueryNPCsGroup ( int GroupIdx ) QueryNPCsSpawnerType () \u2693\ufe0e EntityList QueryNPCsSpawnerType ( EntityType SpawnerType , EntityType Type , bool OnlyEnemies ) QueryNPCsType () \u2693\ufe0e EntityList QueryNPCsType ( EntityType Type , int Variant ) ResetPathFinderTarget () \u2693\ufe0e void ResetPathFinderTarget () (Vector () \u2693\ufe0e static ThrowSpider ( Vector Position , Entity Spawner , Vector TargetPos , bool Big , float YOffset ) Variables \u2693\ufe0e CanShutDoors \u2693\ufe0e bool CanShutDoors EntityNPC \u2693\ufe0e EntityNPC ChildNPC EntityRef \u2693\ufe0e Entity EntityRef GroupIdx \u2693\ufe0e int GroupIdx Used to identify multichunks groups. I1 \u2693\ufe0e int I1 general usage ints for ai_ I2 \u2693\ufe0e int I2 same as m_I1 EntityNPC \u2693\ufe0e EntityNPC ParentNPC parent entity, for multi-entity NPCs like Larry Jr. Pathfinder \u2693\ufe0e PathFinder Pathfinder ProjectileCooldown \u2693\ufe0e int ProjectileCooldown projectiles can fire again when it reaches 0 ProjectileDelay \u2693\ufe0e int ProjectileDelay >0: projectile will be fired in n frames Scale \u2693\ufe0e float Scale State \u2693\ufe0e int State StateFrame \u2693\ufe0e int StateFrame V1 \u2693\ufe0e Vector V1 general usage for ai_* functions, initialized to (0,0) V2 \u2693\ufe0e Vector V2 like m_V1, in case we need two of those","title":"EntityNPC"},{"location":"EntityNPC/#class-entitynpc","text":"","title":"Class \"EntityNPC\""},{"location":"EntityNPC/#functions","text":"","title":"Functions"},{"location":"EntityNPC/#animwalkframe","text":"","title":"AnimWalkFrame ()"},{"location":"EntityNPC/#calctargetposition","text":"","title":"CalcTargetPosition ()"},{"location":"EntityNPC/#canbedamagedfromvelocity","text":"","title":"CanBeDamagedFromVelocity ()"},{"location":"EntityNPC/#canreroll","text":"","title":"CanReroll ()"},{"location":"EntityNPC/#firebossprojectiles","text":"","title":"FireBossProjectiles ()"},{"location":"EntityNPC/#fireprojectiles","text":"","title":"FireProjectiles ()"},{"location":"EntityNPC/#getaliveenemycount","text":"","title":"GetAliveEnemyCount ()"},{"location":"EntityNPC/#getbosscoloridx","text":"","title":"GetBossColorIdx ()"},{"location":"EntityNPC/#getchampioncoloridx","text":"","title":"GetChampionColorIdx ()"},{"location":"EntityNPC/#getplayertarget","text":"","title":"GetPlayerTarget ()"},{"location":"EntityNPC/#isboss","text":"","title":"IsBoss ()"},{"location":"EntityNPC/#ischampion","text":"","title":"IsChampion ()"},{"location":"EntityNPC/#killunique","text":"","title":"KillUnique ()"},{"location":"EntityNPC/#makechampion","text":"","title":"MakeChampion ()"},{"location":"EntityNPC/#makesplat","text":"","title":"MakeSplat ()"},{"location":"EntityNPC/#morph","text":"","title":"Morph ()"},{"location":"EntityNPC/#playsound","text":"","title":"PlaySound ()"},{"location":"EntityNPC/#querynpcsgroup","text":"","title":"QueryNPCsGroup ()"},{"location":"EntityNPC/#querynpcsspawnertype","text":"","title":"QueryNPCsSpawnerType ()"},{"location":"EntityNPC/#querynpcstype","text":"","title":"QueryNPCsType ()"},{"location":"EntityNPC/#resetpathfindertarget","text":"","title":"ResetPathFinderTarget ()"},{"location":"EntityNPC/#vector","text":"","title":"(Vector ()"},{"location":"EntityNPC/#variables","text":"","title":"Variables"},{"location":"EntityNPC/#canshutdoors","text":"","title":"CanShutDoors"},{"location":"EntityNPC/#entitynpc","text":"","title":"EntityNPC"},{"location":"EntityNPC/#entityref","text":"","title":"EntityRef"},{"location":"EntityNPC/#groupidx","text":"","title":"GroupIdx"},{"location":"EntityNPC/#i1","text":"","title":"I1"},{"location":"EntityNPC/#i2","text":"","title":"I2"},{"location":"EntityNPC/#entitynpc_1","text":"","title":"EntityNPC"},{"location":"EntityNPC/#pathfinder","text":"","title":"Pathfinder"},{"location":"EntityNPC/#projectilecooldown","text":"","title":"ProjectileCooldown"},{"location":"EntityNPC/#projectiledelay","text":"","title":"ProjectileDelay"},{"location":"EntityNPC/#scale","text":"","title":"Scale"},{"location":"EntityNPC/#state","text":"","title":"State"},{"location":"EntityNPC/#stateframe","text":"","title":"StateFrame"},{"location":"EntityNPC/#v1","text":"","title":"V1"},{"location":"EntityNPC/#v2","text":"","title":"V2"},{"location":"EntityPickup/","text":"Class \"EntityPickup\" \u2693\ufe0e Functions \u2693\ufe0e AppearFast () \u2693\ufe0e void AppearFast () CanReroll () \u2693\ufe0e bool CanReroll () GetCoinValue () \u2693\ufe0e int GetCoinValue () If this is a coin, return its face value, else zero. IsShopItem () \u2693\ufe0e bool IsShopItem () Morph () \u2693\ufe0e void Morph ( EntityType Type , int Variant , int SubType , bool KeepPrice ) PlayDropSound () \u2693\ufe0e void PlayDropSound () PlayPickupSound () \u2693\ufe0e void PlayPickupSound () TryOpenChest () \u2693\ufe0e bool TryOpenChest () Variables \u2693\ufe0e AutoUpdatePrice \u2693\ufe0e bool AutoUpdatePrice Charge \u2693\ufe0e int Charge Price \u2693\ufe0e int Price ShopItemId \u2693\ufe0e int ShopItemId State \u2693\ufe0e int State TheresOptionsPickup \u2693\ufe0e bool TheresOptionsPickup Timeout \u2693\ufe0e int Timeout Touched \u2693\ufe0e bool Touched Wait \u2693\ufe0e int Wait","title":"EntityPickup"},{"location":"EntityPickup/#class-entitypickup","text":"","title":"Class \"EntityPickup\""},{"location":"EntityPickup/#functions","text":"","title":"Functions"},{"location":"EntityPickup/#appearfast","text":"","title":"AppearFast ()"},{"location":"EntityPickup/#canreroll","text":"","title":"CanReroll ()"},{"location":"EntityPickup/#getcoinvalue","text":"","title":"GetCoinValue ()"},{"location":"EntityPickup/#isshopitem","text":"","title":"IsShopItem ()"},{"location":"EntityPickup/#morph","text":"","title":"Morph ()"},{"location":"EntityPickup/#playdropsound","text":"","title":"PlayDropSound ()"},{"location":"EntityPickup/#playpickupsound","text":"","title":"PlayPickupSound ()"},{"location":"EntityPickup/#tryopenchest","text":"","title":"TryOpenChest ()"},{"location":"EntityPickup/#variables","text":"","title":"Variables"},{"location":"EntityPickup/#autoupdateprice","text":"","title":"AutoUpdatePrice"},{"location":"EntityPickup/#charge","text":"","title":"Charge"},{"location":"EntityPickup/#price","text":"","title":"Price"},{"location":"EntityPickup/#shopitemid","text":"","title":"ShopItemId"},{"location":"EntityPickup/#state","text":"","title":"State"},{"location":"EntityPickup/#theresoptionspickup","text":"","title":"TheresOptionsPickup"},{"location":"EntityPickup/#timeout","text":"","title":"Timeout"},{"location":"EntityPickup/#touched","text":"","title":"Touched"},{"location":"EntityPickup/#wait","text":"","title":"Wait"},{"location":"EntityPlayer/","text":"Class \"EntityPlayer\" \u2693\ufe0e Functions \u2693\ufe0e AddBlackHearts () \u2693\ufe0e void AddBlackHearts ( int BlackHearts ) Adds Black hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full black heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddBlackHearts ( 2 ) AddBlueFlies () \u2693\ufe0e Entity AddBlueFlies ( int Amount , Vector Position , Entity Target ) AddBlueSpider () \u2693\ufe0e Entity AddBlueSpider ( Vector Position ) AddBombs () \u2693\ufe0e void AddBombs ( int Amount ) Adds bombs to the player. Remove them with negative numbers. Example Code This code removes 1 bomb from the player. 1 Isaac . GetPlayer ( 0 ) : AddBombs ( - 1 ) AddBoneHearts () \u2693\ufe0e void AddBoneHearts ( int Hearts ) Adds bone hearts to the player. 1 unit is a single bone heart. Remove them with negative numbers. Example Code This code adds 1 bone heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddBoneHearts ( 1 ) AddCacheFlags () \u2693\ufe0e void AddCacheFlags ( CacheFlag CacheFlag ) Will reevaluate the cache flags provided in the next cache reevaluation. AddCard () \u2693\ufe0e void AddCard ( Card Card ) AddCoins () \u2693\ufe0e void AddCoins ( int Amount ) Adds coins to the player. Remove them with negative numbers. Example Code This code adds 1 coin to the player. 1 Isaac . GetPlayer ( 0 ) : AddCoins ( 1 ) AddCollectible () \u2693\ufe0e void AddCollectible ( CollectibleType Type , int Charge , bool AddConsumables ) AddControlsCooldown () \u2693\ufe0e void AddControlsCooldown ( int Cooldown ) AddCostume () \u2693\ufe0e void AddCostume ( Config :: Item Item , bool ItemStateOnly ) AddDeadEyeCharge () \u2693\ufe0e void AddDeadEyeCharge () AddDollarBillEffect () \u2693\ufe0e void AddDollarBillEffect () AddEternalHearts () \u2693\ufe0e void AddEternalHearts ( int EternalHearts ) Adds eternal hearts to the player. 1 unit is half a heart. Remove them with negative numbers. (Note that eternal hearts automatically turn to full hearts, when you have more than one.) Example Code This code adds 1 eternal heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddEternalHearts ( 1 ) AddGoldenBomb () \u2693\ufe0e void AddGoldenBomb () AddGoldenHearts () \u2693\ufe0e void AddGoldenHearts ( int Hearts ) Adds golden hearts to the player. 1 unit is a single gold heart. Remove them with negative numbers. Example Code This code adds 1 golden heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddGoldenHearts ( 1 ) AddGoldenKey () \u2693\ufe0e void AddGoldenKey () AddHearts () \u2693\ufe0e void AddHearts ( int Hearts ) Adds red hearts to the player if there are any empty heart containers. 1 unit is half a heart. Remove health with negative numbers. Example Code This code adds 1 full red heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddkHearts ( 2 ) AddJarFlies () \u2693\ufe0e void AddJarFlies ( int Flies ) AddJarHearts () \u2693\ufe0e void AddJarHearts ( int Hearts ) AddKeys () \u2693\ufe0e void AddKeys ( int Amount ) Adds keys to the player. Remove them with negative numbers. Example Code This code adds 1 key to the player. 1 Isaac . GetPlayer ( 0 ) : AddKeys ( 1 ) AddMaxHearts () \u2693\ufe0e void AddMaxHearts ( int MaxHearts , bool IgnoreKeeper ) Adds heart containers to the player. 2 units is a full heart container. Remove them with negative numbers. Notes It is possible to add a half heart container to the player. This will appear as a regular heart container but can only be filled half-way. Example Code This code adds 1 heart container to the player. 1 Isaac . GetPlayer ( 0 ) : AddMaxHearts ( 2 , true ) Bugs IgnoreKeeper does not appear to work as intended. Max hearts can be added or removed from Keeper regardless of what this boolean is. If Keeper has Greed's Gullet and this boolean is set to false, max hearts cannot be added to Keeper, but can be removed normally. If Keeper has Greed's Gullet and this boolean is set to true, Max hearts can be added or removed from Keeper normally. AddNullCostume () \u2693\ufe0e void AddNullCostume ( Config :: NullItemID NullId ) for Lua AddPill () \u2693\ufe0e void AddPill ( PillColor Pill ) AddPlayerFormCostume () \u2693\ufe0e void AddPlayerFormCostume ( PlayerForm Form ) AddPrettyFly () \u2693\ufe0e void AddPrettyFly () AddSoulHearts () \u2693\ufe0e void AddSoulHearts ( int SoulHearts ) Adds soul hearts to the player. 1 unit is half a heart. Remove them with negative numbers. Example Code This code adds 1 full soul heart to the player. 1 Isaac . GetPlayer ( 0 ) : AddSoulHearts ( 2 ) AddTrinket () \u2693\ufe0e void AddTrinket ( TrinketType Type ) AnimateAppear () \u2693\ufe0e void AnimateAppear () Play the animation that is normally played at the beginning of a stage. AnimateCard () \u2693\ufe0e void AnimateCard ( Card Card , str AnimName ) AnimateCollectible () \u2693\ufe0e void AnimateCollectible ( CollectibleType Collectible , str AnimName , str SpriteAnimName ) AnimateHappy () \u2693\ufe0e void AnimateHappy () thumbs up AnimateLightTravel () \u2693\ufe0e void AnimateLightTravel () end of a stage AnimatePill () \u2693\ufe0e void AnimatePill ( PillColor Pill , str AnimName ) AnimatePitfallIn () \u2693\ufe0e void AnimatePitfallIn () Fall into pitfall. AnimatePitfallOut () \u2693\ufe0e void AnimatePitfallOut () Jump out of pitfall. AnimateSad () \u2693\ufe0e void AnimateSad () oh no! AnimateTeleport () \u2693\ufe0e void AnimateTeleport ( bool Up ) teleport to another room AnimateTrapdoor () \u2693\ufe0e void AnimateTrapdoor () end of a stage AnimateTrinket () \u2693\ufe0e void AnimateTrinket ( TrinketType Trinket , str AnimName , str SpriteAnimName ) AreControlsEnabled () \u2693\ufe0e bool AreControlsEnabled () AreOpposingShootDirectionsPressed () \u2693\ufe0e bool AreOpposingShootDirectionsPressed () Returns the non-zero joystick direction from the most recent movement input, but goes to zero after the player comes to a stop. CanAddCollectible () \u2693\ufe0e bool CanAddCollectible () CanPickBlackHearts () \u2693\ufe0e bool CanPickBlackHearts () returns true if player has room for more black hearts CanPickBoneHearts () \u2693\ufe0e bool CanPickBoneHearts () returns true if player has room for more bone hearts CanPickGoldenHearts () \u2693\ufe0e bool CanPickGoldenHearts () returns true if player has room for more golden hearts CanPickRedHearts () \u2693\ufe0e bool CanPickRedHearts () CanPickSoulHearts () \u2693\ufe0e bool CanPickSoulHearts () returns true if player has room for more soul hearts CanPickupItem () \u2693\ufe0e bool CanPickupItem () Can Player pick up an item right now? CanShoot () \u2693\ufe0e bool CanShoot () CanTurnHead () \u2693\ufe0e bool CanTurnHead () returns true if head should react to keys or false otherwise CheckFamiliar () \u2693\ufe0e void CheckFamiliar ( int FamiliarVariant , int TargetCount , RNG rng ) ClearCostumes () \u2693\ufe0e void ClearCostumes () ClearDeadEyeCharge () \u2693\ufe0e void ClearDeadEyeCharge () ClearTemporaryEffects () \u2693\ufe0e void ClearTemporaryEffects () Will be called when player exits the room. DischargeActiveItem () \u2693\ufe0e void DischargeActiveItem () Sets the charge of your active item to 0 without triggering the active item effect. DonateLuck () \u2693\ufe0e void DonateLuck ( int Luck ) DoZitEffect () \u2693\ufe0e void DoZitEffect ( Vector Direction ) DropPoketItem () \u2693\ufe0e void DropPoketItem ( int PocketNum , Vector Pos ) Drops a held pocketitem (Card, Pill, Rune...) from the given itemslot at the given position. Possible pocketnumbers are [0, 1] Bugs This function is spelled wrong. Removing the pocketitem in slot 0, while having a second item in slot 1 will not update the UI correctly. The second item will still be in the second slot, which will in turn prevent the player from using this card right away. The player needs to switch between cards to fix this. DropTrinket () \u2693\ufe0e void DropTrinket ( Vector DropPos , bool ReplaceTick ) EvaluateItems () \u2693\ufe0e void EvaluateItems () Triggers a cache reevaluation. Will trigger the MC_EVALUATE_CACHE callback. FireBomb () \u2693\ufe0e EntityBomb FireBomb ( Vector Position , Vector Velocity ) FireBrimstone () \u2693\ufe0e EntityLaser FireBrimstone ( Vector Direction ) FireDelayedBrimstone () \u2693\ufe0e EntityLaser FireDelayedBrimstone ( float Angle , Entity Parent ) FireKnife () \u2693\ufe0e EntityKnife FireKnife ( Entity Parent , float RotationOffset , bool CantOverwrite , int SubType ) FireTear () \u2693\ufe0e EntityTear FireTear ( Vector Position , Vector Velocity , bool CanBeEye , bool NoTractorBeam , bool CanTriggerStreakEnd ) This replaces the protected fire_tear() to allow other entities (Such as bombs) to easily shoot tears in the same manner and with all the effects the player does. (Ex. Sad Bombs) FireTechLaser () \u2693\ufe0e EntityLaser FireTechLaser ( Vector Position , LaserOffset OffsetID , Vector Direction , bool LeftEye , bool OneHit ) FireTechXLaser () \u2693\ufe0e EntityLaser FireTechXLaser ( Vector Position , Vector Direction , float Radius ) FlushQueueItem () \u2693\ufe0e bool FlushQueueItem () called after animation is finished, or on special occasions to prevent bugs FullCharge () \u2693\ufe0e bool FullCharge () Fully charges the active item. Returns true if the item was fully charged, false otherwise. If player has battery it will first try to fill first charge slot, then the battery slot. GetActiveCharge () \u2693\ufe0e int GetActiveCharge () Get the current charge of your active item. GetActiveItem () \u2693\ufe0e CollectibleType GetActiveItem () Returns the currently held item. GetActiveSubCharge () \u2693\ufe0e int GetActiveSubCharge () Get the current items subcharge. (Useful for items that charge up over time.) GetActiveWeaponEntity () \u2693\ufe0e Entity GetActiveWeaponEntity () Vector () \u2693\ufe0e Vector GetAimDirection () GetBabySkin () \u2693\ufe0e BabySubType GetBabySkin () GetBatteryCharge () \u2693\ufe0e int GetBatteryCharge () Get the current charge progress of the second charge of your current active item. This bar is only active, when you have the Collectible \"The Battery\" GetBlackHearts () \u2693\ufe0e int GetBlackHearts () This does not return the # of black hearts, this returns the bit mask for which soul hearts are black hearts. GetBombFlags () \u2693\ufe0e int GetBombFlags () GetBombVariant () \u2693\ufe0e EntityBomb :: BombVariant GetBombVariant ( int TearFlags , bool ForceSmallBomb ) Pass tear flags to add extra effects to the bomb visual like burn -> hot bombs, even if player doesn't have Hot Bombs collectible. ForceSmallBomb will override large bomb variants for TEAR_PERSISTENT. GetBoneHearts () \u2693\ufe0e int GetBoneHearts () Returns the number of bone hearts as an integer value. 1 Boneheart = 1. Example Code This code gets the total amount of red heart containers including bone hearts. The bonehearts need to be mulltiplied by 2, since in GetMaxHearts() 2 equals 1 full heart. 1 2 local player = Isaac . GetPlayer ( 0 ) player : GetMaxHearts () + player : GetBoneHearts () * 2 GetCard () \u2693\ufe0e Card GetCard ( int SlotId ) Gets the ID of the card the player is holding in the given itemslot (0 or 1). GetCardRNG () \u2693\ufe0e RNG GetCardRNG ( Card ID ) GetCollectibleCount () \u2693\ufe0e int GetCollectibleCount () GetCollectibleNum () \u2693\ufe0e int GetCollectibleNum ( CollectibleType Type ) GetCollectibleRNG () \u2693\ufe0e RNG GetCollectibleRNG ( CollectibleType ID ) GetCostumeNullPos () \u2693\ufe0e Vector GetCostumeNullPos ( str NullFrameName , bool HeadScale , Vector Direction ) GetDamageCooldown () \u2693\ufe0e int GetDamageCooldown () GetEffectiveMaxHearts () \u2693\ufe0e int GetEffectiveMaxHearts () Returns the amount of Red Hearts the player can contain in their Heart Containers and Bone Hearts. 1 unit is half a red heart. Example: you have 3 red heart container and one bone heart. 6(red) + 2(bone) = 8 GetEffects () \u2693\ufe0e TemporaryEffects GetEffects () GetEternalHearts () \u2693\ufe0e int GetEternalHearts () Returns the amount of eternal hearts the player has. GetExtraLives () \u2693\ufe0e int GetExtraLives () GetFireDirection () \u2693\ufe0e Direction GetFireDirection () GetFlyingOffset () \u2693\ufe0e Vector GetFlyingOffset () GetGoldenHearts () \u2693\ufe0e int GetGoldenHearts () Returns the amount of golden hearts the player has. GetGreedDonationBreakChance () \u2693\ufe0e float GetGreedDonationBreakChance () GetHeadDirection () \u2693\ufe0e Direction GetHeadDirection () GetHeartLimit () \u2693\ufe0e int GetHeartLimit () GetHearts () \u2693\ufe0e int GetHearts () Returns the amount of red hearts the player has inside their heart containers and bone hearts. 1 unit is half a heart. GetItemState () \u2693\ufe0e CollectibleType GetItemState () GetJarFlies () \u2693\ufe0e int GetJarFlies () GetJarHearts () \u2693\ufe0e int GetJarHearts () GetLaserOffset () \u2693\ufe0e Vector GetLaserOffset ( LaserOffset ID , Vector Direction ) GetLastActionTriggers () \u2693\ufe0e int GetLastActionTriggers () GetLastDamageFlags () \u2693\ufe0e int GetLastDamageFlags () EntityRef () \u2693\ufe0e EntityRef GetLastDamageSource () Vector () \u2693\ufe0e Vector GetLastDirection () GetMaxHearts () \u2693\ufe0e int GetMaxHearts () Returns the amount of Heart Containers the player has. 1 unit is half a heart container. GetMaxPoketItems () \u2693\ufe0e int GetMaxPoketItems () Get the number of Pickup items you can carry. (1 on default. 2 with belly button or similar) Bugs This function is spelled wrong. GetMaxTrinkets () \u2693\ufe0e int GetMaxTrinkets () Get the number of trinkets you can carry. (1 on default. 2 with moms purse or similar) GetMovementDirection () \u2693\ufe0e Direction GetMovementDirection () GetMovementInput () \u2693\ufe0e Vector GetMovementInput () GetMovementJoystick () \u2693\ufe0e Vector GetMovementJoystick () Vector () \u2693\ufe0e Vector GetMovementVector () GetMultiShotParams () \u2693\ufe0e MultiShotParams GetMultiShotParams () GetMultiShotPositionVelocity () \u2693\ufe0e PosVel GetMultiShotPositionVelocity ( int LoopIndex , WeaponType Weapon , Vector ShotDirection , float ShotSpeed , MultiShotParams params ) Call this function in a loop with values from 0 to MultiShotParams.NumProjectiles-1 (inclusive) GetName () \u2693\ufe0e str GetName () Returns the name of the player. (Isaac, Cain, Azazel,...) GetNPCTarget () \u2693\ufe0e Entity GetNPCTarget () normally returns the player itself. Can redirect enemy attacks to a different entity such as Best Friend GetNumBlueFlies () \u2693\ufe0e int GetNumBlueFlies () GetNumBlueSpiders () \u2693\ufe0e int GetNumBlueSpiders () GetNumBombs () \u2693\ufe0e int GetNumBombs () GetNumCoins () \u2693\ufe0e int GetNumCoins () GetNumKeys () \u2693\ufe0e int GetNumKeys () GetPill () \u2693\ufe0e PillColor GetPill ( int SlotId ) Gets the ID of the pill the player is holding in the given itemslot (0 or 1). GetPillRNG () \u2693\ufe0e RNG GetPillRNG ( PillEffect ID ) GetPlayerType () \u2693\ufe0e PlayerType GetPlayerType () PlayerPocketItem () \u2693\ufe0e PlayerPocketItem GetPocketItem ( int SlotId ) Get the userdata of the pocketitem (Card,Pill,rune) in a said slot. Bugs This function returns userdata, which cant be processed. It is therefore broken and should not be used! Vector () \u2693\ufe0e Vector GetRecentMovementVector () Returns the joystick direction that drives player movement, taking into account certain modifiers like disabled controls and seed effects. GetShootingInput () \u2693\ufe0e Vector GetShootingInput () GetShootingJoystick () \u2693\ufe0e Vector GetShootingJoystick () GetSmoothBodyRotation () \u2693\ufe0e float GetSmoothBodyRotation () GetSoulHearts () \u2693\ufe0e int GetSoulHearts () Returns the amount of Soul Hearts the player has. 1 unit is half a heart. Notes Black Hearts count toward this total, as the game sees them as soul hearts. GetSubPlayer () \u2693\ufe0e EntityPlayer GetSubPlayer () GetTearHitParams () \u2693\ufe0e TearParams GetTearHitParams ( WeaponType WeaponType , float DamageScale , int TearDisplacement ) Used for tear parameters that are calculated on hit (ex: Tough love, Common cold), DamageScale is used for scale calculation based on damage GetTearMovementInheritance () \u2693\ufe0e Vector GetTearMovementInheritance ( Vector ShotDirection ) GetTearPoisonDamage () \u2693\ufe0e float GetTearPoisonDamage () GetTearRangeModifier () \u2693\ufe0e int GetTearRangeModifier () GetTotalDamageTaken () \u2693\ufe0e int GetTotalDamageTaken () GetTractorBeam () \u2693\ufe0e Entity GetTractorBeam () GetTrinket () \u2693\ufe0e TrinketType GetTrinket ( int TrinketIndex ) Gets the ID of the trinket the player is holding in the given trinketslot (0 or 1). GetTrinketMultiplier () \u2693\ufe0e int GetTrinketMultiplier () GetTrinketRNG () \u2693\ufe0e RNG GetTrinketRNG ( TrinketType ID ) Vector () \u2693\ufe0e Vector GetVelocityBeforeUpdate () GetZodiacEffect () \u2693\ufe0e CollectibleType GetZodiacEffect () HasCollectible () \u2693\ufe0e bool HasCollectible ( CollectibleType Type ) HasFullHearts () \u2693\ufe0e bool HasFullHearts () HasFullHeartsAndSoulHearts () \u2693\ufe0e bool HasFullHeartsAndSoulHearts () HasGoldenBomb () \u2693\ufe0e bool HasGoldenBomb () HasGoldenKey () \u2693\ufe0e bool HasGoldenKey () HasInvincibility () \u2693\ufe0e bool HasInvincibility () returns true when player is in an invincibility state HasPlayerForm () \u2693\ufe0e bool HasPlayerForm ( PlayerForm Form ) HasTimedItem () \u2693\ufe0e bool HasTimedItem () Kept for avoiding modding issues. HasTrinket () \u2693\ufe0e bool HasTrinket ( TrinketType Type ) HasWeaponType () \u2693\ufe0e bool HasWeaponType ( WeaponType WeaponType ) InitBabySkin () \u2693\ufe0e void InitBabySkin () IsBlackHeart () \u2693\ufe0e bool IsBlackHeart ( int Heart ) IsBoneHeart () \u2693\ufe0e bool IsBoneHeart ( int heart ) IsExtraAnimationFinished () \u2693\ufe0e bool IsExtraAnimationFinished () IsFullSpriteRendering () \u2693\ufe0e bool IsFullSpriteRendering () IsHeldItemVisible () \u2693\ufe0e bool IsHeldItemVisible () IsHoldingItem () \u2693\ufe0e bool IsHoldingItem () Is Player holding up an item (card/collectible/etc) IsItemQueueEmpty () \u2693\ufe0e bool IsItemQueueEmpty () IsP2Appearing () \u2693\ufe0e bool IsP2Appearing () IsPosInSpotLight () \u2693\ufe0e bool IsPosInSpotLight ( Vector Position ) IsSubPlayer () \u2693\ufe0e bool IsSubPlayer () This is for players that require multiple player entities, such as the Forgotten (this has nothing to do with co-players!) NeedsCharge () \u2693\ufe0e bool NeedsCharge () PlayExtraAnimation () \u2693\ufe0e void PlayExtraAnimation ( str Animation ) QueueExtraAnimation () \u2693\ufe0e void QueueExtraAnimation ( str Animation ) QueueItem () \u2693\ufe0e void QueueItem ( Config :: Item Item , int Charge , bool Touched ) Add Collectible/Trinket after animation is finished. RemoveBlackHeart () \u2693\ufe0e void RemoveBlackHeart ( int BlackHeart ) RemoveBlueFly () \u2693\ufe0e void RemoveBlueFly () RemoveBlueSpider () \u2693\ufe0e void RemoveBlueSpider () RemoveCollectible () \u2693\ufe0e void RemoveCollectible ( CollectibleType Type ) RemoveCostume () \u2693\ufe0e void RemoveCostume ( Config :: Item Item ) RemoveGoldenBomb () \u2693\ufe0e void RemoveGoldenBomb () RemoveGoldenKey () \u2693\ufe0e void RemoveGoldenKey () RemoveSkinCostume () \u2693\ufe0e void RemoveSkinCostume () RenderBody () \u2693\ufe0e void RenderBody ( Vector position ) RenderGlow () \u2693\ufe0e void RenderGlow ( Vector position ) RenderHead () \u2693\ufe0e void RenderHead ( Vector position ) RenderTop () \u2693\ufe0e void RenderTop ( Vector position ) ReplaceCostumeSprite () \u2693\ufe0e void ReplaceCostumeSprite ( Config :: Item Item , str SpritePath , int SpriteId ) ResetDamageCooldown () \u2693\ufe0e void ResetDamageCooldown () ResetItemState () \u2693\ufe0e void ResetItemState () Made this public so Room transtiions can call this to prevent lock ups. RespawnFamiliars () \u2693\ufe0e void RespawnFamiliars () Revive () \u2693\ufe0e void Revive () revive player SetActiveCharge () \u2693\ufe0e void SetActiveCharge ( int Charge ) SetCard () \u2693\ufe0e void SetCard ( int SlotId , Card Card ) Change the card/rune the player is holding in the given itemslot (0 or 1). SetFullHearts () \u2693\ufe0e void SetFullHearts () SetMinDamageCooldown () \u2693\ufe0e void SetMinDamageCooldown ( int DamageCooldown ) SetPill () \u2693\ufe0e void SetPill ( int SlotId , PillColor Pill ) Change the pill the player is holding in the given itemslot (0 or 1). SetShootingCooldown () \u2693\ufe0e void SetShootingCooldown ( int Cooldown ) SetTargetTrapDoor () \u2693\ufe0e void SetTargetTrapDoor ( GridEntity TrapDoor ) ShootRedCandle () \u2693\ufe0e void ShootRedCandle ( Vector Direction ) for ghost pepper item + poop and farts SpawnMawOfVoid () \u2693\ufe0e EntityLaser SpawnMawOfVoid ( int Timeout ) StopExtraAnimation () \u2693\ufe0e void StopExtraAnimation () SwapActiveItems () \u2693\ufe0e void SwapActiveItems () ThrowBlueSpider () \u2693\ufe0e Entity ThrowBlueSpider ( Vector Position , Vector Target ) TryHoldTrinket () \u2693\ufe0e bool TryHoldTrinket ( TrinketType Type ) Returns true if an active item pickup cooldown is over. returns true if trinket can be added, else false TryRemoveCollectibleCostume () \u2693\ufe0e void TryRemoveCollectibleCostume ( CollectibleType Collectible , bool KeepPersistent ) tries to remove a costume based on some filters TryRemoveNullCostume () \u2693\ufe0e void TryRemoveNullCostume ( Config :: NullItemID NullId ) TryRemoveTrinket () \u2693\ufe0e bool TryRemoveTrinket ( TrinketType Type ) TryRemoveTrinketCostume () \u2693\ufe0e void TryRemoveTrinketCostume ( TrinketType Trinket ) tries to remove a costume based on some filters TryUseKey () \u2693\ufe0e bool TryUseKey () UpdateCanShoot () \u2693\ufe0e void UpdateCanShoot () UseActiveItem () \u2693\ufe0e void UseActiveItem ( CollectibleType Item , bool ShowAnim , bool KeepActiveItem , bool AllowNonMainPlayer , bool ToAddCostume ) UseCard () \u2693\ufe0e void UseCard ( Card Card ) UsePill () \u2693\ufe0e void UsePill ( PillEffect PillEffect , PillColor PillColor ) WillPlayerRevive () \u2693\ufe0e bool WillPlayerRevive () Variables \u2693\ufe0e BabySkin \u2693\ufe0e BabySubType BabySkin P2 Skin section Used to hold the selected skin (in case of glitched baby it will pick a random one) CanFly \u2693\ufe0e bool CanFly Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Can the player fly over rocks and pits? int \u2693\ufe0e int ControllerIndex s32 GetItemStateCooldown( void ) const { return m_ItemStateCooldown; } ControlsCooldown \u2693\ufe0e int ControlsCooldown ControlsEnabled \u2693\ufe0e bool ControlsEnabled Damage \u2693\ufe0e float Damage Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Damage Stat. How much damage do the players tears or other main weapons do? FireDelay \u2693\ufe0e int FireDelay How long until the player can spawn their next tear? EntityDesc \u2693\ufe0e EntityDesc FriendBallEnemy HeadFrameDelay \u2693\ufe0e int HeadFrameDelay ItemHoldCooldown \u2693\ufe0e int ItemHoldCooldown Used for avoiding player get stucked between rocks when switching a flying item with other active item. LaserColor \u2693\ufe0e Color LaserColor Luck \u2693\ufe0e float Luck Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Luck Stat. Better luck generally means better random events. MaxFireDelay \u2693\ufe0e int MaxFireDelay Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Tears Stat. How long between each tear can spawn? MoveSpeed \u2693\ufe0e float MoveSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Speed Stat. How fast can the player move? QueuedItem \u2693\ufe0e QueueItemData QueuedItem item queue for when the player is picking up an item. the item is in effect as soon as the animation is finished and will be removed from the queue. SecondaryActiveItem \u2693\ufe0e ActiveItemDesc SecondaryActiveItem ShotSpeed \u2693\ufe0e float ShotSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the ShotSpeed Stat. How fast does the tear travel when spawned? SpriteScale \u2693\ufe0e Vector SpriteScale TearColor \u2693\ufe0e Color TearColor TearFallingAcceleration \u2693\ufe0e float TearFallingAcceleration TearFallingSpeed \u2693\ufe0e float TearFallingSpeed Player stat - Only change this in a callback to MC_EVALUATE_CACHE. How fast is the tear moving up or down when it spawns? Affects range. TearFlags \u2693\ufe0e int TearFlags Player stat - Only change this in a callback to MC_EVALUATE_CACHE. Various tear flags . Example Code This code makes Isaac's tears spectral. 1 2 3 4 5 local mod : OnEvaluateTearFlags ( player , flag ) player . TearFlags = player . TearFlags | TearFlags . TEAR_SPECTRAL end mod : AddCallback ( ModCallbacks . MC_EVALUATE_CACHE , mod . OnEvaluateTearFlags , CacheFlag . CACHE_TEARFLAG ) TearHeight \u2693\ufe0e float TearHeight Player stat - Only change this in a callback to MC_EVALUATE_CACHE. This is equal to the Range Stat * -1. How high above the ground is the tear when it spawns? Example Code This code gives Isaac a +5 range up. 1 2 3 4 5 6 local mod : OnEvaluateRange ( player , flag ) -- we give - 5 because the TearHeight stat is always negative ; the lower the number - the further the tear travels player . TearHeight = player . TearHeight - 5 end mod : AddCallback ( ModCallbacks . MC_EVALUATE_CACHE , mod . OnEvaluateRange , CacheFlag . CACHE_RANGE ) Vector \u2693\ufe0e Vector TearsOffset","title":"EntityPlayer"},{"location":"EntityPlayer/#class-entityplayer","text":"","title":"Class \"EntityPlayer\""},{"location":"EntityPlayer/#functions","text":"","title":"Functions"},{"location":"EntityPlayer/#addblackhearts","text":"","title":"AddBlackHearts ()"},{"location":"EntityPlayer/#addblueflies","text":"","title":"AddBlueFlies ()"},{"location":"EntityPlayer/#addbluespider","text":"","title":"AddBlueSpider ()"},{"location":"EntityPlayer/#addbombs","text":"","title":"AddBombs ()"},{"location":"EntityPlayer/#addbonehearts","text":"","title":"AddBoneHearts ()"},{"location":"EntityPlayer/#addcacheflags","text":"","title":"AddCacheFlags ()"},{"location":"EntityPlayer/#addcard","text":"","title":"AddCard ()"},{"location":"EntityPlayer/#addcoins","text":"","title":"AddCoins ()"},{"location":"EntityPlayer/#addcollectible","text":"","title":"AddCollectible ()"},{"location":"EntityPlayer/#addcontrolscooldown","text":"","title":"AddControlsCooldown ()"},{"location":"EntityPlayer/#addcostume","text":"","title":"AddCostume ()"},{"location":"EntityPlayer/#adddeadeyecharge","text":"","title":"AddDeadEyeCharge ()"},{"location":"EntityPlayer/#adddollarbilleffect","text":"","title":"AddDollarBillEffect ()"},{"location":"EntityPlayer/#addeternalhearts","text":"","title":"AddEternalHearts ()"},{"location":"EntityPlayer/#addgoldenbomb","text":"","title":"AddGoldenBomb ()"},{"location":"EntityPlayer/#addgoldenhearts","text":"","title":"AddGoldenHearts ()"},{"location":"EntityPlayer/#addgoldenkey","text":"","title":"AddGoldenKey ()"},{"location":"EntityPlayer/#addhearts","text":"","title":"AddHearts ()"},{"location":"EntityPlayer/#addjarflies","text":"","title":"AddJarFlies ()"},{"location":"EntityPlayer/#addjarhearts","text":"","title":"AddJarHearts ()"},{"location":"EntityPlayer/#addkeys","text":"","title":"AddKeys ()"},{"location":"EntityPlayer/#addmaxhearts","text":"","title":"AddMaxHearts ()"},{"location":"EntityPlayer/#addnullcostume","text":"","title":"AddNullCostume ()"},{"location":"EntityPlayer/#addpill","text":"","title":"AddPill ()"},{"location":"EntityPlayer/#addplayerformcostume","text":"","title":"AddPlayerFormCostume ()"},{"location":"EntityPlayer/#addprettyfly","text":"","title":"AddPrettyFly ()"},{"location":"EntityPlayer/#addsoulhearts","text":"","title":"AddSoulHearts ()"},{"location":"EntityPlayer/#addtrinket","text":"","title":"AddTrinket ()"},{"location":"EntityPlayer/#animateappear","text":"","title":"AnimateAppear ()"},{"location":"EntityPlayer/#animatecard","text":"","title":"AnimateCard ()"},{"location":"EntityPlayer/#animatecollectible","text":"","title":"AnimateCollectible ()"},{"location":"EntityPlayer/#animatehappy","text":"","title":"AnimateHappy ()"},{"location":"EntityPlayer/#animatelighttravel","text":"","title":"AnimateLightTravel ()"},{"location":"EntityPlayer/#animatepill","text":"","title":"AnimatePill ()"},{"location":"EntityPlayer/#animatepitfallin","text":"","title":"AnimatePitfallIn ()"},{"location":"EntityPlayer/#animatepitfallout","text":"","title":"AnimatePitfallOut ()"},{"location":"EntityPlayer/#animatesad","text":"","title":"AnimateSad ()"},{"location":"EntityPlayer/#animateteleport","text":"","title":"AnimateTeleport ()"},{"location":"EntityPlayer/#animatetrapdoor","text":"","title":"AnimateTrapdoor ()"},{"location":"EntityPlayer/#animatetrinket","text":"","title":"AnimateTrinket ()"},{"location":"EntityPlayer/#arecontrolsenabled","text":"","title":"AreControlsEnabled ()"},{"location":"EntityPlayer/#areopposingshootdirectionspressed","text":"","title":"AreOpposingShootDirectionsPressed ()"},{"location":"EntityPlayer/#canaddcollectible","text":"","title":"CanAddCollectible ()"},{"location":"EntityPlayer/#canpickblackhearts","text":"","title":"CanPickBlackHearts ()"},{"location":"EntityPlayer/#canpickbonehearts","text":"","title":"CanPickBoneHearts ()"},{"location":"EntityPlayer/#canpickgoldenhearts","text":"","title":"CanPickGoldenHearts ()"},{"location":"EntityPlayer/#canpickredhearts","text":"","title":"CanPickRedHearts ()"},{"location":"EntityPlayer/#canpicksoulhearts","text":"","title":"CanPickSoulHearts ()"},{"location":"EntityPlayer/#canpickupitem","text":"","title":"CanPickupItem ()"},{"location":"EntityPlayer/#canshoot","text":"","title":"CanShoot ()"},{"location":"EntityPlayer/#canturnhead","text":"","title":"CanTurnHead ()"},{"location":"EntityPlayer/#checkfamiliar","text":"","title":"CheckFamiliar ()"},{"location":"EntityPlayer/#clearcostumes","text":"","title":"ClearCostumes ()"},{"location":"EntityPlayer/#cleardeadeyecharge","text":"","title":"ClearDeadEyeCharge ()"},{"location":"EntityPlayer/#cleartemporaryeffects","text":"","title":"ClearTemporaryEffects ()"},{"location":"EntityPlayer/#dischargeactiveitem","text":"","title":"DischargeActiveItem ()"},{"location":"EntityPlayer/#donateluck","text":"","title":"DonateLuck ()"},{"location":"EntityPlayer/#doziteffect","text":"","title":"DoZitEffect ()"},{"location":"EntityPlayer/#droppoketitem","text":"","title":"DropPoketItem ()"},{"location":"EntityPlayer/#droptrinket","text":"","title":"DropTrinket ()"},{"location":"EntityPlayer/#evaluateitems","text":"","title":"EvaluateItems ()"},{"location":"EntityPlayer/#firebomb","text":"","title":"FireBomb ()"},{"location":"EntityPlayer/#firebrimstone","text":"","title":"FireBrimstone ()"},{"location":"EntityPlayer/#firedelayedbrimstone","text":"","title":"FireDelayedBrimstone ()"},{"location":"EntityPlayer/#fireknife","text":"","title":"FireKnife ()"},{"location":"EntityPlayer/#firetear","text":"","title":"FireTear ()"},{"location":"EntityPlayer/#firetechlaser","text":"","title":"FireTechLaser ()"},{"location":"EntityPlayer/#firetechxlaser","text":"","title":"FireTechXLaser ()"},{"location":"EntityPlayer/#flushqueueitem","text":"","title":"FlushQueueItem ()"},{"location":"EntityPlayer/#fullcharge","text":"","title":"FullCharge ()"},{"location":"EntityPlayer/#getactivecharge","text":"","title":"GetActiveCharge ()"},{"location":"EntityPlayer/#getactiveitem","text":"","title":"GetActiveItem ()"},{"location":"EntityPlayer/#getactivesubcharge","text":"","title":"GetActiveSubCharge ()"},{"location":"EntityPlayer/#getactiveweaponentity","text":"","title":"GetActiveWeaponEntity ()"},{"location":"EntityPlayer/#vector","text":"","title":"Vector ()"},{"location":"EntityPlayer/#getbabyskin","text":"","title":"GetBabySkin ()"},{"location":"EntityPlayer/#getbatterycharge","text":"","title":"GetBatteryCharge ()"},{"location":"EntityPlayer/#getblackhearts","text":"","title":"GetBlackHearts ()"},{"location":"EntityPlayer/#getbombflags","text":"","title":"GetBombFlags ()"},{"location":"EntityPlayer/#getbombvariant","text":"","title":"GetBombVariant ()"},{"location":"EntityPlayer/#getbonehearts","text":"","title":"GetBoneHearts ()"},{"location":"EntityPlayer/#getcard","text":"","title":"GetCard ()"},{"location":"EntityPlayer/#getcardrng","text":"","title":"GetCardRNG ()"},{"location":"EntityPlayer/#getcollectiblecount","text":"","title":"GetCollectibleCount ()"},{"location":"EntityPlayer/#getcollectiblenum","text":"","title":"GetCollectibleNum ()"},{"location":"EntityPlayer/#getcollectiblerng","text":"","title":"GetCollectibleRNG ()"},{"location":"EntityPlayer/#getcostumenullpos","text":"","title":"GetCostumeNullPos ()"},{"location":"EntityPlayer/#getdamagecooldown","text":"","title":"GetDamageCooldown ()"},{"location":"EntityPlayer/#geteffectivemaxhearts","text":"","title":"GetEffectiveMaxHearts ()"},{"location":"EntityPlayer/#geteffects","text":"","title":"GetEffects ()"},{"location":"EntityPlayer/#geteternalhearts","text":"","title":"GetEternalHearts ()"},{"location":"EntityPlayer/#getextralives","text":"","title":"GetExtraLives ()"},{"location":"EntityPlayer/#getfiredirection","text":"","title":"GetFireDirection ()"},{"location":"EntityPlayer/#getflyingoffset","text":"","title":"GetFlyingOffset ()"},{"location":"EntityPlayer/#getgoldenhearts","text":"","title":"GetGoldenHearts ()"},{"location":"EntityPlayer/#getgreeddonationbreakchance","text":"","title":"GetGreedDonationBreakChance ()"},{"location":"EntityPlayer/#getheaddirection","text":"","title":"GetHeadDirection ()"},{"location":"EntityPlayer/#getheartlimit","text":"","title":"GetHeartLimit ()"},{"location":"EntityPlayer/#gethearts","text":"","title":"GetHearts ()"},{"location":"EntityPlayer/#getitemstate","text":"","title":"GetItemState ()"},{"location":"EntityPlayer/#getjarflies","text":"","title":"GetJarFlies ()"},{"location":"EntityPlayer/#getjarhearts","text":"","title":"GetJarHearts ()"},{"location":"EntityPlayer/#getlaseroffset","text":"","title":"GetLaserOffset ()"},{"location":"EntityPlayer/#getlastactiontriggers","text":"","title":"GetLastActionTriggers ()"},{"location":"EntityPlayer/#getlastdamageflags","text":"","title":"GetLastDamageFlags ()"},{"location":"EntityPlayer/#entityref","text":"","title":"EntityRef ()"},{"location":"EntityPlayer/#vector_1","text":"","title":"Vector ()"},{"location":"EntityPlayer/#getmaxhearts","text":"","title":"GetMaxHearts ()"},{"location":"EntityPlayer/#getmaxpoketitems","text":"","title":"GetMaxPoketItems ()"},{"location":"EntityPlayer/#getmaxtrinkets","text":"","title":"GetMaxTrinkets ()"},{"location":"EntityPlayer/#getmovementdirection","text":"","title":"GetMovementDirection ()"},{"location":"EntityPlayer/#getmovementinput","text":"","title":"GetMovementInput ()"},{"location":"EntityPlayer/#getmovementjoystick","text":"","title":"GetMovementJoystick ()"},{"location":"EntityPlayer/#vector_2","text":"","title":"Vector ()"},{"location":"EntityPlayer/#getmultishotparams","text":"","title":"GetMultiShotParams ()"},{"location":"EntityPlayer/#getmultishotpositionvelocity","text":"","title":"GetMultiShotPositionVelocity ()"},{"location":"EntityPlayer/#getname","text":"","title":"GetName ()"},{"location":"EntityPlayer/#getnpctarget","text":"","title":"GetNPCTarget ()"},{"location":"EntityPlayer/#getnumblueflies","text":"","title":"GetNumBlueFlies ()"},{"location":"EntityPlayer/#getnumbluespiders","text":"","title":"GetNumBlueSpiders ()"},{"location":"EntityPlayer/#getnumbombs","text":"","title":"GetNumBombs ()"},{"location":"EntityPlayer/#getnumcoins","text":"","title":"GetNumCoins ()"},{"location":"EntityPlayer/#getnumkeys","text":"","title":"GetNumKeys ()"},{"location":"EntityPlayer/#getpill","text":"","title":"GetPill ()"},{"location":"EntityPlayer/#getpillrng","text":"","title":"GetPillRNG ()"},{"location":"EntityPlayer/#getplayertype","text":"","title":"GetPlayerType ()"},{"location":"EntityPlayer/#playerpocketitem","text":"","title":"PlayerPocketItem ()"},{"location":"EntityPlayer/#vector_3","text":"","title":"Vector ()"},{"location":"EntityPlayer/#getshootinginput","text":"","title":"GetShootingInput ()"},{"location":"EntityPlayer/#getshootingjoystick","text":"","title":"GetShootingJoystick ()"},{"location":"EntityPlayer/#getsmoothbodyrotation","text":"","title":"GetSmoothBodyRotation ()"},{"location":"EntityPlayer/#getsoulhearts","text":"","title":"GetSoulHearts ()"},{"location":"EntityPlayer/#getsubplayer","text":"","title":"GetSubPlayer ()"},{"location":"EntityPlayer/#gettearhitparams","text":"","title":"GetTearHitParams ()"},{"location":"EntityPlayer/#gettearmovementinheritance","text":"","title":"GetTearMovementInheritance ()"},{"location":"EntityPlayer/#gettearpoisondamage","text":"","title":"GetTearPoisonDamage ()"},{"location":"EntityPlayer/#gettearrangemodifier","text":"","title":"GetTearRangeModifier ()"},{"location":"EntityPlayer/#gettotaldamagetaken","text":"","title":"GetTotalDamageTaken ()"},{"location":"EntityPlayer/#gettractorbeam","text":"","title":"GetTractorBeam ()"},{"location":"EntityPlayer/#gettrinket","text":"","title":"GetTrinket ()"},{"location":"EntityPlayer/#gettrinketmultiplier","text":"","title":"GetTrinketMultiplier ()"},{"location":"EntityPlayer/#gettrinketrng","text":"","title":"GetTrinketRNG ()"},{"location":"EntityPlayer/#vector_4","text":"","title":"Vector ()"},{"location":"EntityPlayer/#getzodiaceffect","text":"","title":"GetZodiacEffect ()"},{"location":"EntityPlayer/#hascollectible","text":"","title":"HasCollectible ()"},{"location":"EntityPlayer/#hasfullhearts","text":"","title":"HasFullHearts ()"},{"location":"EntityPlayer/#hasfullheartsandsoulhearts","text":"","title":"HasFullHeartsAndSoulHearts ()"},{"location":"EntityPlayer/#hasgoldenbomb","text":"","title":"HasGoldenBomb ()"},{"location":"EntityPlayer/#hasgoldenkey","text":"","title":"HasGoldenKey ()"},{"location":"EntityPlayer/#hasinvincibility","text":"","title":"HasInvincibility ()"},{"location":"EntityPlayer/#hasplayerform","text":"","title":"HasPlayerForm ()"},{"location":"EntityPlayer/#hastimeditem","text":"","title":"HasTimedItem ()"},{"location":"EntityPlayer/#hastrinket","text":"","title":"HasTrinket ()"},{"location":"EntityPlayer/#hasweapontype","text":"","title":"HasWeaponType ()"},{"location":"EntityPlayer/#initbabyskin","text":"","title":"InitBabySkin ()"},{"location":"EntityPlayer/#isblackheart","text":"","title":"IsBlackHeart ()"},{"location":"EntityPlayer/#isboneheart","text":"","title":"IsBoneHeart ()"},{"location":"EntityPlayer/#isextraanimationfinished","text":"","title":"IsExtraAnimationFinished ()"},{"location":"EntityPlayer/#isfullspriterendering","text":"","title":"IsFullSpriteRendering ()"},{"location":"EntityPlayer/#ishelditemvisible","text":"","title":"IsHeldItemVisible ()"},{"location":"EntityPlayer/#isholdingitem","text":"","title":"IsHoldingItem ()"},{"location":"EntityPlayer/#isitemqueueempty","text":"","title":"IsItemQueueEmpty ()"},{"location":"EntityPlayer/#isp2appearing","text":"","title":"IsP2Appearing ()"},{"location":"EntityPlayer/#isposinspotlight","text":"","title":"IsPosInSpotLight ()"},{"location":"EntityPlayer/#issubplayer","text":"","title":"IsSubPlayer ()"},{"location":"EntityPlayer/#needscharge","text":"","title":"NeedsCharge ()"},{"location":"EntityPlayer/#playextraanimation","text":"","title":"PlayExtraAnimation ()"},{"location":"EntityPlayer/#queueextraanimation","text":"","title":"QueueExtraAnimation ()"},{"location":"EntityPlayer/#queueitem","text":"","title":"QueueItem ()"},{"location":"EntityPlayer/#removeblackheart","text":"","title":"RemoveBlackHeart ()"},{"location":"EntityPlayer/#removebluefly","text":"","title":"RemoveBlueFly ()"},{"location":"EntityPlayer/#removebluespider","text":"","title":"RemoveBlueSpider ()"},{"location":"EntityPlayer/#removecollectible","text":"","title":"RemoveCollectible ()"},{"location":"EntityPlayer/#removecostume","text":"","title":"RemoveCostume ()"},{"location":"EntityPlayer/#removegoldenbomb","text":"","title":"RemoveGoldenBomb ()"},{"location":"EntityPlayer/#removegoldenkey","text":"","title":"RemoveGoldenKey ()"},{"location":"EntityPlayer/#removeskincostume","text":"","title":"RemoveSkinCostume ()"},{"location":"EntityPlayer/#renderbody","text":"","title":"RenderBody ()"},{"location":"EntityPlayer/#renderglow","text":"","title":"RenderGlow ()"},{"location":"EntityPlayer/#renderhead","text":"","title":"RenderHead ()"},{"location":"EntityPlayer/#rendertop","text":"","title":"RenderTop ()"},{"location":"EntityPlayer/#replacecostumesprite","text":"","title":"ReplaceCostumeSprite ()"},{"location":"EntityPlayer/#resetdamagecooldown","text":"","title":"ResetDamageCooldown ()"},{"location":"EntityPlayer/#resetitemstate","text":"","title":"ResetItemState ()"},{"location":"EntityPlayer/#respawnfamiliars","text":"","title":"RespawnFamiliars ()"},{"location":"EntityPlayer/#revive","text":"","title":"Revive ()"},{"location":"EntityPlayer/#setactivecharge","text":"","title":"SetActiveCharge ()"},{"location":"EntityPlayer/#setcard","text":"","title":"SetCard ()"},{"location":"EntityPlayer/#setfullhearts","text":"","title":"SetFullHearts ()"},{"location":"EntityPlayer/#setmindamagecooldown","text":"","title":"SetMinDamageCooldown ()"},{"location":"EntityPlayer/#setpill","text":"","title":"SetPill ()"},{"location":"EntityPlayer/#setshootingcooldown","text":"","title":"SetShootingCooldown ()"},{"location":"EntityPlayer/#settargettrapdoor","text":"","title":"SetTargetTrapDoor ()"},{"location":"EntityPlayer/#shootredcandle","text":"","title":"ShootRedCandle ()"},{"location":"EntityPlayer/#spawnmawofvoid","text":"","title":"SpawnMawOfVoid ()"},{"location":"EntityPlayer/#stopextraanimation","text":"","title":"StopExtraAnimation ()"},{"location":"EntityPlayer/#swapactiveitems","text":"","title":"SwapActiveItems ()"},{"location":"EntityPlayer/#throwbluespider","text":"","title":"ThrowBlueSpider ()"},{"location":"EntityPlayer/#tryholdtrinket","text":"","title":"TryHoldTrinket ()"},{"location":"EntityPlayer/#tryremovecollectiblecostume","text":"","title":"TryRemoveCollectibleCostume ()"},{"location":"EntityPlayer/#tryremovenullcostume","text":"","title":"TryRemoveNullCostume ()"},{"location":"EntityPlayer/#tryremovetrinket","text":"","title":"TryRemoveTrinket ()"},{"location":"EntityPlayer/#tryremovetrinketcostume","text":"","title":"TryRemoveTrinketCostume ()"},{"location":"EntityPlayer/#tryusekey","text":"","title":"TryUseKey ()"},{"location":"EntityPlayer/#updatecanshoot","text":"","title":"UpdateCanShoot ()"},{"location":"EntityPlayer/#useactiveitem","text":"","title":"UseActiveItem ()"},{"location":"EntityPlayer/#usecard","text":"","title":"UseCard ()"},{"location":"EntityPlayer/#usepill","text":"","title":"UsePill ()"},{"location":"EntityPlayer/#willplayerrevive","text":"","title":"WillPlayerRevive ()"},{"location":"EntityPlayer/#variables","text":"","title":"Variables"},{"location":"EntityPlayer/#babyskin","text":"","title":"BabySkin"},{"location":"EntityPlayer/#canfly","text":"","title":"CanFly"},{"location":"EntityPlayer/#int","text":"","title":"int"},{"location":"EntityPlayer/#controlscooldown","text":"","title":"ControlsCooldown"},{"location":"EntityPlayer/#controlsenabled","text":"","title":"ControlsEnabled"},{"location":"EntityPlayer/#damage","text":"","title":"Damage"},{"location":"EntityPlayer/#firedelay","text":"","title":"FireDelay"},{"location":"EntityPlayer/#entitydesc","text":"","title":"EntityDesc"},{"location":"EntityPlayer/#headframedelay","text":"","title":"HeadFrameDelay"},{"location":"EntityPlayer/#itemholdcooldown","text":"","title":"ItemHoldCooldown"},{"location":"EntityPlayer/#lasercolor","text":"","title":"LaserColor"},{"location":"EntityPlayer/#luck","text":"","title":"Luck"},{"location":"EntityPlayer/#maxfiredelay","text":"","title":"MaxFireDelay"},{"location":"EntityPlayer/#movespeed","text":"","title":"MoveSpeed"},{"location":"EntityPlayer/#queueditem","text":"","title":"QueuedItem"},{"location":"EntityPlayer/#secondaryactiveitem","text":"","title":"SecondaryActiveItem"},{"location":"EntityPlayer/#shotspeed","text":"","title":"ShotSpeed"},{"location":"EntityPlayer/#spritescale","text":"","title":"SpriteScale"},{"location":"EntityPlayer/#tearcolor","text":"","title":"TearColor"},{"location":"EntityPlayer/#tearfallingacceleration","text":"","title":"TearFallingAcceleration"},{"location":"EntityPlayer/#tearfallingspeed","text":"","title":"TearFallingSpeed"},{"location":"EntityPlayer/#tearflags","text":"","title":"TearFlags"},{"location":"EntityPlayer/#tearheight","text":"","title":"TearHeight"},{"location":"EntityPlayer/#vector_5","text":"","title":"Vector"},{"location":"EntityProjectile/","text":"Class \"EntityProjectile\" \u2693\ufe0e Functions \u2693\ufe0e AddChangeFlags () \u2693\ufe0e void AddChangeFlags ( int Flags ) See ChangeFlags . AddFallingAccel () \u2693\ufe0e void AddFallingAccel ( float Value ) AddFallingSpeed () \u2693\ufe0e void AddFallingSpeed ( float Value ) AddHeight () \u2693\ufe0e void AddHeight ( float Value ) AddProjectileFlags () \u2693\ufe0e void AddProjectileFlags ( int Flags ) Uses ProjectileFlags to define the projectile attributes. AddScale () \u2693\ufe0e void AddScale ( float Value ) Variables \u2693\ufe0e Acceleration \u2693\ufe0e float Acceleration ChangeFlags \u2693\ufe0e int ChangeFlags Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() ChangeTimeout \u2693\ufe0e int ChangeTimeout Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() ChangeVelocity \u2693\ufe0e float ChangeVelocity Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: ProjectileParams() CurvingStrength \u2693\ufe0e float CurvingStrength Damage \u2693\ufe0e float Damage DepthOffset \u2693\ufe0e float DepthOffset FallingAccel \u2693\ufe0e float FallingAccel FallingSpeed \u2693\ufe0e float FallingSpeed Height \u2693\ufe0e float Height Defines the height of a projectile. Height should be a negative value. Default is - 23 . HomingStrength \u2693\ufe0e float HomingStrength ProjectileFlags \u2693\ufe0e int ProjectileFlags Uses ProjectileFlags to define the projectile attributes. Scale \u2693\ufe0e float Scale WiggleFrameOffset \u2693\ufe0e int WiggleFrameOffset","title":"EntityProjectile"},{"location":"EntityProjectile/#class-entityprojectile","text":"","title":"Class \"EntityProjectile\""},{"location":"EntityProjectile/#functions","text":"","title":"Functions"},{"location":"EntityProjectile/#addchangeflags","text":"","title":"AddChangeFlags ()"},{"location":"EntityProjectile/#addfallingaccel","text":"","title":"AddFallingAccel ()"},{"location":"EntityProjectile/#addfallingspeed","text":"","title":"AddFallingSpeed ()"},{"location":"EntityProjectile/#addheight","text":"","title":"AddHeight ()"},{"location":"EntityProjectile/#addprojectileflags","text":"","title":"AddProjectileFlags ()"},{"location":"EntityProjectile/#addscale","text":"","title":"AddScale ()"},{"location":"EntityProjectile/#variables","text":"","title":"Variables"},{"location":"EntityProjectile/#acceleration","text":"","title":"Acceleration"},{"location":"EntityProjectile/#changeflags","text":"","title":"ChangeFlags"},{"location":"EntityProjectile/#changetimeout","text":"","title":"ChangeTimeout"},{"location":"EntityProjectile/#changevelocity","text":"","title":"ChangeVelocity"},{"location":"EntityProjectile/#curvingstrength","text":"","title":"CurvingStrength"},{"location":"EntityProjectile/#damage","text":"","title":"Damage"},{"location":"EntityProjectile/#depthoffset","text":"","title":"DepthOffset"},{"location":"EntityProjectile/#fallingaccel","text":"","title":"FallingAccel"},{"location":"EntityProjectile/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityProjectile/#height","text":"","title":"Height"},{"location":"EntityProjectile/#homingstrength","text":"","title":"HomingStrength"},{"location":"EntityProjectile/#projectileflags","text":"","title":"ProjectileFlags"},{"location":"EntityProjectile/#scale","text":"","title":"Scale"},{"location":"EntityProjectile/#wiggleframeoffset","text":"","title":"WiggleFrameOffset"},{"location":"EntityPtr/","text":"Class \"EntityPtr\" \u2693\ufe0e Functions \u2693\ufe0e EntityPtr () \u2693\ufe0e void EntityPtr ( Entity ) SetReference () \u2693\ufe0e void SetReference ( Entity ref ) Variables \u2693\ufe0e Entity \u2693\ufe0e Entity Ref","title":"EntityPtr"},{"location":"EntityPtr/#class-entityptr","text":"","title":"Class \"EntityPtr\""},{"location":"EntityPtr/#functions","text":"","title":"Functions"},{"location":"EntityPtr/#entityptr","text":"","title":"EntityPtr ()"},{"location":"EntityPtr/#setreference","text":"","title":"SetReference ()"},{"location":"EntityPtr/#variables","text":"","title":"Variables"},{"location":"EntityPtr/#entity","text":"","title":"Entity"},{"location":"EntityRef/","text":"Class \"EntityRef\" \u2693\ufe0e Functions \u2693\ufe0e EntityRef () \u2693\ufe0e void EntityRef ( Entity ) Variables \u2693\ufe0e Entity \u2693\ufe0e Entity Entity optional IsCharmed \u2693\ufe0e bool IsCharmed IsFriendly \u2693\ufe0e bool IsFriendly Position \u2693\ufe0e Vector Position SpawnerType \u2693\ufe0e EntityType SpawnerType SpawnerVariant \u2693\ufe0e int SpawnerVariant Type \u2693\ufe0e EntityType Type Variant \u2693\ufe0e int Variant","title":"EntityRef"},{"location":"EntityRef/#class-entityref","text":"","title":"Class \"EntityRef\""},{"location":"EntityRef/#functions","text":"","title":"Functions"},{"location":"EntityRef/#entityref","text":"","title":"EntityRef ()"},{"location":"EntityRef/#variables","text":"","title":"Variables"},{"location":"EntityRef/#entity","text":"","title":"Entity"},{"location":"EntityRef/#ischarmed","text":"","title":"IsCharmed"},{"location":"EntityRef/#isfriendly","text":"","title":"IsFriendly"},{"location":"EntityRef/#position","text":"","title":"Position"},{"location":"EntityRef/#spawnertype","text":"","title":"SpawnerType"},{"location":"EntityRef/#spawnervariant","text":"","title":"SpawnerVariant"},{"location":"EntityRef/#type","text":"","title":"Type"},{"location":"EntityRef/#variant","text":"","title":"Variant"},{"location":"EntityTear/","text":"Class \"EntityTear\" \u2693\ufe0e Functions \u2693\ufe0e ChangeVariant () \u2693\ufe0e void ChangeVariant ( int NewVariant ) ResetSpriteScale () \u2693\ufe0e void ResetSpriteScale () Resets the tear sprite animation depending on scale. SetDeadEyeIntensity () \u2693\ufe0e void SetDeadEyeIntensity ( float Intensity ) SetKnockbackMultiplier () \u2693\ufe0e void SetKnockbackMultiplier ( float Multiplier ) SetParentOffset () \u2693\ufe0e void SetParentOffset ( Vector Offset ) SetWaitFrames () \u2693\ufe0e void SetWaitFrames ( int Value ) Variables \u2693\ufe0e float \u2693\ufe0e float BaseDamage float \u2693\ufe0e float BaseScale Bounced \u2693\ufe0e bool Bounced true if tear bounced of something CanTriggerStreakEnd \u2693\ufe0e bool CanTriggerStreakEnd For Onan's strak and Dead Eye. ContinueVelocity \u2693\ufe0e Vector ContinueVelocity FallingAcceleration \u2693\ufe0e float FallingAcceleration FallingSpeed \u2693\ufe0e float FallingSpeed Height \u2693\ufe0e float Height HomingFriction \u2693\ufe0e float HomingFriction KnockbackMultiplier \u2693\ufe0e float KnockbackMultiplier ParentOffset \u2693\ufe0e Vector ParentOffset Used for Position adjustment (vs PositionOffset which is a render offset) {: aria-label='Variables' } \u2693\ufe0e Vector PosDisplacement Rotation \u2693\ufe0e float Rotation Scale \u2693\ufe0e float Scale StickDiff \u2693\ufe0e Vector StickDiff StickTarget \u2693\ufe0e Entity StickTarget StickTimer \u2693\ufe0e int StickTimer TearFlags \u2693\ufe0e int TearFlags int \u2693\ufe0e int TearIndex WaitFrames \u2693\ufe0e int WaitFrames","title":"EntityTear"},{"location":"EntityTear/#class-entitytear","text":"","title":"Class \"EntityTear\""},{"location":"EntityTear/#functions","text":"","title":"Functions"},{"location":"EntityTear/#changevariant","text":"","title":"ChangeVariant ()"},{"location":"EntityTear/#resetspritescale","text":"","title":"ResetSpriteScale ()"},{"location":"EntityTear/#setdeadeyeintensity","text":"","title":"SetDeadEyeIntensity ()"},{"location":"EntityTear/#setknockbackmultiplier","text":"","title":"SetKnockbackMultiplier ()"},{"location":"EntityTear/#setparentoffset","text":"","title":"SetParentOffset ()"},{"location":"EntityTear/#setwaitframes","text":"","title":"SetWaitFrames ()"},{"location":"EntityTear/#variables","text":"","title":"Variables"},{"location":"EntityTear/#float","text":"","title":"float"},{"location":"EntityTear/#float_1","text":"","title":"float"},{"location":"EntityTear/#bounced","text":"","title":"Bounced"},{"location":"EntityTear/#cantriggerstreakend","text":"","title":"CanTriggerStreakEnd"},{"location":"EntityTear/#continuevelocity","text":"","title":"ContinueVelocity"},{"location":"EntityTear/#fallingacceleration","text":"","title":"FallingAcceleration"},{"location":"EntityTear/#fallingspeed","text":"","title":"FallingSpeed"},{"location":"EntityTear/#height","text":"","title":"Height"},{"location":"EntityTear/#homingfriction","text":"","title":"HomingFriction"},{"location":"EntityTear/#knockbackmultiplier","text":"","title":"KnockbackMultiplier"},{"location":"EntityTear/#parentoffset","text":"","title":"ParentOffset"},{"location":"EntityTear/#aria-labelvariables","text":"","title":"{: aria-label='Variables' }"},{"location":"EntityTear/#rotation","text":"","title":"Rotation"},{"location":"EntityTear/#scale","text":"","title":"Scale"},{"location":"EntityTear/#stickdiff","text":"","title":"StickDiff"},{"location":"EntityTear/#sticktarget","text":"","title":"StickTarget"},{"location":"EntityTear/#sticktimer","text":"","title":"StickTimer"},{"location":"EntityTear/#tearflags","text":"","title":"TearFlags"},{"location":"EntityTear/#int","text":"","title":"int"},{"location":"EntityTear/#waitframes","text":"","title":"WaitFrames"},{"location":"Font/","text":"Class \"Font\" \u2693\ufe0e Functions \u2693\ufe0e Font () \u2693\ufe0e void Font ( void ) Constructor for the \"Font\" class. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawString () \u2693\ufe0e void DrawString ( String String , float PositionX , float PositionY , KColor RenderColor , u_int BoxWidth , bool Center ) Draws a string of text to the screen Converts UTF8 to UTF16, then draws the string. Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringScaled () \u2693\ufe0e void DrawStringScaled ( str String , float PositionX , float PositionY , float ScaleX , float ScaleY , KColor RenderColor , u_int BoxWidth , bool Center ) Draws a scaled string of text on the screen. Converts UTF8 to UTF16, then draws the string. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringScaled ( \"Hello World!\" , 60 , 50 , 0.5 , 0.5 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringScaledUTF8 () \u2693\ufe0e void DrawStringScaledUTF8 ( str String , float PositionX , float PositionY , float ScaleX , float ScaleY , KColor RenderColor , u_int BoxWidth , bool Center ) Draws a scaled string of Unicode text on the screen. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringScaledUTF8 ( \"Hello World!\" , 60 , 50 , 0.5 , 0.5 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y DrawStringUTF8 () \u2693\ufe0e void DrawStringUTF8 ( str String , float PositionX , float PositionY , KColor RenderColor , u_int BoxWidth , bool Center ) Draws a string of Unicode text to the screen Notes: The BoxWidth and Center parameters can be used for aligning the text: If BoxWidth is zero, the text will be left aligned and the center parameter will be ignored If BoxWidth is NOT zero, and the Center parameter is FALSE, then the text will be right aligned inside the BoxWidth size If BoxWidth is NOT zero, and the center parameter is TRUE, then the text will be centered inside the BoxWidth size Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawStringUTF8 ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y GetBaselineHeight () \u2693\ufe0e u_int GetBaselineHeight () Get the number of pixels from the absolute top of the line to the base of the characters GetCharacterWidth () \u2693\ufe0e u_int GetCharacterWidth ( char Character ) Returns the width of a specific character GetLineHeight () \u2693\ufe0e u_int GetLineHeight () Get the distance in pixels between each line of text GetStringWidth () \u2693\ufe0e u_int GetStringWidth ( str String ) Converts UTF8 to UTF16 and returns string width GetStringWidthUTF8 () \u2693\ufe0e u_int GetStringWidthUTF8 ( str String ) returns string width of a Unicode text. IsLoaded () \u2693\ufe0e bool IsLoaded () Returns whether a font is loaded or not. Load () \u2693\ufe0e bool Load ( str FilePath ) Loads a font. Example Code Example usage. 1 2 3 local f = Font () -- init font object f : Load ( \"font/terminus.fnt\" ) -- load a font into the font object f : DrawString ( \"Hello World!\" , 60 , 50 , KColor ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ), 0 , true ) -- render string with loaded font on position 60 x50y SetMissingCharacter () \u2693\ufe0e void SetMissingCharacter ( u16 MissingCharacter ) Converts UTF8 to UTF16, then draws Sets the missing character to be used by the font (the character used when missing characters are encountered) Unload () \u2693\ufe0e void Unload () Unloads all our data from memory","title":"Font"},{"location":"Font/#class-font","text":"","title":"Class \"Font\""},{"location":"Font/#functions","text":"","title":"Functions"},{"location":"Font/#font","text":"","title":"Font ()"},{"location":"Font/#drawstring","text":"","title":"DrawString ()"},{"location":"Font/#drawstringscaled","text":"","title":"DrawStringScaled ()"},{"location":"Font/#drawstringscaledutf8","text":"","title":"DrawStringScaledUTF8 ()"},{"location":"Font/#drawstringutf8","text":"","title":"DrawStringUTF8 ()"},{"location":"Font/#getbaselineheight","text":"","title":"GetBaselineHeight ()"},{"location":"Font/#getcharacterwidth","text":"","title":"GetCharacterWidth ()"},{"location":"Font/#getlineheight","text":"","title":"GetLineHeight ()"},{"location":"Font/#getstringwidth","text":"","title":"GetStringWidth ()"},{"location":"Font/#getstringwidthutf8","text":"","title":"GetStringWidthUTF8 ()"},{"location":"Font/#isloaded","text":"","title":"IsLoaded ()"},{"location":"Font/#load","text":"","title":"Load ()"},{"location":"Font/#setmissingcharacter","text":"","title":"SetMissingCharacter ()"},{"location":"Font/#unload","text":"","title":"Unload ()"},{"location":"Functions/","text":"Class \"Functions\" \u2693\ufe0e Functions \u2693\ufe0e Game () \u2693\ufe0e Game Game () Returns a Game object. Example Code Example usage: 1 2 Game () : IsPaused () -- returns true if the game is paused MusicManager () \u2693\ufe0e MusicManager MusicManager () Returns a MusicManager object. Example Code Example usage: 1 MusicManager () : Disable () Random () \u2693\ufe0e int Random () Returns a random integer. (0 to 2^32) RandomVector () \u2693\ufe0e Vector RandomVector () Returns a random vector with length 1. Multiply this vector by a number for larger random vectors. SFXManager () \u2693\ufe0e SFXManager SFXManager () Returns a SFXManager object. Example Code Example usage: 1 SFXManager () : Stop ( SoundEffect . SOUND_1UP ) GetPtrHash () \u2693\ufe0e int GetPtrHash ( Objectobject ) Returns a hash-value of the pointer given as an input value. Valid inputs are any Isaac object, including Entity , Room , RNG , Sprite , Game etc. It can be used to easily compare two entities, making equality checks very easy. Example: If you spawn a certain entity, save it in a variable and then compare it to the entity parameter in MC_ENTITY_TAKE_DMG , this comparison will never be true even if both variables refer to the exact same entity in the game. GetPtrHash () turns pointer into a fixed number, which makes comparisons easier. Example Code Example on check if two entities saved in different variables are the same. 1 2 3 4 5 6 7 8 -- don ' t do it like this if entity1 == entity2 then -- this will always be false , because two different references on a pointer are not equal end -- use GetPtrHash () to compare them if GetPtrHash ( entity1 ) == GetPtrHash ( entity2 ) then -- this will be true , when the pointer of both variables point to the same object . end","title":"Functions"},{"location":"Functions/#class-functions","text":"","title":"Class \"Functions\""},{"location":"Functions/#functions","text":"","title":"Functions"},{"location":"Functions/#game","text":"","title":"Game ()"},{"location":"Functions/#musicmanager","text":"","title":"MusicManager ()"},{"location":"Functions/#random","text":"","title":"Random ()"},{"location":"Functions/#randomvector","text":"","title":"RandomVector ()"},{"location":"Functions/#sfxmanager","text":"","title":"SFXManager ()"},{"location":"Functions/#getptrhash","text":"","title":"GetPtrHash ()"},{"location":"Game/","text":"Class \"Game\" \u2693\ufe0e Functions \u2693\ufe0e AddDevilRoomDeal () \u2693\ufe0e void AddDevilRoomDeal () AddEncounteredBoss () \u2693\ufe0e void AddEncounteredBoss ( EntityType Boss , int Variant ) AddPixelation () \u2693\ufe0e void AddPixelation ( int Duration ) Triggers the effect of the \"retro vision\" pill. AddStageWithoutDamage () \u2693\ufe0e void AddStageWithoutDamage () Increases the ingame counter, that keeps track of the stages you cleared without taking damage. (useful for Devil deal manipulations) AddStageWithoutHeartsPicked () \u2693\ufe0e void AddStageWithoutHeartsPicked () Increases the ingame counter, that keeps track of stages you cleared without picking up hearts. AddTreasureRoomsVisited () \u2693\ufe0e void AddTreasureRoomsVisited () BombDamage () \u2693\ufe0e void BombDamage ( Vector Position , float Damage , float Radius , bool LineCheck , Entity Source , int TearFlags , int DamageFlags , bool DamageSource ) BombExplosionEffects () \u2693\ufe0e void BombExplosionEffects ( Vector Position , float Damage , int TearFlags , Color Color , Entity Source , float RadiusMult , bool LineCheck , bool DamageSource ) The complete bomb explosion package: Do damage, spawn boomgraphics, and apply tearflag-based effects. BombTearflagEffects () \u2693\ufe0e void BombTearflagEffects ( Vector Position , float Radius , int TearFlags , Entity Source ) Does bomb-exclusive special effects. ButterBeanFart () \u2693\ufe0e void ButterBeanFart ( Vector Position , float Radius , Entity Source , bool ShowEffect ) ChangeRoom () \u2693\ufe0e void ChangeRoom ( int RoomIndex ) CharmFart () \u2693\ufe0e void CharmFart ( Vector Position , float Radius , Entity Source ) ClearDonationModAngel () \u2693\ufe0e void ClearDonationModAngel () ClearDonationModGreed () \u2693\ufe0e void ClearDonationModGreed () ClearStagesWithoutDamage () \u2693\ufe0e void ClearStagesWithoutDamage () Sets the counter for stages cleared without damage to 0. ClearStagesWithoutHeartsPicked () \u2693\ufe0e void ClearStagesWithoutHeartsPicked () Sets the counter for stages cleared without picking up hearts to 0. Darken () \u2693\ufe0e void Darken ( float Darkness , int Timeout ) DonateAngel () \u2693\ufe0e void DonateAngel ( int Donate ) DonateGreed () \u2693\ufe0e void DonateGreed ( int Donate ) End () \u2693\ufe0e void End ( Ending Ending ) remove entity from the update list (render only) void EnableEntity(Entity e); add entity back to the update list (update + render) void DisableEntity(Entity e); Fadein () \u2693\ufe0e void Fadein ( float Speed ) Fadeout () \u2693\ufe0e void Fadeout ( float Speed , FadeoutTarget Target ) Fart () \u2693\ufe0e void Fart ( Vector Position , float Radius , Entity Source , float FartScale , int FartSubType ) FinishChallenge () \u2693\ufe0e void FinishChallenge () GetAmbush () \u2693\ufe0e Ambush GetAmbush () GetDarknessModifier () \u2693\ufe0e float GetDarknessModifier () GetDevilRoomDeals () \u2693\ufe0e int GetDevilRoomDeals () GetDonationModAngel () \u2693\ufe0e int GetDonationModAngel () Get the value that indicates the angel-counter of a shop-donation maschine. This Stat increases everytime you donate to a shop. A higher number grants a few advantages. GetDonationModGreed () \u2693\ufe0e int GetDonationModGreed () GetFont () \u2693\ufe0e Font GetFont () GetFrameCount () \u2693\ufe0e int GetFrameCount () Returns the number of frames the gameplay is actively running. Pauses are therefore not included! 1 second equals 30 frames. This function therefore works drastically different than Isaac . GetFrameCount () Example Code This code returns hours, minutes, seconds, and milliseconds of the game running actively: 1 2 3 4 5 local curTime = Game () : GetFrameCount () local msecs = curTime % 30 * ( 10 / 3 ) -- turns the millisecond value range from [ 0 to 30 ] to [ 0 to 100 ] local secs = math . floor ( curTime / 30 ) % 60 local mins = math . floor ( curTime / 30 / 60 ) % 60 local hours = math . floor ( curTime / 30 / 60 / 60 ) % 60 GetGreedBossWaveNum () \u2693\ufe0e int GetGreedBossWaveNum () GetGreedWavesNum () \u2693\ufe0e int GetGreedWavesNum () GetItemHistory () \u2693\ufe0e History GetItemHistory () GetItemOverlay () \u2693\ufe0e ItemOverlay GetItemOverlay () GetItemPool () \u2693\ufe0e ItemPool GetItemPool () LevelStage () \u2693\ufe0e void LevelStage ( UserData ) GetLastDevilRoomStage () Notes Since it returns UserData, this function is unusable and therefore broken. GetLastLevelWithDamage () \u2693\ufe0e LevelStage GetLastLevelWithDamage () GetLastLevelWithoutHalfHp () \u2693\ufe0e LevelStage GetLastLevelWithoutHalfHp () GetLevel () \u2693\ufe0e Level GetLevel () GetNearestPlayer () \u2693\ufe0e EntityPlayer GetNearestPlayer ( Vector Pos ) GetNumEncounteredBosses () \u2693\ufe0e int GetNumEncounteredBosses () GetNumPlayers () \u2693\ufe0e int GetNumPlayers () GetPlayer () \u2693\ufe0e EntityPlayer GetPlayer ( int Index ) GetRandomPlayer () \u2693\ufe0e EntityPlayer GetRandomPlayer ( Vector Pos , float Radius ) GetRoom () \u2693\ufe0e Room GetRoom () int () \u2693\ufe0e int GetScreenShakeCountdown () GetSeeds () \u2693\ufe0e Seeds GetSeeds () GetStagesWithoutDamage () \u2693\ufe0e int GetStagesWithoutDamage () GetStagesWithoutHeartsPicked () \u2693\ufe0e int GetStagesWithoutHeartsPicked () GetStateFlag () \u2693\ufe0e bool GetStateFlag ( StateFlag StateFlag ) GetTargetDarkness () \u2693\ufe0e float GetTargetDarkness () GetTreasureRoomVisitCount () \u2693\ufe0e int GetTreasureRoomVisitCount () GetVictoryLap () \u2693\ufe0e int GetVictoryLap () HasEncounteredBoss () \u2693\ufe0e bool HasEncounteredBoss ( EntityType Boss , int Variant ) HasHallucination () \u2693\ufe0e int HasHallucination () IsGreedMode () \u2693\ufe0e bool IsGreedMode () IsPaused () \u2693\ufe0e bool IsPaused () Returns true, if the game is in a state, where the player is unable to input any thing or the game logic is paused. This includes hiving the pause menu opened, being in room transitions/cutscenes or while displaying a \"big book\" animation. MoveToRandomRoom () \u2693\ufe0e void MoveToRandomRoom ( bool IAmErrorRoom , int Seed ) NextVictoryLap () \u2693\ufe0e void NextVictoryLap () Render () \u2693\ufe0e void Render () RerollEnemy () \u2693\ufe0e bool RerollEnemy ( Entity e ) RerollLevelCollectibles () \u2693\ufe0e void RerollLevelCollectibles () RerollLevelPickups () \u2693\ufe0e void RerollLevelPickups ( int Seed ) SetLastDevilRoomStage () \u2693\ufe0e void SetLastDevilRoomStage ( LevelStage Stage ) SetLastLevelWithDamage () \u2693\ufe0e void SetLastLevelWithDamage ( LevelStage Stage ) SetLastLevelWithoutHalfHp () \u2693\ufe0e void SetLastLevelWithoutHalfHp ( LevelStage Stage ) SetStateFlag () \u2693\ufe0e void SetStateFlag ( StateFlag StateFlag , bool Val ) ShakeScreen () \u2693\ufe0e void ShakeScreen ( int Timeout ) ShowFortune () \u2693\ufe0e void ShowFortune () ShowHallucination () \u2693\ufe0e void ShowHallucination ( int FrameCount , Backdrop :: Backdrop HallucinationBackdrop ) Plays the Delirium animation (Static noise intersected with past gameplay fotage), which will also change the background of the current room. Example Code This code emulated the effect of this function by hijacking the Delirious item effect 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local usagetime = - 1 -- stores the last time the effect was called . -- call this function to play the Hallucination effect function playHallucination () local player = Isaac . GetPlayer ( 0 ) usagetime = Game (). TimeCounter player : UseActiveItem ( 510 , false , false , false , false ) -- use the delirious item without applying the costume player : GetEffects () : RemoveCollectibleEffect ( 510 ) -- remove any unwanted side effects of the item usage end -- Removes all spawned NPC entities when activating the function function mod : onFriendlyInit ( npc ) if Game (). TimeCounter - usagetime == 0 then -- only remove enemies that spawned when the effect was called ! npc : Remove () end end mod : AddCallback ( ModCallbacks . MC_POST_NPC_INIT , mod . onFriendlyInit ) Bugs This function does not work and will crash your game on use! ShowRule () \u2693\ufe0e void ShowRule () Spawn () \u2693\ufe0e Entity Spawn ( EntityType Type , int Variant , Vector Position , Vector Velocity , Entity Spawner , int SubType , int Seed ) The game has two spawn functions, Game():Spawn() (this one) and Isaac.Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . Example Code This code spawns a Leech with specific seed. 1 2 3 4 5 6 7 8 9 Game () : Spawn ( EntityType . ENTITY_LEECH , -- Type 0 , -- Variant Game () : GetRoom () : GetCenterPos (), -- Position Vector ( 0 , 0 ), -- Velocity nil , -- Parent 0 , -- SubType Game () : GetRoom () : GetSpawnSeed () -- Seed ( the \"GetSpawnSeed()\" function gets a reproducible seed based on the room , e . g . \"2496979501\" ) ) SpawnEntityDesc () \u2693\ufe0e EntityNPC SpawnEntityDesc ( Entity :: EntityDesc desc , Vector Position , Entity Spawner ) SpawnParticles () \u2693\ufe0e void SpawnParticles ( Vector Pos , EntityEffect :: Variant ParticleType , int NumParticles , float Speed , Color Color , float Height ) StartRoomTransition () \u2693\ufe0e void StartRoomTransition ( int RoomIndex , Direction Direction , RoomTransition :: Animation Animation ) Notes Available Animation types (Discovered by \"ilise rose\" (@yatboim)): 0: (Default) Standard transition, sweeps the room in from a direction 1: (Fade) Fade to black transition, like its used for the \"goto\" - console command 2: (Stage) Pixel out transition, like used for crawlspaces and the trapdoor at the end of floors 3: (Teleport) teleport transition, isaac teleports out of the current room and into the next 5: (Ankh) Same as standard transition 6: (Dead Cat) Same as standard transition 7: (1Up) Same as standard transition 8: (Guppys Collar) Same as standard transition 9: (Judas Shadow) Same as standard transition 10: (Lazarus Rags) Same as standard transition 12: (Glowing Hourglass) Same as standard transition 13: (D7) Same as standard transition 14: (Missing Poster) Same as standard transition Bugs The Direction variable is completely ignored at all times, with the game instead calculating the direction between the two rooms itself for the animation. The two rooms are the current room and the room of the RoomIndex. It has no impact on the doors either. StartStageTransition () \u2693\ufe0e void StartStageTransition ( bool SameStage , StageTransition :: Animation Animation ) Starts a transition animation like it`s playing when entering a trapdoor to switch between stages. Stage Transition types: 0: Standard transition. Removes the playermodel before the pixel fadeout. Then plays the Stage Nightmare animation. The player starts in fetal position after the transition. 1: Standard transition with pixel fadein/out, nightmare cutscene but the player model doesnt get removed and starts in the normal standing position after the transition. >2: Same as 0 Update () \u2693\ufe0e void Update () UpdateStrangeAttractor () \u2693\ufe0e void UpdateStrangeAttractor ( Vector Position ) Variables \u2693\ufe0e BlueWombParTime \u2693\ufe0e int BlueWombParTime BossRushParTime \u2693\ufe0e int BossRushParTime Number of frames of game time. Challenge \u2693\ufe0e Challenge Challenge Difficulty \u2693\ufe0e Difficulty Difficulty Vector \u2693\ufe0e Vector ScreenShakeOffset TimeCounter \u2693\ufe0e int TimeCounter same as FrameCounter but can be modified, mostly used for timed events (bossrush, daily, ...) and not for timestepping","title":"Game"},{"location":"Game/#class-game","text":"","title":"Class \"Game\""},{"location":"Game/#functions","text":"","title":"Functions"},{"location":"Game/#adddevilroomdeal","text":"","title":"AddDevilRoomDeal ()"},{"location":"Game/#addencounteredboss","text":"","title":"AddEncounteredBoss ()"},{"location":"Game/#addpixelation","text":"","title":"AddPixelation ()"},{"location":"Game/#addstagewithoutdamage","text":"","title":"AddStageWithoutDamage ()"},{"location":"Game/#addstagewithoutheartspicked","text":"","title":"AddStageWithoutHeartsPicked ()"},{"location":"Game/#addtreasureroomsvisited","text":"","title":"AddTreasureRoomsVisited ()"},{"location":"Game/#bombdamage","text":"","title":"BombDamage ()"},{"location":"Game/#bombexplosioneffects","text":"","title":"BombExplosionEffects ()"},{"location":"Game/#bombtearflageffects","text":"","title":"BombTearflagEffects ()"},{"location":"Game/#butterbeanfart","text":"","title":"ButterBeanFart ()"},{"location":"Game/#changeroom","text":"","title":"ChangeRoom ()"},{"location":"Game/#charmfart","text":"","title":"CharmFart ()"},{"location":"Game/#cleardonationmodangel","text":"","title":"ClearDonationModAngel ()"},{"location":"Game/#cleardonationmodgreed","text":"","title":"ClearDonationModGreed ()"},{"location":"Game/#clearstageswithoutdamage","text":"","title":"ClearStagesWithoutDamage ()"},{"location":"Game/#clearstageswithoutheartspicked","text":"","title":"ClearStagesWithoutHeartsPicked ()"},{"location":"Game/#darken","text":"","title":"Darken ()"},{"location":"Game/#donateangel","text":"","title":"DonateAngel ()"},{"location":"Game/#donategreed","text":"","title":"DonateGreed ()"},{"location":"Game/#end","text":"","title":"End ()"},{"location":"Game/#fadein","text":"","title":"Fadein ()"},{"location":"Game/#fadeout","text":"","title":"Fadeout ()"},{"location":"Game/#fart","text":"","title":"Fart ()"},{"location":"Game/#finishchallenge","text":"","title":"FinishChallenge ()"},{"location":"Game/#getambush","text":"","title":"GetAmbush ()"},{"location":"Game/#getdarknessmodifier","text":"","title":"GetDarknessModifier ()"},{"location":"Game/#getdevilroomdeals","text":"","title":"GetDevilRoomDeals ()"},{"location":"Game/#getdonationmodangel","text":"","title":"GetDonationModAngel ()"},{"location":"Game/#getdonationmodgreed","text":"","title":"GetDonationModGreed ()"},{"location":"Game/#getfont","text":"","title":"GetFont ()"},{"location":"Game/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Game/#getgreedbosswavenum","text":"","title":"GetGreedBossWaveNum ()"},{"location":"Game/#getgreedwavesnum","text":"","title":"GetGreedWavesNum ()"},{"location":"Game/#getitemhistory","text":"","title":"GetItemHistory ()"},{"location":"Game/#getitemoverlay","text":"","title":"GetItemOverlay ()"},{"location":"Game/#getitempool","text":"","title":"GetItemPool ()"},{"location":"Game/#levelstage","text":"","title":"LevelStage ()"},{"location":"Game/#getlastlevelwithdamage","text":"","title":"GetLastLevelWithDamage ()"},{"location":"Game/#getlastlevelwithouthalfhp","text":"","title":"GetLastLevelWithoutHalfHp ()"},{"location":"Game/#getlevel","text":"","title":"GetLevel ()"},{"location":"Game/#getnearestplayer","text":"","title":"GetNearestPlayer ()"},{"location":"Game/#getnumencounteredbosses","text":"","title":"GetNumEncounteredBosses ()"},{"location":"Game/#getnumplayers","text":"","title":"GetNumPlayers ()"},{"location":"Game/#getplayer","text":"","title":"GetPlayer ()"},{"location":"Game/#getrandomplayer","text":"","title":"GetRandomPlayer ()"},{"location":"Game/#getroom","text":"","title":"GetRoom ()"},{"location":"Game/#int","text":"","title":"int ()"},{"location":"Game/#getseeds","text":"","title":"GetSeeds ()"},{"location":"Game/#getstageswithoutdamage","text":"","title":"GetStagesWithoutDamage ()"},{"location":"Game/#getstageswithoutheartspicked","text":"","title":"GetStagesWithoutHeartsPicked ()"},{"location":"Game/#getstateflag","text":"","title":"GetStateFlag ()"},{"location":"Game/#gettargetdarkness","text":"","title":"GetTargetDarkness ()"},{"location":"Game/#gettreasureroomvisitcount","text":"","title":"GetTreasureRoomVisitCount ()"},{"location":"Game/#getvictorylap","text":"","title":"GetVictoryLap ()"},{"location":"Game/#hasencounteredboss","text":"","title":"HasEncounteredBoss ()"},{"location":"Game/#hashallucination","text":"","title":"HasHallucination ()"},{"location":"Game/#isgreedmode","text":"","title":"IsGreedMode ()"},{"location":"Game/#ispaused","text":"","title":"IsPaused ()"},{"location":"Game/#movetorandomroom","text":"","title":"MoveToRandomRoom ()"},{"location":"Game/#nextvictorylap","text":"","title":"NextVictoryLap ()"},{"location":"Game/#render","text":"","title":"Render ()"},{"location":"Game/#rerollenemy","text":"","title":"RerollEnemy ()"},{"location":"Game/#rerolllevelcollectibles","text":"","title":"RerollLevelCollectibles ()"},{"location":"Game/#rerolllevelpickups","text":"","title":"RerollLevelPickups ()"},{"location":"Game/#setlastdevilroomstage","text":"","title":"SetLastDevilRoomStage ()"},{"location":"Game/#setlastlevelwithdamage","text":"","title":"SetLastLevelWithDamage ()"},{"location":"Game/#setlastlevelwithouthalfhp","text":"","title":"SetLastLevelWithoutHalfHp ()"},{"location":"Game/#setstateflag","text":"","title":"SetStateFlag ()"},{"location":"Game/#shakescreen","text":"","title":"ShakeScreen ()"},{"location":"Game/#showfortune","text":"","title":"ShowFortune ()"},{"location":"Game/#showhallucination","text":"","title":"ShowHallucination ()"},{"location":"Game/#showrule","text":"","title":"ShowRule ()"},{"location":"Game/#spawn","text":"","title":"Spawn ()"},{"location":"Game/#spawnentitydesc","text":"","title":"SpawnEntityDesc ()"},{"location":"Game/#spawnparticles","text":"","title":"SpawnParticles ()"},{"location":"Game/#startroomtransition","text":"","title":"StartRoomTransition ()"},{"location":"Game/#startstagetransition","text":"","title":"StartStageTransition ()"},{"location":"Game/#update","text":"","title":"Update ()"},{"location":"Game/#updatestrangeattractor","text":"","title":"UpdateStrangeAttractor ()"},{"location":"Game/#variables","text":"","title":"Variables"},{"location":"Game/#bluewombpartime","text":"","title":"BlueWombParTime"},{"location":"Game/#bossrushpartime","text":"","title":"BossRushParTime"},{"location":"Game/#challenge","text":"","title":"Challenge"},{"location":"Game/#difficulty","text":"","title":"Difficulty"},{"location":"Game/#vector","text":"","title":"Vector"},{"location":"Game/#timecounter","text":"","title":"TimeCounter"},{"location":"GridEntity/","text":"Class \"GridEntity\" \u2693\ufe0e Functions \u2693\ufe0e Destroy () \u2693\ufe0e bool Destroy ( bool Immediate ) GetGridIndex () \u2693\ufe0e int GetGridIndex () GetSaveState () \u2693\ufe0e Desc GetSaveState () GetType () \u2693\ufe0e GridEntityType GetType () GetVariant () \u2693\ufe0e int GetVariant () Hurt () \u2693\ufe0e bool Hurt ( int Damage ) Init () \u2693\ufe0e void Init ( int Seed ) PostInit () \u2693\ufe0e void PostInit () Render () \u2693\ufe0e void Render ( Vector Offset ) SetType () \u2693\ufe0e void SetType ( GridEntityType Type ) SetVariant () \u2693\ufe0e void SetVariant ( int Variant ) ToDoor () \u2693\ufe0e GridEntityDoor ToDoor () ToPit () \u2693\ufe0e GridEntityPit ToPit () ToPoop () \u2693\ufe0e GridEntityPoop ToPoop () ToPressurePlate () \u2693\ufe0e GridEntityPressurePlate ToPressurePlate () ToRock () \u2693\ufe0e GridEntityRock ToRock () ToSpikes () \u2693\ufe0e GridEntitySpikes ToSpikes () ToTNT () \u2693\ufe0e GridEntityTNT ToTNT () Update () \u2693\ufe0e void Update () Variables \u2693\ufe0e CollisionClass \u2693\ufe0e CollisionClass CollisionClass Desc \u2693\ufe0e Desc Desc Vector \u2693\ufe0e Vector Position returns the position of the grid cell's center point RNG \u2693\ufe0e RNG RNG Sprite \u2693\ufe0e Sprite Sprite State \u2693\ufe0e int State VarData \u2693\ufe0e int VarData","title":"GridEntity"},{"location":"GridEntity/#class-gridentity","text":"","title":"Class \"GridEntity\""},{"location":"GridEntity/#functions","text":"","title":"Functions"},{"location":"GridEntity/#destroy","text":"","title":"Destroy ()"},{"location":"GridEntity/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"GridEntity/#getsavestate","text":"","title":"GetSaveState ()"},{"location":"GridEntity/#gettype","text":"","title":"GetType ()"},{"location":"GridEntity/#getvariant","text":"","title":"GetVariant ()"},{"location":"GridEntity/#hurt","text":"","title":"Hurt ()"},{"location":"GridEntity/#init","text":"","title":"Init ()"},{"location":"GridEntity/#postinit","text":"","title":"PostInit ()"},{"location":"GridEntity/#render","text":"","title":"Render ()"},{"location":"GridEntity/#settype","text":"","title":"SetType ()"},{"location":"GridEntity/#setvariant","text":"","title":"SetVariant ()"},{"location":"GridEntity/#todoor","text":"","title":"ToDoor ()"},{"location":"GridEntity/#topit","text":"","title":"ToPit ()"},{"location":"GridEntity/#topoop","text":"","title":"ToPoop ()"},{"location":"GridEntity/#topressureplate","text":"","title":"ToPressurePlate ()"},{"location":"GridEntity/#torock","text":"","title":"ToRock ()"},{"location":"GridEntity/#tospikes","text":"","title":"ToSpikes ()"},{"location":"GridEntity/#totnt","text":"","title":"ToTNT ()"},{"location":"GridEntity/#update","text":"","title":"Update ()"},{"location":"GridEntity/#variables","text":"","title":"Variables"},{"location":"GridEntity/#collisionclass","text":"","title":"CollisionClass"},{"location":"GridEntity/#desc","text":"","title":"Desc"},{"location":"GridEntity/#vector","text":"","title":"Vector"},{"location":"GridEntity/#rng","text":"","title":"RNG"},{"location":"GridEntity/#sprite","text":"","title":"Sprite"},{"location":"GridEntity/#state","text":"","title":"State"},{"location":"GridEntity/#vardata","text":"","title":"VarData"},{"location":"GridEntityDesc/","text":"Class \"GridEntityDesc\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Initialized \u2693\ufe0e bool Initialized this is will be false when its first created SpawnCount \u2693\ufe0e int SpawnCount how often this entity has been spawned SpawnSeed \u2693\ufe0e int SpawnSeed State \u2693\ufe0e int State Type \u2693\ufe0e GridEntityType Type VarData \u2693\ufe0e int VarData Additional data to be stored, when State is not enought. VariableSeed \u2693\ufe0e int VariableSeed this seed is will be changed based on some events Variant \u2693\ufe0e int Variant","title":"GridEntityDesc"},{"location":"GridEntityDesc/#class-gridentitydesc","text":"","title":"Class \"GridEntityDesc\""},{"location":"GridEntityDesc/#functions","text":"","title":"Functions"},{"location":"GridEntityDesc/#variables","text":"","title":"Variables"},{"location":"GridEntityDesc/#initialized","text":"","title":"Initialized"},{"location":"GridEntityDesc/#spawncount","text":"","title":"SpawnCount"},{"location":"GridEntityDesc/#spawnseed","text":"","title":"SpawnSeed"},{"location":"GridEntityDesc/#state","text":"","title":"State"},{"location":"GridEntityDesc/#type","text":"","title":"Type"},{"location":"GridEntityDesc/#vardata","text":"","title":"VarData"},{"location":"GridEntityDesc/#variableseed","text":"","title":"VariableSeed"},{"location":"GridEntityDesc/#variant","text":"","title":"Variant"},{"location":"GridEntityDoor/","text":"Class \"GridEntityDoor\" \u2693\ufe0e Functions \u2693\ufe0e Bar () \u2693\ufe0e void Bar () CanBlowOpen () \u2693\ufe0e bool CanBlowOpen () Close () \u2693\ufe0e void Close ( bool Force ) Vector () \u2693\ufe0e Vector GetSpriteOffset () IsBusted () \u2693\ufe0e bool IsBusted () IsKeyFamiliarTarget () \u2693\ufe0e bool IsKeyFamiliarTarget () IsLocked () \u2693\ufe0e bool IsLocked () IsOpen () \u2693\ufe0e bool IsOpen () IsRoomType () \u2693\ufe0e bool IsRoomType ( RoomType Type ) IsTargetRoomArcade () \u2693\ufe0e bool IsTargetRoomArcade () Open () \u2693\ufe0e void Open () SetLocked () \u2693\ufe0e void SetLocked ( bool Locked ) SetRoomTypes () \u2693\ufe0e void SetRoomTypes ( RoomType CurrentRoomType , RoomType TargetRoomType ) SpawnDust () \u2693\ufe0e void SpawnDust () TryBlowOpen () \u2693\ufe0e bool TryBlowOpen ( bool FromExplossion ) try to open the door by explosive force, true for success TryUnlock () \u2693\ufe0e bool TryUnlock ( bool Force ) try to unlock the door using a key, true for success Variables \u2693\ufe0e Busted \u2693\ufe0e bool Busted CloseAnimation \u2693\ufe0e str CloseAnimation CurrentRoomType \u2693\ufe0e RoomType CurrentRoomType Direction \u2693\ufe0e Direction Direction ExtraSprite \u2693\ufe0e Sprite ExtraSprite ExtraVisible \u2693\ufe0e bool ExtraVisible LockedAnimation \u2693\ufe0e str LockedAnimation OpenAnimation \u2693\ufe0e str OpenAnimation OpenLockedAnimation \u2693\ufe0e str OpenLockedAnimation PreviousState \u2693\ufe0e State PreviousState PreviousVariant \u2693\ufe0e Variant PreviousVariant Slot \u2693\ufe0e DoorSlot Slot TargetRoomIndex \u2693\ufe0e int TargetRoomIndex TargetRoomType \u2693\ufe0e RoomType TargetRoomType","title":"GridEntityDoor"},{"location":"GridEntityDoor/#class-gridentitydoor","text":"","title":"Class \"GridEntityDoor\""},{"location":"GridEntityDoor/#functions","text":"","title":"Functions"},{"location":"GridEntityDoor/#bar","text":"","title":"Bar ()"},{"location":"GridEntityDoor/#canblowopen","text":"","title":"CanBlowOpen ()"},{"location":"GridEntityDoor/#close","text":"","title":"Close ()"},{"location":"GridEntityDoor/#vector","text":"","title":"Vector ()"},{"location":"GridEntityDoor/#isbusted","text":"","title":"IsBusted ()"},{"location":"GridEntityDoor/#iskeyfamiliartarget","text":"","title":"IsKeyFamiliarTarget ()"},{"location":"GridEntityDoor/#islocked","text":"","title":"IsLocked ()"},{"location":"GridEntityDoor/#isopen","text":"","title":"IsOpen ()"},{"location":"GridEntityDoor/#isroomtype","text":"","title":"IsRoomType ()"},{"location":"GridEntityDoor/#istargetroomarcade","text":"","title":"IsTargetRoomArcade ()"},{"location":"GridEntityDoor/#open","text":"","title":"Open ()"},{"location":"GridEntityDoor/#setlocked","text":"","title":"SetLocked ()"},{"location":"GridEntityDoor/#setroomtypes","text":"","title":"SetRoomTypes ()"},{"location":"GridEntityDoor/#spawndust","text":"","title":"SpawnDust ()"},{"location":"GridEntityDoor/#tryblowopen","text":"","title":"TryBlowOpen ()"},{"location":"GridEntityDoor/#tryunlock","text":"","title":"TryUnlock ()"},{"location":"GridEntityDoor/#variables","text":"","title":"Variables"},{"location":"GridEntityDoor/#busted","text":"","title":"Busted"},{"location":"GridEntityDoor/#closeanimation","text":"","title":"CloseAnimation"},{"location":"GridEntityDoor/#currentroomtype","text":"","title":"CurrentRoomType"},{"location":"GridEntityDoor/#direction","text":"","title":"Direction"},{"location":"GridEntityDoor/#extrasprite","text":"","title":"ExtraSprite"},{"location":"GridEntityDoor/#extravisible","text":"","title":"ExtraVisible"},{"location":"GridEntityDoor/#lockedanimation","text":"","title":"LockedAnimation"},{"location":"GridEntityDoor/#openanimation","text":"","title":"OpenAnimation"},{"location":"GridEntityDoor/#openlockedanimation","text":"","title":"OpenLockedAnimation"},{"location":"GridEntityDoor/#previousstate","text":"","title":"PreviousState"},{"location":"GridEntityDoor/#previousvariant","text":"","title":"PreviousVariant"},{"location":"GridEntityDoor/#slot","text":"","title":"Slot"},{"location":"GridEntityDoor/#targetroomindex","text":"","title":"TargetRoomIndex"},{"location":"GridEntityDoor/#targetroomtype","text":"","title":"TargetRoomType"},{"location":"GridEntityPit/","text":"Class \"GridEntityPit\" \u2693\ufe0e Functions \u2693\ufe0e MakeBridge () \u2693\ufe0e void MakeBridge () SetLadder () \u2693\ufe0e void SetLadder ( bool Value ) UpdateCollision () \u2693\ufe0e void UpdateCollision () void InitSubclass(void); Variables \u2693\ufe0e HasLadder \u2693\ufe0e bool HasLadder","title":"GridEntityPit"},{"location":"GridEntityPit/#class-gridentitypit","text":"","title":"Class \"GridEntityPit\""},{"location":"GridEntityPit/#functions","text":"","title":"Functions"},{"location":"GridEntityPit/#makebridge","text":"","title":"MakeBridge ()"},{"location":"GridEntityPit/#setladder","text":"","title":"SetLadder ()"},{"location":"GridEntityPit/#updatecollision","text":"","title":"UpdateCollision ()"},{"location":"GridEntityPit/#variables","text":"","title":"Variables"},{"location":"GridEntityPit/#hasladder","text":"","title":"HasLadder"},{"location":"GridEntityPoop/","text":"Class \"GridEntityPoop\" \u2693\ufe0e Functions \u2693\ufe0e ReduceSpawnRate () \u2693\ufe0e void ReduceSpawnRate () RespawnRedPoop () \u2693\ufe0e void RespawnRedPoop () Variables \u2693\ufe0e ReducedSpawnRate \u2693\ufe0e bool ReducedSpawnRate ReviveTimer \u2693\ufe0e int ReviveTimer StateAnimation \u2693\ufe0e str StateAnimation UnderPlayer \u2693\ufe0e bool UnderPlayer Used to determine when player moves away from the poop.","title":"GridEntityPoop"},{"location":"GridEntityPoop/#class-gridentitypoop","text":"","title":"Class \"GridEntityPoop\""},{"location":"GridEntityPoop/#functions","text":"","title":"Functions"},{"location":"GridEntityPoop/#reducespawnrate","text":"","title":"ReduceSpawnRate ()"},{"location":"GridEntityPoop/#respawnredpoop","text":"","title":"RespawnRedPoop ()"},{"location":"GridEntityPoop/#variables","text":"","title":"Variables"},{"location":"GridEntityPoop/#reducedspawnrate","text":"","title":"ReducedSpawnRate"},{"location":"GridEntityPoop/#revivetimer","text":"","title":"ReviveTimer"},{"location":"GridEntityPoop/#stateanimation","text":"","title":"StateAnimation"},{"location":"GridEntityPoop/#underplayer","text":"","title":"UnderPlayer"},{"location":"GridEntityPressurePlate/","text":"Class \"GridEntityPressurePlate\" \u2693\ufe0e Functions \u2693\ufe0e Reward () \u2693\ufe0e void Reward () Variables \u2693\ufe0e GreedModeRNG \u2693\ufe0e RNG GreedModeRNG NextGreedAnimation \u2693\ufe0e str NextGreedAnimation TimerPlate \u2693\ufe0e Sprite TimerPlate","title":"GridEntityPressurePlate"},{"location":"GridEntityPressurePlate/#class-gridentitypressureplate","text":"","title":"Class \"GridEntityPressurePlate\""},{"location":"GridEntityPressurePlate/#functions","text":"","title":"Functions"},{"location":"GridEntityPressurePlate/#reward","text":"","title":"Reward ()"},{"location":"GridEntityPressurePlate/#variables","text":"","title":"Variables"},{"location":"GridEntityPressurePlate/#greedmoderng","text":"","title":"GreedModeRNG"},{"location":"GridEntityPressurePlate/#nextgreedanimation","text":"","title":"NextGreedAnimation"},{"location":"GridEntityPressurePlate/#timerplate","text":"","title":"TimerPlate"},{"location":"GridEntityRock/","text":"Class \"GridEntityRock\" \u2693\ufe0e Functions \u2693\ufe0e GetBigRockFrame () \u2693\ufe0e int GetBigRockFrame () GetRubbleAnim () \u2693\ufe0e str GetRubbleAnim () Sprite () \u2693\ufe0e Sprite GetSprite () SetBigRockFrame () \u2693\ufe0e void SetBigRockFrame ( int Frame ) UpdateAnimFrame () \u2693\ufe0e void UpdateAnimFrame () Variables \u2693\ufe0e Anim \u2693\ufe0e str Anim FrameCnt \u2693\ufe0e int FrameCnt RubbleAnim \u2693\ufe0e str RubbleAnim","title":"GridEntityRock"},{"location":"GridEntityRock/#class-gridentityrock","text":"","title":"Class \"GridEntityRock\""},{"location":"GridEntityRock/#functions","text":"","title":"Functions"},{"location":"GridEntityRock/#getbigrockframe","text":"","title":"GetBigRockFrame ()"},{"location":"GridEntityRock/#getrubbleanim","text":"","title":"GetRubbleAnim ()"},{"location":"GridEntityRock/#sprite","text":"","title":"Sprite ()"},{"location":"GridEntityRock/#setbigrockframe","text":"","title":"SetBigRockFrame ()"},{"location":"GridEntityRock/#updateanimframe","text":"","title":"UpdateAnimFrame ()"},{"location":"GridEntityRock/#variables","text":"","title":"Variables"},{"location":"GridEntityRock/#anim","text":"","title":"Anim"},{"location":"GridEntityRock/#framecnt","text":"","title":"FrameCnt"},{"location":"GridEntityRock/#rubbleanim","text":"","title":"RubbleAnim"},{"location":"GridEntitySpikes/","text":"Class \"GridEntitySpikes\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Timeout \u2693\ufe0e int Timeout","title":"GridEntitySpikes"},{"location":"GridEntitySpikes/#class-gridentityspikes","text":"","title":"Class \"GridEntitySpikes\""},{"location":"GridEntitySpikes/#functions","text":"","title":"Functions"},{"location":"GridEntitySpikes/#variables","text":"","title":"Variables"},{"location":"GridEntitySpikes/#timeout","text":"","title":"Timeout"},{"location":"GridEntityTNT/","text":"Class \"GridEntityTNT\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e FrameCnt \u2693\ufe0e int FrameCnt","title":"GridEntityTNT"},{"location":"GridEntityTNT/#class-gridentitytnt","text":"","title":"Class \"GridEntityTNT\""},{"location":"GridEntityTNT/#functions","text":"","title":"Functions"},{"location":"GridEntityTNT/#variables","text":"","title":"Variables"},{"location":"GridEntityTNT/#framecnt","text":"","title":"FrameCnt"},{"location":"Input/","text":"Class \"Input\" \u2693\ufe0e Functions \u2693\ufe0e GetActionValue () \u2693\ufe0e float GetActionValue ( int action , int controllerId ) Returns the current strength in which a button was pressed. This is 0 OR 1 with a keyboard. With a controller, this can be used to get the strength in which you have moved the analog stick in a direction. Example Code This code prints the current \"strength\" in which the analog stick was moved to the left. 1 print ( Input . GetActionValue ( ButtonAction . ACTION_LEFT , 1 )) GetButtonValue () \u2693\ufe0e float GetButtonValue ( int button , int controllerId ) Use \"GetActionValue\" instead of this function. GetMousePosition () \u2693\ufe0e Vector GetMousePosition ( bool gameCoords ) Returns the current mouse position in game coordinates (true) or render coordinates. Example Code This code renders \"Hello World!\" at the current mouse position. 1 2 local mousePos = Isaac . WorldToScreen ( Input . GetMousePosition ( true )) -- transfer game - in screen coordinates Isaac . RenderText ( \"Hello World!\" , mousePos . X , mousePos . Y , 1 , 1 , 1 , 1 ) IsActionPressed () \u2693\ufe0e bool IsActionPressed ( int action , int controllerId ) Returns, if an action-button is pressed or not. An Action-button is any button that got a default function assigned to it. This function will return true, as long the button is held down. List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. 1 2 3 if Input . IsActionPressed ( ButtonAction . ACTION_BOMB , 0 ) then print ( \"bomb Button pressed\" ) end IsActionTriggered () \u2693\ufe0e bool IsActionTriggered ( int action , int controllerId ) Returns, if an action-button was pressed some time before or not. An Action-button is any button that got a default function assigned to it. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all Action enums Example Code This code prints \"bomb Button pressed\", when any button was pressed that is assigned to the \"place bomb\" function. 1 2 3 if Input . IsActionTriggered ( ButtonAction . ACTION_BOMB , 0 ) then print ( \"bomb Button pressed\" ) end IsButtonPressed () \u2693\ufe0e bool IsButtonPressed ( int button , int controllerId ) Returns, if a button is pressed or not. This function will return true, as long the button is held down. List of all key enums Example Code This code prints \"Enter Button pressed\", when the \"Enter\"-Button was pressed. 1 2 3 if Input . IsButtonPressed ( Keyboard . KEY_ENTER , 0 ) then print ( \"Enter Button pressed.\" ) end IsButtonTriggered () \u2693\ufe0e bool IsButtonTriggered ( int button , int controllerId ) Returns, if a button was pressed some time before or not. This functions will only return true, if the button was pressed down. It will no longer return true, after you called this function and try to call it in the next update cycle (for example in the next render cycle). List of all key enums Example Code This code prints \"Enter Button was pressed\", when the \"Enter\"-Button was pressed. 1 2 3 if Input . IsButtonTriggered ( Keyboard . KEY_ENTER , 0 ) then print ( \"Enter Button was pressed.\" ) end IsMouseBtnPressed () \u2693\ufe0e bool IsMouseBtnPressed ( int button ) Returns, if a mousebutton is pressed or not. Left: 0, Right: 1, mousewheel: 2, back button: 3, forward button: 4 Example Code This code prints \"Right Click\", when the \"right\"-mousebutton was pressed. 1 2 3 if Input . IsMouseBtnPressed ( 1 ) then print ( \"Right Click\" ) end","title":"Input"},{"location":"Input/#class-input","text":"","title":"Class \"Input\""},{"location":"Input/#functions","text":"","title":"Functions"},{"location":"Input/#getactionvalue","text":"","title":"GetActionValue ()"},{"location":"Input/#getbuttonvalue","text":"","title":"GetButtonValue ()"},{"location":"Input/#getmouseposition","text":"","title":"GetMousePosition ()"},{"location":"Input/#isactionpressed","text":"","title":"IsActionPressed ()"},{"location":"Input/#isactiontriggered","text":"","title":"IsActionTriggered ()"},{"location":"Input/#isbuttonpressed","text":"","title":"IsButtonPressed ()"},{"location":"Input/#isbuttontriggered","text":"","title":"IsButtonTriggered ()"},{"location":"Input/#ismousebtnpressed","text":"","title":"IsMouseBtnPressed ()"},{"location":"Isaac/","text":"Class \"Isaac\" \u2693\ufe0e Functions \u2693\ufe0e AddCallback () \u2693\ufe0e void AddCallback ( table ref , int callbackId , table callbackFn , int entityId ) AddPillEffectToPool () \u2693\ufe0e int AddPillEffectToPool ( int pillEffect ) returns pill color ConsoleOutput () \u2693\ufe0e void ConsoleOutput ( str text ) Prints a string into the Debug Console Example Code You can use this example as an alternative. 1 2 3 4 5 6 Isaac . ConsoleOutput ( \"This is a Test.\" ) -- Output : This is a Test . -- Alternatively : print ( \"This is a Test.\" ) -- Output : This is a Test . CountBosses () \u2693\ufe0e int CountBosses () Returns the number of bosses in the current room. CountEnemies () \u2693\ufe0e int CountEnemies () Returns the number of enemies in the current room. CountEntities () \u2693\ufe0e int CountEntities ( Entity Spawner , int Type , int Variant , int Subtype ) Returns the number of entities in the current room that fulfill the specified requirements. Spawner refers to an entity object (can be nil ) Type refers to the found entity's type (Can be EntityType . ENTITY_NULL ) Variant and Subtype refer to the found entitys Variant and Subtype (Can be - 1 ) DebugString () \u2693\ufe0e void DebugString ( str str ) Prints a string into the log file. You can find this file here C : \\ Users \\ Jan \\ Documents \\ My Games \\ Binding of Isaac Afterbirth + \\ log . txt Example Code This code prints \"This is a Test.\" in the log.txt file. 1 2 Isaac . DebugString ( \"This is a Test.\" ) -- Output : Lua Debug : This is a Test . ExecuteCommand () \u2693\ufe0e str ExecuteCommand ( str command ) This function executes a debug console command. see [Tutorial] Debug Console for informations on how to use commands. Explode () \u2693\ufe0e void Explode ( Vector pos , Entity source , float damage ) Spawn an explosion on a specified location. FindByType () \u2693\ufe0e table FindByType ( int Type , int Variant , int Subtype , bool Cache , bool IgnoreFriendly ) Returns entities based on Type, Variant, Subtype. If Variant and/or Subtype is -1 then everything is includedUse Cache flag for multiple calls per frame. FindInRadius () \u2693\ufe0e table FindInRadius ( Vector Position , float Radius , int Partitions ) Returns entities in range of Radius from Position filtered by Partitions mask (see EntityPartition enum ) (include all = 0xffffffff) This function does not return the entities sorted by nearest first, but based on the order they were loaded. GetCardIdByName () \u2693\ufe0e int GetCardIdByName ( str cardHudName ) Returns the CardID based on its hud value. (File: pocketitems.xml) Notes The name of this function is misleading, this function will only work with the hud value of a card and not the name of a card. Example Code This code gets the CardID of XVI - The Tower. 1 2 Isaac . GetCardIdByName ( \"16_TheTower\" ) -- Returns : 17 GetChallenge () \u2693\ufe0e int GetChallenge () Returns the ID of a challenge the player is currently in. Returns 0 if the player is not playing any challenge. GetChallengeIdByName () \u2693\ufe0e int GetChallengeIdByName ( str challengeName ) Returns the ChallengeID of a challenge based on its name. (File: challenges.xml) Example Code This code gets the ChallengeID of Aprils fool. 1 2 Isaac . GetChallengeIdByName ( \"Aprils fool\" ) -- Returns : 32 GetCostumeIdByPath () \u2693\ufe0e int GetCostumeIdByPath ( str path ) Returns the CostumeID of a costume based on its file path. (File: costumes2.xml) Example Code This code gets the CostumeID of the Poop transformation costume. 1 2 Isaac . GetCostumeIdByPath ( \"gfx/characters/n027_Transformation_Poop.anm2\" ) -- Returns : 27 GetCurseIdByName () \u2693\ufe0e int GetCurseIdByName ( str curseName ) Returns the CurseID of a curse based on its name. (File: curses.xml) Example Code This code gets the CurseID of Curse of the Unknown. 1 2 Isaac . GetCurseIdByName ( \"Curse of the Unknown\" ) -- Returns : 4 GetEntityTypeByName () \u2693\ufe0e int GetEntityTypeByName ( str entityName ) Returns the EntityType of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the EntityType of Flaming Gaper. 1 2 Isaac . GetEntityTypeByName ( \"Flaming Gaper\" ) -- Returns : 10 GetEntityVariantByName () \u2693\ufe0e int GetEntityVariantByName ( str entityName ) Returns the variant of an entity based on its name. (File: entities2.xml) Notes There is no SubType version of this function. Example Code This code gets the variant of Flaming Gaper. 1 2 Isaac . GetEntityVariantByName ( \"Flaming Gaper\" ) -- Returns : 2 GetFrameCount () \u2693\ufe0e int GetFrameCount () Returns the amount of frames the game as a whole is running. The counter increases even when the game is paused or when you are in the main menu! 1 second equals roughtly 60 frames. This function therefore works drastically different than Game () : GetFrameCount () GetFreeNearPosition () \u2693\ufe0e Vector GetFreeNearPosition ( Vector pos , float step ) GetItemConfig () \u2693\ufe0e Config GetItemConfig () Returns the ItemConfig::Config object. GetItemIdByName () \u2693\ufe0e int GetItemIdByName ( str itemName ) Returns the ItemID of a Collectible. (File: items.xml) Example Code This code gets the ItemID of Brimstone. 1 2 Isaac . GetItemIdByName ( \"Brimstone\" ) -- Returns : 118 GetMusicIdByName () \u2693\ufe0e int GetMusicIdByName ( str musicName ) Returns the MusicID of a music track. (File: music.xml) Example Code This code gets the MusicID of the Title Screen. 1 2 Isaac . GetMusicIdByName ( \"Title Screen\" ) -- Returns : 61 GetPillEffectByName () \u2693\ufe0e int GetPillEffectByName ( str pillEffect ) Returns the PillEffectID based on its name. (File: pocketitems.xml) Example Code This code gets the PillEffectID of I can see forever!. 1 2 Isaac . GetPillEffectByName ( \"I can see forever!\" ) -- Returns : 23 GetPlayer () \u2693\ufe0e EntityPlayer GetPlayer ( int playerId ) Returns the EntityPlayer which the user is controlling. 0 = Main player. Higher numbers refer to coop babies. Example Code 1 Isaac . GetPlayer ( 0 ) GetPlayerTypeByName () \u2693\ufe0e int GetPlayerTypeByName ( str playerName ) Returns the PlayerType of a character based on its name. (File: players.xml) Example Code This code gets the PlayerType of Azazel. 1 2 Isaac . GetPlayerTypeByName ( \"Azazel\" ) -- Returns : 7 GetRandomPosition () \u2693\ufe0e Vector GetRandomPosition () Returns a random position inside the current room. The Return value is a Vector containing the position in world coordinates. GetRoomEntities () \u2693\ufe0e table GetRoomEntities () Returns a table containing all entities in the room. GetSoundIdByName () \u2693\ufe0e int GetSoundIdByName ( str soundName ) Returns the SoundEffectID of a sound based on its name. (File: sounds.xml) Example Code This code gets the SoundEffectID of a sound named \"Custom Sound Effect\" 1 Isaac . GetSoundIdByName ( \"Custom Sound Effect\" ) GetTextWidth () \u2693\ufe0e int GetTextWidth ( str str ) Returns the width of the given string in pixels based on the \"terminus8\" font (same font as used in Isaac.RenderText()) GetTime () \u2693\ufe0e int GetTime () Returns the current game time in milliseconds. This includes pauses! GetTrinketIdByName () \u2693\ufe0e int GetTrinketIdByName ( str trinketName ) Returns the TrinketType of a trinket based on its name. (File: items.xml) Example Code This code gets the TrinketType of Lucky Toe. 1 2 Isaac . GetTrinketIdByName ( \"Lucky Toe\" ) -- Returns : 42 GridSpawn () \u2693\ufe0e GridEntity GridSpawn ( GridEntity gridEntityType , int Variant , Vector position , bool forced ) Spawn a GridEntity at the given position (world coordinates). Bugs forced has no effect and will NOT override the grid entity at the given location. Remove a grid entity at the given location if nessesary before spawning something again. HasModData () \u2693\ufe0e bool HasModData ( table ref ) Returns \"true\" if your mod has Data stored using the \"SaveModData()\" function. Aka. if there is a \"saveX.dat\" file in your mod folder.There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. WorldToScreenDistance () \u2693\ufe0e Vector WorldToScreenDistance ( Vector pos ) RegisterMod () \u2693\ufe0e void RegisterMod ( table ref , str modName , int apiVersion ) Method to define a mod in the game. THIS NEEDS TO BE DEFINED IN EVERY MOD! RemoveCallback () \u2693\ufe0e void RemoveCallback ( table ref , int callbackId , table callbackFn ) RemoveModData () \u2693\ufe0e void RemoveModData ( table ref ) Deletes the stored \"saveX.dat\" file if it exists. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. RenderScaledText () \u2693\ufe0e void RenderScaledText ( str str , float X , float Y , float ScaleX , float ScaleY , float R , float G , float B , float A ) Renders a scaled text on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). ScaleX, ScaleY, R ,G ,B and A need to be between [0,1]. Some scale values can cause the font to display deformed and pixelated. RenderText () \u2693\ufe0e void RenderText ( str str , float X , float Y , float R , float G , float B , float A ) Renders a text with the default size on the Screen. X and Y coordinates need to be in screen coordinates ( x[0,~500) y [0,~350) ). R,G,B and A need to be between [0,1]. SaveModData () \u2693\ufe0e void SaveModData ( table ref , str data ) Stores a JSON array/table in a \"saveX.dat\" file. The stored Data persists thruout resets and game restart, so its perfect to store persistent data. There are 3 \"saveX.dat\" files, one per Savegame. They are stored in the mod's folder next to the \"main.lua\" file. The number indicates the savegame it corresponds to. The number will be determined automatically by the game. ScreenToWorld () \u2693\ufe0e Vector ScreenToWorld ( Vector pos ) Transfers Screen (aka. Window coordinates) into Worldcoordinates. This can be used to get a specific location in the room in World coordnates The World coordinate system is x[0,inf) y[0,inf). ScreenToWorldDistance () \u2693\ufe0e Vector ScreenToWorldDistance ( Vector pos ) Spawn () \u2693\ufe0e Entity Spawn ( int entityType , int entityVariant , int entitySubtype , Vector position , Vector velocity , Entity Spawner ) Spawns the defined entity at the given location. If the position is not free, it spawns it in the nearest free position. There are two spawn functions. Isaac.Spawn() and Game():Spawn() . If you need to spawn something with a specific seed, then you use Game():Spawn() . If you need to spawn something with a randomly generated seed, then use Isaac.Spawn() . Most of the time, you will probably want to use Isaac.Spawn() . WorldToRenderPosition () \u2693\ufe0e Vector WorldToRenderPosition ( Vector pos ) Transfers world (aka. game coordinates) into Rendercoordinates. This can be used to render things at fixed positions in a room. The Render coordinate system is x[0,inf) y[0,inf). It defines the Position on the rendering-plane in the current room. WorldToScreen () \u2693\ufe0e Vector WorldToScreen ( Vector pos ) Transfers world (aka. game coordinates) into Screen (aka. Window) coordinates. This can be used to render things next to an entity. The Screen coordinate system is x[0,inf) y[0,inf). Normally, it goes till ~500x ~300y. The return vector contains integer values or numbers ending with .5 WorldToScreenDistance () \u2693\ufe0e Vector WorldToScreenDistance ( Vector pos )","title":"Isaac"},{"location":"Isaac/#class-isaac","text":"","title":"Class \"Isaac\""},{"location":"Isaac/#functions","text":"","title":"Functions"},{"location":"Isaac/#addcallback","text":"","title":"AddCallback ()"},{"location":"Isaac/#addpilleffecttopool","text":"","title":"AddPillEffectToPool ()"},{"location":"Isaac/#consoleoutput","text":"","title":"ConsoleOutput ()"},{"location":"Isaac/#countbosses","text":"","title":"CountBosses ()"},{"location":"Isaac/#countenemies","text":"","title":"CountEnemies ()"},{"location":"Isaac/#countentities","text":"","title":"CountEntities ()"},{"location":"Isaac/#debugstring","text":"","title":"DebugString ()"},{"location":"Isaac/#executecommand","text":"","title":"ExecuteCommand ()"},{"location":"Isaac/#explode","text":"","title":"Explode ()"},{"location":"Isaac/#findbytype","text":"","title":"FindByType ()"},{"location":"Isaac/#findinradius","text":"","title":"FindInRadius ()"},{"location":"Isaac/#getcardidbyname","text":"","title":"GetCardIdByName ()"},{"location":"Isaac/#getchallenge","text":"","title":"GetChallenge ()"},{"location":"Isaac/#getchallengeidbyname","text":"","title":"GetChallengeIdByName ()"},{"location":"Isaac/#getcostumeidbypath","text":"","title":"GetCostumeIdByPath ()"},{"location":"Isaac/#getcurseidbyname","text":"","title":"GetCurseIdByName ()"},{"location":"Isaac/#getentitytypebyname","text":"","title":"GetEntityTypeByName ()"},{"location":"Isaac/#getentityvariantbyname","text":"","title":"GetEntityVariantByName ()"},{"location":"Isaac/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Isaac/#getfreenearposition","text":"","title":"GetFreeNearPosition ()"},{"location":"Isaac/#getitemconfig","text":"","title":"GetItemConfig ()"},{"location":"Isaac/#getitemidbyname","text":"","title":"GetItemIdByName ()"},{"location":"Isaac/#getmusicidbyname","text":"","title":"GetMusicIdByName ()"},{"location":"Isaac/#getpilleffectbyname","text":"","title":"GetPillEffectByName ()"},{"location":"Isaac/#getplayer","text":"","title":"GetPlayer ()"},{"location":"Isaac/#getplayertypebyname","text":"","title":"GetPlayerTypeByName ()"},{"location":"Isaac/#getrandomposition","text":"","title":"GetRandomPosition ()"},{"location":"Isaac/#getroomentities","text":"","title":"GetRoomEntities ()"},{"location":"Isaac/#getsoundidbyname","text":"","title":"GetSoundIdByName ()"},{"location":"Isaac/#gettextwidth","text":"","title":"GetTextWidth ()"},{"location":"Isaac/#gettime","text":"","title":"GetTime ()"},{"location":"Isaac/#gettrinketidbyname","text":"","title":"GetTrinketIdByName ()"},{"location":"Isaac/#gridspawn","text":"","title":"GridSpawn ()"},{"location":"Isaac/#hasmoddata","text":"","title":"HasModData ()"},{"location":"Isaac/#worldtoscreendistance","text":"","title":"WorldToScreenDistance ()"},{"location":"Isaac/#registermod","text":"","title":"RegisterMod ()"},{"location":"Isaac/#removecallback","text":"","title":"RemoveCallback ()"},{"location":"Isaac/#removemoddata","text":"","title":"RemoveModData ()"},{"location":"Isaac/#renderscaledtext","text":"","title":"RenderScaledText ()"},{"location":"Isaac/#rendertext","text":"","title":"RenderText ()"},{"location":"Isaac/#savemoddata","text":"","title":"SaveModData ()"},{"location":"Isaac/#screentoworld","text":"","title":"ScreenToWorld ()"},{"location":"Isaac/#screentoworlddistance","text":"","title":"ScreenToWorldDistance ()"},{"location":"Isaac/#spawn","text":"","title":"Spawn ()"},{"location":"Isaac/#worldtorenderposition","text":"","title":"WorldToRenderPosition ()"},{"location":"Isaac/#worldtoscreen","text":"","title":"WorldToScreen ()"},{"location":"Isaac/#worldtoscreendistance_1","text":"","title":"WorldToScreenDistance ()"},{"location":"ItemConfig_Card/","text":"Class \"ItemConfig::Card\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID Description \u2693\ufe0e str Description GreedModeAllowed \u2693\ufe0e bool GreedModeAllowed HudAnim \u2693\ufe0e str HudAnim ID \u2693\ufe0e int ID Name \u2693\ufe0e str Name","title":"ItemConfig::Card"},{"location":"ItemConfig_Card/#class-itemconfigcard","text":"","title":"Class \"ItemConfig::Card\""},{"location":"ItemConfig_Card/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Card/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Card/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_Card/#description","text":"","title":"Description"},{"location":"ItemConfig_Card/#greedmodeallowed","text":"","title":"GreedModeAllowed"},{"location":"ItemConfig_Card/#hudanim","text":"","title":"HudAnim"},{"location":"ItemConfig_Card/#id","text":"","title":"ID"},{"location":"ItemConfig_Card/#name","text":"","title":"Name"},{"location":"ItemConfig_Config/","text":"Class \"ItemConfig::Config\" \u2693\ufe0e Functions \u2693\ufe0e Card () \u2693\ufe0e Card GetCard ( int ID ) CardList () \u2693\ufe0e CardList GetCards () ShouldAddCostumeOnPickup () \u2693\ufe0e static bool ShouldAddCostumeOnPickup ( Item Config ) ItemList () \u2693\ufe0e ItemList GetCollectibles () Returns the List of all Collectibles. CostumeList () \u2693\ufe0e CostumeList GetCostumes () Item () \u2693\ufe0e Item GetNullItem ( int ID ) ItemList () \u2693\ufe0e ItemList GetNullItems () PillEffect () \u2693\ufe0e PillEffect GetPillEffect ( PillEffect PillEffectID ) PillList () \u2693\ufe0e PillList GetPillEffects () Item () \u2693\ufe0e Item GetTrinket ( int ID ) ItemList () \u2693\ufe0e ItemList GetTrinkets () IsValidCollectible () \u2693\ufe0e static bool IsValidCollectible ( CollectibleType ID ) Function to check if a given item id is a valid collectible id (aka. this item exists). Returns True when it exists and False when it doesnt. ShouldAddCostumeOnPickup () \u2693\ufe0e static bool ShouldAddCostumeOnPickup ( Item Config )","title":"ItemConfig::Config"},{"location":"ItemConfig_Config/#class-itemconfigconfig","text":"","title":"Class \"ItemConfig::Config\""},{"location":"ItemConfig_Config/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Config/#card","text":"","title":"Card ()"},{"location":"ItemConfig_Config/#cardlist","text":"","title":"CardList ()"},{"location":"ItemConfig_Config/#shouldaddcostumeonpickup","text":"","title":"ShouldAddCostumeOnPickup ()"},{"location":"ItemConfig_Config/#itemlist","text":"","title":"ItemList ()"},{"location":"ItemConfig_Config/#costumelist","text":"","title":"CostumeList ()"},{"location":"ItemConfig_Config/#item","text":"","title":"Item ()"},{"location":"ItemConfig_Config/#itemlist_1","text":"","title":"ItemList ()"},{"location":"ItemConfig_Config/#pilleffect","text":"","title":"PillEffect ()"},{"location":"ItemConfig_Config/#pilllist","text":"","title":"PillList ()"},{"location":"ItemConfig_Config/#item_1","text":"","title":"Item ()"},{"location":"ItemConfig_Config/#itemlist_2","text":"","title":"ItemList ()"},{"location":"ItemConfig_Config/#isvalidcollectible","text":"","title":"IsValidCollectible ()"},{"location":"ItemConfig_Config/#shouldaddcostumeonpickup_1","text":"","title":"ShouldAddCostumeOnPickup ()"},{"location":"ItemConfig_Costume/","text":"Class \"ItemConfig::Costume\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Anm2Path \u2693\ufe0e str Anm2Path HasOverlay \u2693\ufe0e bool HasOverlay HasSkinAlt \u2693\ufe0e bool HasSkinAlt ID \u2693\ufe0e int ID IsFlying \u2693\ufe0e bool IsFlying OverwriteColor \u2693\ufe0e bool OverwriteColor Priority \u2693\ufe0e int Priority SkinColor \u2693\ufe0e SkinColor SkinColor","title":"ItemConfig::Costume"},{"location":"ItemConfig_Costume/#class-itemconfigcostume","text":"","title":"Class \"ItemConfig::Costume\""},{"location":"ItemConfig_Costume/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Costume/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Costume/#anm2path","text":"","title":"Anm2Path"},{"location":"ItemConfig_Costume/#hasoverlay","text":"","title":"HasOverlay"},{"location":"ItemConfig_Costume/#hasskinalt","text":"","title":"HasSkinAlt"},{"location":"ItemConfig_Costume/#id","text":"","title":"ID"},{"location":"ItemConfig_Costume/#isflying","text":"","title":"IsFlying"},{"location":"ItemConfig_Costume/#overwritecolor","text":"","title":"OverwriteColor"},{"location":"ItemConfig_Costume/#priority","text":"","title":"Priority"},{"location":"ItemConfig_Costume/#skincolor","text":"","title":"SkinColor"},{"location":"ItemConfig_Item/","text":"Class \"ItemConfig::Item\" \u2693\ufe0e Functions \u2693\ufe0e IsCollectible () \u2693\ufe0e bool IsCollectible () IsNull () \u2693\ufe0e bool IsNull () IsTrinket () \u2693\ufe0e bool IsTrinket () Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID AddBlackHearts \u2693\ufe0e int AddBlackHearts AddBombs \u2693\ufe0e int AddBombs AddCoins \u2693\ufe0e int AddCoins AddHearts \u2693\ufe0e int AddHearts AddKeys \u2693\ufe0e int AddKeys AddMaxHearts \u2693\ufe0e int AddMaxHearts AddSoulHearts \u2693\ufe0e int AddSoulHearts CacheFlags \u2693\ufe0e int CacheFlags {: aria-label='Variables' } \u2693\ufe0e Costume Costume Description \u2693\ufe0e str Description DevilPrice \u2693\ufe0e int DevilPrice Discharged \u2693\ufe0e bool Discharged GfxFileName \u2693\ufe0e str GfxFileName ID \u2693\ufe0e int ID MaxCharges \u2693\ufe0e int MaxCharges MaxCooldown \u2693\ufe0e int MaxCooldown Name \u2693\ufe0e str Name Special \u2693\ufe0e bool Special Type \u2693\ufe0e ItemType Type mostly for Lua so it will not make a copy","title":"ItemConfig::Item"},{"location":"ItemConfig_Item/#class-itemconfigitem","text":"","title":"Class \"ItemConfig::Item\""},{"location":"ItemConfig_Item/#functions","text":"","title":"Functions"},{"location":"ItemConfig_Item/#iscollectible","text":"","title":"IsCollectible ()"},{"location":"ItemConfig_Item/#isnull","text":"","title":"IsNull ()"},{"location":"ItemConfig_Item/#istrinket","text":"","title":"IsTrinket ()"},{"location":"ItemConfig_Item/#variables","text":"","title":"Variables"},{"location":"ItemConfig_Item/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_Item/#addblackhearts","text":"","title":"AddBlackHearts"},{"location":"ItemConfig_Item/#addbombs","text":"","title":"AddBombs"},{"location":"ItemConfig_Item/#addcoins","text":"","title":"AddCoins"},{"location":"ItemConfig_Item/#addhearts","text":"","title":"AddHearts"},{"location":"ItemConfig_Item/#addkeys","text":"","title":"AddKeys"},{"location":"ItemConfig_Item/#addmaxhearts","text":"","title":"AddMaxHearts"},{"location":"ItemConfig_Item/#addsoulhearts","text":"","title":"AddSoulHearts"},{"location":"ItemConfig_Item/#cacheflags","text":"","title":"CacheFlags"},{"location":"ItemConfig_Item/#aria-labelvariables","text":"","title":"{: aria-label='Variables' }"},{"location":"ItemConfig_Item/#description","text":"","title":"Description"},{"location":"ItemConfig_Item/#devilprice","text":"","title":"DevilPrice"},{"location":"ItemConfig_Item/#discharged","text":"","title":"Discharged"},{"location":"ItemConfig_Item/#gfxfilename","text":"","title":"GfxFileName"},{"location":"ItemConfig_Item/#id","text":"","title":"ID"},{"location":"ItemConfig_Item/#maxcharges","text":"","title":"MaxCharges"},{"location":"ItemConfig_Item/#maxcooldown","text":"","title":"MaxCooldown"},{"location":"ItemConfig_Item/#name","text":"","title":"Name"},{"location":"ItemConfig_Item/#special","text":"","title":"Special"},{"location":"ItemConfig_Item/#type","text":"","title":"Type"},{"location":"ItemConfig_PillEffect/","text":"Class \"ItemConfig::PillEffect\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AchievementID \u2693\ufe0e int AchievementID GreedModeAllowed \u2693\ufe0e bool GreedModeAllowed ID \u2693\ufe0e int ID Name \u2693\ufe0e str Name","title":"ItemConfig::PillEffect"},{"location":"ItemConfig_PillEffect/#class-itemconfigpilleffect","text":"","title":"Class \"ItemConfig::PillEffect\""},{"location":"ItemConfig_PillEffect/#functions","text":"","title":"Functions"},{"location":"ItemConfig_PillEffect/#variables","text":"","title":"Variables"},{"location":"ItemConfig_PillEffect/#achievementid","text":"","title":"AchievementID"},{"location":"ItemConfig_PillEffect/#greedmodeallowed","text":"","title":"GreedModeAllowed"},{"location":"ItemConfig_PillEffect/#id","text":"","title":"ID"},{"location":"ItemConfig_PillEffect/#name","text":"","title":"Name"},{"location":"ItemPool/","text":"Class \"ItemPool\" \u2693\ufe0e Functions \u2693\ufe0e AddBibleUpgrade () \u2693\ufe0e void AddBibleUpgrade ( int Add , ItemPoolType PoolType ) AddRoomBlacklist () \u2693\ufe0e void AddRoomBlacklist ( CollectibleType Item ) ForceAddPillEffect () \u2693\ufe0e PillColor ForceAddPillEffect ( PillEffect PillEffect ) Forces a pill effect to be in the pool, usually for challenges, returns PillColor for that effect. GetCard () \u2693\ufe0e Card GetCard ( int Seed , bool Playing , bool Rune , bool OnlyRunes ) GetCollectible () \u2693\ufe0e CollectibleType GetCollectible ( ItemPoolType PoolType , bool Decrease , int Seed ) GetLastPool () \u2693\ufe0e ItemPoolType GetLastPool () GetPill () \u2693\ufe0e PillColor GetPill ( int Seed ) GetPillEffect () \u2693\ufe0e PillEffect GetPillEffect ( PillColor PillColor ) GetPoolForRoom () \u2693\ufe0e ItemPoolType GetPoolForRoom ( RoomType RoomType , int Seed ) GetTrinket () \u2693\ufe0e TrinketType GetTrinket () IdentifyPill () \u2693\ufe0e void IdentifyPill ( PillColor PillColor ) IsPillIdentified () \u2693\ufe0e bool IsPillIdentified ( PillColor PillColor ) RemoveCollectible () \u2693\ufe0e bool RemoveCollectible ( CollectibleType Collectible ) Removes a collectible and returns it if it was found. RemoveTrinket () \u2693\ufe0e bool RemoveTrinket ( TrinketType Trinket ) ResetRoomBlacklist () \u2693\ufe0e void ResetRoomBlacklist () ResetTrinkets () \u2693\ufe0e void ResetTrinkets ()","title":"ItemPool"},{"location":"ItemPool/#class-itempool","text":"","title":"Class \"ItemPool\""},{"location":"ItemPool/#functions","text":"","title":"Functions"},{"location":"ItemPool/#addbibleupgrade","text":"","title":"AddBibleUpgrade ()"},{"location":"ItemPool/#addroomblacklist","text":"","title":"AddRoomBlacklist ()"},{"location":"ItemPool/#forceaddpilleffect","text":"","title":"ForceAddPillEffect ()"},{"location":"ItemPool/#getcard","text":"","title":"GetCard ()"},{"location":"ItemPool/#getcollectible","text":"","title":"GetCollectible ()"},{"location":"ItemPool/#getlastpool","text":"","title":"GetLastPool ()"},{"location":"ItemPool/#getpill","text":"","title":"GetPill ()"},{"location":"ItemPool/#getpilleffect","text":"","title":"GetPillEffect ()"},{"location":"ItemPool/#getpoolforroom","text":"","title":"GetPoolForRoom ()"},{"location":"ItemPool/#gettrinket","text":"","title":"GetTrinket ()"},{"location":"ItemPool/#identifypill","text":"","title":"IdentifyPill ()"},{"location":"ItemPool/#ispillidentified","text":"","title":"IsPillIdentified ()"},{"location":"ItemPool/#removecollectible","text":"","title":"RemoveCollectible ()"},{"location":"ItemPool/#removetrinket","text":"","title":"RemoveTrinket ()"},{"location":"ItemPool/#resetroomblacklist","text":"","title":"ResetRoomBlacklist ()"},{"location":"ItemPool/#resettrinkets","text":"","title":"ResetTrinkets ()"},{"location":"KColor/","text":"Class \"KColor\" \u2693\ufe0e Functions \u2693\ufe0e KColor () \u2693\ufe0e void KColor ( float red , float green , float blue , float alpha ) Constructor for the \"KColor\" class. Notes: \"KColor\" is only used in the Font class. For most other situations you will need to use the Color() constructor. Variables \u2693\ufe0e Alpha \u2693\ufe0e float Alpha Blue \u2693\ufe0e float Blue Green \u2693\ufe0e float Green Red \u2693\ufe0e float Red","title":"KColor"},{"location":"KColor/#class-kcolor","text":"","title":"Class \"KColor\""},{"location":"KColor/#functions","text":"","title":"Functions"},{"location":"KColor/#kcolor","text":"","title":"KColor ()"},{"location":"KColor/#variables","text":"","title":"Variables"},{"location":"KColor/#alpha","text":"","title":"Alpha"},{"location":"KColor/#blue","text":"","title":"Blue"},{"location":"KColor/#green","text":"","title":"Green"},{"location":"KColor/#red","text":"","title":"Red"},{"location":"Level/","text":"Class \"Level\" \u2693\ufe0e Functions \u2693\ufe0e AddAngelRoomChance () \u2693\ufe0e void AddAngelRoomChance ( float Chance ) AddCurse () \u2693\ufe0e void AddCurse ( LevelCurse Curse , bool ShowName ) ApplyBlueMapEffect () \u2693\ufe0e void ApplyBlueMapEffect () ApplyCompassEffect () \u2693\ufe0e void ApplyCompassEffect ( bool Persistent ) ApplyMapEffect () \u2693\ufe0e void ApplyMapEffect () CanOpenChallengeRoom () \u2693\ufe0e bool CanOpenChallengeRoom ( int RoomIndex ) CanSpawnDevilRoom () \u2693\ufe0e bool CanSpawnDevilRoom () CanStageHaveCurseOfLabyrinth () \u2693\ufe0e bool CanStageHaveCurseOfLabyrinth ( LevelStage Stage ) ChangeRoom () \u2693\ufe0e void ChangeRoom ( int RoomIndex ) DisableDevilRoom () \u2693\ufe0e void DisableDevilRoom () ForceHorsemanBoss () \u2693\ufe0e bool ForceHorsemanBoss ( int Seed ) return true on success GetAbsoluteStage () \u2693\ufe0e LevelStage GetAbsoluteStage () Returns the absolute stage, if its greed mode its converted to equivalent one. GetAngelRoomChance () \u2693\ufe0e float GetAngelRoomChance () GetCanSeeEverything () \u2693\ufe0e bool GetCanSeeEverything () GetCurrentRoom () \u2693\ufe0e Room GetCurrentRoom () RoomDescriptor () \u2693\ufe0e RoomDescriptor GetCurrentRoomDesc () GetCurrentRoomIndex () \u2693\ufe0e int GetCurrentRoomIndex () Notes This will always return the roomindex on the levelgrid, on which you entered the current room from. (see black entries in graphic below) GetCurseName () \u2693\ufe0e str GetCurseName () GetCurses () \u2693\ufe0e int GetCurses () GetDevilAngelRoomRNG () \u2693\ufe0e RNG GetDevilAngelRoomRNG () GetDungeonPlacementSeed () \u2693\ufe0e int GetDungeonPlacementSeed () GetEnterPosition () \u2693\ufe0e Vector GetEnterPosition () GetHeartPicked () \u2693\ufe0e bool GetHeartPicked () GetLastBossRoomListIndex () \u2693\ufe0e int GetLastBossRoomListIndex () RoomDescriptor () \u2693\ufe0e RoomDescriptor GetLastRoomDesc () GetName () \u2693\ufe0e str GetName ( LevelStage Stage , StageType Type , int Curses , int InfiniteLevel , bool Dyslexia ) GetNonCompleteRoomIndex () \u2693\ufe0e int GetNonCompleteRoomIndex () GetPreviousRoomIndex () \u2693\ufe0e int GetPreviousRoomIndex () GetRandomRoomIndex () \u2693\ufe0e int GetRandomRoomIndex ( bool IAmErrorRoom , int Seed ) RoomDescriptor () \u2693\ufe0e RoomDescriptor GetRoomByIdx ( int RoomIdx ) GetRoomCount () \u2693\ufe0e int GetRoomCount () true> () \u2693\ufe0e LuaArrayProxy < RoomDescriptor , true > GetRooms () GetStage () \u2693\ufe0e LevelStage GetStage () GetStageType () \u2693\ufe0e StageType GetStageType () GetStartingRoomIndex () \u2693\ufe0e int GetStartingRoomIndex () GetStateFlag () \u2693\ufe0e bool GetStateFlag ( StateFlag StateFlag ) HasBossChallenge () \u2693\ufe0e bool HasBossChallenge () InitializeDevilAngelRoom () \u2693\ufe0e void InitializeDevilAngelRoom ( bool ForceAngel , bool ForceDevil ) IsAltStage () \u2693\ufe0e bool IsAltStage () IsDevilRoomDisabled () \u2693\ufe0e bool IsDevilRoomDisabled () IsNextStageAvailable () \u2693\ufe0e bool IsNextStageAvailable () QueryRoomTypeIndex () \u2693\ufe0e int QueryRoomTypeIndex ( RoomType RoomType , bool Visited , RNG rng ) RemoveCompassEffect () \u2693\ufe0e void RemoveCompassEffect () RemoveCurse () \u2693\ufe0e void RemoveCurse ( LevelCurse Curse ) RemoveCurses () \u2693\ufe0e void RemoveCurses () SetCanSeeEverything () \u2693\ufe0e void SetCanSeeEverything ( bool Value ) SetHeartPicked () \u2693\ufe0e void SetHeartPicked () SetNextStage () \u2693\ufe0e void SetNextStage () This function teleports you directly to the next stage without playing the leveltransition or updating the floors backdrop. Use other functions to fix those issues. SetRedHeartDamage () \u2693\ufe0e void SetRedHeartDamage () SetStage () \u2693\ufe0e void SetStage ( LevelStage Stage , StageType StageType ) for SetStage/SetNextStage to have effect, call Init afterward SetStateFlag () \u2693\ufe0e void SetStateFlag ( StateFlag StateFlag , bool Val ) ShowMap () \u2693\ufe0e void ShowMap () Show's all map (world/sun card effect) except the top secret room. ShowName () \u2693\ufe0e void ShowName ( bool Sticky ) UncoverHiddenDoor () \u2693\ufe0e void UncoverHiddenDoor ( int CurrentRoomIdx , DoorSlot Slot ) Uncovers the door on both sides by modifying the saved grid entities for neighboring room. Update () \u2693\ufe0e void Update () UpdateVisibility () \u2693\ufe0e void UpdateVisibility () Notes Whenever you update the visibility of a room on the minimap, it won't update the map automatically, since it is cached. You have to explicitly call UpdateVisibility() afterwards to apply any changes. Example Code This code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- Local variables local game = Game () local level = game : GetLevel () -- Give the player the Compass effect , which will display all of the floor ' s special rooms on the mini - map level : ApplyCompassEffect () -- Remove the icon for the Treasure Room specifically local treasureIndex = level : QueryRoomTypeIndex ( RoomType . ROOM_TREASURE , false , RNG ()) local treasureRoom = level : GetRoomByIdx ( treasureIndex ) treasureRoom . DisplayFlags = 0 -- Since the mini - map is cached , changing display flags won ' t update it unless we explicitly call this function level : UpdateVisibility () Variables \u2693\ufe0e DungeonReturnPosition \u2693\ufe0e Vector DungeonReturnPosition DungeonReturnRoomIndex \u2693\ufe0e int DungeonReturnRoomIndex EnterDoor \u2693\ufe0e int EnterDoor 1 This value defines on which doorslot you entered the room. Bugs Changing this value has no impact on anything. the EnterDoor value is always determined by the LeaveDoor Value and the game itself. GreedModeWave \u2693\ufe0e int GreedModeWave LeaveDoor \u2693\ufe0e int LeaveDoor 1 This value defines on which doorslot you are positioned after the transition. You will always end up at the oposite side of the door specified. Example: LeaveDoor=1 (Up0) will position you at Doorslot Down0 (Logic: Doorslot+2) Notes if level.LeaveDoor is set to anything other than -1, the function will transition based on the room you are currently in.","title":"Level"},{"location":"Level/#class-level","text":"","title":"Class \"Level\""},{"location":"Level/#functions","text":"","title":"Functions"},{"location":"Level/#addangelroomchance","text":"","title":"AddAngelRoomChance ()"},{"location":"Level/#addcurse","text":"","title":"AddCurse ()"},{"location":"Level/#applybluemapeffect","text":"","title":"ApplyBlueMapEffect ()"},{"location":"Level/#applycompasseffect","text":"","title":"ApplyCompassEffect ()"},{"location":"Level/#applymapeffect","text":"","title":"ApplyMapEffect ()"},{"location":"Level/#canopenchallengeroom","text":"","title":"CanOpenChallengeRoom ()"},{"location":"Level/#canspawndevilroom","text":"","title":"CanSpawnDevilRoom ()"},{"location":"Level/#canstagehavecurseoflabyrinth","text":"","title":"CanStageHaveCurseOfLabyrinth ()"},{"location":"Level/#changeroom","text":"","title":"ChangeRoom ()"},{"location":"Level/#disabledevilroom","text":"","title":"DisableDevilRoom ()"},{"location":"Level/#forcehorsemanboss","text":"","title":"ForceHorsemanBoss ()"},{"location":"Level/#getabsolutestage","text":"","title":"GetAbsoluteStage ()"},{"location":"Level/#getangelroomchance","text":"","title":"GetAngelRoomChance ()"},{"location":"Level/#getcanseeeverything","text":"","title":"GetCanSeeEverything ()"},{"location":"Level/#getcurrentroom","text":"","title":"GetCurrentRoom ()"},{"location":"Level/#roomdescriptor","text":"","title":"RoomDescriptor ()"},{"location":"Level/#getcurrentroomindex","text":"","title":"GetCurrentRoomIndex ()"},{"location":"Level/#getcursename","text":"","title":"GetCurseName ()"},{"location":"Level/#getcurses","text":"","title":"GetCurses ()"},{"location":"Level/#getdevilangelroomrng","text":"","title":"GetDevilAngelRoomRNG ()"},{"location":"Level/#getdungeonplacementseed","text":"","title":"GetDungeonPlacementSeed ()"},{"location":"Level/#getenterposition","text":"","title":"GetEnterPosition ()"},{"location":"Level/#getheartpicked","text":"","title":"GetHeartPicked ()"},{"location":"Level/#getlastbossroomlistindex","text":"","title":"GetLastBossRoomListIndex ()"},{"location":"Level/#roomdescriptor_1","text":"","title":"RoomDescriptor ()"},{"location":"Level/#getname","text":"","title":"GetName ()"},{"location":"Level/#getnoncompleteroomindex","text":"","title":"GetNonCompleteRoomIndex ()"},{"location":"Level/#getpreviousroomindex","text":"","title":"GetPreviousRoomIndex ()"},{"location":"Level/#getrandomroomindex","text":"","title":"GetRandomRoomIndex ()"},{"location":"Level/#roomdescriptor_2","text":"","title":"RoomDescriptor ()"},{"location":"Level/#getroomcount","text":"","title":"GetRoomCount ()"},{"location":"Level/#true","text":"","title":"true&gt; ()"},{"location":"Level/#getstage","text":"","title":"GetStage ()"},{"location":"Level/#getstagetype","text":"","title":"GetStageType ()"},{"location":"Level/#getstartingroomindex","text":"","title":"GetStartingRoomIndex ()"},{"location":"Level/#getstateflag","text":"","title":"GetStateFlag ()"},{"location":"Level/#hasbosschallenge","text":"","title":"HasBossChallenge ()"},{"location":"Level/#initializedevilangelroom","text":"","title":"InitializeDevilAngelRoom ()"},{"location":"Level/#isaltstage","text":"","title":"IsAltStage ()"},{"location":"Level/#isdevilroomdisabled","text":"","title":"IsDevilRoomDisabled ()"},{"location":"Level/#isnextstageavailable","text":"","title":"IsNextStageAvailable ()"},{"location":"Level/#queryroomtypeindex","text":"","title":"QueryRoomTypeIndex ()"},{"location":"Level/#removecompasseffect","text":"","title":"RemoveCompassEffect ()"},{"location":"Level/#removecurse","text":"","title":"RemoveCurse ()"},{"location":"Level/#removecurses","text":"","title":"RemoveCurses ()"},{"location":"Level/#setcanseeeverything","text":"","title":"SetCanSeeEverything ()"},{"location":"Level/#setheartpicked","text":"","title":"SetHeartPicked ()"},{"location":"Level/#setnextstage","text":"","title":"SetNextStage ()"},{"location":"Level/#setredheartdamage","text":"","title":"SetRedHeartDamage ()"},{"location":"Level/#setstage","text":"","title":"SetStage ()"},{"location":"Level/#setstateflag","text":"","title":"SetStateFlag ()"},{"location":"Level/#showmap","text":"","title":"ShowMap ()"},{"location":"Level/#showname","text":"","title":"ShowName ()"},{"location":"Level/#uncoverhiddendoor","text":"","title":"UncoverHiddenDoor ()"},{"location":"Level/#update","text":"","title":"Update ()"},{"location":"Level/#updatevisibility","text":"","title":"UpdateVisibility ()"},{"location":"Level/#variables","text":"","title":"Variables"},{"location":"Level/#dungeonreturnposition","text":"","title":"DungeonReturnPosition"},{"location":"Level/#dungeonreturnroomindex","text":"","title":"DungeonReturnRoomIndex"},{"location":"Level/#enterdoor","text":"","title":"EnterDoor"},{"location":"Level/#greedmodewave","text":"","title":"GreedModeWave"},{"location":"Level/#leavedoor","text":"","title":"LeaveDoor"},{"location":"MusicManager/","text":"Class \"MusicManager\" \u2693\ufe0e Functions \u2693\ufe0e Crossfade () \u2693\ufe0e void Crossfade ( MusicManager ID ) Disable () \u2693\ufe0e void Disable () DisableLayer () \u2693\ufe0e void DisableLayer () Enable () \u2693\ufe0e void Enable () EnableLayer () \u2693\ufe0e void EnableLayer () Fadein () \u2693\ufe0e void Fadein ( MusicManager ID , float Volume ) Fadeout () \u2693\ufe0e void Fadeout () GetCurrentMusicID () \u2693\ufe0e MusicManager GetCurrentMusicID () GetQueuedMusicID () \u2693\ufe0e MusicManager GetQueuedMusicID () if nothing is queued, return the current music id IsEnabled () \u2693\ufe0e bool IsEnabled () IsLayerEnabled () \u2693\ufe0e bool IsLayerEnabled () Pause () \u2693\ufe0e void Pause () PitchSlide () \u2693\ufe0e void PitchSlide ( float TargetPitch ) Play () \u2693\ufe0e void Play ( MusicManager ID , float Volume ) Queue () \u2693\ufe0e void Queue ( MusicManager ID ) ResetPitch () \u2693\ufe0e void ResetPitch () Resume () \u2693\ufe0e void Resume () UpdateVolume () \u2693\ufe0e void UpdateVolume () This function sets the music volume to the volume defined in the options menu. VolumeSlide () \u2693\ufe0e void VolumeSlide ( float TargetVolume )","title":"MusicManager"},{"location":"MusicManager/#class-musicmanager","text":"","title":"Class \"MusicManager\""},{"location":"MusicManager/#functions","text":"","title":"Functions"},{"location":"MusicManager/#crossfade","text":"","title":"Crossfade ()"},{"location":"MusicManager/#disable","text":"","title":"Disable ()"},{"location":"MusicManager/#disablelayer","text":"","title":"DisableLayer ()"},{"location":"MusicManager/#enable","text":"","title":"Enable ()"},{"location":"MusicManager/#enablelayer","text":"","title":"EnableLayer ()"},{"location":"MusicManager/#fadein","text":"","title":"Fadein ()"},{"location":"MusicManager/#fadeout","text":"","title":"Fadeout ()"},{"location":"MusicManager/#getcurrentmusicid","text":"","title":"GetCurrentMusicID ()"},{"location":"MusicManager/#getqueuedmusicid","text":"","title":"GetQueuedMusicID ()"},{"location":"MusicManager/#isenabled","text":"","title":"IsEnabled ()"},{"location":"MusicManager/#islayerenabled","text":"","title":"IsLayerEnabled ()"},{"location":"MusicManager/#pause","text":"","title":"Pause ()"},{"location":"MusicManager/#pitchslide","text":"","title":"PitchSlide ()"},{"location":"MusicManager/#play","text":"","title":"Play ()"},{"location":"MusicManager/#queue","text":"","title":"Queue ()"},{"location":"MusicManager/#resetpitch","text":"","title":"ResetPitch ()"},{"location":"MusicManager/#resume","text":"","title":"Resume ()"},{"location":"MusicManager/#updatevolume","text":"","title":"UpdateVolume ()"},{"location":"MusicManager/#volumeslide","text":"","title":"VolumeSlide ()"},{"location":"PathFinder/","text":"Class \"PathFinder\" \u2693\ufe0e Functions \u2693\ufe0e EvadeTarget () \u2693\ufe0e void EvadeTarget ( Vector TargetPos ) FindGridPath () \u2693\ufe0e void FindGridPath ( Vector Pos , float Speed , int PathMarker , bool UseDirectPath ) GetEvadeMovementCountdown () \u2693\ufe0e int GetEvadeMovementCountdown () GetGridIndex () \u2693\ufe0e int GetGridIndex () HasDirectPath () \u2693\ufe0e bool HasDirectPath () HasPathToPos () \u2693\ufe0e bool HasPathToPos ( Vector Pos , bool IgnorePoop ) Used for safe check if any NPC is behind rocks/pits, doesn't disturb class members. MoveRandomly () \u2693\ufe0e bool MoveRandomly ( bool IgnoreStatusEffects ) MoveRandomlyAxisAligned () \u2693\ufe0e void MoveRandomlyAxisAligned ( float Speed , bool IgnoreStatusEffects ) MoveRandomlyBoss () \u2693\ufe0e void MoveRandomlyBoss ( bool IgnoreStatusEffects ) Reset () \u2693\ufe0e void Reset () ResetMovementTarget () \u2693\ufe0e void ResetMovementTarget () SetCanCrushRocks () \u2693\ufe0e void SetCanCrushRocks ( bool value ) UpdateGridIndex () \u2693\ufe0e void UpdateGridIndex ()","title":"PathFinder"},{"location":"PathFinder/#class-pathfinder","text":"","title":"Class \"PathFinder\""},{"location":"PathFinder/#functions","text":"","title":"Functions"},{"location":"PathFinder/#evadetarget","text":"","title":"EvadeTarget ()"},{"location":"PathFinder/#findgridpath","text":"","title":"FindGridPath ()"},{"location":"PathFinder/#getevademovementcountdown","text":"","title":"GetEvadeMovementCountdown ()"},{"location":"PathFinder/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"PathFinder/#hasdirectpath","text":"","title":"HasDirectPath ()"},{"location":"PathFinder/#haspathtopos","text":"","title":"HasPathToPos ()"},{"location":"PathFinder/#moverandomly","text":"","title":"MoveRandomly ()"},{"location":"PathFinder/#moverandomlyaxisaligned","text":"","title":"MoveRandomlyAxisAligned ()"},{"location":"PathFinder/#moverandomlyboss","text":"","title":"MoveRandomlyBoss ()"},{"location":"PathFinder/#reset","text":"","title":"Reset ()"},{"location":"PathFinder/#resetmovementtarget","text":"","title":"ResetMovementTarget ()"},{"location":"PathFinder/#setcancrushrocks","text":"","title":"SetCanCrushRocks ()"},{"location":"PathFinder/#updategridindex","text":"","title":"UpdateGridIndex ()"},{"location":"PlayerTypes_ActiveItemDesc/","text":"Class \"PlayerTypes::ActiveItemDesc\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e BatteryCharge \u2693\ufe0e int BatteryCharge Charge \u2693\ufe0e int Charge For items like Jars this holds the number of flies/hearts. Item \u2693\ufe0e CollectibleType Item Lock \u2693\ufe0e bool Lock Helper, avoids double charge on full charge.","title":"PlayerTypes::ActiveItemDesc"},{"location":"PlayerTypes_ActiveItemDesc/#class-playertypesactiveitemdesc","text":"","title":"Class \"PlayerTypes::ActiveItemDesc\""},{"location":"PlayerTypes_ActiveItemDesc/#functions","text":"","title":"Functions"},{"location":"PlayerTypes_ActiveItemDesc/#variables","text":"","title":"Variables"},{"location":"PlayerTypes_ActiveItemDesc/#batterycharge","text":"","title":"BatteryCharge"},{"location":"PlayerTypes_ActiveItemDesc/#charge","text":"","title":"Charge"},{"location":"PlayerTypes_ActiveItemDesc/#item","text":"","title":"Item"},{"location":"PlayerTypes_ActiveItemDesc/#lock","text":"","title":"Lock"},{"location":"PlayerTypes_PosVel/","text":"Class \"PlayerTypes::PosVel\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Position \u2693\ufe0e Vector Position Velocity \u2693\ufe0e Vector Velocity","title":"PlayerTypes::PosVel"},{"location":"PlayerTypes_PosVel/#class-playertypesposvel","text":"","title":"Class \"PlayerTypes::PosVel\""},{"location":"PlayerTypes_PosVel/#functions","text":"","title":"Functions"},{"location":"PlayerTypes_PosVel/#variables","text":"","title":"Variables"},{"location":"PlayerTypes_PosVel/#position","text":"","title":"Position"},{"location":"PlayerTypes_PosVel/#velocity","text":"","title":"Velocity"},{"location":"ProjectileParams/","text":"Class \"ProjectileParams\" \u2693\ufe0e Functions \u2693\ufe0e ProjectileParams () \u2693\ufe0e void ProjectileParams ( void ) Variables \u2693\ufe0e Acceleration \u2693\ufe0e float Acceleration BulletFlags \u2693\ufe0e int BulletFlags ChangeFlags \u2693\ufe0e int ChangeFlags Uses ProjectileFlags to define the projectile attributes after the \"Changed\" state was activated. The ProjectileFlag CHANGE_FLAGS_AFTER_TIMEOUT needs to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() ChangeTimeout \u2693\ufe0e int ChangeTimeout Number of frames that need to elapse after spawn till the \"Changed\" state is activated. The ProjectileFlags CHANGE_FLAGS_AFTER_TIMEOUT or CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() ChangeVelocity \u2693\ufe0e float ChangeVelocity Velocity value that gets applied when the \"Changed\" state is activated. The ProjectileFlag CHANGE_VELOCITY_AFTER_TIMEOUT need to be set to allow for this change to apply! Informations about \"Changed\" State: Projectiles can have two states: normal (default) and changed. Changed state activates when projectile's frame count reaches the value set in ChangeTimeout . After that its flags get changed to what was set in ChangeFlags and velocity will be resized to length set in ChangeVelocity . Also used in: EntityProjectile() CircleAngle \u2693\ufe0e float CircleAngle Angle offset used by fire_projectiles PROJECTILES_CIRCLE type emitter. Random by default. CurvingStrength \u2693\ufe0e float CurvingStrength Use very small values for curving like 0.005. DepthOffset \u2693\ufe0e float DepthOffset DotProductLimit \u2693\ufe0e float DotProductLimit Direction bullets are being fired in Dot product of FireDirectionLimit, bullet direction must be >= this value FallingAccelModifier \u2693\ufe0e float FallingAccelModifier FallingSpeedModifier \u2693\ufe0e float FallingSpeedModifier FireDirectionLimit \u2693\ufe0e Vector FireDirectionLimit GridCollision \u2693\ufe0e bool GridCollision HeightModifier \u2693\ufe0e float HeightModifier HomingStrength \u2693\ufe0e float HomingStrength Multiplier on normal homing strength. Unused if SMART bullet flag is not set. Color \u2693\ufe0e Color Color PositionOffset \u2693\ufe0e Vector PositionOffset Scale \u2693\ufe0e float Scale Spread \u2693\ufe0e float Spread For quad/quint/etc spread shots. TargetPosition \u2693\ufe0e Vector TargetPosition Variant \u2693\ufe0e int Variant VelocityMulti \u2693\ufe0e float VelocityMulti WiggleFrameOffset \u2693\ufe0e int WiggleFrameOffset Used to offset the wiggle wave.","title":"ProjectileParams"},{"location":"ProjectileParams/#class-projectileparams","text":"","title":"Class \"ProjectileParams\""},{"location":"ProjectileParams/#functions","text":"","title":"Functions"},{"location":"ProjectileParams/#projectileparams","text":"","title":"ProjectileParams ()"},{"location":"ProjectileParams/#variables","text":"","title":"Variables"},{"location":"ProjectileParams/#acceleration","text":"","title":"Acceleration"},{"location":"ProjectileParams/#bulletflags","text":"","title":"BulletFlags"},{"location":"ProjectileParams/#changeflags","text":"","title":"ChangeFlags"},{"location":"ProjectileParams/#changetimeout","text":"","title":"ChangeTimeout"},{"location":"ProjectileParams/#changevelocity","text":"","title":"ChangeVelocity"},{"location":"ProjectileParams/#circleangle","text":"","title":"CircleAngle"},{"location":"ProjectileParams/#curvingstrength","text":"","title":"CurvingStrength"},{"location":"ProjectileParams/#depthoffset","text":"","title":"DepthOffset"},{"location":"ProjectileParams/#dotproductlimit","text":"","title":"DotProductLimit"},{"location":"ProjectileParams/#fallingaccelmodifier","text":"","title":"FallingAccelModifier"},{"location":"ProjectileParams/#fallingspeedmodifier","text":"","title":"FallingSpeedModifier"},{"location":"ProjectileParams/#firedirectionlimit","text":"","title":"FireDirectionLimit"},{"location":"ProjectileParams/#gridcollision","text":"","title":"GridCollision"},{"location":"ProjectileParams/#heightmodifier","text":"","title":"HeightModifier"},{"location":"ProjectileParams/#homingstrength","text":"","title":"HomingStrength"},{"location":"ProjectileParams/#color","text":"","title":"Color"},{"location":"ProjectileParams/#positionoffset","text":"","title":"PositionOffset"},{"location":"ProjectileParams/#scale","text":"","title":"Scale"},{"location":"ProjectileParams/#spread","text":"","title":"Spread"},{"location":"ProjectileParams/#targetposition","text":"","title":"TargetPosition"},{"location":"ProjectileParams/#variant","text":"","title":"Variant"},{"location":"ProjectileParams/#velocitymulti","text":"","title":"VelocityMulti"},{"location":"ProjectileParams/#wiggleframeoffset","text":"","title":"WiggleFrameOffset"},{"location":"QueueItemData/","text":"Class \"QueueItemData\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Charge \u2693\ufe0e int Charge Item \u2693\ufe0e Config :: Item Item Touched \u2693\ufe0e bool Touched","title":"QueueItemData"},{"location":"QueueItemData/#class-queueitemdata","text":"","title":"Class \"QueueItemData\""},{"location":"QueueItemData/#functions","text":"","title":"Functions"},{"location":"QueueItemData/#variables","text":"","title":"Variables"},{"location":"QueueItemData/#charge","text":"","title":"Charge"},{"location":"QueueItemData/#item","text":"","title":"Item"},{"location":"QueueItemData/#touched","text":"","title":"Touched"},{"location":"RNG/","text":"Class \"RNG\" \u2693\ufe0e Functions \u2693\ufe0e RNG () \u2693\ufe0e void RNG ( void ) GetSeed () \u2693\ufe0e int GetSeed () Next () \u2693\ufe0e int Next () RandomFloat () \u2693\ufe0e float RandomFloat () RandomInt () \u2693\ufe0e int RandomInt ( int Max ) SetSeed () \u2693\ufe0e void SetSeed ( int Seed , int ShiftIdx )","title":"RNG"},{"location":"RNG/#class-rng","text":"","title":"Class \"RNG\""},{"location":"RNG/#functions","text":"","title":"Functions"},{"location":"RNG/#rng","text":"","title":"RNG ()"},{"location":"RNG/#getseed","text":"","title":"GetSeed ()"},{"location":"RNG/#next","text":"","title":"Next ()"},{"location":"RNG/#randomfloat","text":"","title":"RandomFloat ()"},{"location":"RNG/#randomint","text":"","title":"RandomInt ()"},{"location":"RNG/#setseed","text":"","title":"SetSeed ()"},{"location":"Room/","text":"Class \"Room\" \u2693\ufe0e Functions \u2693\ufe0e CheckLine () \u2693\ufe0e bool CheckLine ( Vector Pos1 , Vector Pos2 , LinecheckMode Mode , int GridPathThreshold , bool IgnoreWalls , bool IgnoreCrushable ) returns true if there is a direct line of sight between Pos1 and Pos2 returns false if the line is obstructed Notes LinecheckModes: 0 : makes the line check collide with anything that impedes ground movement 1 : is a cheaper version of 0, but is not as reliable 2 : is used for explosions, it only collides with walls and indestructible blocks 3 : is a line check that only collides with obstacles that can block projectiles DamageGrid () \u2693\ufe0e bool DamageGrid ( int Index , int Damage ) Damage Grid Entities currently this concerns GridEntityPoop and GridEntity_Fire returns true if damageable entity was found (and possibly damaged) return false if not used by tears, bombs, some NPCs, etc DestroyGrid () \u2693\ufe0e bool DestroyGrid ( int Index , bool Immediate ) calls DamageGrid internally to damage Poop/Fire removes rocks and opens secret doors returns true if something was destroyed returns false if not used for explosions mostly EmitBloodFromWalls () \u2693\ufe0e void EmitBloodFromWalls ( int Duration , int Count ) FindFreePickupSpawnPosition () \u2693\ufe0e Vector FindFreePickupSpawnPosition ( Vector Pos , float InitialStep , bool AvoidActiveEntities ) Starting from Pos, will try to find a free spawn position where a newly spawned pickup item will not collide with already spawned pickup items, or solid grid elements such as rocks, or pits The returned position will be aligned to the grid. If no free position is found, the original position (aligned to the grid) is returned. FindFreeTilePosition () \u2693\ufe0e Vector FindFreeTilePosition ( Vector Pos , float DistanceThreshold ) Finds the nearest free tile based on position Stops immediately if the tile sampled has a squared distance less than DistanceThresholdSQ GetAliveBossesCount () \u2693\ufe0e int GetAliveBossesCount () GetAliveEnemiesCount () \u2693\ufe0e int GetAliveEnemiesCount () GetAwardSeed () \u2693\ufe0e int GetAwardSeed () GetBackdropType () \u2693\ufe0e Backdrop :: Backdrop GetBackdropType () Returns the BackdropType (Background) of the current room. Notes BackdropTypes ID Backdrop ID Backdrop 1 Basement 15 Cathedral 2 Cellar 16 Dark Room 3 Burning Basement 17 Chest 4 Caves 18 Mega Satan 5 Catacombs 19 Library 6 Drowned Caves 20 Shop 7 Depths 21 Isaacs Room 8 Necropolis 22 Barren Room 9 Dank Depths 23 Secret Room 10 Womb 24 Dice Room 11 Utero 25 Arcade 12 Scarred Womb 26 Error Room 13 Blue Womb (Hush) 27 Blue Secret 14 Sheol 28 Ultra Greed Shop GetBossID () \u2693\ufe0e BossId GetBossID () This will return the subtype of the current room, since this value is used to determine the boss-portrait to display when entering. GetBottomRightPos () \u2693\ufe0e Vector GetBottomRightPos () returns bottom right position inside of walls GetBrokenWatchState () \u2693\ufe0e int GetBrokenWatchState () GetCenterPos () \u2693\ufe0e Vector GetCenterPos () returns the room center position GetClampedGridIndex () \u2693\ufe0e int GetClampedGridIndex ( Vector Position ) converts float position (x,y) to grid index (similar to ingrid) clamps the values if out of bounds GetClampedPosition () \u2693\ufe0e Vector GetClampedPosition ( Vector Pos , float Margin ) returns Pos clamped to room borders inside of walls GetDecorationSeed () \u2693\ufe0e int GetDecorationSeed () GetDeliriumDistance () \u2693\ufe0e int GetDeliriumDistance () GetDevilRoomChance () \u2693\ufe0e float GetDevilRoomChance () GetDoor () \u2693\ufe0e GridEntityDoor GetDoor ( DoorSlot Slot ) GetDoorSlotPosition () \u2693\ufe0e Vector GetDoorSlotPosition ( DoorSlot Slot ) GetDungeonRockIdx () \u2693\ufe0e int GetDungeonRockIdx () GetEntities () \u2693\ufe0e EntityList GetEntities () GetFrameCount () \u2693\ufe0e int GetFrameCount () GetGridCollision () \u2693\ufe0e GridCollisionClass GetGridCollision ( int GridIndex ) Returns the GridCollisionClass of the grid entity at this grid index. GetGridCollisionAtPos () \u2693\ufe0e GridCollisionClass GetGridCollisionAtPos ( Vector Pos ) Returns the GridCollisionClass of the grid entity at this position in the room. GetGridEntity () \u2693\ufe0e GridEntity GetGridEntity ( int Index ) Returns the GridEntity at this grid index. GetGridEntityFromPos () \u2693\ufe0e GridEntity GetGridEntityFromPos ( Vector Position ) Returns the GridEntity at this position in the room. GetGridHeight () \u2693\ufe0e int GetGridHeight () GetGridIndex () \u2693\ufe0e int GetGridIndex ( Vector Position ) converts float position (x,y) to grid index returns -1 for invalid index GetGridPath () \u2693\ufe0e int GetGridPath ( int Index ) GetGridPathFromPos () \u2693\ufe0e int GetGridPathFromPos ( int Index ) GetGridPosition () \u2693\ufe0e Vector GetGridPosition ( int GridIndex ) converts grid index to float (x,y) position undefined behaviour for invalid index GetGridSize () \u2693\ufe0e int GetGridSize () GetGridWidth () \u2693\ufe0e int GetGridWidth () GetLaserTarget () \u2693\ufe0e Vector GetLaserTarget ( Vector Pos , Vector Dir ) returns the hit position for a laser beam (Technology, Robo-Baby) usually, the first poop, fire, rock, TNT, or wall encountered on a straight line GetLightingAlpha () \u2693\ufe0e float GetLightingAlpha () GetLRoomAreaDesc () \u2693\ufe0e LRoomAreaDesc GetLRoomAreaDesc () GetLRoomTileDesc () \u2693\ufe0e LRoomTileDesc GetLRoomTileDesc () GetNextShockwaveId () \u2693\ufe0e int GetNextShockwaveId () GetRandomPosition () \u2693\ufe0e Vector GetRandomPosition ( float Margin ) returns random non tile aligned position GetRandomTileIndex () \u2693\ufe0e int GetRandomTileIndex ( int Seed ) GetRedHeartDamage () \u2693\ufe0e bool GetRedHeartDamage () Vector () \u2693\ufe0e Vector GetRenderScrollOffset () The camera scroll offset and screen shake offsets are both represented here. Vector () \u2693\ufe0e Vector GetRenderSurfaceTopLeft () The position the floor and wall textures will be rendered at. GetRoomConfigStage () \u2693\ufe0e RoomConfig :: Stage GetRoomConfigStage () returns the original stage the room was designed for (useful for The Void) GetRoomShape () \u2693\ufe0e RoomShape GetRoomShape () GetSecondBossID () \u2693\ufe0e BossId GetSecondBossID () GetSeededCollectible () \u2693\ufe0e CollectibleType GetSeededCollectible ( int Seed ) GetShopLevel () \u2693\ufe0e int GetShopLevel () GetSpawnSeed () \u2693\ufe0e int GetSpawnSeed () GetTintedRockIdx () \u2693\ufe0e int GetTintedRockIdx () GetTopLeftPos () \u2693\ufe0e Vector GetTopLeftPos () returns top left position inside of walls GetType () \u2693\ufe0e RoomType GetType () HasSlowDown () \u2693\ufe0e bool HasSlowDown () HasTriggerPressurePlates () \u2693\ufe0e bool HasTriggerPressurePlates () HasWater () \u2693\ufe0e bool HasWater () HasWaterPits () \u2693\ufe0e bool HasWaterPits () IsAmbushActive () \u2693\ufe0e bool IsAmbushActive () IsAmbushDone () \u2693\ufe0e bool IsAmbushDone () IsClear () \u2693\ufe0e bool IsClear () IsCurrentRoomLastBoss () \u2693\ufe0e bool IsCurrentRoomLastBoss () IsDoorSlotAllowed () \u2693\ufe0e bool IsDoorSlotAllowed ( DoorSlot Slot ) Returns whether this room design may have a door at a given position, disregarding whether those doors exist. IsFirstEnemyDead () \u2693\ufe0e bool IsFirstEnemyDead () IsFirstVisit () \u2693\ufe0e bool IsFirstVisit () Broken Watch Room State - 0 = no watch effect, 1 = speed down, 2 = speed up. IsInitialized () \u2693\ufe0e bool IsInitialized () IsLShapedRoom () \u2693\ufe0e bool IsLShapedRoom () IsPositionInRoom () \u2693\ufe0e bool IsPositionInRoom ( Vector Pos , float Margin ) IsSacrificeDone () \u2693\ufe0e bool IsSacrificeDone () KeepDoorsClosed () \u2693\ufe0e void KeepDoorsClosed () MamaMegaExplossion () \u2693\ufe0e void MamaMegaExplossion () PlayMusic () \u2693\ufe0e void PlayMusic () RemoveDoor () \u2693\ufe0e void RemoveDoor ( DoorSlot Slot ) RemoveGridEntity () \u2693\ufe0e void RemoveGridEntity ( int GridIndex , int PathTrail , bool KeepDecoration ) Render () \u2693\ufe0e void Render () RespawnEnemies () \u2693\ufe0e void RespawnEnemies () for D7 collectible ScreenWrapPosition () \u2693\ufe0e Vector ScreenWrapPosition ( Vector Pos , float Margin ) Returns Pos, screen-wrapped (if it is just outside the room on the right it will be moved to the left side of the room, etc) Notes This only wraps the point once, so if it has crossed multiple wrapping planes it will only wrap on the one it's closest to. For wrapping a position that has crossed two planes (outside a room in the top left for instance) call this function iteratively. SetAmbushDone () \u2693\ufe0e void SetAmbushDone ( bool Value ) SetBrokenWatchState () \u2693\ufe0e void SetBrokenWatchState ( int State ) SetCardAgainstHumanity () \u2693\ufe0e void SetCardAgainstHumanity () SetClear () \u2693\ufe0e void SetClear ( bool Clear ) Needed for angel room, so the clear flag can be set to false when the angel spawns void SetClear(bool Clear) {m_Desc->Clear = Clear;} SetFirstEnemyDead () \u2693\ufe0e void SetFirstEnemyDead ( bool Value ) SetFloorColor () \u2693\ufe0e void SetFloorColor ( Color FloorColor ) Allows you to apply a color modifier to the floor texture of the current room. Example Code This code changes the floorcolor to red. 1 Game () : GetRoom () : SetFloorColor ( Color ( 1 , 1 , 1 , 1 , 255 , 0 , 0 )) SetGridPath () \u2693\ufe0e bool SetGridPath ( int Index , int Value ) SetRedHeartDamage () \u2693\ufe0e void SetRedHeartDamage () SetSacrificeDone () \u2693\ufe0e void SetSacrificeDone ( bool Done ) SetShockwaveParam () \u2693\ufe0e void SetShockwaveParam ( int ShockwaveId , ShockwaveParams Params ) SetSlowDown () \u2693\ufe0e void SetSlowDown ( int Duration ) SetWallColor () \u2693\ufe0e void SetWallColor ( Color WallColor ) Allows you to apply a color modifier to the wall texture of the current room. Example Code This code changes the wallcolor to red. 1 Game () : GetRoom () : SetWallColor ( Color ( 1 , 1 , 1 , 1 , 255 , 0 , 0 )) ShopReshuffle () \u2693\ufe0e void ShopReshuffle ( bool KeepCollectibleIdx , bool ReselectSaleItem ) ShopRestockFull () \u2693\ufe0e void ShopRestockFull () ShopRestockPartial () \u2693\ufe0e void ShopRestockPartial () SpawnClearAward () \u2693\ufe0e void SpawnClearAward () SpawnGridEntity () \u2693\ufe0e bool SpawnGridEntity ( int GridIndex , GridEntityType Type , int Variant , int Seed , int VarData ) TryMakeBridge () \u2693\ufe0e bool TryMakeBridge ( GridEntity pit ) TryPlaceLadder () \u2693\ufe0e void TryPlaceLadder ( Vector PlayerPos , Vector PlayerVelocity , Entity Ladder ) TrySpawnBlueWombDoor () \u2693\ufe0e bool TrySpawnBlueWombDoor ( bool FirstTime , bool IgnoreTime ) TrySpawnBossRushDoor () \u2693\ufe0e bool TrySpawnBossRushDoor ( bool IgnoreTime ) TrySpawnDevilRoomDoor () \u2693\ufe0e bool TrySpawnDevilRoomDoor ( bool Animate ) TrySpawnMegaSatanRoomDoor () \u2693\ufe0e bool TrySpawnMegaSatanRoomDoor () TrySpawnTheVoidDoor () \u2693\ufe0e bool TrySpawnTheVoidDoor () TurnGold () \u2693\ufe0e void TurnGold () Update () \u2693\ufe0e void Update () Updates the current room. Notes Calling this function is NOT needed to apply changes! This function is pretty useless WorldToScreenPosition () \u2693\ufe0e Vector WorldToScreenPosition ( Vector WorldPos ) Converts an entity position to one that can be used to render to the screen.","title":"Room"},{"location":"Room/#class-room","text":"","title":"Class \"Room\""},{"location":"Room/#functions","text":"","title":"Functions"},{"location":"Room/#checkline","text":"","title":"CheckLine ()"},{"location":"Room/#damagegrid","text":"","title":"DamageGrid ()"},{"location":"Room/#destroygrid","text":"","title":"DestroyGrid ()"},{"location":"Room/#emitbloodfromwalls","text":"","title":"EmitBloodFromWalls ()"},{"location":"Room/#findfreepickupspawnposition","text":"","title":"FindFreePickupSpawnPosition ()"},{"location":"Room/#findfreetileposition","text":"","title":"FindFreeTilePosition ()"},{"location":"Room/#getalivebossescount","text":"","title":"GetAliveBossesCount ()"},{"location":"Room/#getaliveenemiescount","text":"","title":"GetAliveEnemiesCount ()"},{"location":"Room/#getawardseed","text":"","title":"GetAwardSeed ()"},{"location":"Room/#getbackdroptype","text":"","title":"GetBackdropType ()"},{"location":"Room/#getbossid","text":"","title":"GetBossID ()"},{"location":"Room/#getbottomrightpos","text":"","title":"GetBottomRightPos ()"},{"location":"Room/#getbrokenwatchstate","text":"","title":"GetBrokenWatchState ()"},{"location":"Room/#getcenterpos","text":"","title":"GetCenterPos ()"},{"location":"Room/#getclampedgridindex","text":"","title":"GetClampedGridIndex ()"},{"location":"Room/#getclampedposition","text":"","title":"GetClampedPosition ()"},{"location":"Room/#getdecorationseed","text":"","title":"GetDecorationSeed ()"},{"location":"Room/#getdeliriumdistance","text":"","title":"GetDeliriumDistance ()"},{"location":"Room/#getdevilroomchance","text":"","title":"GetDevilRoomChance ()"},{"location":"Room/#getdoor","text":"","title":"GetDoor ()"},{"location":"Room/#getdoorslotposition","text":"","title":"GetDoorSlotPosition ()"},{"location":"Room/#getdungeonrockidx","text":"","title":"GetDungeonRockIdx ()"},{"location":"Room/#getentities","text":"","title":"GetEntities ()"},{"location":"Room/#getframecount","text":"","title":"GetFrameCount ()"},{"location":"Room/#getgridcollision","text":"","title":"GetGridCollision ()"},{"location":"Room/#getgridcollisionatpos","text":"","title":"GetGridCollisionAtPos ()"},{"location":"Room/#getgridentity","text":"","title":"GetGridEntity ()"},{"location":"Room/#getgridentityfrompos","text":"","title":"GetGridEntityFromPos ()"},{"location":"Room/#getgridheight","text":"","title":"GetGridHeight ()"},{"location":"Room/#getgridindex","text":"","title":"GetGridIndex ()"},{"location":"Room/#getgridpath","text":"","title":"GetGridPath ()"},{"location":"Room/#getgridpathfrompos","text":"","title":"GetGridPathFromPos ()"},{"location":"Room/#getgridposition","text":"","title":"GetGridPosition ()"},{"location":"Room/#getgridsize","text":"","title":"GetGridSize ()"},{"location":"Room/#getgridwidth","text":"","title":"GetGridWidth ()"},{"location":"Room/#getlasertarget","text":"","title":"GetLaserTarget ()"},{"location":"Room/#getlightingalpha","text":"","title":"GetLightingAlpha ()"},{"location":"Room/#getlroomareadesc","text":"","title":"GetLRoomAreaDesc ()"},{"location":"Room/#getlroomtiledesc","text":"","title":"GetLRoomTileDesc ()"},{"location":"Room/#getnextshockwaveid","text":"","title":"GetNextShockwaveId ()"},{"location":"Room/#getrandomposition","text":"","title":"GetRandomPosition ()"},{"location":"Room/#getrandomtileindex","text":"","title":"GetRandomTileIndex ()"},{"location":"Room/#getredheartdamage","text":"","title":"GetRedHeartDamage ()"},{"location":"Room/#vector","text":"","title":"Vector ()"},{"location":"Room/#vector_1","text":"","title":"Vector ()"},{"location":"Room/#getroomconfigstage","text":"","title":"GetRoomConfigStage ()"},{"location":"Room/#getroomshape","text":"","title":"GetRoomShape ()"},{"location":"Room/#getsecondbossid","text":"","title":"GetSecondBossID ()"},{"location":"Room/#getseededcollectible","text":"","title":"GetSeededCollectible ()"},{"location":"Room/#getshoplevel","text":"","title":"GetShopLevel ()"},{"location":"Room/#getspawnseed","text":"","title":"GetSpawnSeed ()"},{"location":"Room/#gettintedrockidx","text":"","title":"GetTintedRockIdx ()"},{"location":"Room/#gettopleftpos","text":"","title":"GetTopLeftPos ()"},{"location":"Room/#gettype","text":"","title":"GetType ()"},{"location":"Room/#hasslowdown","text":"","title":"HasSlowDown ()"},{"location":"Room/#hastriggerpressureplates","text":"","title":"HasTriggerPressurePlates ()"},{"location":"Room/#haswater","text":"","title":"HasWater ()"},{"location":"Room/#haswaterpits","text":"","title":"HasWaterPits ()"},{"location":"Room/#isambushactive","text":"","title":"IsAmbushActive ()"},{"location":"Room/#isambushdone","text":"","title":"IsAmbushDone ()"},{"location":"Room/#isclear","text":"","title":"IsClear ()"},{"location":"Room/#iscurrentroomlastboss","text":"","title":"IsCurrentRoomLastBoss ()"},{"location":"Room/#isdoorslotallowed","text":"","title":"IsDoorSlotAllowed ()"},{"location":"Room/#isfirstenemydead","text":"","title":"IsFirstEnemyDead ()"},{"location":"Room/#isfirstvisit","text":"","title":"IsFirstVisit ()"},{"location":"Room/#isinitialized","text":"","title":"IsInitialized ()"},{"location":"Room/#islshapedroom","text":"","title":"IsLShapedRoom ()"},{"location":"Room/#ispositioninroom","text":"","title":"IsPositionInRoom ()"},{"location":"Room/#issacrificedone","text":"","title":"IsSacrificeDone ()"},{"location":"Room/#keepdoorsclosed","text":"","title":"KeepDoorsClosed ()"},{"location":"Room/#mamamegaexplossion","text":"","title":"MamaMegaExplossion ()"},{"location":"Room/#playmusic","text":"","title":"PlayMusic ()"},{"location":"Room/#removedoor","text":"","title":"RemoveDoor ()"},{"location":"Room/#removegridentity","text":"","title":"RemoveGridEntity ()"},{"location":"Room/#render","text":"","title":"Render ()"},{"location":"Room/#respawnenemies","text":"","title":"RespawnEnemies ()"},{"location":"Room/#screenwrapposition","text":"","title":"ScreenWrapPosition ()"},{"location":"Room/#setambushdone","text":"","title":"SetAmbushDone ()"},{"location":"Room/#setbrokenwatchstate","text":"","title":"SetBrokenWatchState ()"},{"location":"Room/#setcardagainsthumanity","text":"","title":"SetCardAgainstHumanity ()"},{"location":"Room/#setclear","text":"","title":"SetClear ()"},{"location":"Room/#setfirstenemydead","text":"","title":"SetFirstEnemyDead ()"},{"location":"Room/#setfloorcolor","text":"","title":"SetFloorColor ()"},{"location":"Room/#setgridpath","text":"","title":"SetGridPath ()"},{"location":"Room/#setredheartdamage","text":"","title":"SetRedHeartDamage ()"},{"location":"Room/#setsacrificedone","text":"","title":"SetSacrificeDone ()"},{"location":"Room/#setshockwaveparam","text":"","title":"SetShockwaveParam ()"},{"location":"Room/#setslowdown","text":"","title":"SetSlowDown ()"},{"location":"Room/#setwallcolor","text":"","title":"SetWallColor ()"},{"location":"Room/#shopreshuffle","text":"","title":"ShopReshuffle ()"},{"location":"Room/#shoprestockfull","text":"","title":"ShopRestockFull ()"},{"location":"Room/#shoprestockpartial","text":"","title":"ShopRestockPartial ()"},{"location":"Room/#spawnclearaward","text":"","title":"SpawnClearAward ()"},{"location":"Room/#spawngridentity","text":"","title":"SpawnGridEntity ()"},{"location":"Room/#trymakebridge","text":"","title":"TryMakeBridge ()"},{"location":"Room/#tryplaceladder","text":"","title":"TryPlaceLadder ()"},{"location":"Room/#tryspawnbluewombdoor","text":"","title":"TrySpawnBlueWombDoor ()"},{"location":"Room/#tryspawnbossrushdoor","text":"","title":"TrySpawnBossRushDoor ()"},{"location":"Room/#tryspawndevilroomdoor","text":"","title":"TrySpawnDevilRoomDoor ()"},{"location":"Room/#tryspawnmegasatanroomdoor","text":"","title":"TrySpawnMegaSatanRoomDoor ()"},{"location":"Room/#tryspawnthevoiddoor","text":"","title":"TrySpawnTheVoidDoor ()"},{"location":"Room/#turngold","text":"","title":"TurnGold ()"},{"location":"Room/#update","text":"","title":"Update ()"},{"location":"Room/#worldtoscreenposition","text":"","title":"WorldToScreenPosition ()"},{"location":"RoomConfig_Entry/","text":"Class \"RoomConfig::Entry\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Subtype \u2693\ufe0e u16 Subtype Type \u2693\ufe0e RoomType Type Variant \u2693\ufe0e u16 Variant Weight \u2693\ufe0e float Weight","title":"RoomConfig::Entry"},{"location":"RoomConfig_Entry/#class-roomconfigentry","text":"","title":"Class \"RoomConfig::Entry\""},{"location":"RoomConfig_Entry/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Entry/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Entry/#subtype","text":"","title":"Subtype"},{"location":"RoomConfig_Entry/#type","text":"","title":"Type"},{"location":"RoomConfig_Entry/#variant","text":"","title":"Variant"},{"location":"RoomConfig_Entry/#weight","text":"","title":"Weight"},{"location":"RoomConfig_Room/","text":"Class \"RoomConfig::Room\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Difficulty \u2693\ufe0e Difficulty Difficulty Doors \u2693\ufe0e IntList Doors Height \u2693\ufe0e int Height InitialWeight \u2693\ufe0e float InitialWeight Name \u2693\ufe0e str Name Shape \u2693\ufe0e RoomShape Shape SpawnCount \u2693\ufe0e int SpawnCount Spawns \u2693\ufe0e SpawnList Spawns StageID \u2693\ufe0e s32 StageID Subtype \u2693\ufe0e int Subtype Type \u2693\ufe0e RoomType Type Variant \u2693\ufe0e int Variant Weight \u2693\ufe0e float Weight Width \u2693\ufe0e int Width","title":"RoomConfig::Room"},{"location":"RoomConfig_Room/#class-roomconfigroom","text":"","title":"Class \"RoomConfig::Room\""},{"location":"RoomConfig_Room/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Room/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Room/#difficulty","text":"","title":"Difficulty"},{"location":"RoomConfig_Room/#doors","text":"","title":"Doors"},{"location":"RoomConfig_Room/#height","text":"","title":"Height"},{"location":"RoomConfig_Room/#initialweight","text":"","title":"InitialWeight"},{"location":"RoomConfig_Room/#name","text":"","title":"Name"},{"location":"RoomConfig_Room/#shape","text":"","title":"Shape"},{"location":"RoomConfig_Room/#spawncount","text":"","title":"SpawnCount"},{"location":"RoomConfig_Room/#spawns","text":"","title":"Spawns"},{"location":"RoomConfig_Room/#stageid","text":"","title":"StageID"},{"location":"RoomConfig_Room/#subtype","text":"","title":"Subtype"},{"location":"RoomConfig_Room/#type","text":"","title":"Type"},{"location":"RoomConfig_Room/#variant","text":"","title":"Variant"},{"location":"RoomConfig_Room/#weight","text":"","title":"Weight"},{"location":"RoomConfig_Room/#width","text":"","title":"Width"},{"location":"RoomConfig_Spawn/","text":"Class \"RoomConfig::Spawn\" \u2693\ufe0e Functions \u2693\ufe0e Entry () \u2693\ufe0e Entry PickEntry ( float r ) r is a value between 0 and 1 Variables \u2693\ufe0e EntryCount \u2693\ufe0e u8 EntryCount SumWeights \u2693\ufe0e float SumWeights X \u2693\ufe0e s16 X Y \u2693\ufe0e s16 Y","title":"RoomConfig::Spawn"},{"location":"RoomConfig_Spawn/#class-roomconfigspawn","text":"","title":"Class \"RoomConfig::Spawn\""},{"location":"RoomConfig_Spawn/#functions","text":"","title":"Functions"},{"location":"RoomConfig_Spawn/#entry","text":"","title":"Entry ()"},{"location":"RoomConfig_Spawn/#variables","text":"","title":"Variables"},{"location":"RoomConfig_Spawn/#entrycount","text":"","title":"EntryCount"},{"location":"RoomConfig_Spawn/#sumweights","text":"","title":"SumWeights"},{"location":"RoomConfig_Spawn/#x","text":"","title":"X"},{"location":"RoomConfig_Spawn/#y","text":"","title":"Y"},{"location":"RoomDescriptor/","text":"Class \"RoomDescriptor\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e AllowedDoors \u2693\ufe0e DoorSet AllowedDoors Contains just on load swapped data (in cases like minibosses, or other such events) AwardSeed \u2693\ufe0e int AwardSeed used to spawn clear awards (normal, miniboss, boss rooms) and initialize shop items (shop, devil rooms) ChallengeDone \u2693\ufe0e bool ChallengeDone Clear \u2693\ufe0e bool Clear ClearCount \u2693\ufe0e int ClearCount room is clear, don't spawn enemies when visiting bool Clear; Data \u2693\ufe0e RoomDescriptorData Data DecorationSeed \u2693\ufe0e int DecorationSeed bool AltBossMusic; used for cosmetic stuff like backdrops, room decorations, shopkeeper skins DeliriumDistance \u2693\ufe0e int DeliriumDistance Helper for The Void stage, holds the distance to the Delirium boss in room nr. DisplayFlags \u2693\ufe0e int DisplayFlags Indicates what is visible on the minimap. Display Flags (bitwise): `:::cpp 1 << -1 -- Invisible 1 << 0 -- Visible 1 << 1 -- Room Shadow 1 << 2 -- Show Icon` The flags are hard to interpret, but here are some examples: 000 = invisible, this is how most rooms start 101 = standard room visibility, this includes rooms that are adjacent and you haven't actively visited. This will usually show icons. 011 = secret room, locked rooms, sac rooms pre-entry* 111 = 011 rooms after entry, but also the rooms directly adjacent to them* (applied after entry) If you have spelunker's hat, bit 1 is completely unused. All special rooms will have the normal behavior of either 000 or 101. iirc this is unique to spelunker's hat, mapping items follow the normal rules. From this my best guess is that bits 1 and 2 are special rendering (display hehe) flags that may have more meaning down below. The important bit for using them is minding that they're used differently mostly for special rooms. As far as I've seen, 001 is completely unused. 010, 100, and 110 may be used for compass or blue map, I don't remember. I think they use 100 GridIndex \u2693\ufe0e int GridIndex index in the level grid (always top left) Notes This will always return the top left coordinate of the room on the levelgrid. Therefore, it will return an index not part of the actual room, when checking this value for J-shaped rooms. (See graphic below) HasWater \u2693\ufe0e bool HasWater ListIndex \u2693\ufe0e int ListIndex index in the room list NoReward \u2693\ufe0e bool NoReward OverrideData \u2693\ufe0e RoomDescriptorData OverrideData Tim's reminder to himself: The room variant is in Data. Because Room::Init uses a mix of datas, one from level layout and one from replacement data like minibosses, we need to hold the new room data somewhere. PitsCount \u2693\ufe0e int PitsCount PoopCount \u2693\ufe0e int PoopCount bool HasWater; PressurePlatesTriggered \u2693\ufe0e bool PressurePlatesTriggered SacrificeDone \u2693\ufe0e bool SacrificeDone SafeGridIndex \u2693\ufe0e int SafeGridIndex index in the level grid (not always top left, but is guaranteed to point to the room. this is important for LTL shapes!) Notes This will always return the top left coordinate of the room on the levelgrid, except for J-shaped rooms, where it returns the top right index. (see graphic below) ShopItemDiscountIdx \u2693\ufe0e int ShopItemDiscountIdx ShopItemIdx \u2693\ufe0e int ShopItemIdx SpawnSeed \u2693\ufe0e int SpawnSeed used to spawn entities at room load and initialize enemy drop seeds SurpriseMiniboss \u2693\ufe0e bool SurpriseMiniboss VisitedCount \u2693\ufe0e int VisitedCount how often the room has been visited","title":"RoomDescriptor"},{"location":"RoomDescriptor/#class-roomdescriptor","text":"","title":"Class \"RoomDescriptor\""},{"location":"RoomDescriptor/#functions","text":"","title":"Functions"},{"location":"RoomDescriptor/#variables","text":"","title":"Variables"},{"location":"RoomDescriptor/#alloweddoors","text":"","title":"AllowedDoors"},{"location":"RoomDescriptor/#awardseed","text":"","title":"AwardSeed"},{"location":"RoomDescriptor/#challengedone","text":"","title":"ChallengeDone"},{"location":"RoomDescriptor/#clear","text":"","title":"Clear"},{"location":"RoomDescriptor/#clearcount","text":"","title":"ClearCount"},{"location":"RoomDescriptor/#data","text":"","title":"Data"},{"location":"RoomDescriptor/#decorationseed","text":"","title":"DecorationSeed"},{"location":"RoomDescriptor/#deliriumdistance","text":"","title":"DeliriumDistance"},{"location":"RoomDescriptor/#displayflags","text":"","title":"DisplayFlags"},{"location":"RoomDescriptor/#gridindex","text":"","title":"GridIndex"},{"location":"RoomDescriptor/#haswater","text":"","title":"HasWater"},{"location":"RoomDescriptor/#listindex","text":"","title":"ListIndex"},{"location":"RoomDescriptor/#noreward","text":"","title":"NoReward"},{"location":"RoomDescriptor/#overridedata","text":"","title":"OverrideData"},{"location":"RoomDescriptor/#pitscount","text":"","title":"PitsCount"},{"location":"RoomDescriptor/#poopcount","text":"","title":"PoopCount"},{"location":"RoomDescriptor/#pressureplatestriggered","text":"","title":"PressurePlatesTriggered"},{"location":"RoomDescriptor/#sacrificedone","text":"","title":"SacrificeDone"},{"location":"RoomDescriptor/#safegridindex","text":"","title":"SafeGridIndex"},{"location":"RoomDescriptor/#shopitemdiscountidx","text":"","title":"ShopItemDiscountIdx"},{"location":"RoomDescriptor/#shopitemidx","text":"","title":"ShopItemIdx"},{"location":"RoomDescriptor/#spawnseed","text":"","title":"SpawnSeed"},{"location":"RoomDescriptor/#surpriseminiboss","text":"","title":"SurpriseMiniboss"},{"location":"RoomDescriptor/#visitedcount","text":"","title":"VisitedCount"},{"location":"RoomDescriptorData/","text":"Class \"RoomDescriptorData\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e StageID \u2693\ufe0e int StageID Spawns \u2693\ufe0e userdata Spawns Bugs Uses userdata, which is a datatype that cant be read/altered via LUA. Type \u2693\ufe0e int Type Difficulty \u2693\ufe0e int Difficulty Subtype \u2693\ufe0e int Subtype Variant \u2693\ufe0e int Variant Name \u2693\ufe0e str Name Shape \u2693\ufe0e RoomShape Shape SpawnCount \u2693\ufe0e int SpawnCount Height \u2693\ufe0e int Height InitialWeight \u2693\ufe0e int InitialWeight Doors \u2693\ufe0e int Doors Weight \u2693\ufe0e int Weight Width \u2693\ufe0e int Width","title":"RoomDescriptorData"},{"location":"RoomDescriptorData/#class-roomdescriptordata","text":"","title":"Class \"RoomDescriptorData\""},{"location":"RoomDescriptorData/#functions","text":"","title":"Functions"},{"location":"RoomDescriptorData/#variables","text":"","title":"Variables"},{"location":"RoomDescriptorData/#stageid","text":"","title":"StageID"},{"location":"RoomDescriptorData/#spawns","text":"","title":"Spawns"},{"location":"RoomDescriptorData/#type","text":"","title":"Type"},{"location":"RoomDescriptorData/#difficulty","text":"","title":"Difficulty"},{"location":"RoomDescriptorData/#subtype","text":"","title":"Subtype"},{"location":"RoomDescriptorData/#variant","text":"","title":"Variant"},{"location":"RoomDescriptorData/#name","text":"","title":"Name"},{"location":"RoomDescriptorData/#shape","text":"","title":"Shape"},{"location":"RoomDescriptorData/#spawncount","text":"","title":"SpawnCount"},{"location":"RoomDescriptorData/#height","text":"","title":"Height"},{"location":"RoomDescriptorData/#initialweight","text":"","title":"InitialWeight"},{"location":"RoomDescriptorData/#doors","text":"","title":"Doors"},{"location":"RoomDescriptorData/#weight","text":"","title":"Weight"},{"location":"RoomDescriptorData/#width","text":"","title":"Width"},{"location":"SFXManager/","text":"Class \"SFXManager\" \u2693\ufe0e Functions \u2693\ufe0e AdjustPitch () \u2693\ufe0e void AdjustPitch ( SoundEffect ID , float Pitch ) mostly useful for repeating sounds AdjustVolume () \u2693\ufe0e void AdjustVolume ( SoundEffect ID , float Volume ) mostly useful for repeating sounds GetAmbientSoundVolume () \u2693\ufe0e float GetAmbientSoundVolume ( SoundEffect ID ) IsPlaying () \u2693\ufe0e bool IsPlaying ( SoundEffect ID ) Play () \u2693\ufe0e void Play ( SoundEffect ID , float Volume , int FrameDelay , bool Loop , float Pitch ) Preload () \u2693\ufe0e void Preload ( SoundEffect ID ) SetAmbientSound () \u2693\ufe0e void SetAmbientSound ( SoundEffect ID , float Volume , float Pitch ) Stop () \u2693\ufe0e void Stop ( SoundEffect ID ) StopLoopingSounds () \u2693\ufe0e void StopLoopingSounds ()","title":"SFXManager"},{"location":"SFXManager/#class-sfxmanager","text":"","title":"Class \"SFXManager\""},{"location":"SFXManager/#functions","text":"","title":"Functions"},{"location":"SFXManager/#adjustpitch","text":"","title":"AdjustPitch ()"},{"location":"SFXManager/#adjustvolume","text":"","title":"AdjustVolume ()"},{"location":"SFXManager/#getambientsoundvolume","text":"","title":"GetAmbientSoundVolume ()"},{"location":"SFXManager/#isplaying","text":"","title":"IsPlaying ()"},{"location":"SFXManager/#play","text":"","title":"Play ()"},{"location":"SFXManager/#preload","text":"","title":"Preload ()"},{"location":"SFXManager/#setambientsound","text":"","title":"SetAmbientSound ()"},{"location":"SFXManager/#stop","text":"","title":"Stop ()"},{"location":"SFXManager/#stoploopingsounds","text":"","title":"StopLoopingSounds ()"},{"location":"Seeds/","text":"Class \"Seeds\" \u2693\ufe0e Functions \u2693\ufe0e AddSeedEffect () \u2693\ufe0e void AddSeedEffect ( SeedEffect Value ) CanAddSeedEffect () \u2693\ufe0e bool CanAddSeedEffect ( SeedEffect Value ) ClearSeedEffects () \u2693\ufe0e void ClearSeedEffects () ClearStartSeed () \u2693\ufe0e void ClearStartSeed () CountSeedEffects () \u2693\ufe0e int CountSeedEffects () CountUnlockedSeedEffects () \u2693\ufe0e static int CountUnlockedSeedEffects () ForgetStageSeed () \u2693\ufe0e void ForgetStageSeed ( LevelStage Stage ) GetNextSeed () \u2693\ufe0e int GetNextSeed () GetPlayerInitSeed () \u2693\ufe0e int GetPlayerInitSeed () GetSeedEffect () \u2693\ufe0e static SeedEffect GetSeedEffect ( str str ) GetStageSeed () \u2693\ufe0e int GetStageSeed ( LevelStage Stage ) GetStartSeed () \u2693\ufe0e int GetStartSeed () GetStartSeedString () \u2693\ufe0e str GetStartSeedString () HasSeedEffect () \u2693\ufe0e bool HasSeedEffect ( SeedEffect Value ) () () \u2693\ufe0e static InitSeedInfo () IsCustomRun () \u2693\ufe0e bool IsCustomRun () Returns true if the player is in a challenge run or a seeded run. IsInitialized () \u2693\ufe0e bool IsInitialized () IsSeedComboBanned () \u2693\ufe0e bool IsSeedComboBanned ( SeedEffect Seed1 , SeedEffect Seed2 ) IsSpecialSeed () \u2693\ufe0e static bool IsSpecialSeed ( str str ) IsStringValidSeed () \u2693\ufe0e static bool IsStringValidSeed ( str str ) RemoveBlockingSeedEffects () \u2693\ufe0e void RemoveBlockingSeedEffects ( SeedEffect Value ) Removes seeds that are banned in conjunction with the given seed. RemoveSeedEffect () \u2693\ufe0e void RemoveSeedEffect ( SeedEffect Value ) Reset () \u2693\ufe0e void Reset () Removes all seed effects, only goes into effect when the run is restarted Restart () \u2693\ufe0e void Restart ( Challenge CurrentChallenge ) Re-selects a random start seed but only if the start seed was not custom. Seed2String () \u2693\ufe0e static str Seed2String ( int seed ) SetStartSeed () \u2693\ufe0e void SetStartSeed ( str StartSeed ) Empty string means we will pick a new random seed. String2Seed () \u2693\ufe0e static int String2Seed ( str str ) void RestoreGameState(const GameState& State); void SaveGameState(GameState& State);","title":"Seeds"},{"location":"Seeds/#class-seeds","text":"","title":"Class \"Seeds\""},{"location":"Seeds/#functions","text":"","title":"Functions"},{"location":"Seeds/#addseedeffect","text":"","title":"AddSeedEffect ()"},{"location":"Seeds/#canaddseedeffect","text":"","title":"CanAddSeedEffect ()"},{"location":"Seeds/#clearseedeffects","text":"","title":"ClearSeedEffects ()"},{"location":"Seeds/#clearstartseed","text":"","title":"ClearStartSeed ()"},{"location":"Seeds/#countseedeffects","text":"","title":"CountSeedEffects ()"},{"location":"Seeds/#countunlockedseedeffects","text":"","title":"CountUnlockedSeedEffects ()"},{"location":"Seeds/#forgetstageseed","text":"","title":"ForgetStageSeed ()"},{"location":"Seeds/#getnextseed","text":"","title":"GetNextSeed ()"},{"location":"Seeds/#getplayerinitseed","text":"","title":"GetPlayerInitSeed ()"},{"location":"Seeds/#getseedeffect","text":"","title":"GetSeedEffect ()"},{"location":"Seeds/#getstageseed","text":"","title":"GetStageSeed ()"},{"location":"Seeds/#getstartseed","text":"","title":"GetStartSeed ()"},{"location":"Seeds/#getstartseedstring","text":"","title":"GetStartSeedString ()"},{"location":"Seeds/#hasseedeffect","text":"","title":"HasSeedEffect ()"},{"location":"Seeds/#_1","text":"","title":"() ()"},{"location":"Seeds/#iscustomrun","text":"","title":"IsCustomRun ()"},{"location":"Seeds/#isinitialized","text":"","title":"IsInitialized ()"},{"location":"Seeds/#isseedcombobanned","text":"","title":"IsSeedComboBanned ()"},{"location":"Seeds/#isspecialseed","text":"","title":"IsSpecialSeed ()"},{"location":"Seeds/#isstringvalidseed","text":"","title":"IsStringValidSeed ()"},{"location":"Seeds/#removeblockingseedeffects","text":"","title":"RemoveBlockingSeedEffects ()"},{"location":"Seeds/#removeseedeffect","text":"","title":"RemoveSeedEffect ()"},{"location":"Seeds/#reset","text":"","title":"Reset ()"},{"location":"Seeds/#restart","text":"","title":"Restart ()"},{"location":"Seeds/#seed2string","text":"","title":"Seed2String ()"},{"location":"Seeds/#setstartseed","text":"","title":"SetStartSeed ()"},{"location":"Seeds/#string2seed","text":"","title":"String2Seed ()"},{"location":"ShockwaveParams/","text":"Class \"ShockwaveParams\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Age \u2693\ufe0e int Age LifeSpan \u2693\ufe0e int LifeSpan Position \u2693\ufe0e Vector Position Strength \u2693\ufe0e float Strength Time \u2693\ufe0e float Time TimeDT \u2693\ufe0e float TimeDT","title":"ShockwaveParams"},{"location":"ShockwaveParams/#class-shockwaveparams","text":"","title":"Class \"ShockwaveParams\""},{"location":"ShockwaveParams/#functions","text":"","title":"Functions"},{"location":"ShockwaveParams/#variables","text":"","title":"Variables"},{"location":"ShockwaveParams/#age","text":"","title":"Age"},{"location":"ShockwaveParams/#lifespan","text":"","title":"LifeSpan"},{"location":"ShockwaveParams/#position","text":"","title":"Position"},{"location":"ShockwaveParams/#strength","text":"","title":"Strength"},{"location":"ShockwaveParams/#time","text":"","title":"Time"},{"location":"ShockwaveParams/#timedt","text":"","title":"TimeDT"},{"location":"Sprite/","text":"Class \"Sprite\" \u2693\ufe0e Functions \u2693\ufe0e Sprite () \u2693\ufe0e void Sprite ( void ) str () \u2693\ufe0e str GetDefaultAnimation () str () \u2693\ufe0e str GetDefaultAnimationName () GetFilename () \u2693\ufe0e str GetFilename () GetFrame () \u2693\ufe0e int GetFrame () GetLayerCount () \u2693\ufe0e int GetLayerCount () GetOverlayFrame () \u2693\ufe0e int GetOverlayFrame () GetTexel () \u2693\ufe0e Color GetTexel ( Vector SamplePos , Vector RenderPos , float AlphaThreshold ) IsEventTriggered () \u2693\ufe0e bool IsEventTriggered ( str EventName ) IsFinished () \u2693\ufe0e bool IsFinished ( str AnimationName ) IsLoaded () \u2693\ufe0e bool IsLoaded () IsOverlayFinished () \u2693\ufe0e bool IsOverlayFinished ( str AnimationName ) IsOverlayPlaying () \u2693\ufe0e bool IsOverlayPlaying ( str AnimationName ) IsPlaying () \u2693\ufe0e bool IsPlaying ( str AnimationName ) Load () \u2693\ufe0e void Load ( str Filename , bool LoadGraphics ) LoadGraphics () \u2693\ufe0e void LoadGraphics () Play () \u2693\ufe0e void Play ( str AnimationName , bool Force ) PlayOverlay () \u2693\ufe0e void PlayOverlay ( str AnimationName , bool Force ) PlayRandom () \u2693\ufe0e void PlayRandom ( int Seed ) Reload () \u2693\ufe0e void Reload () RemoveOverlay () \u2693\ufe0e void RemoveOverlay () Render () \u2693\ufe0e void Render ( Vector Pos , Vector TopLeftClamp , Vector BottomRightClamp ) RenderLayer () \u2693\ufe0e void RenderLayer ( int LayerId , Vector Pos ) ReplaceSpritesheet () \u2693\ufe0e void ReplaceSpritesheet ( int LayerId , str PngFilename ) Reset () \u2693\ufe0e void Reset () SetAnimation () \u2693\ufe0e bool SetAnimation ( str AnimationName ) SetFrame () \u2693\ufe0e void SetFrame ( str AnimationName , int FrameNum ) SetLastFrame () \u2693\ufe0e void SetLastFrame () SetLayerFrame () \u2693\ufe0e void SetLayerFrame ( int LayerId , int FrameNum ) SetOverlayAnimation () \u2693\ufe0e bool SetOverlayAnimation ( str AnimationName ) SetOverlayFrame () \u2693\ufe0e void SetOverlayFrame ( str AnimationName , int FrameNum ) SetOverlayRenderPriority () \u2693\ufe0e void SetOverlayRenderPriority ( bool RenderFirst ) Stop () \u2693\ufe0e void Stop () Update () \u2693\ufe0e void Update () WasEventTriggered () \u2693\ufe0e bool WasEventTriggered ( str EventName ) Variables \u2693\ufe0e FlipX \u2693\ufe0e bool FlipX FlipY \u2693\ufe0e bool FlipY Color \u2693\ufe0e Color Color Vector \u2693\ufe0e Vector Offset PlaybackSpeed \u2693\ufe0e float PlaybackSpeed Rotation \u2693\ufe0e float Rotation Vector \u2693\ufe0e Vector Scale","title":"Sprite"},{"location":"Sprite/#class-sprite","text":"","title":"Class \"Sprite\""},{"location":"Sprite/#functions","text":"","title":"Functions"},{"location":"Sprite/#sprite","text":"","title":"Sprite ()"},{"location":"Sprite/#str","text":"","title":"str ()"},{"location":"Sprite/#str_1","text":"","title":"str ()"},{"location":"Sprite/#getfilename","text":"","title":"GetFilename ()"},{"location":"Sprite/#getframe","text":"","title":"GetFrame ()"},{"location":"Sprite/#getlayercount","text":"","title":"GetLayerCount ()"},{"location":"Sprite/#getoverlayframe","text":"","title":"GetOverlayFrame ()"},{"location":"Sprite/#gettexel","text":"","title":"GetTexel ()"},{"location":"Sprite/#iseventtriggered","text":"","title":"IsEventTriggered ()"},{"location":"Sprite/#isfinished","text":"","title":"IsFinished ()"},{"location":"Sprite/#isloaded","text":"","title":"IsLoaded ()"},{"location":"Sprite/#isoverlayfinished","text":"","title":"IsOverlayFinished ()"},{"location":"Sprite/#isoverlayplaying","text":"","title":"IsOverlayPlaying ()"},{"location":"Sprite/#isplaying","text":"","title":"IsPlaying ()"},{"location":"Sprite/#load","text":"","title":"Load ()"},{"location":"Sprite/#loadgraphics","text":"","title":"LoadGraphics ()"},{"location":"Sprite/#play","text":"","title":"Play ()"},{"location":"Sprite/#playoverlay","text":"","title":"PlayOverlay ()"},{"location":"Sprite/#playrandom","text":"","title":"PlayRandom ()"},{"location":"Sprite/#reload","text":"","title":"Reload ()"},{"location":"Sprite/#removeoverlay","text":"","title":"RemoveOverlay ()"},{"location":"Sprite/#render","text":"","title":"Render ()"},{"location":"Sprite/#renderlayer","text":"","title":"RenderLayer ()"},{"location":"Sprite/#replacespritesheet","text":"","title":"ReplaceSpritesheet ()"},{"location":"Sprite/#reset","text":"","title":"Reset ()"},{"location":"Sprite/#setanimation","text":"","title":"SetAnimation ()"},{"location":"Sprite/#setframe","text":"","title":"SetFrame ()"},{"location":"Sprite/#setlastframe","text":"","title":"SetLastFrame ()"},{"location":"Sprite/#setlayerframe","text":"","title":"SetLayerFrame ()"},{"location":"Sprite/#setoverlayanimation","text":"","title":"SetOverlayAnimation ()"},{"location":"Sprite/#setoverlayframe","text":"","title":"SetOverlayFrame ()"},{"location":"Sprite/#setoverlayrenderpriority","text":"","title":"SetOverlayRenderPriority ()"},{"location":"Sprite/#stop","text":"","title":"Stop ()"},{"location":"Sprite/#update","text":"","title":"Update ()"},{"location":"Sprite/#waseventtriggered","text":"","title":"WasEventTriggered ()"},{"location":"Sprite/#variables","text":"","title":"Variables"},{"location":"Sprite/#flipx","text":"","title":"FlipX"},{"location":"Sprite/#flipy","text":"","title":"FlipY"},{"location":"Sprite/#color","text":"","title":"Color"},{"location":"Sprite/#vector","text":"","title":"Vector"},{"location":"Sprite/#playbackspeed","text":"","title":"PlaybackSpeed"},{"location":"Sprite/#rotation","text":"","title":"Rotation"},{"location":"Sprite/#vector_1","text":"","title":"Vector"},{"location":"TearParams/","text":"Class \"TearParams\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e BombVariant \u2693\ufe0e int BombVariant TearColor \u2693\ufe0e Color TearColor TearDamage \u2693\ufe0e float TearDamage TearFlags \u2693\ufe0e int TearFlags TearHeight \u2693\ufe0e float TearHeight TearScale \u2693\ufe0e float TearScale TearVariant \u2693\ufe0e int TearVariant","title":"TearParams"},{"location":"TearParams/#class-tearparams","text":"","title":"Class \"TearParams\""},{"location":"TearParams/#functions","text":"","title":"Functions"},{"location":"TearParams/#variables","text":"","title":"Variables"},{"location":"TearParams/#bombvariant","text":"","title":"BombVariant"},{"location":"TearParams/#tearcolor","text":"","title":"TearColor"},{"location":"TearParams/#teardamage","text":"","title":"TearDamage"},{"location":"TearParams/#tearflags","text":"","title":"TearFlags"},{"location":"TearParams/#tearheight","text":"","title":"TearHeight"},{"location":"TearParams/#tearscale","text":"","title":"TearScale"},{"location":"TearParams/#tearvariant","text":"","title":"TearVariant"},{"location":"TemporaryEffect/","text":"Class \"TemporaryEffect\" \u2693\ufe0e Functions \u2693\ufe0e Variables \u2693\ufe0e Cooldown \u2693\ufe0e int Cooldown Count \u2693\ufe0e int Count Item \u2693\ufe0e Config :: Item Item","title":"TemporaryEffect"},{"location":"TemporaryEffect/#class-temporaryeffect","text":"","title":"Class \"TemporaryEffect\""},{"location":"TemporaryEffect/#functions","text":"","title":"Functions"},{"location":"TemporaryEffect/#variables","text":"","title":"Variables"},{"location":"TemporaryEffect/#cooldown","text":"","title":"Cooldown"},{"location":"TemporaryEffect/#count","text":"","title":"Count"},{"location":"TemporaryEffect/#item","text":"","title":"Item"},{"location":"TemporaryEffects/","text":"Class \"TemporaryEffects\" \u2693\ufe0e Functions \u2693\ufe0e AddCollectibleEffect () \u2693\ufe0e void AddCollectibleEffect ( CollectibleType CollectibleType , bool AddCostume ) AddNullEffect () \u2693\ufe0e void AddNullEffect ( Config :: NullItemID NullId , bool AddCostume ) AddTrinketEffect () \u2693\ufe0e void AddTrinketEffect ( TrinketType TrinketType , bool AddCostume ) ClearEffects () \u2693\ufe0e void ClearEffects () TemporaryEffect () \u2693\ufe0e TemporaryEffect GetCollectibleEffect ( CollectibleType CollectibleType ) GetCollectibleEffectNum () \u2693\ufe0e int GetCollectibleEffectNum ( CollectibleType CollectibleType ) EffectList () \u2693\ufe0e EffectList GetEffectsList () TemporaryEffect () \u2693\ufe0e TemporaryEffect GetNullEffect ( Config :: NullItemID NullId ) GetNullEffectNum () \u2693\ufe0e int GetNullEffectNum ( Config :: NullItemID NullId ) TemporaryEffect () \u2693\ufe0e TemporaryEffect GetTrinketEffect ( TrinketType TrinketType ) GetTrinketEffectNum () \u2693\ufe0e int GetTrinketEffectNum ( TrinketType TrinketType ) HasCollectibleEffect () \u2693\ufe0e bool HasCollectibleEffect ( CollectibleType CollectibleType ) HasNullEffect () \u2693\ufe0e bool HasNullEffect ( Config :: NullItemID NullId ) HasTrinketEffect () \u2693\ufe0e bool HasTrinketEffect ( TrinketType TrinketType ) RemoveCollectibleEffect () \u2693\ufe0e void RemoveCollectibleEffect ( CollectibleType CollectibleType ) RemoveNullEffect () \u2693\ufe0e void RemoveNullEffect ( Config :: NullItemID NullId ) RemoveTrinketEffect () \u2693\ufe0e void RemoveTrinketEffect ( TrinketType TrinketType )","title":"TemporaryEffects"},{"location":"TemporaryEffects/#class-temporaryeffects","text":"","title":"Class \"TemporaryEffects\""},{"location":"TemporaryEffects/#functions","text":"","title":"Functions"},{"location":"TemporaryEffects/#addcollectibleeffect","text":"","title":"AddCollectibleEffect ()"},{"location":"TemporaryEffects/#addnulleffect","text":"","title":"AddNullEffect ()"},{"location":"TemporaryEffects/#addtrinketeffect","text":"","title":"AddTrinketEffect ()"},{"location":"TemporaryEffects/#cleareffects","text":"","title":"ClearEffects ()"},{"location":"TemporaryEffects/#temporaryeffect","text":"","title":"TemporaryEffect ()"},{"location":"TemporaryEffects/#getcollectibleeffectnum","text":"","title":"GetCollectibleEffectNum ()"},{"location":"TemporaryEffects/#effectlist","text":"","title":"EffectList ()"},{"location":"TemporaryEffects/#temporaryeffect_1","text":"","title":"TemporaryEffect ()"},{"location":"TemporaryEffects/#getnulleffectnum","text":"","title":"GetNullEffectNum ()"},{"location":"TemporaryEffects/#temporaryeffect_2","text":"","title":"TemporaryEffect ()"},{"location":"TemporaryEffects/#gettrinketeffectnum","text":"","title":"GetTrinketEffectNum ()"},{"location":"TemporaryEffects/#hascollectibleeffect","text":"","title":"HasCollectibleEffect ()"},{"location":"TemporaryEffects/#hasnulleffect","text":"","title":"HasNullEffect ()"},{"location":"TemporaryEffects/#hastrinketeffect","text":"","title":"HasTrinketEffect ()"},{"location":"TemporaryEffects/#removecollectibleeffect","text":"","title":"RemoveCollectibleEffect ()"},{"location":"TemporaryEffects/#removenulleffect","text":"","title":"RemoveNullEffect ()"},{"location":"TemporaryEffects/#removetrinketeffect","text":"","title":"RemoveTrinketEffect ()"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/","text":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Tutorial - Adding Costumes to items without LUA"},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/#class-tutorialaddingcostumestoitemswithoutlua","text":"","title":"Class \"[Tutorial]AddingCostumestoitemswithoutLUA\""},{"location":"Tutorial-AddingCostumestoitemswithoutLUA/#functions","text":"","title":"Functions"},{"location":"Tutorial-Rendertext/","text":"Class \"[Tutorial]Rendertext\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Tutorial - Render text"},{"location":"Tutorial-Rendertext/#class-tutorialrendertext","text":"","title":"Class \"[Tutorial]Rendertext\""},{"location":"Tutorial-Rendertext/#functions","text":"","title":"Functions"},{"location":"UsingZeroBraneStudiotodebugyourscripts/","text":"Class \"UsingZeroBraneStudiotodebugyourscripts\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Using ZeroBrane Studio to debug your scripts"},{"location":"UsingZeroBraneStudiotodebugyourscripts/#class-usingzerobranestudiotodebugyourscripts","text":"","title":"Class \"UsingZeroBraneStudiotodebugyourscripts\""},{"location":"UsingZeroBraneStudiotodebugyourscripts/#functions","text":"","title":"Functions"},{"location":"Usingadditional.luaFiles/","text":"Class \"Usingadditional.luaFiles\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Using additional .lua Files"},{"location":"Usingadditional.luaFiles/#class-usingadditionalluafiles","text":"","title":"Class \"Usingadditional.luaFiles\""},{"location":"Usingadditional.luaFiles/#functions","text":"","title":"Functions"},{"location":"Vector/","text":"Class \"Vector\" \u2693\ufe0e Functions \u2693\ufe0e Vector () \u2693\ufe0e void Vector ( float , float ) __add () \u2693\ufe0e Vector __add ( Vector Right ) Addition operators __div () \u2693\ufe0e Vector __div ( float Modifier ) Division operators __mul () \u2693\ufe0e Vector __mul ( float Modifier ) Multiplication operators __sub () \u2693\ufe0e Vector __sub ( Vector Right ) Subtraction operators __unm () \u2693\ufe0e Vector __unm ( Vector Right ) Subtraction operators Clamp () \u2693\ufe0e void Clamp ( float MinX , float MinY , float MaxX , float MaxY ) Clamps the vector based on left, top, right, bottom boundings. Doesn't keep direction Clamped () \u2693\ufe0e Vector Clamped ( float MinX , float MinY , float MaxX , float MaxY ) Returns a clamped version of the vector. Cross () \u2693\ufe0e float Cross ( Vector second ) Cross product this is the 2x2 matrix determinant or the resulting z value for their 3D versions with z=0 Distance () \u2693\ufe0e float Distance ( Vector first , Vector second ) Returns distance between two vectors Example Code 1 local sqtDist = Vector ( 2 , 0 ) : Distance ( Vector ( 4 , 0 ))) -- sqtDist = 2 DistanceSquared () \u2693\ufe0e float DistanceSquared ( Vector first , Vector second ) Returns squared distance between two vectors Example Code 1 local sqtDist = Vector ( 2 , 0 ) : DistanceSquared ( Vector ( 4 , 0 ))) -- sqtDist = 4 Dot () \u2693\ufe0e float Dot ( Vector second ) Dot product FromAngle () \u2693\ufe0e static Vector FromAngle ( float AngleDegrees ) Build a Vector from an angle, returns a normalized vector. Angle 0 will result in (1, 0). Angle 90 will result in (0, 1). Example Code This code returns a vector that has a 45 degree angle 1 local vec = Vector . GetAngleDegrees ( 45 )) -- vec is now Vector ( 0.70711 , 0.70711 ) GetAngleDegrees () \u2693\ufe0e float GetAngleDegrees () Returns the angle the vector is facing. The vector (1, 0) will be at 0 degrees. The vector (0, 1) will be at 90 degrees. Example Code This code returns the angle between two positions. 1 2 3 4 local v1 = Vector ( 1 , 0 ) -- has angle 0.0 local v2 = Vector ( 0 , 1 ) -- has angle 90.0 local v3 = v2 - v1 -- subtraction of 2 points is a vector connecting the two points print ( v3 : GetAngleDegrees ()) -- prints 45.0 Length () \u2693\ufe0e float Length () Returns the length of the vector LengthSquared () \u2693\ufe0e float LengthSquared () Returns the length squared of the vector Lerp () \u2693\ufe0e Vector Lerp ( Vector first , Vector second , float t ) Linear interpolation between two vectors. For t = 0 it returns the first Vector, for t = 1 it returns the second. This function does the same as Lerp, but will not alter the input vectors. `:::cpp function Lerp(vec1, vec2, percent) return vec1 * (1 - percent) + vec2 * percent end ` Example Code This code will make v1 the vector 50% in between v1 and v2 1 2 3 local v1 = Vector ( 0 , 0 ) local v2 = Vector ( 1 , 1 ) v1 : Lerp ( v2 , 0.5 ) -- v1 equals Vector ( 0.5 , 0.5 ) now Normalize () \u2693\ufe0e void Normalize () Normalizes this vector Normalized () \u2693\ufe0e Vector Normalized () Returns a normalized version of this vector Resize () \u2693\ufe0e void Resize ( float NewLength ) Resizes the vector length. Resized () \u2693\ufe0e Vector Resized ( float NewLength ) Returns a resized version of the vector. Rotated () \u2693\ufe0e Vector Rotated ( float AngleDegrees ) Returns a rotated version of the vector by AngleDegrees Variables \u2693\ufe0e X \u2693\ufe0e float X Components of vector. Y \u2693\ufe0e float Y","title":"Vector"},{"location":"Vector/#class-vector","text":"","title":"Class \"Vector\""},{"location":"Vector/#functions","text":"","title":"Functions"},{"location":"Vector/#vector","text":"","title":"Vector ()"},{"location":"Vector/#__add","text":"","title":"__add ()"},{"location":"Vector/#__div","text":"","title":"__div ()"},{"location":"Vector/#__mul","text":"","title":"__mul ()"},{"location":"Vector/#__sub","text":"","title":"__sub ()"},{"location":"Vector/#__unm","text":"","title":"__unm ()"},{"location":"Vector/#clamp","text":"","title":"Clamp ()"},{"location":"Vector/#clamped","text":"","title":"Clamped ()"},{"location":"Vector/#cross","text":"","title":"Cross ()"},{"location":"Vector/#distance","text":"","title":"Distance ()"},{"location":"Vector/#distancesquared","text":"","title":"DistanceSquared ()"},{"location":"Vector/#dot","text":"","title":"Dot ()"},{"location":"Vector/#fromangle","text":"","title":"FromAngle ()"},{"location":"Vector/#getangledegrees","text":"","title":"GetAngleDegrees ()"},{"location":"Vector/#length","text":"","title":"Length ()"},{"location":"Vector/#lengthsquared","text":"","title":"LengthSquared ()"},{"location":"Vector/#lerp","text":"","title":"Lerp ()"},{"location":"Vector/#normalize","text":"","title":"Normalize ()"},{"location":"Vector/#normalized","text":"","title":"Normalized ()"},{"location":"Vector/#resize","text":"","title":"Resize ()"},{"location":"Vector/#resized","text":"","title":"Resized ()"},{"location":"Vector/#rotated","text":"","title":"Rotated ()"},{"location":"Vector/#variables","text":"","title":"Variables"},{"location":"Vector/#x","text":"","title":"X"},{"location":"Vector/#y","text":"","title":"Y"},{"location":"Writingscreenshaders/","text":"Class \"Writingscreenshaders\" \u2693\ufe0e Functions \u2693\ufe0e","title":"Writing screen shaders"},{"location":"Writingscreenshaders/#class-writingscreenshaders","text":"","title":"Class \"Writingscreenshaders\""},{"location":"Writingscreenshaders/#functions","text":"","title":"Functions"},{"location":"XMLFiledocumentation/","text":"Class \"XMLFiledocumentation\" \u2693\ufe0e Functions \u2693\ufe0e","title":"XML File documentation"},{"location":"XMLFiledocumentation/#class-xmlfiledocumentation","text":"","title":"Class \"XMLFiledocumentation\""},{"location":"XMLFiledocumentation/#functions","text":"","title":"Functions"}]}